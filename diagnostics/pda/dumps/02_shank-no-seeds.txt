ELF Header
  Magic   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class                             ELF64
  Data                              2's complement, little endian
  Version                           1 (current)
  OS/ABI                            UNIX - System V
  ABI Version                       0
  Type                              DYN (Shared object file)
  Machine                           EM_BPF
  Version                           0x1
  Entry point address               0x19E8
  Start of program headers          64 (bytes into file)
  Start of section headers          149744 (bytes into file)
  Flags                             0x0
  Size of this header               64 (bytes)
  Size of program headers           56 (bytes)
  Number of program headers         4
  Size of section headers           64 (bytes)
  Number of section headers         12
  Section header string table index 10
There are 12 section headers, starting at offset 0x248f0

Section Headers
  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        0000000000000120 000120 012448 00  AX  0   0  8
  [ 2] .rodata           PROGBITS        0000000000012568 012568 001487 00  AM  0   0  8
  [ 3] .data.rel.ro      PROGBITS        00000000000139f0 0139f0 0006e8 00  WA  0   0  8
  [ 4] .dynamic          DYNAMIC         00000000000140d8 0140d8 0000b0 10  WA  6   0  8
  [ 5] .dynsym           DYNSYM          0000000000014188 014188 000108 18   A  6   1  8
  [ 6] .dynstr           STRTAB          0000000000014290 014290 000094 00   A  0   0  1
  [ 7] .rel.dyn          REL             0000000000014328 014328 001ca0 10   A  5   0  8
  [ 8] .comment          PROGBITS        0000000000000000 015fc8 00006e 01  MS  0   0  1
  [ 9] .symtab           SYMTAB          0000000000000000 016038 007c50 18     11 1316  8
  [10] .shstrtab         STRTAB          0000000000000000 01dc88 000061 00      0   0  1
  [11] .strtab           STRTAB          0000000000000000 01dce9 006c06 00      0   0  1
Key to Flags
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  R (retain), p (processor specific)

Elf file type is DYN (Shared object file)
Entry point 0x19e8
There are 4 program headers, starting at offset 64

Program Headers
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  LOAD           0x000120 0x0000000000000120 0x0000000000000120 0x012448 0x012448 R E 0x1000
  LOAD           0x012568 0x0000000000012568 0x0000000000012568 0x001b70 0x001b70 RW  0x1000
  LOAD           0x014188 0x0000000000014188 0x0000000000014188 0x001e40 0x001e40 R   0x1000
  DYNAMIC        0x0140d8 0x00000000000140d8 0x00000000000140d8 0x0000b0 0x0000b0 RW  0x8

 Section to Segment mapping
  Segment Sections...
   00     .text
   01     .rodata .data.rel.ro
   02     .dynsym .dynstr .rel.dyn
   03     .dynamic
   None   .comment .symtab .shstrtab .strtab
Dynamic section at offset 0x140d8 contains 11 entries
  Tag                Type       Name/Value
  0x000000000000001e (FLAGS)    TEXTREL
  0x0000000000000011 (REL)      0x14328
  0x0000000000000012 (RELSZ)    7328 (bytes)
  0x0000000000000013 (RELENT)   16 (bytes)
  0x000000006ffffffa (RELCOUNT) 355
  0x0000000000000006 (SYMTAB)   0x14188
  0x000000000000000b (SYMENT)   24 (bytes)
  0x0000000000000005 (STRTAB)   0x14290
  0x000000000000000a (STRSZ)    148 (bytes)
  0x0000000000000016 (TEXTREL)  0x0
  0x0000000000000000 (NULL)     0x0

Relocation section '.rel.dyn' at offset 0x14328 contains 458 entries
    Offset             Info             Type               Symbol's Value  Symbol's Name
0000000000000930  0000000000000008 R_BPF_64_RELATIVE
0000000000000960  0000000000000008 R_BPF_64_RELATIVE
0000000000000988  0000000000000008 R_BPF_64_RELATIVE
00000000000009b0  0000000000000008 R_BPF_64_RELATIVE
0000000000000ae8  0000000000000008 R_BPF_64_RELATIVE
0000000000000b00  0000000000000008 R_BPF_64_RELATIVE
0000000000000c58  0000000000000008 R_BPF_64_RELATIVE
0000000000000cf8  0000000000000008 R_BPF_64_RELATIVE
0000000000000e38  0000000000000008 R_BPF_64_RELATIVE
0000000000000e50  0000000000000008 R_BPF_64_RELATIVE
0000000000000fa8  0000000000000008 R_BPF_64_RELATIVE
0000000000001068  0000000000000008 R_BPF_64_RELATIVE
0000000000001208  0000000000000008 R_BPF_64_RELATIVE
0000000000001228  0000000000000008 R_BPF_64_RELATIVE
00000000000014e0  0000000000000008 R_BPF_64_RELATIVE
0000000000001500  0000000000000008 R_BPF_64_RELATIVE
0000000000001848  0000000000000008 R_BPF_64_RELATIVE
0000000000001bd8  0000000000000008 R_BPF_64_RELATIVE
0000000000001c80  0000000000000008 R_BPF_64_RELATIVE
0000000000001cd0  0000000000000008 R_BPF_64_RELATIVE
0000000000001da8  0000000000000008 R_BPF_64_RELATIVE
0000000000001dc0  0000000000000008 R_BPF_64_RELATIVE
0000000000002178  0000000000000008 R_BPF_64_RELATIVE
00000000000021a8  0000000000000008 R_BPF_64_RELATIVE
00000000000021d8  0000000000000008 R_BPF_64_RELATIVE
0000000000002208  0000000000000008 R_BPF_64_RELATIVE
0000000000002238  0000000000000008 R_BPF_64_RELATIVE
0000000000002268  0000000000000008 R_BPF_64_RELATIVE
00000000000022d0  0000000000000008 R_BPF_64_RELATIVE
00000000000022e8  0000000000000008 R_BPF_64_RELATIVE
00000000000024e8  0000000000000008 R_BPF_64_RELATIVE
0000000000002500  0000000000000008 R_BPF_64_RELATIVE
0000000000002688  0000000000000008 R_BPF_64_RELATIVE
0000000000002870  0000000000000008 R_BPF_64_RELATIVE
00000000000028c0  0000000000000008 R_BPF_64_RELATIVE
00000000000028d8  0000000000000008 R_BPF_64_RELATIVE
00000000000028e8  0000000000000008 R_BPF_64_RELATIVE
0000000000002908  0000000000000008 R_BPF_64_RELATIVE
0000000000002928  0000000000000008 R_BPF_64_RELATIVE
0000000000002948  0000000000000008 R_BPF_64_RELATIVE
0000000000002968  0000000000000008 R_BPF_64_RELATIVE
0000000000002988  0000000000000008 R_BPF_64_RELATIVE
00000000000029a8  0000000000000008 R_BPF_64_RELATIVE
00000000000029c8  0000000000000008 R_BPF_64_RELATIVE
00000000000029e8  0000000000000008 R_BPF_64_RELATIVE
0000000000002a08  0000000000000008 R_BPF_64_RELATIVE
0000000000002a28  0000000000000008 R_BPF_64_RELATIVE
0000000000002a48  0000000000000008 R_BPF_64_RELATIVE
0000000000002a68  0000000000000008 R_BPF_64_RELATIVE
0000000000002ec0  0000000000000008 R_BPF_64_RELATIVE
0000000000002ed8  0000000000000008 R_BPF_64_RELATIVE
0000000000003098  0000000000000008 R_BPF_64_RELATIVE
00000000000031a8  0000000000000008 R_BPF_64_RELATIVE
0000000000003938  0000000000000008 R_BPF_64_RELATIVE
0000000000003a40  0000000000000008 R_BPF_64_RELATIVE
0000000000003a58  0000000000000008 R_BPF_64_RELATIVE
0000000000004088  0000000000000008 R_BPF_64_RELATIVE
0000000000004100  0000000000000008 R_BPF_64_RELATIVE
0000000000004d08  0000000000000008 R_BPF_64_RELATIVE
0000000000004d20  0000000000000008 R_BPF_64_RELATIVE
0000000000004e00  0000000000000008 R_BPF_64_RELATIVE
0000000000004e40  0000000000000008 R_BPF_64_RELATIVE
0000000000004e68  0000000000000008 R_BPF_64_RELATIVE
0000000000004ea8  0000000000000008 R_BPF_64_RELATIVE
0000000000004ec8  0000000000000008 R_BPF_64_RELATIVE
0000000000004f08  0000000000000008 R_BPF_64_RELATIVE
0000000000004f20  0000000000000008 R_BPF_64_RELATIVE
0000000000004f60  0000000000000008 R_BPF_64_RELATIVE
0000000000004f78  0000000000000008 R_BPF_64_RELATIVE
0000000000004fb8  0000000000000008 R_BPF_64_RELATIVE
0000000000004fd0  0000000000000008 R_BPF_64_RELATIVE
0000000000005010  0000000000000008 R_BPF_64_RELATIVE
0000000000005028  0000000000000008 R_BPF_64_RELATIVE
0000000000005068  0000000000000008 R_BPF_64_RELATIVE
0000000000005230  0000000000000008 R_BPF_64_RELATIVE
0000000000005248  0000000000000008 R_BPF_64_RELATIVE
00000000000053a0  0000000000000008 R_BPF_64_RELATIVE
0000000000005438  0000000000000008 R_BPF_64_RELATIVE
0000000000005658  0000000000000008 R_BPF_64_RELATIVE
0000000000005670  0000000000000008 R_BPF_64_RELATIVE
00000000000057c8  0000000000000008 R_BPF_64_RELATIVE
0000000000005890  0000000000000008 R_BPF_64_RELATIVE
0000000000005ab0  0000000000000008 R_BPF_64_RELATIVE
0000000000005ed8  0000000000000008 R_BPF_64_RELATIVE
0000000000006010  0000000000000008 R_BPF_64_RELATIVE
00000000000062a0  0000000000000008 R_BPF_64_RELATIVE
00000000000062b8  0000000000000008 R_BPF_64_RELATIVE
00000000000062c8  0000000000000008 R_BPF_64_RELATIVE
0000000000006bd0  0000000000000008 R_BPF_64_RELATIVE
0000000000008a00  0000000000000008 R_BPF_64_RELATIVE
00000000000094d0  0000000000000008 R_BPF_64_RELATIVE
00000000000094e8  0000000000000008 R_BPF_64_RELATIVE
00000000000096c0  0000000000000008 R_BPF_64_RELATIVE
0000000000009700  0000000000000008 R_BPF_64_RELATIVE
0000000000009728  0000000000000008 R_BPF_64_RELATIVE
0000000000009f60  0000000000000008 R_BPF_64_RELATIVE
000000000000a138  0000000000000008 R_BPF_64_RELATIVE
000000000000a150  0000000000000008 R_BPF_64_RELATIVE
000000000000a190  0000000000000008 R_BPF_64_RELATIVE
000000000000a1c8  0000000000000008 R_BPF_64_RELATIVE
000000000000a200  0000000000000008 R_BPF_64_RELATIVE
000000000000a230  0000000000000008 R_BPF_64_RELATIVE
000000000000a260  0000000000000008 R_BPF_64_RELATIVE
000000000000a290  0000000000000008 R_BPF_64_RELATIVE
000000000000a2c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a2f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a318  0000000000000008 R_BPF_64_RELATIVE
000000000000a340  0000000000000008 R_BPF_64_RELATIVE
000000000000a370  0000000000000008 R_BPF_64_RELATIVE
000000000000a3a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a3d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a400  0000000000000008 R_BPF_64_RELATIVE
000000000000a430  0000000000000008 R_BPF_64_RELATIVE
000000000000a450  0000000000000008 R_BPF_64_RELATIVE
000000000000a470  0000000000000008 R_BPF_64_RELATIVE
000000000000a490  0000000000000008 R_BPF_64_RELATIVE
000000000000a4b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4e8  0000000000000008 R_BPF_64_RELATIVE
000000000000a508  0000000000000008 R_BPF_64_RELATIVE
000000000000a528  0000000000000008 R_BPF_64_RELATIVE
000000000000a548  0000000000000008 R_BPF_64_RELATIVE
000000000000a568  0000000000000008 R_BPF_64_RELATIVE
000000000000a580  0000000000000008 R_BPF_64_RELATIVE
000000000000a5a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a600  0000000000000008 R_BPF_64_RELATIVE
000000000000a620  0000000000000008 R_BPF_64_RELATIVE
000000000000a640  0000000000000008 R_BPF_64_RELATIVE
000000000000a660  0000000000000008 R_BPF_64_RELATIVE
000000000000a680  0000000000000008 R_BPF_64_RELATIVE
000000000000a6a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a700  0000000000000008 R_BPF_64_RELATIVE
000000000000a720  0000000000000008 R_BPF_64_RELATIVE
000000000000a828  0000000000000008 R_BPF_64_RELATIVE
000000000000a898  0000000000000008 R_BPF_64_RELATIVE
000000000000aa70  0000000000000008 R_BPF_64_RELATIVE
000000000000aa88  0000000000000008 R_BPF_64_RELATIVE
000000000000aab8  0000000000000008 R_BPF_64_RELATIVE
000000000000ab80  0000000000000008 R_BPF_64_RELATIVE
000000000000b038  0000000000000008 R_BPF_64_RELATIVE
000000000000b050  0000000000000008 R_BPF_64_RELATIVE
000000000000b298  0000000000000008 R_BPF_64_RELATIVE
000000000000b2d0  0000000000000008 R_BPF_64_RELATIVE
000000000000b2e8  0000000000000008 R_BPF_64_RELATIVE
000000000000b2f8  0000000000000008 R_BPF_64_RELATIVE
000000000000b6d8  0000000000000008 R_BPF_64_RELATIVE
000000000000b760  0000000000000008 R_BPF_64_RELATIVE
000000000000b790  0000000000000008 R_BPF_64_RELATIVE
000000000000b868  0000000000000008 R_BPF_64_RELATIVE
000000000000b990  0000000000000008 R_BPF_64_RELATIVE
000000000000b9d8  0000000000000008 R_BPF_64_RELATIVE
000000000000b9f0  0000000000000008 R_BPF_64_RELATIVE
000000000000bc30  0000000000000008 R_BPF_64_RELATIVE
000000000000bc78  0000000000000008 R_BPF_64_RELATIVE
000000000000bc90  0000000000000008 R_BPF_64_RELATIVE
000000000000be90  0000000000000008 R_BPF_64_RELATIVE
000000000000bed8  0000000000000008 R_BPF_64_RELATIVE
000000000000bf40  0000000000000008 R_BPF_64_RELATIVE
000000000000bfe8  0000000000000008 R_BPF_64_RELATIVE
000000000000c050  0000000000000008 R_BPF_64_RELATIVE
000000000000c0c8  0000000000000008 R_BPF_64_RELATIVE
000000000000c100  0000000000000008 R_BPF_64_RELATIVE
000000000000c160  0000000000000008 R_BPF_64_RELATIVE
000000000000c1b8  0000000000000008 R_BPF_64_RELATIVE
000000000000c298  0000000000000008 R_BPF_64_RELATIVE
000000000000c2c8  0000000000000008 R_BPF_64_RELATIVE
000000000000c338  0000000000000008 R_BPF_64_RELATIVE
000000000000c350  0000000000000008 R_BPF_64_RELATIVE
000000000000c3e8  0000000000000008 R_BPF_64_RELATIVE
000000000000c400  0000000000000008 R_BPF_64_RELATIVE
000000000000c430  0000000000000008 R_BPF_64_RELATIVE
000000000000c760  0000000000000008 R_BPF_64_RELATIVE
000000000000c800  0000000000000008 R_BPF_64_RELATIVE
000000000000df18  0000000000000008 R_BPF_64_RELATIVE
000000000000e1c0  0000000000000008 R_BPF_64_RELATIVE
000000000000e758  0000000000000008 R_BPF_64_RELATIVE
000000000000e788  0000000000000008 R_BPF_64_RELATIVE
000000000000e838  0000000000000008 R_BPF_64_RELATIVE
000000000000e868  0000000000000008 R_BPF_64_RELATIVE
000000000000e918  0000000000000008 R_BPF_64_RELATIVE
000000000000e948  0000000000000008 R_BPF_64_RELATIVE
000000000000e9b8  0000000000000008 R_BPF_64_RELATIVE
000000000000ea10  0000000000000008 R_BPF_64_RELATIVE
000000000000eaa0  0000000000000008 R_BPF_64_RELATIVE
000000000000eae8  0000000000000008 R_BPF_64_RELATIVE
000000000000eb60  0000000000000008 R_BPF_64_RELATIVE
000000000000eb90  0000000000000008 R_BPF_64_RELATIVE
000000000000ebc8  0000000000000008 R_BPF_64_RELATIVE
000000000000ec38  0000000000000008 R_BPF_64_RELATIVE
000000000000ec68  0000000000000008 R_BPF_64_RELATIVE
000000000000ecb8  0000000000000008 R_BPF_64_RELATIVE
000000000000eee0  0000000000000008 R_BPF_64_RELATIVE
000000000000ef78  0000000000000008 R_BPF_64_RELATIVE
000000000000efa8  0000000000000008 R_BPF_64_RELATIVE
000000000000efe0  0000000000000008 R_BPF_64_RELATIVE
000000000000f010  0000000000000008 R_BPF_64_RELATIVE
000000000000f040  0000000000000008 R_BPF_64_RELATIVE
000000000000f340  0000000000000008 R_BPF_64_RELATIVE
000000000000f358  0000000000000008 R_BPF_64_RELATIVE
000000000000f3b8  0000000000000008 R_BPF_64_RELATIVE
000000000000f3e8  0000000000000008 R_BPF_64_RELATIVE
000000000000f4a8  0000000000000008 R_BPF_64_RELATIVE
000000000000f550  0000000000000008 R_BPF_64_RELATIVE
000000000000f618  0000000000000008 R_BPF_64_RELATIVE
000000000000f6c0  0000000000000008 R_BPF_64_RELATIVE
000000000000f7c8  0000000000000008 R_BPF_64_RELATIVE
000000000000f800  0000000000000008 R_BPF_64_RELATIVE
000000000000f9f0  0000000000000008 R_BPF_64_RELATIVE
000000000000faa0  0000000000000008 R_BPF_64_RELATIVE
000000000000fb00  0000000000000008 R_BPF_64_RELATIVE
000000000000fb60  0000000000000008 R_BPF_64_RELATIVE
000000000000fbf8  0000000000000008 R_BPF_64_RELATIVE
000000000000fc50  0000000000000008 R_BPF_64_RELATIVE
000000000000fcc0  0000000000000008 R_BPF_64_RELATIVE
000000000000fd70  0000000000000008 R_BPF_64_RELATIVE
000000000000fe80  0000000000000008 R_BPF_64_RELATIVE
000000000000feb8  0000000000000008 R_BPF_64_RELATIVE
000000000000ff90  0000000000000008 R_BPF_64_RELATIVE
000000000000fff0  0000000000000008 R_BPF_64_RELATIVE
0000000000010098  0000000000000008 R_BPF_64_RELATIVE
0000000000010168  0000000000000008 R_BPF_64_RELATIVE
00000000000101a0  0000000000000008 R_BPF_64_RELATIVE
0000000000010278  0000000000000008 R_BPF_64_RELATIVE
00000000000102d8  0000000000000008 R_BPF_64_RELATIVE
0000000000010370  0000000000000008 R_BPF_64_RELATIVE
0000000000010440  0000000000000008 R_BPF_64_RELATIVE
0000000000010478  0000000000000008 R_BPF_64_RELATIVE
0000000000010550  0000000000000008 R_BPF_64_RELATIVE
00000000000105b0  0000000000000008 R_BPF_64_RELATIVE
0000000000010648  0000000000000008 R_BPF_64_RELATIVE
0000000000010688  0000000000000008 R_BPF_64_RELATIVE
0000000000010830  0000000000000008 R_BPF_64_RELATIVE
00000000000108c8  0000000000000008 R_BPF_64_RELATIVE
0000000000010968  0000000000000008 R_BPF_64_RELATIVE
0000000000010990  0000000000000008 R_BPF_64_RELATIVE
00000000000109f8  0000000000000008 R_BPF_64_RELATIVE
0000000000010ac0  0000000000000008 R_BPF_64_RELATIVE
0000000000010af0  0000000000000008 R_BPF_64_RELATIVE
00000000000139f0  0000000000000008 R_BPF_64_RELATIVE
0000000000013a00  0000000000000008 R_BPF_64_RELATIVE
0000000000013a10  0000000000000008 R_BPF_64_RELATIVE
0000000000013a20  0000000000000008 R_BPF_64_RELATIVE
0000000000013a30  0000000000000008 R_BPF_64_RELATIVE
0000000000013a40  0000000000000008 R_BPF_64_RELATIVE
0000000000013a50  0000000000000008 R_BPF_64_RELATIVE
0000000000013a60  0000000000000008 R_BPF_64_RELATIVE
0000000000013a70  0000000000000008 R_BPF_64_RELATIVE
0000000000013a80  0000000000000008 R_BPF_64_RELATIVE
0000000000013a90  0000000000000008 R_BPF_64_RELATIVE
0000000000013aa0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ab0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ac0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ad0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ae0  0000000000000008 R_BPF_64_RELATIVE
0000000000013af0  0000000000000008 R_BPF_64_RELATIVE
0000000000013b00  0000000000000008 R_BPF_64_RELATIVE
0000000000013b10  0000000000000008 R_BPF_64_RELATIVE
0000000000013b20  0000000000000008 R_BPF_64_RELATIVE
0000000000013b30  0000000000000008 R_BPF_64_RELATIVE
0000000000013b40  0000000000000008 R_BPF_64_RELATIVE
0000000000013b58  0000000000000008 R_BPF_64_RELATIVE
0000000000013b60  0000000000000008 R_BPF_64_RELATIVE
0000000000013b78  0000000000000008 R_BPF_64_RELATIVE
0000000000013b80  0000000000000008 R_BPF_64_RELATIVE
0000000000013b88  0000000000000008 R_BPF_64_RELATIVE
0000000000013b90  0000000000000008 R_BPF_64_RELATIVE
0000000000013b98  0000000000000008 R_BPF_64_RELATIVE
0000000000013ba0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ba8  0000000000000008 R_BPF_64_RELATIVE
0000000000013bb0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bb8  0000000000000008 R_BPF_64_RELATIVE
0000000000013bc8  0000000000000008 R_BPF_64_RELATIVE
0000000000013be0  0000000000000008 R_BPF_64_RELATIVE
0000000000013be8  0000000000000008 R_BPF_64_RELATIVE
0000000000013bf0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bf8  0000000000000008 R_BPF_64_RELATIVE
0000000000013c10  0000000000000008 R_BPF_64_RELATIVE
0000000000013c28  0000000000000008 R_BPF_64_RELATIVE
0000000000013c30  0000000000000008 R_BPF_64_RELATIVE
0000000000013c48  0000000000000008 R_BPF_64_RELATIVE
0000000000013c50  0000000000000008 R_BPF_64_RELATIVE
0000000000013c58  0000000000000008 R_BPF_64_RELATIVE
0000000000013c60  0000000000000008 R_BPF_64_RELATIVE
0000000000013c78  0000000000000008 R_BPF_64_RELATIVE
0000000000013c88  0000000000000008 R_BPF_64_RELATIVE
0000000000013ca0  0000000000000008 R_BPF_64_RELATIVE
0000000000013cb0  0000000000000008 R_BPF_64_RELATIVE
0000000000013cc8  0000000000000008 R_BPF_64_RELATIVE
0000000000013ce0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ce8  0000000000000008 R_BPF_64_RELATIVE
0000000000013d00  0000000000000008 R_BPF_64_RELATIVE
0000000000013d08  0000000000000008 R_BPF_64_RELATIVE
0000000000013d10  0000000000000008 R_BPF_64_RELATIVE
0000000000013d18  0000000000000008 R_BPF_64_RELATIVE
0000000000013d20  0000000000000008 R_BPF_64_RELATIVE
0000000000013d28  0000000000000008 R_BPF_64_RELATIVE
0000000000013d30  0000000000000008 R_BPF_64_RELATIVE
0000000000013d38  0000000000000008 R_BPF_64_RELATIVE
0000000000013d40  0000000000000008 R_BPF_64_RELATIVE
0000000000013d58  0000000000000008 R_BPF_64_RELATIVE
0000000000013d60  0000000000000008 R_BPF_64_RELATIVE
0000000000013d70  0000000000000008 R_BPF_64_RELATIVE
0000000000013d80  0000000000000008 R_BPF_64_RELATIVE
0000000000013d90  0000000000000008 R_BPF_64_RELATIVE
0000000000013da0  0000000000000008 R_BPF_64_RELATIVE
0000000000013db8  0000000000000008 R_BPF_64_RELATIVE
0000000000013dd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013de8  0000000000000008 R_BPF_64_RELATIVE
0000000000013df0  0000000000000008 R_BPF_64_RELATIVE
0000000000013e08  0000000000000008 R_BPF_64_RELATIVE
0000000000013e10  0000000000000008 R_BPF_64_RELATIVE
0000000000013e18  0000000000000008 R_BPF_64_RELATIVE
0000000000013e20  0000000000000008 R_BPF_64_RELATIVE
0000000000013e30  0000000000000008 R_BPF_64_RELATIVE
0000000000013e40  0000000000000008 R_BPF_64_RELATIVE
0000000000013e50  0000000000000008 R_BPF_64_RELATIVE
0000000000013e60  0000000000000008 R_BPF_64_RELATIVE
0000000000013e78  0000000000000008 R_BPF_64_RELATIVE
0000000000013e80  0000000000000008 R_BPF_64_RELATIVE
0000000000013e90  0000000000000008 R_BPF_64_RELATIVE
0000000000013ea0  0000000000000008 R_BPF_64_RELATIVE
0000000000013eb0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ec0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ed0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ee0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ef8  0000000000000008 R_BPF_64_RELATIVE
0000000000013f10  0000000000000008 R_BPF_64_RELATIVE
0000000000013f28  0000000000000008 R_BPF_64_RELATIVE
0000000000013f38  0000000000000008 R_BPF_64_RELATIVE
0000000000013f48  0000000000000008 R_BPF_64_RELATIVE
0000000000013f58  0000000000000008 R_BPF_64_RELATIVE
0000000000013f68  0000000000000008 R_BPF_64_RELATIVE
0000000000013f78  0000000000000008 R_BPF_64_RELATIVE
0000000000013f88  0000000000000008 R_BPF_64_RELATIVE
0000000000013fa0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fb0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fc0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fe0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ff0  0000000000000008 R_BPF_64_RELATIVE
0000000000014000  0000000000000008 R_BPF_64_RELATIVE
0000000000014010  0000000000000008 R_BPF_64_RELATIVE
0000000000014020  0000000000000008 R_BPF_64_RELATIVE
0000000000014030  0000000000000008 R_BPF_64_RELATIVE
0000000000014040  0000000000000008 R_BPF_64_RELATIVE
0000000000014050  0000000000000008 R_BPF_64_RELATIVE
0000000000014060  0000000000000008 R_BPF_64_RELATIVE
0000000000014078  0000000000000008 R_BPF_64_RELATIVE
0000000000014090  0000000000000008 R_BPF_64_RELATIVE
00000000000140a8  0000000000000008 R_BPF_64_RELATIVE
00000000000140c0  0000000000000008 R_BPF_64_RELATIVE
0000000000001e40  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002368  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002580  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002a80  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002c78  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002f40  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
00000000000031c0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000003950  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000003ad0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000004168  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000004d98  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
000000000000abc0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000000410  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000448  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000570  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000005a8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000a30  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000c10  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000d98  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000f60  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001678  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001800  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001af8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001b90  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000002900  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000003218  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000003220  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005100  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005358  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000055c0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005780  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005960  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005a68  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000062e0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006560  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006598  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006730  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006768  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006948  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000069b0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006be8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006c30  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006c38  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000070c8  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000089f8  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000092e8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009740  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000098e8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009a80  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009c38  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009de0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009f18  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000a7a8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000a988  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ab78  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000aba8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abb8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abd8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abe0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abe8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abf0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ac28  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ad58  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ad90  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000aeb8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000aef0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b068  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b078  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b088  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b098  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b0a8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b228  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b310  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b708  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b710  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c240  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c320  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c380  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c480  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000df30  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e1d8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e7e0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e8c0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e9a0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000eb00  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ef08  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f090  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f370  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f3d0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f400  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f4c0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f630  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000fa08  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010980  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010ad8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010b08  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abd0  000000040000000a R_BPF_64_32            0000000000004cc0 custom_panic
0000000000011860  000000050000000a R_BPF_64_32            0000000000000000 sol_memset_
0000000000009660  000000060000000a R_BPF_64_32            0000000000000000 sol_try_find_program_address
0000000000008d20  000000070000000a R_BPF_64_32            0000000000000000 sol_invoke_signed_rust
000000000000a000  000000080000000a R_BPF_64_32            0000000000000000 sol_get_rent_sysvar
0000000000011748  000000090000000a R_BPF_64_32            0000000000000000 sol_memcpy_
00000000000119b0  0000000a0000000a R_BPF_64_32            0000000000000000 sol_memcmp_

Symbol table '.dynsym' contains 11 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
     2 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
     3 00000000000019e8 12536 FUNC    GLOBAL DEFAULT     1 entrypoint
     4 0000000000004cc0   280 FUNC    GLOBAL DEFAULT     1 custom_panic
     5 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memset_
     6 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_try_find_program_address
     7 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_invoke_signed_rust
     8 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_get_rent_sysvar
     9 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
    10 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcmp_

Symbol table '.symtab' contains 1326 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS tictactoe.f9d98a26-cgu.0
     2 0000000000000120    56 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>
     3 0000000000000150     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
     4 0000000000000158     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&u8>
     5 0000000000000160   400 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>
     6 00000000000001c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_3
     7 0000000000000228     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_6
     8 0000000000000288     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_9
     9 00000000000002e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_12
    10 00000000000139f0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_1
    11 00000000000002f0   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
    12 0000000000000320     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_2
    13 0000000000000408     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_12
    14 0000000000000358     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_5
    15 0000000000000368     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_7
    16 00000000000003a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_9
    17 00000000000003b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_10
    18 00000000000005b0   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
    19 0000000000000418     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_14
    20 0000000000000438     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_13
    21 0000000000000450   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
    22 0000000000000480     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_2
    23 0000000000000568     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_12
    24 00000000000004b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_5
    25 00000000000004c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_7
    26 0000000000000500     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_9
    27 0000000000000510     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_10
    28 0000000000000578     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_14
    29 0000000000000598     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_13
    30 00000000000005f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_12
    31 00000000000006d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_2
    32 0000000000000668     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_7
    33 0000000000000640     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_6
    34 00000000000006b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_9
    35 0000000000000698     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_11
    36 00000000000006c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_10
    37 0000000000000850     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_7
    38 00000000000007f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_5
    39 00000000000007b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_9
    40 0000000000000870     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_11
    41 00000000000007d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_10
    42 0000000000000860     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_8
    43 00000000000125c5     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_2
    44 0000000000000950     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_3
    45 0000000000000980     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_5
    46 00000000000126a0    18 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_3
    47 00000000000009c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_7
    48 00000000000009a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_6
    49 00000000000126b2    13 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_5
    50 0000000000000a38     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_5
    51 0000000000000b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_3
    52 0000000000000a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_11
    53 0000000000000aa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_7
    54 0000000000000d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_10
    55 0000000000013ab0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_7
    56 0000000000006038   168 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for u8>::fmt
    57 0000000000000ca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_9
    58 0000000000000bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_4
    59 0000000000000c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_6
    60 0000000000013b60    88 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_8
    61 0000000000000da0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_5
    62 0000000000000ed0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_3
    63 0000000000001000     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_13
    64 0000000000000ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_12
    65 0000000000001018     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_9
    66 0000000000000f48     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_4
    67 0000000000000f68     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_10
    68 00000000000010a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_11
    69 00000000000010b0  1152 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize
    70 00000000000010f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_2
    71 0000000000001128     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_4
    72 0000000000001208     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_10
    73 0000000000001198     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_7
    74 00000000000011c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_9
    75 00000000000012a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_12
    76 0000000000013bb8    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_21
    77 0000000000001258     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_11
    78 00000000000012d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_14
    79 0000000000001308     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_16
    80 0000000000001350     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_17
    81 0000000000001380     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_19
    82 00000000000013c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_21
    83 0000000000001400     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_23
    84 0000000000001430     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_25
    85 0000000000001448     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_27
    86 00000000000014b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_29
    87 00000000000014e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_31
    88 0000000000001738     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_11
    89 0000000000001680     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_7
    90 0000000000001770     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_5
    91 0000000000001878     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_9
    92 0000000000001748     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_12
    93 0000000000001760     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_13
    94 0000000000001808     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_8
    95 0000000000001b00     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_4
    96 0000000000001cf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_20
    97 0000000000001b18     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_5
    98 0000000000001c00     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_8
    99 0000000000001b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_7
   100 0000000000001c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_9
   101 0000000000001ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_15
   102 0000000000001cb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_16
   103 0000000000002168     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_33
   104 00000000000021c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_39
   105 00000000000027e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_69
   106 00000000000129c1    22 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_22
   107 0000000000002a80     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_84
   108 0000000000002b40     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_91
   109 0000000000002b08     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_86
   110 0000000000002198     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_36
   111 00000000000021f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_42
   112 0000000000002908     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_72
   113 0000000000012891    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_23
   114 0000000000002450     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_59
   115 0000000000002288     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_51
   116 0000000000013a50    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_24
   117 0000000000001e78     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_25
   118 00000000000027c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_68
   119 0000000000002408     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_58
   120 0000000000002f98     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_108
   121 00000000000020a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_30
   122 0000000000002fe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_110
   123 0000000000003c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_162
   124 00000000000049f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_251
   125 0000000000002228     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_45
   126 0000000000002928     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_73
   127 0000000000012940    25 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_25
   128 0000000000002258     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_48
   129 0000000000002948     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_74
   130 000000000001281c    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_26
   131 0000000000002968     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_75
   132 0000000000002988     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_76
   133 0000000000012971    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_27
   134 00000000000029a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_77
   135 00000000000029c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_78
   136 000000000001284f    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_28
   137 00000000000029e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_79
   138 0000000000002a08     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_80
   139 00000000000128c6    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_29
   140 0000000000002a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_81
   141 0000000000002a48     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_82
   142 00000000000127d2    21 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_30
   143 0000000000013a30    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_31
   144 00000000000023a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_54
   145 0000000000002cb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_101
   146 0000000000002cd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_102
   147 0000000000013a10    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_32
   148 00000000000025b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_62
   149 0000000000003030     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_111
   150 0000000000002818     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_70
   151 0000000000002a68     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_83
   152 0000000000013bc8    48 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_33
   153 0000000000002c68     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_98
   154 0000000000012a01    55 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_34
   155 0000000000013c10    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_35
   156 0000000000013bf8    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_36
   157 00000000000128ab    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_37
   158 0000000000012959    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_38
   159 0000000000012834    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_39
   160 00000000000129a4    29 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_40
   161 000000000001298b    25 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_41
   162 0000000000012875    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_42
   163 0000000000012862    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_43
   164 0000000000012921    31 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_44
   165 0000000000012809    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_46
   166 00000000000127e7    34 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_47
   167 00000000000129d7    14 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_48
   168 0000000000002a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_85
   169 0000000000002b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_94
   170 0000000000002b28     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_90
   171 0000000000002c58     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_97
   172 0000000000002bb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_87
   173 0000000000002c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_95
   174 0000000000003228     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_117
   175 0000000000002f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_107
   176 0000000000002fd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_109
   177 0000000000003350     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_120
   178 0000000000003198     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_114
   179 00000000000039b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_151
   180 00000000000031a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_115
   181 0000000000012633    31 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_49
   182 0000000000003518     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_123
   183 0000000000003218     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_116
   184 00000000000033b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_121
   185 0000000000004998     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_249
   186 00000000000034d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_122
   187 0000000000003b88     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_161
   188 0000000000003560     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_125
   189 0000000000003588     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_127
   190 00000000000035a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_129
   191 00000000000035d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_131
   192 0000000000003618     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_133
   193 0000000000003680     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_135
   194 0000000000003758     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_137
   195 0000000000003770     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_139
   196 00000000000037b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_141
   197 00000000000038a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_142
   198 0000000000003c48     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_163
   199 00000000000038f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_146
   200 0000000000003938     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_149
   201 0000000000012652    41 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_50
   202 0000000000003d18     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_170
   203 00000000000039e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_153
   204 0000000000003a00     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_155
   205 0000000000013a70    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_51
   206 0000000000003b08     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_158
   207 0000000000004070     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_190
   208 00000000000041c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_194
   209 00000000000049e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_250
   210 0000000000003ce0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_167
   211 0000000000003d00     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_169
   212 0000000000003d60     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_172
   213 0000000000003d90     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_174
   214 0000000000003da8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_176
   215 0000000000003dd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_178
   216 0000000000003e10     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_180
   217 0000000000003e58     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_182
   218 0000000000003fd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_183
   219 0000000000004a20     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_252
   220 0000000000004030     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_187
   221 0000000000013a90    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_52
   222 00000000000041a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_193
   223 0000000000004958     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_248
   224 0000000000004208     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_196
   225 0000000000004238     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_198
   226 0000000000004250     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_200
   227 0000000000004280     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_202
   228 00000000000042c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_204
   229 0000000000004338     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_206
   230 0000000000004368     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_208
   231 0000000000004380     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_210
   232 00000000000043a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_212
   233 00000000000043e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_214
   234 0000000000004470     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_216
   235 00000000000044b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_218
   236 00000000000044d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_220
   237 00000000000044f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_222
   238 00000000000046f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_225
   239 0000000000004750     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_228
   240 00000000000047b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_231
   241 0000000000004810     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_234
   242 0000000000004870     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_237
   243 00000000000048d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_240
   244 0000000000004910     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_244
   245 0000000000004940     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_247
   246 0000000000004ab8     0 NOTYPE  LOCAL  DEFAULT     1 LBB25_256
   247 0000000000004b18     0 NOTYPE  LOCAL  DEFAULT     1 LBB26_2
   248 0000000000004b48     0 NOTYPE  LOCAL  DEFAULT     1 LBB26_4
   249 0000000000004b60     0 NOTYPE  LOCAL  DEFAULT     1 LBB26_6
   250 0000000000004ba8     0 NOTYPE  LOCAL  DEFAULT     1 LBB26_8
   251 0000000000004bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_2
   252 0000000000004c28     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_4
   253 0000000000004c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_6
   254 0000000000004cb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_10
   255 0000000000004c90     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_9
   256 0000000000013ac0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_53
   257 00000000000060e0    24 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   258 0000000000004dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_3
   259 0000000000004e58     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_4
   260 0000000000004f20     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_9
   261 0000000000004f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_10
   262 00000000000125a0     0 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_61
   263 0000000000013b10    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_62
   264 0000000000005078     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_13
   265 0000000000004ec0     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_7
   266 0000000000004fd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_11
   267 0000000000013af0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_63
   268 0000000000005028     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_12
   269 0000000000013ad0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_64
   270 0000000000013b30    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_65
   271 0000000000013b20    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_66
   272 0000000000013b00    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_67
   273 0000000000013ae0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_68
   274 0000000000005108     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_5
   275 00000000000052c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_3
   276 00000000000051a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_12
   277 00000000000054e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_15
   278 0000000000005160     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_13
   279 00000000000051f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_9
   280 00000000000051d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_17
   281 0000000000005480     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_16
   282 00000000000053c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_18
   283 00000000000053e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_11
   284 0000000000005340     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_4
   285 0000000000005360     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_8
   286 0000000000005558     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_19
   287 0000000000005560     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_20
   288 00000000000055c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_5
   289 00000000000056f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_3
   290 0000000000005820     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_13
   291 0000000000005818     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_12
   292 0000000000005840     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_9
   293 0000000000005768     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_4
   294 0000000000005788     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_10
   295 00000000000058d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_11
   296 0000000000005968     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_6
   297 0000000000005980     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_7
   298 00000000000059d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_4
   299 0000000000005ad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_9
   300 0000000000005af0     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_10
   301 0000000000005a70     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_8
   302 0000000000005b00    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::type_id
   303 0000000000005b18    16 FUNC    LOCAL  DEFAULT     1 std::error::Error::backtrace
   304 0000000000005b28    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::cause
   305 0000000000005b40   168 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Write>::write_str
   306 0000000000005ba0     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_2
   307 0000000000005be8   688 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Write>::write_char
   308 0000000000005c78     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_4
   309 0000000000005c48     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_3
   310 0000000000005e88     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_12
   311 0000000000005d30     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_6
   312 0000000000005cc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_7
   313 0000000000005d78     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_8
   314 0000000000005e00     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_9
   315 0000000000005e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB43_11
   316 0000000000005e98   104 FUNC    LOCAL  DEFAULT     1 core::fmt::Write::write_fmt
   317 0000000000013c30    48 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_69
   318 0000000000005f00   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   319 0000000000005f60     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_2
   320 0000000000005fa8    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   321 0000000000005fc8   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   322 00000000000060a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB48_2
   323 0000000000006080     0 NOTYPE  LOCAL  DEFAULT     1 LBB48_5
   324 00000000000060c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB48_4
   325 00000000000060d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB48_3
   326 0000000000012568    14 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_71
   327 0000000000012576    36 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_72
   328 00000000000125a0    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_75
   329 00000000000125bc     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_76
   330 00000000000125ce    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_77
   331 00000000000125e6    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_78
   332 00000000000125fe    29 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_79
   333 000000000001261b     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_80
   334 0000000000012624    15 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_81
   335 00000000000126bf    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_82
   336 00000000000126d9    37 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_83
   337 00000000000126fe    12 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_84
   338 000000000001270a    35 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_85
   339 000000000001272d    34 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_86
   340 000000000001274f    61 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_87
   341 000000000001278c    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_88
   342 00000000000127a4    46 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_89
   343 0000000000013b40    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_90
   344 00000000000129e5    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_91
   345 0000000000012a38    75 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_92
   346 0000000000000910   200 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::GameState as core::fmt::Debug>::fmt
   347 00000000000006f0   544 FUNC    LOCAL  DEFAULT     1 tictactoe::instructions::PlayerMove::process
   348 00000000000009d8   872 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize
   349 0000000000000d40   880 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize
   350 0000000000001530  1208 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize
   351 00000000000050a8  1216 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize
   352 0000000000004dd8   720 FUNC    LOCAL  DEFAULT     1 <tictactoe::error::TictactoeError as core::fmt::Display>::fmt
   353 0000000000004ae0   208 FUNC    LOCAL  HIDDEN      1 __rg_alloc
   354 0000000000004bb0     8 FUNC    LOCAL  HIDDEN      1 __rg_dealloc
   355 0000000000004bb8   264 FUNC    LOCAL  HIDDEN      1 __rg_realloc
   356 00000000000058d8   552 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize
   357 0000000000005568   880 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize
   358 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS 1mmfwtw9ogskz7n7
   359 00000000000060f8     0 NOTYPE  LOCAL  DEFAULT     1
   360 0000000000006108     0 NOTYPE  LOCAL  DEFAULT     1
   361 0000000000006118     0 NOTYPE  LOCAL  DEFAULT     1
   362 0000000000006128     0 NOTYPE  LOCAL  DEFAULT     1
   363 0000000000006108    16 FUNC    LOCAL  DEFAULT     1 __rust_dealloc
   364 00000000000060f8    16 FUNC    LOCAL  DEFAULT     1 __rust_alloc
   365 0000000000006118    16 FUNC    LOCAL  DEFAULT     1 __rust_realloc
   366 0000000000006128    16 FUNC    LOCAL  DEFAULT     1 __rust_alloc_error_handler
   367 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS solana_program.e9ff558d-cgu.0
   368 0000000000006138     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&alloc::vec::Vec<(u64,solana_program::stake_history::StakeHistoryEntry)>>
   369 0000000000006140    56 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>
   370 0000000000006170     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_3
   371 0000000000006178   240 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>
   372 00000000000061c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_3
   373 0000000000006230     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_6
   374 00000000000061a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_9
   375 00000000000061d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_5
   376 0000000000006250     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_8
   377 00000000000061e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_12
   378 0000000000006208     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_15
   379 0000000000012ae8    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_15
   380 0000000000013d40    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_16
   381 0000000000013c60    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_17
   382 00000000000062e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_2
   383 0000000000006390     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_2
   384 00000000000063a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_3
   385 0000000000006418     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_2
   386 0000000000006430     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_3
   387 0000000000006770   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   388 0000000000006440   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   389 0000000000006470     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_2
   390 0000000000006558     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_12
   391 00000000000064a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_5
   392 00000000000064b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_7
   393 00000000000064f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_9
   394 0000000000006500     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_10
   395 0000000000006568     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_14
   396 0000000000006588     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_13
   397 00000000000065a0   464 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   398 00000000000065d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_2
   399 0000000000006728     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_16
   400 0000000000006608     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_5
   401 0000000000006618     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_7
   402 0000000000006678     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_9
   403 0000000000006688     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_11
   404 00000000000066c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_13
   405 00000000000066d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_14
   406 0000000000006738     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_18
   407 0000000000006758     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_17
   408 00000000000067b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_12
   409 0000000000006898     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_2
   410 0000000000006828     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_7
   411 0000000000006800     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_6
   412 0000000000006878     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_9
   413 0000000000006858     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_11
   414 0000000000006888     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_10
   415 00000000000070f0  6416 FUNC    LOCAL  DEFAULT     1 solana_program::instruction::Instruction::new_with_bincode
   416 0000000000013ca0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_63
   417 0000000000013cb0    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_64
   418 0000000000013c78    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_69
   419 0000000000006928     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_2
   420 0000000000006938     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_4
   421 0000000000006950     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_6
   422 00000000000069b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_9
   423 0000000000006998     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_8
   424 00000000000069c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_10
   425 0000000000006b08     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_14
   426 0000000000006ba0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_15
   427 0000000000006a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_12
   428 0000000000006ad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_13
   429 0000000000006da0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_30
   430 0000000000006bf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_18
   431 0000000000013c88    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_70
   432 0000000000006c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_20
   433 0000000000006c30     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_19
   434 0000000000006c90     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_22
   435 0000000000006cc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_24
   436 0000000000006ce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_26
   437 0000000000006d08     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_28
   438 0000000000006e18     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_32
   439 00000000000070b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_43
   440 0000000000006ea8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_34
   441 0000000000006ee8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_36
   442 0000000000006f10     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_38
   443 0000000000006f30     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_40
   444 0000000000007018     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_42
   445 0000000000007160     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_5
   446 00000000000071a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_12
   447 0000000000007250     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_25
   448 00000000000071b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_18
   449 0000000000007150     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_4
   450 0000000000007180     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_9
   451 00000000000071c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_16
   452 00000000000071e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_19
   453 00000000000071f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_21
   454 00000000000071f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_20
   455 00000000000071d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_17
   456 0000000000007210     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_23
   457 0000000000007228     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_24
   458 0000000000007280     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_27
   459 00000000000089e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_147
   460 0000000000007358     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_33
   461 0000000000007598     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_48
   462 00000000000076a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_56
   463 0000000000007878     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_65
   464 0000000000007300     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_32
   465 00000000000087e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_140
   466 0000000000007638     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_52
   467 0000000000007400     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_38
   468 0000000000007428     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_39
   469 0000000000007990     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_71
   470 0000000000007aa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_77
   471 00000000000073b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_37
   472 0000000000008090     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_109
   473 0000000000007668     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_53
   474 0000000000007bc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_83
   475 0000000000007460     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_42
   476 0000000000008820     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_142
   477 0000000000007538     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_46
   478 0000000000007498     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_43
   479 0000000000007d58     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_91
   480 0000000000007e88     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_97
   481 0000000000008028     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_105
   482 00000000000075f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_51
   483 0000000000008160     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_111
   484 0000000000007688     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_55
   485 0000000000008860     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_144
   486 0000000000008080     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_108
   487 00000000000076f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_58
   488 00000000000088a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_145
   489 0000000000007738     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_59
   490 00000000000077a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_61
   491 0000000000007820     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_63
   492 00000000000077e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_62
   493 0000000000008098     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_110
   494 00000000000078c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_67
   495 0000000000007938     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_69
   496 0000000000007900     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_68
   497 00000000000079e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_73
   498 0000000000007a50     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_75
   499 0000000000007a18     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_74
   500 0000000000007af8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_79
   501 0000000000007b68     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_81
   502 0000000000007b30     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_80
   503 0000000000007c10     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_85
   504 0000000000007cf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_89
   505 0000000000007c48     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_86
   506 00000000000083d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_122
   507 0000000000007da0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_93
   508 00000000000088d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_92
   509 0000000000007e28     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_95
   510 0000000000007df0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_94
   511 0000000000007ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_99
   512 0000000000007fc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_103
   513 0000000000007f18     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_100
   514 00000000000085a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_130
   515 0000000000008070     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_107
   516 00000000000081a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_113
   517 0000000000008908     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_146
   518 00000000000081f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_114
   519 0000000000008278     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_116
   520 00000000000082e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_118
   521 0000000000008378     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_120
   522 0000000000008338     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_119
   523 0000000000008428     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_124
   524 0000000000008940     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_123
   525 00000000000084c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_126
   526 0000000000008540     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_128
   527 0000000000008508     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_127
   528 00000000000085f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_132
   529 0000000000008990     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_131
   530 0000000000008690     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_134
   531 0000000000008708     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_136
   532 0000000000008780     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_138
   533 0000000000008748     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_137
   534 0000000000008cf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_4
   535 0000000000008cd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_2
   536 0000000000008af8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_3
   537 0000000000008b08     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_7
   538 0000000000008cc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_14
   539 0000000000008c20     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_10
   540 0000000000008b90     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_16
   541 0000000000008de0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_17
   542 0000000000008be0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_18
   543 0000000000008e18     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_19
   544 0000000000008d70     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_12
   545 0000000000008c80     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_13
   546 0000000000008da8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_15
   547 0000000000008d50     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_6
   548 0000000000008e60     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_21
   549 0000000000008e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_20
   550 0000000000008ea8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_14
   551 0000000000008ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_8
   552 0000000000008f28     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_5
   553 0000000000008fc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_27
   554 00000000000090f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_39
   555 0000000000008f00     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_21
   556 0000000000008f50     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_18
   557 0000000000008ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_33
   558 0000000000008f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_11
   559 0000000000009010     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_30
   560 0000000000008fa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_24
   561 0000000000009028     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_36
   562 0000000000009040     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_28
   563 0000000000009058     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_29
   564 0000000000009070     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_34
   565 0000000000009088     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_35
   566 00000000000090a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_31
   567 00000000000090b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_32
   568 00000000000090d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_37
   569 00000000000090e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_38
   570 0000000000009130     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_43
   571 00000000000091c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_14
   572 00000000000091f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_8
   573 0000000000009258     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_5
   574 0000000000009350     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_28
   575 0000000000009468     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_49
   576 0000000000009338     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_27
   577 0000000000009228     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_21
   578 0000000000009288     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_18
   579 0000000000009368     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_37
   580 00000000000091e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_38
   581 00000000000092f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_11
   582 0000000000009378     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_32
   583 0000000000009218     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_33
   584 0000000000009320     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_24
   585 0000000000009388     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_44
   586 0000000000009248     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_45
   587 0000000000009398     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_29
   588 00000000000093a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_30
   589 0000000000009278     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_31
   590 00000000000093b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_39
   591 00000000000093c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_40
   592 00000000000092a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_41
   593 0000000000009428     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_43
   594 00000000000093d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_34
   595 00000000000093e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_35
   596 0000000000009310     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_36
   597 00000000000093f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_46
   598 0000000000009408     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_47
   599 0000000000009418     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_48
   600 00000000000095d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_4
   601 00000000000095b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_3
   602 00000000000096b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_2
   603 0000000000009748     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_4
   604 0000000000009838     0 NOTYPE  LOCAL  DEFAULT     1 LBB230_2
   605 0000000000009888     0 NOTYPE  LOCAL  DEFAULT     1 LBB230_4
   606 0000000000013ce8    88 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_209
   607 00000000000098f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_2
   608 0000000000009a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB334_2
   609 0000000000009c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB336_2
   610 0000000000009d48    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::type_id
   611 0000000000009d60    16 FUNC    LOCAL  DEFAULT     1 std::error::Error::backtrace
   612 0000000000009d70    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::cause
   613 0000000000009de8     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_5
   614 0000000000009e88     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_3
   615 0000000000009fa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_7
   616 0000000000009f20     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_6
   617 000000000000a060     0 NOTYPE  LOCAL  DEFAULT     1 LBB623_2
   618 000000000000a078     0 NOTYPE  LOCAL  DEFAULT     1 LBB623_3
   619 0000000000012a83    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_794
   620 0000000000012a96    17 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_822
   621 0000000000012aa7    13 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_845
   622 0000000000012ab4    49 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_851
   623 0000000000013cc8    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_866
   624 00000000000070d0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref
   625 00000000000095e0   440 FUNC    LOCAL  DEFAULT     1 solana_program::pubkey::Pubkey::find_program_address
   626 0000000000009d88   552 FUNC    LOCAL  DEFAULT     1 <solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize
   627 00000000000068b0  2080 FUNC    LOCAL  DEFAULT     1 solana_program::entrypoint::deserialize
   628 0000000000009478   360 FUNC    LOCAL  DEFAULT     1 <solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from
   629 0000000000006320   152 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::try_borrow_data
   630 00000000000063b8   136 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::try_borrow_mut_data
   631 0000000000008e68   728 FUNC    LOCAL  DEFAULT     1 solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from
   632 0000000000009fb0   216 FUNC    LOCAL  DEFAULT     1 solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get
   633 0000000000009798   248 FUNC    LOCAL  DEFAULT     1 solana_program::rent::Rent::minimum_balance
   634 0000000000006268   184 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::lamports
   635 0000000000009be0   360 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::allocate
   636 0000000000008a40  1064 FUNC    LOCAL  DEFAULT     1 solana_program::program::invoke_signed
   637 0000000000009890   408 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::assign
   638 0000000000009a28   440 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::transfer
   639 0000000000008a00    64 FUNC    LOCAL  DEFAULT     1 solana_program::program::invoke
   640 0000000000012ae8     0 OBJECT  LOCAL  DEFAULT     2 solana_program::message::legacy::BUILTIN_PROGRAMS_KEYS
   641 00000000000070d0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::hash::Hash as core::convert::AsRef<[u8]>>::as_ref
   642 0000000000009140   824 FUNC    LOCAL  DEFAULT     1 <solana_program::program_error::ProgramError as core::convert::From<u64>>::from
   643 0000000000009d88   552 FUNC    LOCAL  DEFAULT     1 <solana_program::hash::Hash as borsh::de::BorshDeserialize>::deserialize
   644 00000000000070d0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::blake3::Hash as core::convert::AsRef<[u8]>>::as_ref
   645 00000000000070d0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::keccak::Hash as core::convert::AsRef<[u8]>>::as_ref
   646 0000000000009d88   552 FUNC    LOCAL  DEFAULT     1 <solana_program::blake3::Hash as borsh::de::BorshDeserialize>::deserialize
   647 0000000000009d88   552 FUNC    LOCAL  DEFAULT     1 <solana_program::keccak::Hash as borsh::de::BorshDeserialize>::deserialize
   648 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS blake3.b6ab9703-cgu.0
   649 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS solana_frozen_abi.c0b6b15a-cgu.0
   650 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS bs58.9c04cdba-cgu.0
   651 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS keccak.d4752f62-cgu.0
   652 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS bincode.adfda9c8-cgu.0
   653 000000000000a088     8 FUNC    LOCAL  DEFAULT     1 bincode::config::DefaultOptions::new
   654 000000000000a088     8 FUNC    LOCAL  DEFAULT     1 <bincode::config::DefaultOptions as core::default::Default>::default
   655 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS sha2.46e18164-cgu.0
   656 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS log.abad14e7-cgu.0
   657 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS borsh.c965a638-cgu.0
   658 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS std.76e7c9c4-cgu.0
   659 0000000000012b00     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.0
   660 0000000000013d60    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.894d23c69aaefe319b308348099da530.113
   661 000000000000abf8    40 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   662 000000000000a108  1608 FUNC    LOCAL  DEFAULT     1 std::io::error::ErrorKind::as_str
   663 000000000000a170     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_28
   664 000000000000a1e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_15
   665 000000000000a250     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_9
   666 000000000000a2e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_6
   667 000000000000a738     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_82
   668 0000000000012df5    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.161
   669 000000000000a1b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_42
   670 000000000000a280     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_36
   671 000000000000a308     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_33
   672 000000000000a450     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_68
   673 0000000000012c83    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.141
   674 000000000000a218     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_49
   675 000000000000a330     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_46
   676 000000000000a470     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_74
   677 0000000000012bf6    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.131
   678 000000000000a2b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_22
   679 000000000000a360     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_19
   680 000000000000a490     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_62
   681 0000000000012d77    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.151
   682 000000000000a670     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_81
   683 000000000000a390     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_53
   684 000000000000a4b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_77
   685 000000000000a4d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_78
   686 0000000000012b8b    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.125
   687 000000000000a3c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_12
   688 000000000000a4e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_58
   689 0000000000012dbe    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.156
   690 000000000000a3f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_39
   691 000000000000a508     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_71
   692 0000000000012c40    25 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.136
   693 000000000000a420     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_25
   694 000000000000a528     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_65
   695 0000000000012d1d    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.146
   696 000000000000a548     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_56
   697 000000000000a568     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_57
   698 000000000000a580     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_69
   699 000000000000a5a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_70
   700 000000000000a5c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_75
   701 000000000000a5e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_76
   702 0000000000012bc1    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.128
   703 000000000000a600     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_63
   704 000000000000a620     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_64
   705 0000000000012d3e    15 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.148
   706 000000000000a640     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_79
   707 000000000000a660     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_80
   708 0000000000012b60    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.122
   709 000000000000a680     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_60
   710 000000000000a6a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_61
   711 0000000000012d8e    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.153
   712 000000000000a6c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_72
   713 000000000000a6e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_73
   714 0000000000012c11    20 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.133
   715 000000000000a700     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_66
   716 000000000000a720     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_67
   717 0000000000012ca6    25 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.143
   718 0000000000012c8f    23 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.142
   719 0000000000012d82    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.152
   720 0000000000012bac    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.127
   721 0000000000012ba1    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.126
   722 0000000000012dd0    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.157
   723 0000000000012c59    23 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.137
   724 0000000000012d30    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.147
   725 0000000000012de3    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.160
   726 0000000000012c7a     9 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.140
   727 0000000000012c70    10 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.139
   728 0000000000012be8    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.130
   729 0000000000012bd7    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.129
   730 0000000000012d62    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.150
   731 0000000000012d4d    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.149
   732 0000000000012b7e    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.124
   733 0000000000012b73    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.123
   734 0000000000012db1    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.155
   735 0000000000012da3    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.154
   736 0000000000012c32    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.135
   737 0000000000012c25    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.134
   738 0000000000012cf7    38 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.145
   739 0000000000012cbf    56 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.144
   740 000000000000a7b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_2
   741 000000000000a8f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_3
   742 000000000000a938     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_5
   743 000000000000a9b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_11
   744 000000000000a990     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_10
   745 000000000000a9d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_7
   746 000000000000a9c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_12
   747 0000000000013d70    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.894d23c69aaefe319b308348099da530.175
   748 000000000000ab48    40 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Display>::fmt
   749 0000000000012e12    46 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.353
   750 000000000000abc0    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::sol_log
   751 0000000000012e06    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.173
   752 0000000000012e11     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.174
   753 000000000000a750   152 FUNC    LOCAL  DEFAULT     1 std::io::error::Error::_new
   754 000000000000a0b8    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Display>::fmt
   755 000000000000a0e0    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Debug>::fmt
   756 000000000000a090    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as std::error::Error>::description
   757 000000000000a7e8   864 FUNC    LOCAL  DEFAULT     1 <std::io::error::Error as core::fmt::Display>::fmt
   758 000000000000abd0    24 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::panic
   759 000000000000ab70    16 FUNC    LOCAL  DEFAULT     1 std::process::abort
   760 000000000000abe8    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::abort_internal
   761 000000000000ab80    48 FUNC    LOCAL  DEFAULT     1 rust_oom
   762 000000000000abb0    16 FUNC    LOCAL  DEFAULT     1 rust_begin_unwind
   763 000000000000a090    40 FUNC    LOCAL  DEFAULT     1 <std::sys_common::wtf8::Wtf8Buf as core::ops::deref::Deref>::deref
   764 000000000000a090    40 FUNC    LOCAL  DEFAULT     1 <std::sys_common::wtf8::Wtf8Buf as core::ops::deref::DerefMut>::deref_mut
   765 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS panic_abort.848a2d84-cgu.0
   766 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS hashbrown.a672f3dc-cgu.0
   767 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS alloc.55e0798c-cgu.0
   768 000000000000ac20    16 FUNC    LOCAL  DEFAULT     1 core::ops::function::FnOnce::call_once
   769 000000000000ac30     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&u8>
   770 000000000000ac38   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   771 000000000000ac68     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
   772 000000000000ad50     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_12
   773 000000000000aca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_5
   774 000000000000acb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_7
   775 000000000000ace8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_9
   776 000000000000acf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_10
   777 000000000000aef8   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   778 000000000000ad60     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_14
   779 000000000000ad80     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_13
   780 000000000000ad98   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   781 000000000000adc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_2
   782 000000000000aeb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_12
   783 000000000000ae00     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_5
   784 000000000000ae10     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_7
   785 000000000000ae48     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_9
   786 000000000000ae58     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_10
   787 000000000000aec0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_14
   788 000000000000aee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_13
   789 000000000000af38     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_12
   790 000000000000b020     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_2
   791 000000000000afb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_7
   792 000000000000af88     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_6
   793 000000000000b000     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_9
   794 000000000000afe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_11
   795 000000000000b010     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_10
   796 0000000000012e5c    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.1
   797 0000000000013da0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.2
   798 000000000000b0a0    16 FUNC    LOCAL  DEFAULT     1 core::intrinsics::const_eval_select
   799 000000000000b140     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_3
   800 000000000000b110     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_2
   801 000000000000b1d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_10
   802 000000000000b180     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_7
   803 000000000000b230     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_13
   804 000000000000b1b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_9
   805 0000000000013df0    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.60
   806 000000000000b318     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_15
   807 0000000000012e6d    51 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.14
   808 0000000000013dd0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.58
   809 0000000000013db8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.16
   810 000000000000b320   680 FUNC    LOCAL  DEFAULT     1 alloc::string::String::push
   811 000000000000b3b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_4
   812 000000000000b380     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_3
   813 000000000000b5c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_12
   814 000000000000b468     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_6
   815 000000000000b400     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_7
   816 000000000000b4b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_8
   817 000000000000b538     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_9
   818 000000000000b580     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_11
   819 000000000000b5c8   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   820 000000000000b628     0 NOTYPE  LOCAL  DEFAULT     1 LBB60_2
   821 000000000000b670    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   822 000000000000b690   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   823 0000000000012e40    28 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.0
   824 0000000000012ea0    24 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.15
   825 000000000000b0b0   624 FUNC    LOCAL  DEFAULT     1 alloc::fmt::format
   826 000000000000b038    56 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::capacity_overflow
   827 000000000000b070    16 FUNC    LOCAL  DEFAULT     1 alloc::alloc::handle_alloc_error
   828 000000000000b090    16 FUNC    LOCAL  HIDDEN      1 __rg_oom
   829 000000000000b080    16 FUNC    LOCAL  DEFAULT     1 alloc::alloc::handle_alloc_error::rt_error
   830 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS core.817fea1d-cgu.0
   831 000000000000b700    24 FUNC    LOCAL  DEFAULT     1 core::ops::function::FnOnce::call_once
   832 000000000000b718     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>
   833 0000000000012eb8     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.100
   834 0000000000013e20    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.130
   835 000000000000b720   280 FUNC    LOCAL  DEFAULT     1 <core::ops::range::Range<Idx> as core::fmt::Debug>::fmt
   836 000000000000f6e8  1336 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for usize>::fmt
   837 000000000000b7e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_2
   838 000000000000b7f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_3
   839 000000000000b838    24 FUNC    LOCAL  DEFAULT     1 <T as core::any::Any>::type_id
   840 0000000000012eba    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.137
   841 000000000000b890  1496 FUNC    LOCAL  DEFAULT     1 core::char::methods::<impl char>::escape_debug_ext
   842 000000000000b910     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_4
   843 000000000000be40     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_14
   844 000000000000b900     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_10
   845 000000000000b8f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_8
   846 000000000000b928     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_7
   847 000000000000bbf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_12
   848 000000000000be20     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_13
   849 000000000000bc20     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_11
   850 000000000000b950     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_16
   851 000000000000ba20     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_28
   852 000000000000bc30     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_18
   853 000000000000b990     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_27
   854 000000000000bcc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_19
   855 00000000000134c8   438 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.355
   856 00000000000133b4    84 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.353
   857 0000000000013408   192 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.354
   858 000000000000f0f8   784 FUNC    LOCAL  DEFAULT     1 core::unicode::printable::check
   859 0000000000013285   303 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.352
   860 0000000000013115    80 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.350
   861 0000000000013165   288 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.351
   862 0000000000010780    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   863 0000000000013e30    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.167
   864 0000000000012ef1    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.169
   865 000000000000c1a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_6
   866 000000000000bfa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_3
   867 0000000000010718   104 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   868 0000000000013e80    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.172
   869 000000000000c0a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_5
   870 00000000000106e0    56 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   871 0000000000013ea0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.176
   872 0000000000013e60    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.168
   873 00000000000106b0    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Debug>::fmt
   874 0000000000013ec0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.191
   875 0000000000012f14     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.190
   876 0000000000012f33   200 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.228
   877 000000000000c638     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_4
   878 000000000000c8b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_22
   879 000000000000c590     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_3
   880 000000000000c5a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_26
   881 000000000000c5d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_25
   882 000000000000c948     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_28
   883 000000000000c678     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_6
   884 000000000000c6f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_20
   885 000000000000c688     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_7
   886 000000000000c730     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_10
   887 000000000000c740     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_11
   888 000000000000c790     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_13
   889 000000000000c7d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_16
   890 000000000000c7e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_17
   891 000000000000c830     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_19
   892 000000000000c8f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_24
   893 000000000000c900     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_29
   894 000000000000c938     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_30
   895 000000000000c950     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_31
   896 000000000000c9b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_2
   897 000000000000c9d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_4
   898 000000000000c9c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_3
   899 000000000000ca08     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_12
   900 000000000000ca58     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_6
   901 000000000000cb20     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_14
   902 000000000000d080   192 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral::write_prefix
   903 000000000000cc40     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_51
   904 000000000000cc08     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_17
   905 000000000000cac0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_11
   906 000000000000cae8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_8
   907 000000000000caa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_10
   908 000000000000cbe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_16
   909 000000000000cb50     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_18
   910 000000000000cc58     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_27
   911 000000000000cb80     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_20
   912 000000000000cd50     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_23
   913 000000000000cd38     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_52
   914 000000000000ccd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_30
   915 000000000000cf08     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_33
   916 000000000000cef0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_53
   917 000000000000cd90     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_24
   918 000000000000cdd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_26
   919 000000000000ce80     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_46
   920 000000000000ced0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_49
   921 000000000000cee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_50
   922 000000000000cf40     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_34
   923 000000000000cf80     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_36
   924 000000000000cff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_39
   925 000000000000d050     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_42
   926 000000000000d0f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_2
   927 000000000000d100     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_3
   928 000000000000d108     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_4
   929 000000000000d168     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_2
   930 000000000000d178     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_5
   931 000000000000d490     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_3
   932 000000000000d3b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_27
   933 000000000000d300     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_13
   934 000000000000d1d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_7
   935 000000000000d390     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_16
   936 000000000000d2e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_12
   937 000000000000d530     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_17
   938 000000000000d410     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_32
   939 000000000000d458     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_29
   940 000000000000d3f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_31
   941 000000000000d4d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_35
   942 000000000000d4c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_4
   943 000000000000d590     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_38
   944 000000000000d578     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_49
   945 000000000000d728     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_21
   946 000000000000d6e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_20
   947 000000000000d738     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_22
   948 000000000000d5c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_39
   949 000000000000d608     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_41
   950 000000000000d668     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_44
   951 000000000000d6c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_47
   952 000000000000d748     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_24
   953 000000000000d760     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_26
   954 000000000000e258     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_61
   955 000000000000e1e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_12
   956 000000000000d908     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_3
   957 000000000000da90     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_13
   958 000000000000d990     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_5
   959 000000000000daa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_14
   960 000000000000da48     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_7
   961 000000000000e170     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_10
   962 000000000000e1a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_11
   963 000000000000db40     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_17
   964 000000000000dbe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_29
   965 000000000000db00     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_16
   966 000000000000db88     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_22
   967 000000000000dbd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_28
   968 000000000000dba8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_25
   969 000000000000dbb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_26
   970 000000000000dbc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_27
   971 000000000000def8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_38
   972 000000000000dc58     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_34
   973 000000000000dc20     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_33
   974 000000000000dc78     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_39
   975 000000000000dec8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_37
   976 000000000000df70     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_60
   977 000000000000df80     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_42
   978 000000000000dcf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_41
   979 000000000000dd20     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_64
   980 000000000000dd90     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_62
   981 000000000000ddb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_84
   982 000000000000dde0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_69
   983 000000000000de00     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_72
   984 000000000000dfc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_44
   985 000000000000dda0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_77
   986 000000000000ddb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_83
   987 000000000000de88     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_82
   988 000000000000dea0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_75
   989 000000000000de50     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_74
   990 0000000000013ef8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.239
   991 000000000000df38     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_53
   992 000000000000df48     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_58
   993 000000000000df50     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_59
   994 000000000000e000     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_45
   995 000000000000e158     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_81
   996 000000000000e120     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_78
   997 000000000000e050     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_49
   998 000000000000e070     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_54
   999 000000000000e0f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_52
  1000 000000000000e0c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_56
  1001 0000000000013f10    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.240
  1002 000000000000e598     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_23
  1003 000000000000e360     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_4
  1004 000000000000e3e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_3
  1005 000000000000e5a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_5
  1006 000000000000e370     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_24
  1007 000000000000e3a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_39
  1008 000000000000e378     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_25
  1009 000000000000e3b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_41
  1010 000000000000e3c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_42
  1011 000000000000e410     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_26
  1012 000000000000e480     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_31
  1013 000000000000e4a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_34
  1014 000000000000e528     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_40
  1015 000000000000e540     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_37
  1016 000000000000e4f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_36
  1017 000000000000e560     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_16
  1018 000000000000e570     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_21
  1019 000000000000e578     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_22
  1020 000000000000e5f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_8
  1021 000000000000e640     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_12
  1022 000000000000e660     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_17
  1023 000000000000e6e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_15
  1024 000000000000e6b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_19
  1025 0000000000013ee0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.224
  1026 0000000000012f31     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.227
  1027 0000000000013f28    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.251
  1028 0000000000013f48    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.253
  1029 0000000000013f68    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.256
  1030 000000000000ea30     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_7
  1031 000000000000ea70     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_2
  1032 000000000000ea10     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_6
  1033 0000000000013090     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.313
  1034 000000000000eb08     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_10
  1035 000000000000ebf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_37
  1036 000000000000ecf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_14
  1037 0000000000013f88    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.292
  1038 000000000000eb18     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_12
  1039 0000000000013fa0    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.316
  1040 000000000000f068     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_13
  1041 0000000000013fd0    64 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.320
  1042 000000000000ed48     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_18
  1043 000000000000ed10     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_17
  1044 000000000000ed50     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_19
  1045 000000000000edc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_23
  1046 000000000000ed60     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_20
  1047 000000000000ed78     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_22
  1048 000000000000eee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_30
  1049 000000000000eda8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_36
  1050 000000000000edc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_24
  1051 000000000000ef10     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_27
  1052 000000000000ee48     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_28
  1053 000000000000f098     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_31
  1054 0000000000012ec5    43 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.165
  1055 000000000000ef20     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_35
  1056 0000000000014010    80 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.324
  1057 000000000000f270     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_3
  1058 000000000000f1a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_2
  1059 000000000000f180     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_6
  1060 000000000000f1d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_8
  1061 000000000000f3a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_10
  1062 000000000000f3d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_11
  1063 000000000000f1f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_13
  1064 000000000000f240     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_16
  1065 000000000000f230     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_15
  1066 000000000000f2f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_5
  1067 000000000000f2c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_17
  1068 000000000000f2c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_21
  1069 000000000000f338     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_18
  1070 000000000000f378     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_20
  1071 0000000000014078    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.349
  1072 0000000000014060    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.348
  1073 000000000000f4c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_1
  1074 000000000000f428     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_3
  1075 000000000000f4f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_6
  1076 000000000000f638     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_1
  1077 000000000000f598     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_3
  1078 000000000000f668     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_6
  1079 000000000000f898     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_2
  1080 000000000000f720     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_10
  1081 000000000000f8b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_20
  1082 000000000000f840     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_14
  1083 000000000000f748     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_12
  1084 000000000000fac0     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_16
  1085 000000000000f848     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_15
  1086 000000000000f860     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_18
  1087 000000000000fb58     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_17
  1088 000000000000fba8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_19
  1089 000000000000fa10     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_3
  1090 000000000000f948     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_21
  1091 000000000000f8d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_23
  1092 000000000000fa48     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_8
  1093 000000000000f9e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_7
  1094 000000000000f980     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_5
  1095 000000000000fc10     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_9
  1096 000000000000fc88     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_3
  1097 000000000000fcf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_4
  1098 000000000000fd20     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_5
  1099 000000000000fef8     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_4
  1100 000000000000fe00     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_2
  1101 000000000000ff50     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_6
  1102 000000000000ff00     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_5
  1103 000000000000ff18     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_8
  1104 000000000000ffe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_7
  1105 0000000000010038     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_9
  1106 0000000000010088     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_11
  1107 00000000000101e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_4
  1108 00000000000100e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_2
  1109 0000000000010238     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_6
  1110 00000000000101e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_5
  1111 0000000000010200     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_8
  1112 00000000000102d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_7
  1113 0000000000010320     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_9
  1114 00000000000104b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_4
  1115 00000000000103c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_2
  1116 0000000000010510     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_6
  1117 00000000000104c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_5
  1118 00000000000104d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_8
  1119 00000000000105a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_7
  1120 00000000000105f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_9
  1121 00000000000136a6     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.540
  1122 00000000000140c0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.362
  1123 00000000000140a8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.361
  1124 0000000000014090    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.360
  1125 0000000000010810     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_1
  1126 00000000000107e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_3
  1127 00000000000107f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_4
  1128 00000000000108b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_6
  1129 00000000000136ac   128 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS
  1130 00000000000108a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_5
  1131 0000000000010ae0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_8
  1132 0000000000010908     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_10
  1133 0000000000010938     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_12
  1134 00000000000109b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_16
  1135 0000000000010988     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_15
  1136 0000000000010aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_23
  1137 000000000001372c   707 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::OFFSETS
  1138 0000000000010a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_18
  1139 0000000000010ab0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_20
  1140 0000000000010a98     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_22
  1141 0000000000012eb8     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.129
  1142 0000000000012ef0     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.166
  1143 0000000000012efd     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.170
  1144 0000000000012efe     3 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.171
  1145 0000000000012f01    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.175
  1146 0000000000012f13     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.188
  1147 0000000000012f16    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.223
  1148 0000000000012ffb    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.232
  1149 0000000000013016    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.249
  1150 0000000000013028    34 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.250
  1151 000000000001304a    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.254
  1152 0000000000013060    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.255
  1153 000000000001306d    35 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.290
  1154 0000000000013095    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.314
  1155 00000000000130a0    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.315
  1156 00000000000130b6    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.317
  1157 00000000000130c4    38 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.321
  1158 00000000000130ea     6 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.323
  1159 00000000000130f0    37 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.347
  1160 000000000001367e    40 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.356
  1161 000000000000d770    48 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::write_str
  1162 0000000000010398   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt
  1163 000000000000c488    88 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::new
  1164 000000000000c388   256 FUNC    LOCAL  DEFAULT     1 core::result::unwrap_failed
  1165 0000000000010398   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt
  1166 000000000000d7a0    96 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::write_fmt
  1167 000000000000c4e0  1144 FUNC    LOCAL  DEFAULT     1 core::fmt::write
  1168 000000000000d800    32 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_lower_hex
  1169 000000000000d820    32 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_upper_hex
  1170 000000000000f578   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt
  1171 000000000000f408   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt
  1172 000000000000fc20   376 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt
  1173 000000000000be68   848 FUNC    LOCAL  DEFAULT     1 <core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt
  1174 0000000000010670    64 FUNC    LOCAL  DEFAULT     1 <core::fmt::Error as core::fmt::Debug>::fmt
  1175 000000000000c1b8   144 FUNC    LOCAL  DEFAULT     1 core::panicking::panic
  1176 00000000000100c0   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt
  1177 000000000000e7e8   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_end_index_len_fail
  1178 000000000000c248   224 FUNC    LOCAL  DEFAULT     1 core::panicking::panic_bounds_check
  1179 000000000000c328    96 FUNC    LOCAL  DEFAULT     1 core::panicking::panic_fmt
  1180 000000000000e268    48 FUNC    LOCAL  DEFAULT     1 <str as core::fmt::Display>::fmt
  1181 000000000000fd98   808 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt
  1182 000000000000e8c8   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_index_order_fail
  1183 000000000000e708   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_start_index_len_fail
  1184 000000000000d840  2600 FUNC    LOCAL  DEFAULT     1 <str as core::fmt::Debug>::fmt
  1185 000000000000b850    64 FUNC    LOCAL  DEFAULT     1 <core::cell::BorrowError as core::fmt::Debug>::fmt
  1186 000000000000e298  1136 FUNC    LOCAL  DEFAULT     1 <char as core::fmt::Debug>::fmt
  1187 000000000000d140  1584 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad
  1188 00000000000107b0   864 FUNC    LOCAL  DEFAULT     1 core::unicode::unicode_data::grapheme_extend::lookup
  1189 000000000000e9a8  1872 FUNC    LOCAL  DEFAULT     1 core::str::slice_error_fail
  1190 000000000000c958  1832 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral
  1191 000000000000f408   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::LowerHex for i8>::fmt
  1192 000000000000f578   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::UpperHex for i8>::fmt
  1193 000000000000d770    48 FUNC    LOCAL  DEFAULT     1 <core::fmt::Formatter as core::fmt::Write>::write_str
  1194 000000000000d7a0    96 FUNC    LOCAL  DEFAULT     1 <core::fmt::Formatter as core::fmt::Write>::write_fmt
  1195 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.103
  1196 0000000000010b10    16 FUNC    LOCAL  HIDDEN      1 __adddf3
  1197 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.130
  1198 0000000000010bf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_7
  1199 0000000000010bd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1200 0000000000010be8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
  1201 0000000000010b20   216 FUNC    LOCAL  HIDDEN      1 __fixunsdfdi
  1202 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.14
  1203 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.165
  1204 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.167
  1205 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.181
  1206 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.200
  1207 0000000000010d00     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_9
  1208 0000000000010cc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1209 0000000000010cf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_8
  1210 0000000000010bf8   288 FUNC    LOCAL  HIDDEN      1 __gtdf2
  1211 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.27
  1212 0000000000010e20     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_9
  1213 0000000000010de8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1214 0000000000010e18     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_8
  1215 0000000000010d18   288 FUNC    LOCAL  HIDDEN      1 __gedf2
  1216 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.3
  1217 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.39
  1218 0000000000010e38    16 FUNC    LOCAL  HIDDEN      1 __muldf3
  1219 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.164
  1220 0000000000011020     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_3
  1221 0000000000010f18     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_2
  1222 0000000000010fb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_23
  1223 00000000000110a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_24
  1224 0000000000011000     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_26
  1225 00000000000110b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_25
  1226 0000000000011260     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_35
  1227 00000000000110f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_5
  1228 0000000000011078     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_7
  1229 0000000000011120     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_6
  1230 0000000000011188     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_28
  1231 00000000000111f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_30
  1232 0000000000011140     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_9
  1233 0000000000011268     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_8
  1234 0000000000011250     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_32
  1235 0000000000011238     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_33
  1236 0000000000011258     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_34
  1237 0000000000011278     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_13
  1238 00000000000112c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_11
  1239 0000000000011310     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_17
  1240 00000000000114b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_20
  1241 0000000000011478     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_19
  1242 0000000000011618     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_22
  1243 0000000000010e48  2048 FUNC    LOCAL  HIDDEN      1 compiler_builtins::float::mul::__muldf3
  1244 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.55
  1245 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.58
  1246 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.71
  1247 0000000000011740     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_2
  1248 00000000000116f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
  1249 00000000000116a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1250 0000000000011750     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
  1251 00000000000116f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_7
  1252 0000000000011850     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
  1253 0000000000011818     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_6
  1254 00000000000117e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_5
  1255 0000000000011868     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_3
  1256 0000000000011820     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_7
  1257 0000000000011990     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_2
  1258 0000000000011920     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_7
  1259 00000000000118e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_4
  1260 0000000000011918     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_6
  1261 00000000000119c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_12
  1262 0000000000011940     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_10
  1263 0000000000011930     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_9
  1264 0000000000011760   280 FUNC    LOCAL  HIDDEN      1 memset
  1265 0000000000011878   352 FUNC    LOCAL  HIDDEN      1 memcmp
  1266 0000000000011648   280 FUNC    LOCAL  HIDDEN      1 memcpy
  1267 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.8
  1268 0000000000011ed0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_18
  1269 0000000000011a48     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_2
  1270 0000000000011a60     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_4
  1271 0000000000011a70     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_6
  1272 0000000000011ad0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_7
  1273 0000000000011c60     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_10
  1274 0000000000011c38     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_9
  1275 0000000000011e08     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_14
  1276 0000000000011de0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_13
  1277 0000000000011f20     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_21
  1278 0000000000011e58     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_15
  1279 0000000000011e70     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_16
  1280 0000000000011fd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_26
  1281 0000000000012190     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_29
  1282 0000000000011fb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_25
  1283 0000000000011ef8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_20
  1284 00000000000122e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_38
  1285 0000000000012358     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_42
  1286 0000000000011f88     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_24
  1287 00000000000121b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_30
  1288 00000000000121e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_31
  1289 00000000000121f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_32
  1290 0000000000012260     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_35
  1291 0000000000012238     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_34
  1292 0000000000012348     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_40
  1293 00000000000122d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_37
  1294 0000000000012350     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_41
  1295 0000000000012308     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_39
  1296 0000000000012368     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_44
  1297 0000000000012360     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_43
  1298 0000000000012398     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_47
  1299 00000000000119d8  2528 FUNC    LOCAL  HIDDEN      1 compiler_builtins::float::add::__adddf3
  1300 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.81
  1301 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.87
  1302 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.95
  1303 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS divdi3.c
  1304 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS floatundidf.c
  1305 00000000000123b8   136 FUNC    LOCAL  HIDDEN      1 __floatundidf
  1306 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS floatundisf.c
  1307 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS lshrti3.c
  1308 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS muloti4.c
  1309 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS multi3.c
  1310 0000000000012440   296 FUNC    LOCAL  HIDDEN      1 __multi3
  1311 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivmoddi4.c
  1312 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivti3.c
  1313 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivmodti4.c
  1314 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS umodti3.c
  1315 00000000000140d8     0 NOTYPE  LOCAL  HIDDEN      4 _DYNAMIC
  1316 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
  1317 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
  1318 00000000000019e8 12536 FUNC    GLOBAL DEFAULT     1 entrypoint
  1319 0000000000004cc0   280 FUNC    GLOBAL DEFAULT     1 custom_panic
  1320 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memset_
  1321 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_try_find_program_address
  1322 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_invoke_signed_rust
  1323 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_get_rent_sysvar
  1324 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
  1325 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcmp_
There are no section groups in this file.

/Volumes/d/dev/mp/projects/breakpoint/tictactoe/program/target/bpfel-unknown-unknown/release/tictactoe.so	file format elf64-bpf

Disassembly of section .text

0000000000000120 <core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>>
      36	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      37	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB0_3>
      38	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
      39	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB0_3>
      40	b7 03 00 00 01 00 00 00	r3 = 0x1
      41	85 10 00 00 f7 0b 00 00	call 0xbf7 ; <__rust_dealloc>

0000000000000150 <LBB0_3>
      42	95 00 00 00 00 00 00 00	exit

0000000000000158 <core::ptr::drop_in_place<&u8>>
      43	95 00 00 00 00 00 00 00	exit

0000000000000160 <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
      44	bf 16 00 00 00 00 00 00	r6 = r1
      45	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
      46	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      47	07 02 00 00 ff ff ff ff	r2 += -0x1
      48	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      49	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_3>
      50	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      51	07 02 00 00 ff ff ff ff	r2 += -0x1
      52	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      53	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_3>
      54	b7 02 00 00 20 00 00 00	r2 = 0x20
      55	b7 03 00 00 08 00 00 00	r3 = 0x8
      56	85 10 00 00 e8 0b 00 00	call 0xbe8 ; <__rust_dealloc>

00000000000001c8 <LBB2_3>
      57	79 61 10 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x10)
      58	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      59	07 02 00 00 ff ff ff ff	r2 += -0x1
      60	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      61	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_6>
      62	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      63	07 02 00 00 ff ff ff ff	r2 += -0x1
      64	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      65	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_6>
      66	b7 02 00 00 28 00 00 00	r2 = 0x28
      67	b7 03 00 00 08 00 00 00	r3 = 0x8
      68	85 10 00 00 dc 0b 00 00	call 0xbdc ; <__rust_dealloc>

0000000000000228 <LBB2_6>
      69	79 61 38 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x38)
      70	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      71	07 02 00 00 ff ff ff ff	r2 += -0x1
      72	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      73	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_9>
      74	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      75	07 02 00 00 ff ff ff ff	r2 += -0x1
      76	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      77	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_9>
      78	b7 02 00 00 20 00 00 00	r2 = 0x20
      79	b7 03 00 00 08 00 00 00	r3 = 0x8
      80	85 10 00 00 d0 0b 00 00	call 0xbd0 ; <__rust_dealloc>

0000000000000288 <LBB2_9>
      81	79 61 40 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x40)
      82	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      83	07 02 00 00 ff ff ff ff	r2 += -0x1
      84	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      85	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_12>
      86	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      87	07 02 00 00 ff ff ff ff	r2 += -0x1
      88	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      89	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_12>
      90	b7 02 00 00 28 00 00 00	r2 = 0x28
      91	b7 03 00 00 08 00 00 00	r3 = 0x8
      92	85 10 00 00 c4 0b 00 00	call 0xbc4 ; <__rust_dealloc>

00000000000002e8 <LBB2_12>
      93	95 00 00 00 00 00 00 00	exit

00000000000002f0 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
      94	bf 16 00 00 00 00 00 00	r6 = r1
      95	bf 24 00 00 00 00 00 00	r4 = r2
      96	0f 34 00 00 00 00 00 00	r4 += r3
      97	b7 01 00 00 01 00 00 00	r1 = 0x1
      98	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB10_2>
      99	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000320 <LBB10_2>
     100	57 01 00 00 01 00 00 00	r1 &= 0x1
     101	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB10_12>
     102	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
     103	bf 17 00 00 00 00 00 00	r7 = r1
     104	67 07 00 00 01 00 00 00	r7 <<= 0x1
     105	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB10_5>
     106	bf 47 00 00 00 00 00 00	r7 = r4

0000000000000358 <LBB10_5>
     107	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB10_7>
     108	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000000368 <LBB10_7>
     109	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB10_9>
     110	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
     111	b7 03 00 00 01 00 00 00	r3 = 0x1
     112	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
     113	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     114	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
     115	05 00 02 00 00 00 00 00	goto +0x2 <LBB10_10>

00000000000003a0 <LBB10_9>
     116	b7 01 00 00 00 00 00 00	r1 = 0x0
     117	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

00000000000003b0 <LBB10_10>
     118	bf a1 00 00 00 00 00 00	r1 = r10
     119	07 01 00 00 d0 ff ff ff	r1 += -0x30
     120	bf a4 00 00 00 00 00 00	r4 = r10
     121	07 04 00 00 e8 ff ff ff	r4 += -0x18
     122	bf 72 00 00 00 00 00 00	r2 = r7
     123	b7 03 00 00 01 00 00 00	r3 = 0x1
     124	85 10 00 00 39 00 00 00	call 0x39 ; <alloc::raw_vec::finish_grow>
     125	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     126	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB10_14>
     127	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     128	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB10_13>

0000000000000408 <LBB10_12>
     129	85 10 00 00 85 15 00 00	call 0x1585 ; <alloc::raw_vec::capacity_overflow>
     130	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000418 <LBB10_14>
     131	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     132	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     133	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     134	95 00 00 00 00 00 00 00	exit

0000000000000438 <LBB10_13>
     135	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     136	85 10 00 00 85 15 00 00	call 0x1585 ; <alloc::alloc::handle_alloc_error>
     137	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000450 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
     138	bf 16 00 00 00 00 00 00	r6 = r1
     139	bf 23 00 00 00 00 00 00	r3 = r2
     140	07 03 00 00 01 00 00 00	r3 += 0x1
     141	b7 01 00 00 01 00 00 00	r1 = 0x1
     142	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB11_2>
     143	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000480 <LBB11_2>
     144	57 01 00 00 01 00 00 00	r1 &= 0x1
     145	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB11_12>
     146	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
     147	bf 17 00 00 00 00 00 00	r7 = r1
     148	67 07 00 00 01 00 00 00	r7 <<= 0x1
     149	2d 37 01 00 00 00 00 00	if r7 > r3 goto +0x1 <LBB11_5>
     150	bf 37 00 00 00 00 00 00	r7 = r3

00000000000004b8 <LBB11_5>
     151	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB11_7>
     152	b7 07 00 00 08 00 00 00	r7 = 0x8

00000000000004c8 <LBB11_7>
     153	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB11_9>
     154	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
     155	b7 03 00 00 01 00 00 00	r3 = 0x1
     156	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
     157	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     158	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
     159	05 00 02 00 00 00 00 00	goto +0x2 <LBB11_10>

0000000000000500 <LBB11_9>
     160	b7 01 00 00 00 00 00 00	r1 = 0x0
     161	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

0000000000000510 <LBB11_10>
     162	bf a1 00 00 00 00 00 00	r1 = r10
     163	07 01 00 00 d0 ff ff ff	r1 += -0x30
     164	bf a4 00 00 00 00 00 00	r4 = r10
     165	07 04 00 00 e8 ff ff ff	r4 += -0x18
     166	bf 72 00 00 00 00 00 00	r2 = r7
     167	b7 03 00 00 01 00 00 00	r3 = 0x1
     168	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
     169	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     170	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB11_14>
     171	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     172	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB11_13>

0000000000000568 <LBB11_12>
     173	85 10 00 00 59 15 00 00	call 0x1559 ; <alloc::raw_vec::capacity_overflow>
     174	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000578 <LBB11_14>
     175	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     176	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     177	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     178	95 00 00 00 00 00 00 00	exit

0000000000000598 <LBB11_13>
     179	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     180	85 10 00 00 59 15 00 00	call 0x1559 ; <alloc::alloc::handle_alloc_error>
     181	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000005b0 <alloc::raw_vec::finish_grow>
     182	bf 38 00 00 00 00 00 00	r8 = r3
     183	bf 27 00 00 00 00 00 00	r7 = r2
     184	bf 16 00 00 00 00 00 00	r6 = r1
     185	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB13_12>
     186	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     187	b7 01 00 00 01 00 00 00	r1 = 0x1
     188	b7 07 00 00 00 00 00 00	r7 = 0x0
     189	05 00 1d 00 00 00 00 00	goto +0x1d <LBB13_2>

00000000000005f0 <LBB13_12>
     190	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
     191	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB13_7>
     192	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
     193	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB13_6>
     194	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB13_9>
     195	bf 71 00 00 00 00 00 00	r1 = r7
     196	bf 82 00 00 00 00 00 00	r2 = r8
     197	85 10 00 00 59 0b 00 00	call 0xb59 ; <__rust_alloc>
     198	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB13_11>
     199	05 00 11 00 00 00 00 00	goto +0x11 <LBB13_10>

0000000000000640 <LBB13_6>
     200	bf 83 00 00 00 00 00 00	r3 = r8
     201	bf 74 00 00 00 00 00 00	r4 = r7
     202	85 10 00 00 58 0b 00 00	call 0xb58 ; <__rust_realloc>
     203	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB13_11>
     204	05 00 0c 00 00 00 00 00	goto +0xc <LBB13_10>

0000000000000668 <LBB13_7>
     205	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB13_9>
     206	bf 71 00 00 00 00 00 00	r1 = r7
     207	bf 82 00 00 00 00 00 00	r2 = r8
     208	85 10 00 00 4e 0b 00 00	call 0xb4e ; <__rust_alloc>
     209	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB13_11>
     210	05 00 06 00 00 00 00 00	goto +0x6 <LBB13_10>

0000000000000698 <LBB13_11>
     211	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     212	b7 01 00 00 01 00 00 00	r1 = 0x1
     213	bf 87 00 00 00 00 00 00	r7 = r8
     214	05 00 04 00 00 00 00 00	goto +0x4 <LBB13_2>

00000000000006b8 <LBB13_9>
     215	b7 07 00 00 00 00 00 00	r7 = 0x0
     216	bf 80 00 00 00 00 00 00	r0 = r8

00000000000006c8 <LBB13_10>
     217	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
     218	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000006d8 <LBB13_2>
     219	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     220	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
     221	95 00 00 00 00 00 00 00	exit

00000000000006f0 <tictactoe::instructions::PlayerMove::process>
     222	bf 47 00 00 00 00 00 00	r7 = r4
     223	bf 16 00 00 00 00 00 00	r6 = r1
     224	b7 01 00 00 b1 c7 71 00	r1 = 0x71c7b1
     225	71 24 01 00 00 00 00 00	r4 = *(u8 *)(r2 + 0x1)
     226	25 04 27 00 08 00 00 00	if r4 > 0x8 goto +0x27 <LBB14_7>
     227	bf 78 00 00 00 00 00 00	r8 = r7
     228	0f 48 00 00 00 00 00 00	r8 += r4
     229	71 84 40 00 00 00 00 00	r4 = *(u8 *)(r8 + 0x40)
     230	55 04 23 00 00 00 00 00	if r4 != 0x0 goto +0x23 <LBB14_7>
     231	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
     232	71 29 00 00 00 00 00 00	r9 = *(u8 *)(r2 + 0x0)
     233	bf 92 00 00 00 00 00 00	r2 = r9
     234	55 02 14 00 01 00 00 00	if r2 != 0x1 goto +0x14 <LBB14_5>
     235	bf 72 00 00 00 00 00 00	r2 = r7
     236	b7 03 00 00 20 00 00 00	r3 = 0x20
     237	85 10 00 00 21 22 00 00	call 0x2221 ; <memcmp>
     238	b7 01 00 00 ac c7 71 00	r1 = 0x71c7ac
     239	67 00 00 00 20 00 00 00	r0 <<= 0x20
     240	77 00 00 00 20 00 00 00	r0 >>= 0x20
     241	55 00 18 00 00 00 00 00	if r0 != 0x0 goto +0x18 <LBB14_7>
     242	b7 01 00 00 b2 c7 71 00	r1 = 0x71c7b2
     243	71 72 4a 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x4a)
     244	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB14_9>
     245	05 00 14 00 00 00 00 00	goto +0x14 <LBB14_7>

00000000000007b0 <LBB14_9>
     246	07 08 00 00 40 00 00 00	r8 += 0x40
     247	73 98 00 00 00 00 00 00	*(u8 *)(r8 + 0x0) = r9
     248	71 71 40 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x40)
     249	55 01 14 00 00 00 00 00	if r1 != 0x0 goto +0x14 <LBB14_11>

00000000000007d0 <LBB14_10>
     250	71 71 4a 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x4a)
     251	a7 01 00 00 01 00 00 00	r1 ^= 0x1
     252	73 17 4a 00 00 00 00 00	*(u8 *)(r7 + 0x4a) = r1
     253	b7 01 00 00 14 00 00 00	r1 = 0x14
     254	05 00 0d 00 00 00 00 00	goto +0xd <LBB14_8>

00000000000007f8 <LBB14_5>
     255	bf 72 00 00 00 00 00 00	r2 = r7
     256	07 02 00 00 20 00 00 00	r2 += 0x20
     257	b7 03 00 00 20 00 00 00	r3 = 0x20
     258	85 10 00 00 0c 22 00 00	call 0x220c ; <memcmp>
     259	b7 01 00 00 ac c7 71 00	r1 = 0x71c7ac
     260	67 00 00 00 20 00 00 00	r0 <<= 0x20
     261	77 00 00 00 20 00 00 00	r0 >>= 0x20
     262	55 00 03 00 00 00 00 00	if r0 != 0x0 goto +0x3 <LBB14_7>
     263	b7 01 00 00 b2 c7 71 00	r1 = 0x71c7b2
     264	71 72 4a 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x4a)
     265	15 02 ec ff 01 00 00 00	if r2 == 0x1 goto -0x14 <LBB14_9>

0000000000000850 <LBB14_7>
     266	63 16 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r1
     267	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000860 <LBB14_8>
     268	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
     269	95 00 00 00 00 00 00 00	exit

0000000000000870 <LBB14_11>
     270	71 71 41 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x41)
     271	15 01 ea ff 00 00 00 00	if r1 == 0x0 goto -0x16 <LBB14_10>
     272	71 71 42 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x42)
     273	15 01 e8 ff 00 00 00 00	if r1 == 0x0 goto -0x18 <LBB14_10>
     274	71 71 43 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x43)
     275	15 01 e6 ff 00 00 00 00	if r1 == 0x0 goto -0x1a <LBB14_10>
     276	71 71 44 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x44)
     277	15 01 e4 ff 00 00 00 00	if r1 == 0x0 goto -0x1c <LBB14_10>
     278	71 71 45 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x45)
     279	15 01 e2 ff 00 00 00 00	if r1 == 0x0 goto -0x1e <LBB14_10>
     280	71 71 46 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x46)
     281	15 01 e0 ff 00 00 00 00	if r1 == 0x0 goto -0x20 <LBB14_10>
     282	71 71 47 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x47)
     283	15 01 de ff 00 00 00 00	if r1 == 0x0 goto -0x22 <LBB14_10>
     284	71 71 48 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x48)
     285	15 01 dc ff 00 00 00 00	if r1 == 0x0 goto -0x24 <LBB14_10>
     286	b7 01 00 00 03 00 00 00	r1 = 0x3
     287	73 17 49 00 00 00 00 00	*(u8 *)(r7 + 0x49) = r1
     288	b7 01 00 00 14 00 00 00	r1 = 0x14
     289	05 00 ea ff 00 00 00 00	goto -0x16 <LBB14_8>

0000000000000910 <<tictactoe::accounts::GameState as core::fmt::Debug>::fmt>
     290	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
     291	65 01 06 00 01 00 00 00	if r1 s> 0x1 goto +0x6 <LBB18_3>
     292	15 01 0b 00 00 00 00 00	if r1 == 0x0 goto +0xb <LBB18_5>
     293	bf 21 00 00 00 00 00 00	r1 = r2
     294	18 02 00 00 a0 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x126a0 ll
     296	b7 03 00 00 12 00 00 00	r3 = 0x12
     297	05 00 0f 00 00 00 00 00	goto +0xf <LBB18_7>

0000000000000950 <LBB18_3>
     298	15 01 0a 00 02 00 00 00	if r1 == 0x2 goto +0xa <LBB18_6>
     299	bf 21 00 00 00 00 00 00	r1 = r2
     300	18 02 00 00 88 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x12688 ll
     302	b7 03 00 00 08 00 00 00	r3 = 0x8
     303	05 00 09 00 00 00 00 00	goto +0x9 <LBB18_7>

0000000000000980 <LBB18_5>
     304	bf 21 00 00 00 00 00 00	r1 = r2
     305	18 02 00 00 b2 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x126b2 ll
     307	b7 03 00 00 0d 00 00 00	r3 = 0xd
     308	05 00 04 00 00 00 00 00	goto +0x4 <LBB18_7>

00000000000009a8 <LBB18_6>
     309	bf 21 00 00 00 00 00 00	r1 = r2
     310	18 02 00 00 9c 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x1269c ll
     312	b7 03 00 00 04 00 00 00	r3 = 0x4

00000000000009c8 <LBB18_7>
     313	85 10 00 00 b4 19 00 00	call 0x19b4 ; <<core::fmt::Formatter as core::fmt::Write>::write_str>
     314	95 00 00 00 00 00 00 00	exit

00000000000009d8 <<tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize>
     315	bf 16 00 00 00 00 00 00	r6 = r1
     316	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
     317	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB19_5>
     318	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     319	b7 02 00 00 01 00 00 00	r2 = 0x1
     320	85 10 00 00 de 0a 00 00	call 0xade ; <__rust_alloc>
     321	bf 07 00 00 00 00 00 00	r7 = r0
     322	55 07 2d 00 00 00 00 00	if r7 != 0x0 goto +0x2d <LBB19_3>
     323	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     324	b7 02 00 00 01 00 00 00	r2 = 0x1
     325	85 10 00 00 c8 14 00 00	call 0x14c8 ; <alloc::alloc::handle_alloc_error>
     326	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000a38 <LBB19_5>
     327	07 03 00 00 ff ff ff ff	r3 += -0x1
     328	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
     329	71 41 00 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x0)
     330	7b 32 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r3
     331	07 04 00 00 01 00 00 00	r4 += 0x1
     332	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
     333	73 1a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r1
     334	b7 02 00 00 04 00 00 00	r2 = 0x4
     335	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB19_11>
     336	05 00 04 00 00 00 00 00	goto +0x4 <LBB19_7>

0000000000000a88 <LBB19_11>
     337	b7 02 00 00 00 00 00 00	r2 = 0x0
     338	73 26 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r2
     339	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
     340	05 00 52 00 00 00 00 00	goto +0x52 <LBB19_10>

0000000000000aa8 <LBB19_7>
     341	bf a1 00 00 00 00 00 00	r1 = r10
     342	07 01 00 00 f0 ff ff ff	r1 += -0x10
     343	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     344	b7 01 00 00 00 00 00 00	r1 = 0x0
     345	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     346	b7 07 00 00 01 00 00 00	r7 = 0x1
     347	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
     348	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
     349	18 01 00 00 b0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ab0 ll
     351	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     352	18 01 00 00 38 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6038 ll
     354	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     355	bf a1 00 00 00 00 00 00	r1 = r10
     356	07 01 00 00 a7 ff ff ff	r1 += -0x59
     357	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     358	bf a1 00 00 00 00 00 00	r1 = r10
     359	07 01 00 00 a8 ff ff ff	r1 += -0x58
     360	bf a2 00 00 00 00 00 00	r2 = r10
     361	07 02 00 00 c0 ff ff ff	r2 += -0x40
     362	85 10 00 00 ab 14 00 00	call 0x14ab ; <alloc::fmt::format>
     363	b7 01 00 00 18 00 00 00	r1 = 0x18
     364	b7 02 00 00 08 00 00 00	r2 = 0x8
     365	85 10 00 00 b1 0a 00 00	call 0xab1 ; <__rust_alloc>
     366	55 00 26 00 00 00 00 00	if r0 != 0x0 goto +0x26 <LBB19_9>
     367	05 00 0f 00 00 00 00 00	goto +0xf <LBB19_4>

0000000000000b80 <LBB19_3>
     368	b7 01 00 00 75 74 00 00	r1 = 0x7475
     369	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     370	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     372	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     373	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     375	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     376	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     378	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     379	b7 01 00 00 18 00 00 00	r1 = 0x18
     380	b7 02 00 00 08 00 00 00	r2 = 0x8
     381	85 10 00 00 a1 0a 00 00	call 0xaa1 ; <__rust_alloc>
     382	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB19_6>

0000000000000bf8 <LBB19_4>
     383	b7 01 00 00 18 00 00 00	r1 = 0x18
     384	b7 02 00 00 08 00 00 00	r2 = 0x8
     385	85 10 00 00 8c 14 00 00	call 0x148c ; <alloc::alloc::handle_alloc_error>
     386	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000c18 <LBB19_6>
     387	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     388	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     389	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     390	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     391	bf a1 00 00 00 00 00 00	r1 = r10
     392	07 01 00 00 80 ff ff ff	r1 += -0x80
     393	b7 02 00 00 14 00 00 00	r2 = 0x14
     394	bf 03 00 00 00 00 00 00	r3 = r0
     395	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
     397	85 10 00 00 5c 13 00 00	call 0x135c ; <std::io::error::Error::_new>
     398	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     399	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
     400	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     401	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     402	b7 01 00 00 01 00 00 00	r1 = 0x1
     403	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     404	05 00 12 00 00 00 00 00	goto +0x12 <LBB19_10>

0000000000000ca8 <LBB19_9>
     405	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     406	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     407	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     408	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     409	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     410	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
     411	bf a1 00 00 00 00 00 00	r1 = r10
     412	07 01 00 00 90 ff ff ff	r1 += -0x70
     413	b7 02 00 00 14 00 00 00	r2 = 0x14
     414	bf 03 00 00 00 00 00 00	r3 = r0
     415	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
     417	85 10 00 00 48 13 00 00	call 0x1348 ; <std::io::error::Error::_new>
     418	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
     419	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
     420	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     421	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     422	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

0000000000000d38 <LBB19_10>
     423	95 00 00 00 00 00 00 00	exit

0000000000000d40 <<tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize>
     424	bf 16 00 00 00 00 00 00	r6 = r1
     425	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
     426	55 01 09 00 00 00 00 00	if r1 != 0x0 goto +0x9 <LBB21_5>
     427	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     428	b7 02 00 00 01 00 00 00	r2 = 0x1
     429	85 10 00 00 71 0a 00 00	call 0xa71 ; <__rust_alloc>
     430	bf 07 00 00 00 00 00 00	r7 = r0
     431	55 07 2a 00 00 00 00 00	if r7 != 0x0 goto +0x2a <LBB21_3>
     432	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     433	b7 02 00 00 01 00 00 00	r2 = 0x1
     434	85 10 00 00 5b 14 00 00	call 0x145b ; <alloc::alloc::handle_alloc_error>
     435	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000da0 <LBB21_5>
     436	07 01 00 00 ff ff ff ff	r1 += -0x1
     437	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
     438	71 43 00 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x0)
     439	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
     440	07 04 00 00 01 00 00 00	r4 += 0x1
     441	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
     442	b7 01 00 00 00 00 00 00	r1 = 0x0
     443	73 3a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r3
     444	b7 02 00 00 00 00 00 00	r2 = 0x0
     445	15 03 42 00 00 00 00 00	if r3 == 0x0 goto +0x42 <LBB21_13>
     446	15 03 40 00 01 00 00 00	if r3 == 0x1 goto +0x40 <LBB21_12>
     447	bf a1 00 00 00 00 00 00	r1 = r10
     448	07 01 00 00 f0 ff ff ff	r1 += -0x10
     449	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     450	b7 01 00 00 00 00 00 00	r1 = 0x0
     451	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     452	b7 07 00 00 01 00 00 00	r7 = 0x1
     453	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
     454	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
     455	18 01 00 00 b0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ab0 ll
     457	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     458	18 01 00 00 38 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6038 ll
     460	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     461	bf a1 00 00 00 00 00 00	r1 = r10
     462	07 01 00 00 a7 ff ff ff	r1 += -0x59
     463	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     464	bf a1 00 00 00 00 00 00	r1 = r10
     465	07 01 00 00 a8 ff ff ff	r1 += -0x58
     466	bf a2 00 00 00 00 00 00	r2 = r10
     467	07 02 00 00 c0 ff ff ff	r2 += -0x40
     468	85 10 00 00 41 14 00 00	call 0x1441 ; <alloc::fmt::format>
     469	b7 01 00 00 18 00 00 00	r1 = 0x18
     470	b7 02 00 00 08 00 00 00	r2 = 0x8
     471	85 10 00 00 47 0a 00 00	call 0xa47 ; <__rust_alloc>
     472	55 00 2a 00 00 00 00 00	if r0 != 0x0 goto +0x2a <LBB21_9>
     473	05 00 0f 00 00 00 00 00	goto +0xf <LBB21_4>

0000000000000ed0 <LBB21_3>
     474	b7 01 00 00 75 74 00 00	r1 = 0x7475
     475	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     476	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     478	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     479	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     481	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     482	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     484	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     485	b7 01 00 00 18 00 00 00	r1 = 0x18
     486	b7 02 00 00 08 00 00 00	r2 = 0x8
     487	85 10 00 00 37 0a 00 00	call 0xa37 ; <__rust_alloc>
     488	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB21_10>

0000000000000f48 <LBB21_4>
     489	b7 01 00 00 18 00 00 00	r1 = 0x18
     490	b7 02 00 00 08 00 00 00	r2 = 0x8
     491	85 10 00 00 22 14 00 00	call 0x1422 ; <alloc::alloc::handle_alloc_error>
     492	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000f68 <LBB21_10>
     493	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     494	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     495	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     496	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     497	bf a1 00 00 00 00 00 00	r1 = r10
     498	07 01 00 00 80 ff ff ff	r1 += -0x80
     499	b7 02 00 00 14 00 00 00	r2 = 0x14
     500	bf 03 00 00 00 00 00 00	r3 = r0
     501	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
     503	85 10 00 00 f2 12 00 00	call 0x12f2 ; <std::io::error::Error::_new>
     504	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     505	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
     506	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     507	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     508	b7 01 00 00 01 00 00 00	r1 = 0x1
     509	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     510	05 00 16 00 00 00 00 00	goto +0x16 <LBB21_11>

0000000000000ff8 <LBB21_12>
     511	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000001000 <LBB21_13>
     512	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     513	73 26 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r2
     514	05 00 12 00 00 00 00 00	goto +0x12 <LBB21_11>

0000000000001018 <LBB21_9>
     515	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     516	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     517	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     518	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     519	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     520	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
     521	bf a1 00 00 00 00 00 00	r1 = r10
     522	07 01 00 00 90 ff ff ff	r1 += -0x70
     523	b7 02 00 00 14 00 00 00	r2 = 0x14
     524	bf 03 00 00 00 00 00 00	r3 = r0
     525	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
     527	85 10 00 00 da 12 00 00	call 0x12da ; <std::io::error::Error::_new>
     528	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
     529	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
     530	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     531	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     532	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

00000000000010a8 <LBB21_11>
     533	95 00 00 00 00 00 00 00	exit

00000000000010b0 <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
     534	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
     535	79 38 00 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x0)
     536	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
     537	79 39 08 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x8)
     538	b7 07 00 00 20 00 00 00	r7 = 0x20
     539	bf 96 00 00 00 00 00 00	r6 = r9
     540	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_2>
     541	b7 06 00 00 20 00 00 00	r6 = 0x20

00000000000010f0 <LBB23_2>
     542	bf 81 00 00 00 00 00 00	r1 = r8
     543	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
     544	bf 63 00 00 00 00 00 00	r3 = r6
     545	85 10 00 00 a7 20 00 00	call 0x20a7 ; <memcpy>
     546	b7 01 00 00 02 17 00 00	r1 = 0x1702
     547	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_4>
     548	b7 01 00 00 04 17 00 00	r1 = 0x1704

0000000000001128 <LBB23_4>
     549	0f 68 00 00 00 00 00 00	r8 += r6
     550	1f 69 00 00 00 00 00 00	r9 -= r6
     551	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
     552	7b 92 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r9
     553	7b 82 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r8
     554	bf 12 00 00 00 00 00 00	r2 = r1
     555	57 02 00 00 06 00 00 00	r2 &= 0x6
     556	55 02 14 00 04 00 00 00	if r2 != 0x4 goto +0x14 <LBB23_10>
     557	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     558	07 02 00 00 20 00 00 00	r2 += 0x20
     559	b7 07 00 00 20 00 00 00	r7 = 0x20
     560	bf 96 00 00 00 00 00 00	r6 = r9
     561	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_7>
     562	b7 06 00 00 20 00 00 00	r6 = 0x20

0000000000001198 <LBB23_7>
     563	bf 81 00 00 00 00 00 00	r1 = r8
     564	bf 63 00 00 00 00 00 00	r3 = r6
     565	85 10 00 00 93 20 00 00	call 0x2093 ; <memcpy>
     566	b7 01 00 00 02 17 00 00	r1 = 0x1702
     567	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_9>
     568	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000011c8 <LBB23_9>
     569	0f 68 00 00 00 00 00 00	r8 += r6
     570	1f 69 00 00 00 00 00 00	r9 -= r6
     571	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
     572	7b 92 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r9
     573	7b 82 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r8
     574	bf 12 00 00 00 00 00 00	r2 = r1
     575	57 02 00 00 06 00 00 00	r2 &= 0x6
     576	15 02 14 00 04 00 00 00	if r2 == 0x4 goto +0x14 <LBB23_12>

0000000000001208 <LBB23_10>
     577	18 02 00 00 b8 3b 01 00 00 00 00 00 00 00 00 00	r2 = 0x13bb8 ll
     579	bf 13 00 00 00 00 00 00	r3 = r1
     580	77 03 00 00 08 00 00 00	r3 >>= 0x8
     581	18 04 00 00 b8 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13bb8 ll
     583	67 04 00 00 38 00 00 00	r4 <<= 0x38
     584	4f 43 00 00 00 00 00 00	r3 |= r4
     585	77 02 00 00 08 00 00 00	r2 >>= 0x8
     586	79 a5 e8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x18)

0000000000001258 <LBB23_11>
     587	57 01 00 00 ff 00 00 00	r1 &= 0xff
     588	bf 34 00 00 00 00 00 00	r4 = r3
     589	67 04 00 00 08 00 00 00	r4 <<= 0x8
     590	4f 14 00 00 00 00 00 00	r4 |= r1
     591	7b 45 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r4
     592	77 03 00 00 38 00 00 00	r3 >>= 0x38
     593	67 02 00 00 08 00 00 00	r2 <<= 0x8
     594	4f 32 00 00 00 00 00 00	r2 |= r3
     595	7b 25 08 00 00 00 00 00	*(u64 *)(r5 + 0x8) = r2
     596	95 00 00 00 00 00 00 00	exit

00000000000012a8 <LBB23_12>
     597	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     598	07 02 00 00 40 00 00 00	r2 += 0x40
     599	b7 07 00 00 09 00 00 00	r7 = 0x9
     600	bf 96 00 00 00 00 00 00	r6 = r9
     601	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_14>
     602	b7 06 00 00 09 00 00 00	r6 = 0x9

00000000000012d8 <LBB23_14>
     603	bf 81 00 00 00 00 00 00	r1 = r8
     604	bf 63 00 00 00 00 00 00	r3 = r6
     605	85 10 00 00 6b 20 00 00	call 0x206b ; <memcpy>
     606	b7 01 00 00 02 17 00 00	r1 = 0x1702
     607	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_16>
     608	b7 01 00 00 04 17 00 00	r1 = 0x1704

0000000000001308 <LBB23_16>
     609	0f 68 00 00 00 00 00 00	r8 += r6
     610	1f 69 00 00 00 00 00 00	r9 -= r6
     611	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)
     612	7b 97 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r9
     613	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     614	bf 12 00 00 00 00 00 00	r2 = r1
     615	57 02 00 00 06 00 00 00	r2 &= 0x6
     616	15 02 01 00 04 00 00 00	if r2 == 0x4 goto +0x1 <LBB23_17>
     617	05 00 d7 ff 00 00 00 00	goto -0x29 <LBB23_10>

0000000000001350 <LBB23_17>
     618	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     619	71 11 49 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x49)
     620	73 1a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r1
     621	b7 06 00 00 01 00 00 00	r6 = 0x1
     622	55 09 01 00 00 00 00 00	if r9 != 0x0 goto +0x1 <LBB23_19>
     623	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000001380 <LBB23_19>
     624	bf a2 00 00 00 00 00 00	r2 = r10
     625	07 02 00 00 fe ff ff ff	r2 += -0x2
     626	bf 81 00 00 00 00 00 00	r1 = r8
     627	bf 63 00 00 00 00 00 00	r3 = r6
     628	85 10 00 00 54 20 00 00	call 0x2054 ; <memcpy>
     629	b7 01 00 00 02 17 00 00	r1 = 0x1702
     630	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB23_21>
     631	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000013c0 <LBB23_21>
     632	0f 68 00 00 00 00 00 00	r8 += r6
     633	1f 69 00 00 00 00 00 00	r9 -= r6
     634	7b 97 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r9
     635	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     636	bf 12 00 00 00 00 00 00	r2 = r1
     637	57 02 00 00 06 00 00 00	r2 &= 0x6
     638	15 02 01 00 04 00 00 00	if r2 == 0x4 goto +0x1 <LBB23_23>
     639	05 00 c1 ff 00 00 00 00	goto -0x3f <LBB23_10>

0000000000001400 <LBB23_23>
     640	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     641	71 12 4a 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x4a)
     642	b7 06 00 00 01 00 00 00	r6 = 0x1
     643	b7 01 00 00 01 00 00 00	r1 = 0x1
     644	15 02 01 00 01 00 00 00	if r2 == 0x1 goto +0x1 <LBB23_25>
     645	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000001430 <LBB23_25>
     646	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r1
     647	55 09 01 00 00 00 00 00	if r9 != 0x0 goto +0x1 <LBB23_27>
     648	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000001448 <LBB23_27>
     649	bf a2 00 00 00 00 00 00	r2 = r10
     650	07 02 00 00 ff ff ff ff	r2 += -0x1
     651	bf 81 00 00 00 00 00 00	r1 = r8
     652	bf 63 00 00 00 00 00 00	r3 = r6
     653	85 10 00 00 3b 20 00 00	call 0x203b ; <memcpy>
     654	0f 68 00 00 00 00 00 00	r8 += r6
     655	bf 91 00 00 00 00 00 00	r1 = r9
     656	1f 61 00 00 00 00 00 00	r1 -= r6
     657	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     658	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     659	b7 01 00 00 02 17 00 00	r1 = 0x1702
     660	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB23_29>
     661	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000014b0 <LBB23_29>
     662	bf 12 00 00 00 00 00 00	r2 = r1
     663	57 02 00 00 06 00 00 00	r2 &= 0x6
     664	79 a5 e8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x18)
     665	55 02 02 00 04 00 00 00	if r2 != 0x4 goto +0x2 <LBB23_31>
     666	b7 01 00 00 04 00 00 00	r1 = 0x4
     667	05 00 af ff 00 00 00 00	goto -0x51 <LBB23_11>

00000000000014e0 <LBB23_31>
     668	18 02 00 00 b8 3b 01 00 00 00 00 00 00 00 00 00	r2 = 0x13bb8 ll
     670	bf 13 00 00 00 00 00 00	r3 = r1
     671	77 03 00 00 08 00 00 00	r3 >>= 0x8
     672	18 04 00 00 b8 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13bb8 ll
     674	67 04 00 00 38 00 00 00	r4 <<= 0x38
     675	4f 43 00 00 00 00 00 00	r3 |= r4
     676	77 02 00 00 08 00 00 00	r2 >>= 0x8
     677	05 00 a5 ff 00 00 00 00	goto -0x5b <LBB23_11>

0000000000001530 <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
     678	bf 27 00 00 00 00 00 00	r7 = r2
     679	bf 16 00 00 00 00 00 00	r6 = r1
     680	bf a1 00 00 00 00 00 00	r1 = r10
     681	07 01 00 00 d0 ff ff ff	r1 += -0x30
     682	85 10 00 00 06 11 00 00	call 0x1106 ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
     683	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     684	15 01 3a 00 01 00 00 00	if r1 == 0x1 goto +0x3a <LBB24_11>
     685	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2c)
     686	63 1a b3 ff 00 00 00 00	*(u32 *)(r10 - 0x4d) = r1
     687	61 a1 d1 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2f)
     688	63 1a b0 ff 00 00 00 00	*(u32 *)(r10 - 0x50) = r1
     689	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     690	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
     691	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x10)
     692	73 1a a8 ff 00 00 00 00	*(u8 *)(r10 - 0x58) = r1
     693	79 a9 e0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x20)
     694	79 a8 d8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x28)
     695	bf a1 00 00 00 00 00 00	r1 = r10
     696	07 01 00 00 d0 ff ff ff	r1 += -0x30
     697	bf 72 00 00 00 00 00 00	r2 = r7
     698	85 10 00 00 f6 10 00 00	call 0x10f6 ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
     699	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     700	15 01 2a 00 01 00 00 00	if r1 == 0x1 goto +0x2a <LBB24_11>
     701	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2c)
     702	63 1a cb ff 00 00 00 00	*(u32 *)(r10 - 0x35) = r1
     703	61 a1 d1 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2f)
     704	63 1a c8 ff 00 00 00 00	*(u32 *)(r10 - 0x38) = r1
     705	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     706	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
     707	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x10)
     708	73 1a c0 ff 00 00 00 00	*(u8 *)(r10 - 0x40) = r1
     709	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
     710	25 01 09 00 08 00 00 00	if r1 > 0x8 goto +0x9 <LBB24_7>
     711	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     712	b7 02 00 00 01 00 00 00	r2 = 0x1
     713	85 10 00 00 55 09 00 00	call 0x955 ; <__rust_alloc>
     714	bf 07 00 00 00 00 00 00	r7 = r0
     715	55 07 22 00 00 00 00 00	if r7 != 0x0 goto +0x22 <LBB24_5>
     716	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     717	b7 02 00 00 01 00 00 00	r2 = 0x1
     718	85 10 00 00 3f 13 00 00	call 0x133f ; <alloc::alloc::handle_alloc_error>
     719	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001680 <LBB24_7>
     720	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     721	7b 2a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r2
     722	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
     723	7b 2a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r2
     724	07 01 00 00 f7 ff ff ff	r1 += -0x9
     725	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     726	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
     727	bf 12 00 00 00 00 00 00	r2 = r1
     728	07 02 00 00 09 00 00 00	r2 += 0x9
     729	7b 27 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r2
     730	69 12 07 00 00 00 00 00	r2 = *(u16 *)(r1 + 0x7)
     731	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
     732	61 12 03 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x3)
     733	63 2a fb ff 00 00 00 00	*(u32 *)(r10 - 0x5) = r2
     734	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
     735	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 0x8) = r1
     736	bf a1 00 00 00 00 00 00	r1 = r10
     737	07 01 00 00 d0 ff ff ff	r1 += -0x30
     738	bf 72 00 00 00 00 00 00	r2 = r7
     739	85 10 00 00 57 fe ff ff	call -0x1a9 ; <<tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize>
     740	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     741	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB24_11>
     742	05 00 28 00 00 00 00 00	goto +0x28 <LBB24_9>

0000000000001738 <LBB24_11>
     743	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     744	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)

0000000000001748 <LBB24_12>
     745	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     746	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     747	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000001760 <LBB24_13>
     748	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     749	95 00 00 00 00 00 00 00	exit

0000000000001770 <LBB24_5>
     750	b7 01 00 00 75 74 00 00	r1 = 0x7475
     751	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     752	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     754	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     755	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     757	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     758	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     760	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     761	b7 01 00 00 18 00 00 00	r1 = 0x18
     762	b7 02 00 00 08 00 00 00	r2 = 0x8
     763	85 10 00 00 23 09 00 00	call 0x923 ; <__rust_alloc>
     764	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB24_8>
     765	b7 01 00 00 18 00 00 00	r1 = 0x18
     766	b7 02 00 00 08 00 00 00	r2 = 0x8
     767	85 10 00 00 0e 13 00 00	call 0x130e ; <alloc::alloc::handle_alloc_error>
     768	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001808 <LBB24_8>
     769	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     770	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     771	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     772	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     773	bf a1 00 00 00 00 00 00	r1 = r10
     774	07 01 00 00 88 ff ff ff	r1 += -0x78
     775	b7 02 00 00 14 00 00 00	r2 = 0x14
     776	bf 03 00 00 00 00 00 00	r3 = r0
     777	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
     779	85 10 00 00 de 11 00 00	call 0x11de ; <std::io::error::Error::_new>
     780	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
     781	79 a2 90 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x70)
     782	05 00 da ff 00 00 00 00	goto -0x26 <LBB24_12>

0000000000001878 <LBB24_9>
     783	71 a1 d1 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x2f)
     784	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
     785	bf a1 00 00 00 00 00 00	r1 = r10
     786	07 01 00 00 d0 ff ff ff	r1 += -0x30
     787	bf 72 00 00 00 00 00 00	r2 = r7
     788	85 10 00 00 93 fe ff ff	call -0x16d ; <<tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize>
     789	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     790	15 01 d0 ff 01 00 00 00	if r1 == 0x1 goto -0x30 <LBB24_11>
     791	71 a1 d1 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x2f)
     792	71 a2 a8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x58)
     793	73 26 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r2
     794	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
     795	7b 26 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r2
     796	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
     797	7b 26 38 00 00 00 00 00	*(u64 *)(r6 + 0x38) = r2
     798	71 a2 c0 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x40)
     799	73 26 40 00 00 00 00 00	*(u8 *)(r6 + 0x40) = r2
     800	61 a2 f8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x8)
     801	63 2a 98 ff 00 00 00 00	*(u32 *)(r10 - 0x68) = r2
     802	61 a2 fb ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x5)
     803	63 2a 9b ff 00 00 00 00	*(u32 *)(r10 - 0x65) = r2
     804	61 a2 b0 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x50)
     805	61 a3 b3 ff 00 00 00 00	r3 = *(u32 *)(r10 - 0x4d)
     806	7b 96 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r9
     807	7b 86 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r8
     808	63 36 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r3
     809	63 26 01 00 00 00 00 00	*(u32 *)(r6 + 0x1) = r2
     810	61 a2 cb ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x35)
     811	61 a3 c8 ff 00 00 00 00	r3 = *(u32 *)(r10 - 0x38)
     812	79 a4 70 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x90)
     813	7b 46 30 00 00 00 00 00	*(u64 *)(r6 + 0x30) = r4
     814	79 a4 78 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x88)
     815	7b 46 28 00 00 00 00 00	*(u64 *)(r6 + 0x28) = r4
     816	63 36 21 00 00 00 00 00	*(u32 *)(r6 + 0x21) = r3
     817	63 26 24 00 00 00 00 00	*(u32 *)(r6 + 0x24) = r2
     818	61 a2 98 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x68)
     819	63 26 41 00 00 00 00 00	*(u32 *)(r6 + 0x41) = r2
     820	61 a2 9b ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x65)
     821	63 26 44 00 00 00 00 00	*(u32 *)(r6 + 0x44) = r2
     822	73 16 4b 00 00 00 00 00	*(u8 *)(r6 + 0x4b) = r1
     823	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
     824	73 16 4a 00 00 00 00 00	*(u8 *)(r6 + 0x4a) = r1
     825	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     826	6b 16 48 00 00 00 00 00	*(u16 *)(r6 + 0x48) = r1
     827	b7 01 00 00 00 00 00 00	r1 = 0x0
     828	05 00 af ff 00 00 00 00	goto -0x51 <LBB24_13>

00000000000019e8 <entrypoint>
     829	bf 12 00 00 00 00 00 00	r2 = r1
     830	bf a1 00 00 00 00 00 00	r1 = r10
     831	07 01 00 00 00 ff ff ff	r1 += -0x100
     832	85 10 00 00 d5 09 00 00	call 0x9d5 ; <solana_program::entrypoint::deserialize>
     833	79 a9 18 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xe8)
     834	79 a6 10 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xf0)
     835	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
     836	7b 1a 78 fd 00 00 00 00	*(u64 *)(r10 - 0x288) = r1
     837	79 a8 00 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x100)
     838	79 a1 20 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe0)
     839	79 a2 28 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xd8)
     840	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
     841	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     842	bf a1 00 00 00 00 00 00	r1 = r10
     843	07 01 00 00 00 ff ff ff	r1 += -0x100
     844	bf a2 00 00 00 00 00 00	r2 = r10
     845	07 02 00 00 c8 ff ff ff	r2 += -0x38
     846	85 10 00 00 c6 06 00 00	call 0x6c6 ; <<tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize>
     847	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
     848	15 01 0f 00 01 00 00 00	if r1 == 0x1 goto +0xf <LBB25_4>
     849	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
     850	7b 1a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r1
     851	69 a1 20 ff 00 00 00 00	r1 = *(u16 *)(r10 - 0xe0)
     852	6b 1a 38 fe 00 00 00 00	*(u16 *)(r10 - 0x1c8) = r1
     853	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     854	15 01 47 00 00 00 00 00	if r1 == 0x0 goto +0x47 <LBB25_20>
     855	b7 01 00 00 12 00 00 00	r1 = 0x12
     856	b7 02 00 00 01 00 00 00	r2 = 0x1
     857	85 10 00 00 c5 08 00 00	call 0x8c5 ; <__rust_alloc>
     858	bf 08 00 00 00 00 00 00	r8 = r0
     859	55 08 07 00 00 00 00 00	if r8 != 0x0 goto +0x7 <LBB25_5>
     860	b7 01 00 00 12 00 00 00	r1 = 0x12
     861	b7 02 00 00 01 00 00 00	r2 = 0x1
     862	85 10 00 00 af 12 00 00	call 0x12af ; <alloc::alloc::handle_alloc_error>
     863	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001b00 <LBB25_4>
     864	79 a3 10 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xf0)
     865	79 a2 08 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf8)
     866	05 00 1d 00 00 00 00 00	goto +0x1d <LBB25_8>

0000000000001b18 <LBB25_5>
     867	b7 01 00 00 61 64 00 00	r1 = 0x6461
     868	6b 18 10 00 00 00 00 00	*(u16 *)(r8 + 0x10) = r1
     869	18 01 00 00 62 79 74 65 00 00 00 00 73 20 72 65	r1 = 0x6572207365747962 ll
     871	7b 18 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r1
     872	18 01 00 00 4e 6f 74 20 00 00 00 00 61 6c 6c 20	r1 = 0x206c6c6120746f4e ll
     874	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
     875	b7 01 00 00 18 00 00 00	r1 = 0x18
     876	b7 02 00 00 08 00 00 00	r2 = 0x8
     877	85 10 00 00 b1 08 00 00	call 0x8b1 ; <__rust_alloc>
     878	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB25_7>
     879	b7 01 00 00 18 00 00 00	r1 = 0x18
     880	b7 02 00 00 08 00 00 00	r2 = 0x8
     881	85 10 00 00 9c 12 00 00	call 0x129c ; <alloc::alloc::handle_alloc_error>
     882	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001b98 <LBB25_7>
     883	b7 01 00 00 12 00 00 00	r1 = 0x12
     884	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     885	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     886	7b 80 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r8
     887	bf a1 00 00 00 00 00 00	r1 = r10
     888	07 01 00 00 d0 fd ff ff	r1 += -0x230
     889	b7 02 00 00 15 00 00 00	r2 = 0x15
     890	bf 03 00 00 00 00 00 00	r3 = r0
     891	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
     893	85 10 00 00 6c 11 00 00	call 0x116c ; <std::io::error::Error::_new>
     894	79 a3 d8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x228)
     895	79 a2 d0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x230)

0000000000001c00 <LBB25_8>
     896	bf a1 00 00 00 00 00 00	r1 = r10
     897	07 01 00 00 e0 fd ff ff	r1 += -0x220
     898	85 10 00 00 0c 0f 00 00	call 0xf0c ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>

0000000000001c18 <LBB25_9>
     899	61 a8 e0 fd 00 00 00 00	r8 = *(u32 *)(r10 - 0x220)
     900	15 08 0f 00 14 00 00 00	if r8 == 0x14 goto +0xf <LBB25_15>
     901	79 a1 e8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x218)
     902	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     903	79 a1 f0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x210)
     904	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     905	79 a1 f8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x208)
     906	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
     907	61 a7 e4 fd 00 00 00 00	r7 = *(u32 *)(r10 - 0x21c)
     908	65 08 0a 00 09 00 00 00	if r8 s> 0x9 goto +0xa <LBB25_16>
     909	65 08 9f 00 04 00 00 00	if r8 s> 0x4 goto +0x9f <LBB25_33>
     910	65 08 aa 00 01 00 00 00	if r8 s> 0x1 goto +0xaa <LBB25_39>
     911	15 08 6c 01 00 00 00 00	if r8 == 0x0 goto +0x16c <LBB25_69>
     912	18 01 00 00 c1 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129c1 ll
     914	b7 02 00 00 16 00 00 00	r2 = 0x16
     915	05 00 bc 01 00 00 00 00	goto +0x1bc <LBB25_84>

0000000000001ca0 <LBB25_15>
     916	b7 08 00 00 00 00 00 00	r8 = 0x0
     917	15 09 d2 01 00 00 00 00	if r9 == 0x0 goto +0x1d2 <LBB25_91>
     918	05 00 ca 01 00 00 00 00	goto +0x1ca <LBB25_86>

0000000000001cb8 <LBB25_16>
     919	65 08 9b 00 0e 00 00 00	if r8 s> 0xe goto +0x9b <LBB25_36>
     920	65 08 a6 00 0b 00 00 00	if r8 s> 0xb goto +0xa6 <LBB25_42>
     921	15 08 87 01 0a 00 00 00	if r8 == 0xa goto +0x187 <LBB25_72>
     922	18 01 00 00 91 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12891 ll
     924	b7 02 00 00 1a 00 00 00	r2 = 0x1a
     925	05 00 b2 01 00 00 00 00	goto +0x1b2 <LBB25_84>

0000000000001cf0 <LBB25_20>
     926	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
     927	79 a5 08 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0xf8)
     928	61 a4 04 ff 00 00 00 00	r4 = *(u32 *)(r10 - 0xfc)
     929	71 a3 03 ff 00 00 00 00	r3 = *(u8 *)(r10 - 0xfd)
     930	71 a2 02 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0xfe)
     931	71 a0 01 ff 00 00 00 00	r0 = *(u8 *)(r10 - 0xff)
     932	79 a7 30 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x1d0)
     933	7b 7a 00 fe 00 00 00 00	*(u64 *)(r10 - 0x200) = r7
     934	69 a7 38 fe 00 00 00 00	r7 = *(u16 *)(r10 - 0x1c8)
     935	6b 7a 08 fe 00 00 00 00	*(u16 *)(r10 - 0x1f8) = r7
     936	15 00 e1 00 00 00 00 00	if r0 == 0x0 goto +0xe1 <LBB25_59>
     937	15 00 a7 00 01 00 00 00	if r0 == 0x1 goto +0xa7 <LBB25_51>
     938	73 3a 11 fe 00 00 00 00	*(u8 *)(r10 - 0x1ef) = r3
     939	73 2a 10 fe 00 00 00 00	*(u8 *)(r10 - 0x1f0) = r2
     940	b7 01 00 00 01 00 00 00	r1 = 0x1
     941	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
     942	bf a1 00 00 00 00 00 00	r1 = r10
     943	07 01 00 00 c8 ff ff ff	r1 += -0x38
     944	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
     945	b7 01 00 00 00 00 00 00	r1 = 0x0
     946	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
     947	b7 01 00 00 02 00 00 00	r1 = 0x2
     948	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
     949	18 01 00 00 50 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a50 ll
     951	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
     952	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
     954	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     955	bf a1 00 00 00 00 00 00	r1 = r10
     956	07 01 00 00 90 ff ff ff	r1 += -0x70
     957	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     958	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
     959	bf a1 00 00 00 00 00 00	r1 = r10
     960	07 01 00 00 b0 fe ff ff	r1 += -0x150
     961	bf a2 00 00 00 00 00 00	r2 = r10
     962	07 02 00 00 00 ff ff ff	r2 += -0x100
     963	85 10 00 00 52 12 00 00	call 0x1252 ; <alloc::fmt::format>
     964	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
     965	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
     966	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
     967	bf 71 00 00 00 00 00 00	r1 = r7
     968	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
     969	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB25_25>
     970	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB25_25>
     971	bf 71 00 00 00 00 00 00	r1 = r7
     972	bf 82 00 00 00 00 00 00	r2 = r8
     973	b7 03 00 00 01 00 00 00	r3 = 0x1
     974	85 10 00 00 52 08 00 00	call 0x852 ; <__rust_dealloc>

0000000000001e78 <LBB25_25>
     975	15 09 29 01 00 00 00 00	if r9 == 0x0 goto +0x129 <LBB25_68>
     976	15 09 28 01 01 00 00 00	if r9 == 0x1 goto +0x128 <LBB25_68>
     977	79 a8 78 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x288)
     978	07 08 00 00 30 00 00 00	r8 += 0x30
     979	bf a1 00 00 00 00 00 00	r1 = r10
     980	07 01 00 00 00 ff ff ff	r1 += -0x100
     981	bf 82 00 00 00 00 00 00	r2 = r8
     982	85 10 00 00 8d 08 00 00	call 0x88d ; <solana_program::account_info::AccountInfo::try_borrow_data>
     983	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
     984	15 01 a8 00 01 00 00 00	if r1 == 0x1 goto +0xa8 <LBB25_58>
     985	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
     986	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
     987	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
     988	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
     989	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
     990	7b 2a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r2
     991	bf a1 00 00 00 00 00 00	r1 = r10
     992	07 01 00 00 00 ff ff ff	r1 += -0x100
     993	bf a2 00 00 00 00 00 00	r2 = r10
     994	07 02 00 00 30 fe ff ff	r2 += -0x1d0
     995	85 10 00 00 c2 fe ff ff	call -0x13e ; <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
     996	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
     997	15 01 0d 02 01 00 00 00	if r1 == 0x1 goto +0x20d <LBB25_108>
     998	61 a1 04 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xfc)
     999	63 1a b3 fe 00 00 00 00	*(u32 *)(r10 - 0x14d) = r1
    1000	61 a1 01 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xff)
    1001	63 1a b0 fe 00 00 00 00	*(u32 *)(r10 - 0x150) = r1
    1002	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1003	7b 1a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r1
    1004	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1005	7b 1a 68 fd 00 00 00 00	*(u64 *)(r10 - 0x298) = r1
    1006	bf a1 00 00 00 00 00 00	r1 = r10
    1007	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1008	7b 1a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r1
    1009	bf a2 00 00 00 00 00 00	r2 = r10
    1010	07 02 00 00 18 ff ff ff	r2 += -0xe8
    1011	b7 03 00 00 34 00 00 00	r3 = 0x34
    1012	85 10 00 00 d4 1e 00 00	call 0x1ed4 ; <memcpy>
    1013	7b 7a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r7
    1014	bf a7 00 00 00 00 00 00	r7 = r10
    1015	07 07 00 00 90 ff ff ff	r7 += -0x70
    1016	bf 71 00 00 00 00 00 00	r1 = r7
    1017	79 a2 58 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a8)
    1018	b7 03 00 00 34 00 00 00	r3 = 0x34
    1019	85 10 00 00 cd 1e 00 00	call 0x1ecd ; <memcpy>
    1020	bf a1 00 00 00 00 00 00	r1 = r10
    1021	07 01 00 00 c7 fe ff ff	r1 += -0x139
    1022	bf 72 00 00 00 00 00 00	r2 = r7
    1023	b7 03 00 00 34 00 00 00	r3 = 0x34
    1024	85 10 00 00 c8 1e 00 00	call 0x1ec8 ; <memcpy>
    1025	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1026	7b 1a bf fe 00 00 00 00	*(u64 *)(r10 - 0x141) = r1
    1027	79 a1 70 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x290)
    1028	7b 1a b7 fe 00 00 00 00	*(u64 *)(r10 - 0x149) = r1
    1029	79 a2 60 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a0)
    1030	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    1031	07 01 00 00 ff ff ff ff	r1 += -0x1
    1032	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    1033	bf a1 00 00 00 00 00 00	r1 = r10
    1034	07 01 00 00 00 ff ff ff	r1 += -0x100
    1035	bf a2 00 00 00 00 00 00	r2 = r10
    1036	07 02 00 00 10 fe ff ff	r2 += -0x1f0
    1037	bf a4 00 00 00 00 00 00	r4 = r10
    1038	07 04 00 00 b0 fe ff ff	r4 += -0x150
    1039	79 a3 78 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x288)
    1040	85 10 00 00 cd fc ff ff	call -0x333 ; <tictactoe::instructions::PlayerMove::process>
    1041	61 a1 00 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x100)
    1042	15 01 01 00 14 00 00 00	if r1 == 0x14 goto +0x1 <LBB25_30>
    1043	05 00 e8 01 00 00 00 00	goto +0x1e8 <LBB25_110>

00000000000020a0 <LBB25_30>
    1044	bf a1 00 00 00 00 00 00	r1 = r10
    1045	07 01 00 00 00 ff ff ff	r1 += -0x100
    1046	bf 82 00 00 00 00 00 00	r2 = r8
    1047	85 10 00 00 5f 08 00 00	call 0x85f ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1048	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1049	15 01 67 00 01 00 00 00	if r1 == 0x1 goto +0x67 <LBB25_58>
    1050	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1051	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1052	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1053	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1054	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1055	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    1056	bf a1 00 00 00 00 00 00	r1 = r10
    1057	07 01 00 00 c0 fd ff ff	r1 += -0x240
    1058	bf a2 00 00 00 00 00 00	r2 = r10
    1059	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1060	bf a3 00 00 00 00 00 00	r3 = r10
    1061	07 03 00 00 c8 ff ff ff	r3 += -0x38
    1062	85 10 00 00 ef fd ff ff	call -0x211 ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1063	79 a2 c0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x240)
    1064	bf 21 00 00 00 00 00 00	r1 = r2
    1065	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1066	15 01 58 03 04 00 00 00	if r1 == 0x4 goto +0x358 <LBB25_162>
    1067	79 a3 c8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x238)
    1068	05 00 11 05 00 00 00 00	goto +0x511 <LBB25_251>

0000000000002168 <LBB25_33>
    1069	65 08 17 00 06 00 00 00	if r8 s> 0x6 goto +0x17 <LBB25_45>
    1070	15 08 f6 00 05 00 00 00	if r8 == 0x5 goto +0xf6 <LBB25_73>
    1071	18 01 00 00 40 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12940 ll
    1073	b7 02 00 00 19 00 00 00	r2 = 0x19
    1074	05 00 1d 01 00 00 00 00	goto +0x11d <LBB25_84>

0000000000002198 <LBB25_36>
    1075	65 08 17 00 10 00 00 00	if r8 s> 0x10 goto +0x17 <LBB25_48>
    1076	15 08 f4 00 0f 00 00 00	if r8 == 0xf goto +0xf4 <LBB25_74>
    1077	18 01 00 00 1c 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x1281c ll
    1079	b7 02 00 00 18 00 00 00	r2 = 0x18
    1080	05 00 17 01 00 00 00 00	goto +0x117 <LBB25_84>

00000000000021c8 <LBB25_39>
    1081	15 08 f3 00 02 00 00 00	if r8 == 0x2 goto +0xf3 <LBB25_75>
    1082	15 08 f6 00 03 00 00 00	if r8 == 0x3 goto +0xf6 <LBB25_76>
    1083	18 01 00 00 71 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12971 ll
    1085	b7 02 00 00 1a 00 00 00	r2 = 0x1a
    1086	05 00 11 01 00 00 00 00	goto +0x111 <LBB25_84>

00000000000021f8 <LBB25_42>
    1087	15 08 f5 00 0c 00 00 00	if r8 == 0xc goto +0xf5 <LBB25_77>
    1088	15 08 f8 00 0d 00 00 00	if r8 == 0xd goto +0xf8 <LBB25_78>
    1089	18 01 00 00 4f 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x1284f ll
    1091	b7 02 00 00 13 00 00 00	r2 = 0x13
    1092	05 00 0b 01 00 00 00 00	goto +0x10b <LBB25_84>

0000000000002228 <LBB25_45>
    1093	15 08 f7 00 07 00 00 00	if r8 == 0x7 goto +0xf7 <LBB25_79>
    1094	15 08 fa 00 08 00 00 00	if r8 == 0x8 goto +0xfa <LBB25_80>
    1095	18 01 00 00 c6 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128c6 ll
    1097	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1098	05 00 05 01 00 00 00 00	goto +0x105 <LBB25_84>

0000000000002258 <LBB25_48>
    1099	15 08 f9 00 11 00 00 00	if r8 == 0x11 goto +0xf9 <LBB25_81>
    1100	15 08 fc 00 12 00 00 00	if r8 == 0x12 goto +0xfc <LBB25_82>
    1101	18 01 00 00 d2 27 01 00 00 00 00 00 00 00 00 00	r1 = 0x127d2 ll
    1103	b7 02 00 00 15 00 00 00	r2 = 0x15
    1104	05 00 ff 00 00 00 00 00	goto +0xff <LBB25_84>

0000000000002288 <LBB25_51>
    1105	b7 01 00 00 01 00 00 00	r1 = 0x1
    1106	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1107	bf a1 00 00 00 00 00 00	r1 = r10
    1108	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1109	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1110	b7 01 00 00 00 00 00 00	r1 = 0x0
    1111	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1112	b7 01 00 00 02 00 00 00	r1 = 0x2
    1113	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1114	18 01 00 00 30 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a30 ll
    1116	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1117	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    1119	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1120	bf a1 00 00 00 00 00 00	r1 = r10
    1121	07 01 00 00 90 ff ff ff	r1 += -0x70
    1122	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1123	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
    1124	bf a1 00 00 00 00 00 00	r1 = r10
    1125	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1126	bf a2 00 00 00 00 00 00	r2 = r10
    1127	07 02 00 00 00 ff ff ff	r2 += -0x100
    1128	85 10 00 00 ad 11 00 00	call 0x11ad ; <alloc::fmt::format>
    1129	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1130	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1131	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1132	bf 71 00 00 00 00 00 00	r1 = r7
    1133	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1134	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB25_54>
    1135	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB25_54>
    1136	bf 71 00 00 00 00 00 00	r1 = r7
    1137	bf 82 00 00 00 00 00 00	r2 = r8
    1138	b7 03 00 00 01 00 00 00	r3 = 0x1
    1139	85 10 00 00 ad 07 00 00	call 0x7ad ; <__rust_dealloc>

00000000000023a0 <LBB25_54>
    1140	15 09 84 00 00 00 00 00	if r9 == 0x0 goto +0x84 <LBB25_68>
    1141	15 09 83 00 01 00 00 00	if r9 == 0x1 goto +0x83 <LBB25_68>
    1142	79 a8 78 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x288)
    1143	71 81 28 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x28)
    1144	15 01 1e 01 00 00 00 00	if r1 == 0x0 goto +0x11e <LBB25_101>
    1145	07 08 00 00 30 00 00 00	r8 += 0x30
    1146	bf a1 00 00 00 00 00 00	r1 = r10
    1147	07 01 00 00 00 ff ff ff	r1 += -0x100
    1148	bf 82 00 00 00 00 00 00	r2 = r8
    1149	85 10 00 00 e6 07 00 00	call 0x7e6 ; <solana_program::account_info::AccountInfo::try_borrow_data>
    1150	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1151	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB25_58>
    1152	05 00 1a 01 00 00 00 00	goto +0x11a <LBB25_102>

0000000000002408 <LBB25_58>
    1153	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    1154	7b 1a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r1
    1155	79 a1 20 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe0)
    1156	7b 1a f8 fd 00 00 00 00	*(u64 *)(r10 - 0x208) = r1
    1157	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1158	7b 1a e8 fd 00 00 00 00	*(u64 *)(r10 - 0x218) = r1
    1159	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1160	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1161	05 00 f9 fe 00 00 00 00	goto -0x107 <LBB25_9>

0000000000002450 <LBB25_59>
    1162	7b 8a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r8
    1163	7b 5a 16 fe 00 00 00 00	*(u64 *)(r10 - 0x1ea) = r5
    1164	63 4a 12 fe 00 00 00 00	*(u32 *)(r10 - 0x1ee) = r4
    1165	73 3a 11 fe 00 00 00 00	*(u8 *)(r10 - 0x1ef) = r3
    1166	73 2a 10 fe 00 00 00 00	*(u8 *)(r10 - 0x1f0) = r2
    1167	79 a2 00 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x200)
    1168	7b 2a 26 fe 00 00 00 00	*(u64 *)(r10 - 0x1da) = r2
    1169	69 a2 08 fe 00 00 00 00	r2 = *(u16 *)(r10 - 0x1f8)
    1170	6b 2a 2e fe 00 00 00 00	*(u16 *)(r10 - 0x1d2) = r2
    1171	7b 1a 1e fe 00 00 00 00	*(u64 *)(r10 - 0x1e2) = r1
    1172	b7 01 00 00 01 00 00 00	r1 = 0x1
    1173	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1174	bf a1 00 00 00 00 00 00	r1 = r10
    1175	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1176	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1177	b7 01 00 00 00 00 00 00	r1 = 0x0
    1178	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1179	b7 01 00 00 02 00 00 00	r1 = 0x2
    1180	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1181	18 01 00 00 10 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a10 ll
    1183	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1184	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    1186	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1187	bf a1 00 00 00 00 00 00	r1 = r10
    1188	07 01 00 00 90 ff ff ff	r1 += -0x70
    1189	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1190	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
    1191	bf a1 00 00 00 00 00 00	r1 = r10
    1192	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1193	bf a2 00 00 00 00 00 00	r2 = r10
    1194	07 02 00 00 00 ff ff ff	r2 += -0x100
    1195	85 10 00 00 6a 11 00 00	call 0x116a ; <alloc::fmt::format>
    1196	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1197	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1198	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1199	bf 71 00 00 00 00 00 00	r1 = r7
    1200	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1201	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB25_62>
    1202	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB25_62>
    1203	bf 71 00 00 00 00 00 00	r1 = r7
    1204	bf 82 00 00 00 00 00 00	r2 = r8
    1205	b7 03 00 00 01 00 00 00	r3 = 0x1
    1206	85 10 00 00 6a 07 00 00	call 0x76a ; <__rust_dealloc>

00000000000025b8 <LBB25_62>
    1207	15 09 41 00 00 00 00 00	if r9 == 0x0 goto +0x41 <LBB25_68>
    1208	15 09 40 00 01 00 00 00	if r9 == 0x1 goto +0x40 <LBB25_68>
    1209	15 09 3f 00 02 00 00 00	if r9 == 0x2 goto +0x3f <LBB25_68>
    1210	79 a8 78 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x288)
    1211	71 81 28 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x28)
    1212	15 01 da 00 00 00 00 00	if r1 == 0x0 goto +0xda <LBB25_101>
    1213	07 08 00 00 30 00 00 00	r8 += 0x30
    1214	18 01 00 00 bd 81 54 33 00 00 00 00 5c 4a 83 27	r1 = 0x27834a5c335481bd ll
    1216	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1217	18 01 00 00 35 47 77 69 00 00 00 00 da 47 43 0c	r1 = 0xc4347da69774735 ll
    1219	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1220	18 01 00 00 76 13 de 53 00 00 00 00 0b 69 2a 87	r1 = -0x78d596f4ac21ec8a ll
    1222	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1223	18 01 00 00 da 07 5c b2 00 00 00 00 ff 5e c6 81	r1 = -0x7e39a1004da3f826 ll
    1225	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1226	bf a1 00 00 00 00 00 00	r1 = r10
    1227	07 01 00 00 a0 fd ff ff	r1 += -0x260
    1228	bf a2 00 00 00 00 00 00	r2 = r10
    1229	07 02 00 00 10 fe ff ff	r2 += -0x1f0
    1230	85 10 00 00 4b 09 00 00	call 0x94b ; <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    1231	b7 01 00 00 09 00 00 00	r1 = 0x9
    1232	7b 1a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r1
    1233	18 01 00 00 c5 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125c5 ll
    1235	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    1236	79 a1 a8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x258)
    1237	7b 1a c8 fe 00 00 00 00	*(u64 *)(r10 - 0x138) = r1
    1238	79 a1 a0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x260)
    1239	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1240	bf a1 00 00 00 00 00 00	r1 = r10
    1241	07 01 00 00 00 ff ff ff	r1 += -0x100
    1242	bf a2 00 00 00 00 00 00	r2 = r10
    1243	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1244	bf a4 00 00 00 00 00 00	r4 = r10
    1245	07 04 00 00 c8 ff ff ff	r4 += -0x38
    1246	b7 03 00 00 02 00 00 00	r3 = 0x2
    1247	85 10 00 00 dc 0d 00 00	call 0xddc ; <solana_program::pubkey::Pubkey::find_program_address>
    1248	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    1249	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    1250	79 a2 10 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf0)
    1251	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    1252	79 a3 08 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xf8)
    1253	7b 3a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r3
    1254	79 a4 00 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x100)
    1255	7b 4a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r4
    1256	71 a7 20 ff 00 00 00 00	r7 = *(u8 *)(r10 - 0xe0)
    1257	7b 1a 48 fe 00 00 00 00	*(u64 *)(r10 - 0x1b8) = r1
    1258	7b 2a 40 fe 00 00 00 00	*(u64 *)(r10 - 0x1c0) = r2
    1259	7b 3a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r3
    1260	7b 4a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r4
    1261	79 82 00 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x0)
    1262	bf a1 00 00 00 00 00 00	r1 = r10
    1263	07 01 00 00 30 fe ff ff	r1 += -0x1d0
    1264	b7 03 00 00 20 00 00 00	r3 = 0x20
    1265	85 10 00 00 1d 1e 00 00	call 0x1e1d ; <memcmp>
    1266	67 00 00 00 20 00 00 00	r0 <<= 0x20
    1267	77 00 00 00 20 00 00 00	r0 >>= 0x20
    1268	15 00 11 01 00 00 00 00	if r0 == 0x0 goto +0x111 <LBB25_111>
    1269	18 01 00 00 00 00 00 00 00 00 00 00 af c7 71 00	r1 = 0x71c7af00000000 ll
    1271	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1272	05 00 8a fe 00 00 00 00	goto -0x176 <LBB25_9>

00000000000027c8 <LBB25_68>
    1273	b7 01 00 00 0a 00 00 00	r1 = 0xa
    1274	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1275	05 00 87 fe 00 00 00 00	goto -0x179 <LBB25_9>

00000000000027e0 <LBB25_69>
    1276	bf 71 00 00 00 00 00 00	r1 = r7
    1277	07 01 00 00 54 38 8e ff	r1 += -0x71c7ac
    1278	67 01 00 00 20 00 00 00	r1 <<= 0x20
    1279	77 01 00 00 20 00 00 00	r1 >>= 0x20
    1280	b7 02 00 00 07 00 00 00	r2 = 0x7
    1281	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB25_70>
    1282	05 00 4a 00 00 00 00 00	goto +0x4a <LBB25_83>

0000000000002818 <LBB25_70>
    1283	63 7a 90 ff 00 00 00 00	*(u32 *)(r10 - 0x70) = r7
    1284	b7 01 00 00 00 00 00 00	r1 = 0x0
    1285	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1286	7b 1a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r1
    1287	b7 01 00 00 01 00 00 00	r1 = 0x1
    1288	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    1289	bf a1 00 00 00 00 00 00	r1 = r10
    1290	07 01 00 00 00 ff ff ff	r1 += -0x100
    1291	7b 1a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r1
    1292	bf a2 00 00 00 00 00 00	r2 = r10
    1293	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1294	18 03 00 00 c8 3b 01 00 00 00 00 00 00 00 00 00	r3 = 0x13bc8 ll
    1296	85 10 00 00 80 13 00 00	call 0x1380 ; <core::fmt::Formatter::new>
    1297	bf a1 00 00 00 00 00 00	r1 = r10
    1298	07 01 00 00 90 ff ff ff	r1 += -0x70
    1299	79 a2 70 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x290)
    1300	85 10 00 00 a6 04 00 00	call 0x4a6 ; <<tictactoe::error::TictactoeError as core::fmt::Display>::fmt>
    1301	15 00 77 00 00 00 00 00	if r0 == 0x0 goto +0x77 <LBB25_98>
    1302	bf a3 00 00 00 00 00 00	r3 = r10
    1303	07 03 00 00 30 fe ff ff	r3 += -0x1d0
    1304	18 01 00 00 01 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12a01 ll
    1306	b7 02 00 00 37 00 00 00	r2 = 0x37
    1307	18 04 00 00 10 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c10 ll
    1309	18 05 00 00 f8 3b 01 00 00 00 00 00 00 00 00 00	r5 = 0x13bf8 ll
    1311	85 10 00 00 51 13 00 00	call 0x1351 ; <core::result::unwrap_failed>
    1312	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002908 <LBB25_72>
    1313	18 01 00 00 ab 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128ab ll
    1315	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1316	05 00 2b 00 00 00 00 00	goto +0x2b <LBB25_84>

0000000000002928 <LBB25_73>
    1317	18 01 00 00 59 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12959 ll
    1319	b7 02 00 00 18 00 00 00	r2 = 0x18
    1320	05 00 27 00 00 00 00 00	goto +0x27 <LBB25_84>

0000000000002948 <LBB25_74>
    1321	18 01 00 00 34 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12834 ll
    1323	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1324	05 00 23 00 00 00 00 00	goto +0x23 <LBB25_84>

0000000000002968 <LBB25_75>
    1325	18 01 00 00 a4 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129a4 ll
    1327	b7 02 00 00 1d 00 00 00	r2 = 0x1d
    1328	05 00 1f 00 00 00 00 00	goto +0x1f <LBB25_84>

0000000000002988 <LBB25_76>
    1329	18 01 00 00 8b 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x1298b ll
    1331	b7 02 00 00 19 00 00 00	r2 = 0x19
    1332	05 00 1b 00 00 00 00 00	goto +0x1b <LBB25_84>

00000000000029a8 <LBB25_77>
    1333	18 01 00 00 75 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12875 ll
    1335	b7 02 00 00 1c 00 00 00	r2 = 0x1c
    1336	05 00 17 00 00 00 00 00	goto +0x17 <LBB25_84>

00000000000029c8 <LBB25_78>
    1337	18 01 00 00 62 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12862 ll
    1339	b7 02 00 00 13 00 00 00	r2 = 0x13
    1340	05 00 13 00 00 00 00 00	goto +0x13 <LBB25_84>

00000000000029e8 <LBB25_79>
    1341	18 01 00 00 21 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12921 ll
    1343	b7 02 00 00 1f 00 00 00	r2 = 0x1f
    1344	05 00 0f 00 00 00 00 00	goto +0xf <LBB25_84>

0000000000002a08 <LBB25_80>
    1345	18 01 00 00 e1 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128e1 ll
    1347	b7 02 00 00 20 00 00 00	r2 = 0x20
    1348	05 00 0b 00 00 00 00 00	goto +0xb <LBB25_84>

0000000000002a28 <LBB25_81>
    1349	18 01 00 00 09 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12809 ll
    1351	b7 02 00 00 13 00 00 00	r2 = 0x13
    1352	05 00 07 00 00 00 00 00	goto +0x7 <LBB25_84>

0000000000002a48 <LBB25_82>
    1353	18 01 00 00 e7 27 01 00 00 00 00 00 00 00 00 00	r1 = 0x127e7 ll
    1355	b7 02 00 00 22 00 00 00	r2 = 0x22
    1356	05 00 03 00 00 00 00 00	goto +0x3 <LBB25_84>

0000000000002a68 <LBB25_83>
    1357	18 01 00 00 d7 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129d7 ll
    1359	b7 02 00 00 0e 00 00 00	r2 = 0xe

0000000000002a80 <LBB25_84>
    1360	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_

0000000000002a88 <LBB25_85>
    1361	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    1362	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1363	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    1364	7b 2a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r2
    1365	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    1366	7b 3a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r3
    1367	63 7a 04 ff 00 00 00 00	*(u32 *)(r10 - 0xfc) = r7
    1368	63 8a 00 ff 00 00 00 00	*(u32 *)(r10 - 0x100) = r8
    1369	7b 3a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r3
    1370	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1371	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    1372	bf a1 00 00 00 00 00 00	r1 = r10
    1373	07 01 00 00 00 ff ff ff	r1 += -0x100
    1374	85 10 00 00 6e 0c 00 00	call 0xc6e ; <solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from>
    1375	bf 08 00 00 00 00 00 00	r8 = r0
    1376	15 09 07 00 00 00 00 00	if r9 == 0x0 goto +0x7 <LBB25_91>

0000000000002b08 <LBB25_86>
    1377	27 09 00 00 30 00 00 00	r9 *= 0x30
    1378	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    1379	07 07 00 00 10 00 00 00	r7 += 0x10
    1380	05 00 0b 00 00 00 00 00	goto +0xb <LBB25_94>

0000000000002b28 <LBB25_90>
    1381	07 07 00 00 30 00 00 00	r7 += 0x30
    1382	07 09 00 00 d0 ff ff ff	r9 += -0x30
    1383	55 09 08 00 00 00 00 00	if r9 != 0x0 goto +0x8 <LBB25_94>

0000000000002b40 <LBB25_91>
    1384	15 06 22 00 00 00 00 00	if r6 == 0x0 goto +0x22 <LBB25_97>
    1385	27 06 00 00 30 00 00 00	r6 *= 0x30
    1386	15 06 20 00 00 00 00 00	if r6 == 0x0 goto +0x20 <LBB25_97>
    1387	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    1388	bf 62 00 00 00 00 00 00	r2 = r6
    1389	b7 03 00 00 08 00 00 00	r3 = 0x8
    1390	85 10 00 00 b2 06 00 00	call 0x6b2 ; <__rust_dealloc>
    1391	05 00 1b 00 00 00 00 00	goto +0x1b <LBB25_97>

0000000000002b80 <LBB25_94>
    1392	79 71 f8 ff 00 00 00 00	r1 = *(u64 *)(r7 - 0x8)
    1393	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1394	07 02 00 00 ff ff ff ff	r2 += -0x1
    1395	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    1396	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB25_87>
    1397	05 00 0d 00 00 00 00 00	goto +0xd <LBB25_95>

0000000000002bb0 <LBB25_87>
    1398	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1399	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1400	07 02 00 00 ff ff ff ff	r2 += -0x1
    1401	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    1402	55 02 ea ff 00 00 00 00	if r2 != 0x0 goto -0x16 <LBB25_90>
    1403	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1404	07 02 00 00 ff ff ff ff	r2 += -0x1
    1405	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    1406	55 02 e6 ff 00 00 00 00	if r2 != 0x0 goto -0x1a <LBB25_90>
    1407	b7 02 00 00 28 00 00 00	r2 = 0x28
    1408	b7 03 00 00 08 00 00 00	r3 = 0x8
    1409	85 10 00 00 9f 06 00 00	call 0x69f ; <__rust_dealloc>
    1410	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB25_90>

0000000000002c18 <LBB25_95>
    1411	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1412	07 02 00 00 ff ff ff ff	r2 += -0x1
    1413	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    1414	55 02 ef ff 00 00 00 00	if r2 != 0x0 goto -0x11 <LBB25_87>
    1415	b7 02 00 00 20 00 00 00	r2 = 0x20
    1416	b7 03 00 00 08 00 00 00	r3 = 0x8
    1417	85 10 00 00 97 06 00 00	call 0x697 ; <__rust_dealloc>
    1418	05 00 eb ff 00 00 00 00	goto -0x15 <LBB25_87>

0000000000002c58 <LBB25_97>
    1419	bf 80 00 00 00 00 00 00	r0 = r8
    1420	95 00 00 00 00 00 00 00	exit

0000000000002c68 <LBB25_98>
    1421	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1422	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1423	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1424	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1425	15 02 bf ff 00 00 00 00	if r2 == 0x0 goto -0x41 <LBB25_85>
    1426	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1427	15 01 bd ff 00 00 00 00	if r1 == 0x0 goto -0x43 <LBB25_85>
    1428	b7 03 00 00 01 00 00 00	r3 = 0x1
    1429	85 10 00 00 8b 06 00 00	call 0x68b ; <__rust_dealloc>
    1430	05 00 ba ff 00 00 00 00	goto -0x46 <LBB25_85>

0000000000002cb8 <LBB25_101>
    1431	18 01 00 00 00 00 00 00 00 00 00 00 ad c7 71 00	r1 = 0x71c7ad00000000 ll
    1433	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1434	05 00 e8 fd 00 00 00 00	goto -0x218 <LBB25_9>

0000000000002cd8 <LBB25_102>
    1435	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1436	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1437	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1438	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1439	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
    1440	7b 2a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r2
    1441	bf a1 00 00 00 00 00 00	r1 = r10
    1442	07 01 00 00 00 ff ff ff	r1 += -0x100
    1443	bf a2 00 00 00 00 00 00	r2 = r10
    1444	07 02 00 00 30 fe ff ff	r2 += -0x1d0
    1445	85 10 00 00 00 fd ff ff	call -0x300 ; <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
    1446	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
    1447	15 01 4b 00 01 00 00 00	if r1 == 0x1 goto +0x4b <LBB25_108>
    1448	61 a1 04 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xfc)
    1449	63 1a b3 fe 00 00 00 00	*(u32 *)(r10 - 0x14d) = r1
    1450	61 a1 01 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xff)
    1451	63 1a b0 fe 00 00 00 00	*(u32 *)(r10 - 0x150) = r1
    1452	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1453	7b 1a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r1
    1454	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1455	7b 1a 68 fd 00 00 00 00	*(u64 *)(r10 - 0x298) = r1
    1456	bf a1 00 00 00 00 00 00	r1 = r10
    1457	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1458	7b 1a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r1
    1459	bf a2 00 00 00 00 00 00	r2 = r10
    1460	07 02 00 00 18 ff ff ff	r2 += -0xe8
    1461	b7 03 00 00 34 00 00 00	r3 = 0x34
    1462	85 10 00 00 12 1d 00 00	call 0x1d12 ; <memcpy>
    1463	7b 7a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r7
    1464	bf a7 00 00 00 00 00 00	r7 = r10
    1465	07 07 00 00 90 ff ff ff	r7 += -0x70
    1466	bf 71 00 00 00 00 00 00	r1 = r7
    1467	79 a2 58 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a8)
    1468	b7 03 00 00 34 00 00 00	r3 = 0x34
    1469	85 10 00 00 0b 1d 00 00	call 0x1d0b ; <memcpy>
    1470	bf a1 00 00 00 00 00 00	r1 = r10
    1471	07 01 00 00 c7 fe ff ff	r1 += -0x139
    1472	bf 72 00 00 00 00 00 00	r2 = r7
    1473	b7 03 00 00 34 00 00 00	r3 = 0x34
    1474	85 10 00 00 06 1d 00 00	call 0x1d06 ; <memcpy>
    1475	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1476	7b 1a bf fe 00 00 00 00	*(u64 *)(r10 - 0x141) = r1
    1477	79 a1 70 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x290)
    1478	7b 1a b7 fe 00 00 00 00	*(u64 *)(r10 - 0x149) = r1
    1479	79 a2 60 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a0)
    1480	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    1481	07 01 00 00 ff ff ff ff	r1 += -0x1
    1482	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    1483	71 a1 f9 fe 00 00 00 00	r1 = *(u8 *)(r10 - 0x107)
    1484	15 01 78 00 01 00 00 00	if r1 == 0x1 goto +0x78 <LBB25_117>
    1485	bf a1 00 00 00 00 00 00	r1 = r10
    1486	07 01 00 00 f9 fe ff ff	r1 += -0x107
    1487	b7 02 00 00 01 00 00 00	r2 = 0x1
    1488	7b 2a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r2
    1489	bf a2 00 00 00 00 00 00	r2 = r10
    1490	07 02 00 00 90 ff ff ff	r2 += -0x70
    1491	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1492	b7 02 00 00 00 00 00 00	r2 = 0x0
    1493	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1494	b7 02 00 00 02 00 00 00	r2 = 0x2
    1495	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1496	18 02 00 00 f0 39 01 00 00 00 00 00 00 00 00 00	r2 = 0x139f0 ll
    1498	7b 2a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r2
    1499	18 02 00 00 10 09 00 00 00 00 00 00 00 00 00 00	r2 = 0x910 ll
    1501	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    1502	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    1503	bf a1 00 00 00 00 00 00	r1 = r10
    1504	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1505	bf a2 00 00 00 00 00 00	r2 = r10
    1506	07 02 00 00 00 ff ff ff	r2 += -0x100
    1507	85 10 00 00 32 10 00 00	call 0x1032 ; <alloc::fmt::format>
    1508	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    1509	79 a7 c8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x38)
    1510	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    1511	bf 71 00 00 00 00 00 00	r1 = r7
    1512	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1513	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB25_107>
    1514	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB25_107>
    1515	bf 71 00 00 00 00 00 00	r1 = r7
    1516	bf 82 00 00 00 00 00 00	r2 = r8
    1517	b7 03 00 00 01 00 00 00	r3 = 0x1
    1518	85 10 00 00 32 06 00 00	call 0x632 ; <__rust_dealloc>

0000000000002f78 <LBB25_107>
    1519	18 01 00 00 00 00 00 00 00 00 00 00 b0 c7 71 00	r1 = 0x71c7b000000000 ll
    1521	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1522	05 00 90 fd 00 00 00 00	goto -0x270 <LBB25_9>

0000000000002f98 <LBB25_108>
    1523	79 a3 10 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xf0)
    1524	79 a2 08 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf8)
    1525	bf a1 00 00 00 00 00 00	r1 = r10
    1526	07 01 00 00 e0 fd ff ff	r1 += -0x220
    1527	85 10 00 00 97 0c 00 00	call 0xc97 ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    1528	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1529	07 01 00 00 ff ff ff ff	r1 += -0x1

0000000000002fd0 <LBB25_109>
    1530	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    1531	05 00 87 fd 00 00 00 00	goto -0x279 <LBB25_9>

0000000000002fe0 <LBB25_110>
    1532	61 a2 1c ff 00 00 00 00	r2 = *(u32 *)(r10 - 0xe4)
    1533	63 2a fc fd 00 00 00 00	*(u32 *)(r10 - 0x204) = r2
    1534	79 a2 14 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xec)
    1535	7b 2a f4 fd 00 00 00 00	*(u64 *)(r10 - 0x20c) = r2
    1536	79 a2 0c ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf4)
    1537	7b 2a ec fd 00 00 00 00	*(u64 *)(r10 - 0x214) = r2
    1538	79 a2 04 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xfc)
    1539	7b 2a e4 fd 00 00 00 00	*(u64 *)(r10 - 0x21c) = r2
    1540	63 1a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r1
    1541	05 00 7d fd 00 00 00 00	goto -0x283 <LBB25_9>

0000000000003030 <LBB25_111>
    1542	7b 8a 68 fd 00 00 00 00	*(u64 *)(r10 - 0x298) = r8
    1543	bf a1 00 00 00 00 00 00	r1 = r10
    1544	07 01 00 00 90 fd ff ff	r1 += -0x270
    1545	bf a2 00 00 00 00 00 00	r2 = r10
    1546	07 02 00 00 10 fe ff ff	r2 += -0x1f0
    1547	85 10 00 00 0e 08 00 00	call 0x80e ; <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    1548	b7 01 00 00 01 00 00 00	r1 = 0x1
    1549	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1550	bf a1 00 00 00 00 00 00	r1 = r10
    1551	07 01 00 00 57 fe ff ff	r1 += -0x1a9
    1552	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1553	b7 01 00 00 09 00 00 00	r1 = 0x9
    1554	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1555	18 01 00 00 c5 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125c5 ll
    1557	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1558	79 a1 98 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x268)
    1559	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1560	79 a1 90 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x270)
    1561	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1562	73 7a 57 fe 00 00 00 00	*(u8 *)(r10 - 0x1a9) = r7
    1563	bf a1 00 00 00 00 00 00	r1 = r10
    1564	07 01 00 00 00 ff ff ff	r1 += -0x100
    1565	85 10 00 00 d8 0d 00 00	call 0xdd8 ; <solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get>
    1566	bf a1 00 00 00 00 00 00	r1 = r10
    1567	07 01 00 00 0c ff ff ff	r1 += -0xf4
    1568	61 a8 08 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0xf8)
    1569	79 a2 00 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x100)
    1570	15 02 47 00 01 00 00 00	if r2 == 0x1 goto +0x47 <LBB25_120>
    1571	61 12 10 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x10)
    1572	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    1573	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1574	63 8a 78 fe 00 00 00 00	*(u32 *)(r10 - 0x188) = r8
    1575	7b 1a 7c fe 00 00 00 00	*(u64 *)(r10 - 0x184) = r1
    1576	7b 3a 84 fe 00 00 00 00	*(u64 *)(r10 - 0x17c) = r3
    1577	63 2a c0 fe 00 00 00 00	*(u32 *)(r10 - 0x140) = r2
    1578	63 2a 8c fe 00 00 00 00	*(u32 *)(r10 - 0x174) = r2
    1579	bf a1 00 00 00 00 00 00	r1 = r10
    1580	07 01 00 00 78 fe ff ff	r1 += -0x188
    1581	b7 02 00 00 4b 00 00 00	r2 = 0x4b
    1582	85 10 00 00 c4 0c 00 00	call 0xcc4 ; <solana_program::rent::Rent::minimum_balance>
    1583	bf 08 00 00 00 00 00 00	r8 = r0
    1584	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1585	25 08 01 00 01 00 00 00	if r8 > 0x1 goto +0x1 <LBB25_114>
    1586	b7 08 00 00 01 00 00 00	r8 = 0x1

0000000000003198 <LBB25_114>
    1587	85 10 00 00 19 06 00 00	call 0x619 ; <solana_program::account_info::AccountInfo::lamports>
    1588	2d 08 01 01 00 00 00 00	if r8 > r0 goto +0x101 <LBB25_151>

00000000000031a8 <LBB25_115>
    1589	18 01 00 00 33 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12633 ll
    1591	b7 02 00 00 1f 00 00 00	r2 = 0x1f
    1592	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1593	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    1594	79 72 30 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x30)
    1595	bf a1 00 00 00 00 00 00	r1 = r10
    1596	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1597	b7 03 00 00 4b 00 00 00	r3 = 0x4b
    1598	85 10 00 00 3d 0d 00 00	call 0xd3d ; <solana_program::system_instruction::allocate>
    1599	79 71 38 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x38)
    1600	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    1601	07 03 00 00 01 00 00 00	r3 += 0x1
    1602	25 03 60 00 01 00 00 00	if r3 > 0x1 goto +0x60 <LBB25_123>

0000000000003218 <LBB25_116>
    1603	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    1604	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003228 <LBB25_117>
    1605	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    1606	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1607	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1608	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    1609	79 14 10 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x10)
    1610	79 11 18 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x18)
    1611	7b 1a e8 fe 00 00 00 00	*(u64 *)(r10 - 0x118) = r1
    1612	7b 4a e0 fe 00 00 00 00	*(u64 *)(r10 - 0x120) = r4
    1613	7b 3a d8 fe 00 00 00 00	*(u64 *)(r10 - 0x128) = r3
    1614	7b 2a d0 fe 00 00 00 00	*(u64 *)(r10 - 0x130) = r2
    1615	b7 01 00 00 02 00 00 00	r1 = 0x2
    1616	73 1a f9 fe 00 00 00 00	*(u8 *)(r10 - 0x107) = r1
    1617	bf a1 00 00 00 00 00 00	r1 = r10
    1618	07 01 00 00 00 ff ff ff	r1 += -0x100
    1619	bf 82 00 00 00 00 00 00	r2 = r8
    1620	85 10 00 00 22 06 00 00	call 0x622 ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1621	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1622	15 01 2a fe 01 00 00 00	if r1 == 0x1 goto -0x1d6 <LBB25_58>
    1623	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1624	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1625	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1626	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1627	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1628	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    1629	bf a1 00 00 00 00 00 00	r1 = r10
    1630	07 01 00 00 b0 fd ff ff	r1 += -0x250
    1631	bf a2 00 00 00 00 00 00	r2 = r10
    1632	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1633	bf a3 00 00 00 00 00 00	r3 = r10
    1634	07 03 00 00 c8 ff ff ff	r3 += -0x38
    1635	85 10 00 00 b2 fb ff ff	call -0x44e ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1636	79 a2 b0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x250)
    1637	bf 21 00 00 00 00 00 00	r1 = r2
    1638	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1639	15 01 1b 01 04 00 00 00	if r1 == 0x4 goto +0x11b <LBB25_162>
    1640	79 a3 b8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x248)
    1641	05 00 d4 02 00 00 00 00	goto +0x2d4 <LBB25_251>

0000000000003350 <LBB25_120>
    1642	61 12 18 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x18)
    1643	79 13 10 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x10)
    1644	79 14 08 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x8)
    1645	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1646	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    1647	7b 4a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r4
    1648	7b 3a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r3
    1649	63 2a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r2
    1650	bf 81 00 00 00 00 00 00	r1 = r8
    1651	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1652	15 01 01 00 14 00 00 00	if r1 == 0x14 goto +0x1 <LBB25_121>
    1653	05 00 bd 02 00 00 00 00	goto +0x2bd <LBB25_249>

00000000000033b0 <LBB25_121>
    1654	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    1655	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1656	79 12 18 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x18)
    1657	7b 2a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r2
    1658	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    1659	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1660	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1661	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1662	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1663	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1664	bf a1 00 00 00 00 00 00	r1 = r10
    1665	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1666	b7 02 00 00 00 00 00 00	r2 = 0x0
    1667	b7 03 00 00 4a 00 00 00	r3 = 0x4a
    1668	85 10 00 00 67 1c 00 00	call 0x1c67 ; <memset>
    1669	b7 01 00 00 01 00 00 00	r1 = 0x1
    1670	6b 1a 49 ff 00 00 00 00	*(u16 *)(r10 - 0xb7) = r1
    1671	79 a1 d0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x130)
    1672	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1673	79 a1 d8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x128)
    1674	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1675	79 a1 e0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x120)
    1676	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    1677	79 a1 e8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x118)
    1678	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    1679	79 a1 f0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x110)
    1680	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    1681	71 a1 f8 fe 00 00 00 00	r1 = *(u8 *)(r10 - 0x108)
    1682	73 1a 48 ff 00 00 00 00	*(u8 *)(r10 - 0xb8) = r1
    1683	bf a1 00 00 00 00 00 00	r1 = r10
    1684	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1685	bf 72 00 00 00 00 00 00	r2 = r7
    1686	85 10 00 00 e0 05 00 00	call 0x5e0 ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1687	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1688	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB25_122>
    1689	05 00 d7 00 00 00 00 00	goto +0xd7 <LBB25_161>

00000000000034d0 <LBB25_122>
    1690	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1691	7b 1a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r1
    1692	79 a1 d0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x130)
    1693	7b 1a f8 fd 00 00 00 00	*(u64 *)(r10 - 0x208) = r1
    1694	79 a1 c0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x140)
    1695	7b 1a e8 fd 00 00 00 00	*(u64 *)(r10 - 0x218) = r1
    1696	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    1697	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1698	05 00 e0 fc 00 00 00 00	goto -0x320 <LBB25_9>

0000000000003518 <LBB25_123>
    1699	71 74 59 00 00 00 00 00	r4 = *(u8 *)(r7 + 0x59)
    1700	71 72 58 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x58)
    1701	79 70 30 00 00 00 00 00	r0 = *(u64 *)(r7 + 0x30)
    1702	7b 31 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r3
    1703	79 73 40 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x40)
    1704	79 35 00 00 00 00 00 00	r5 = *(u64 *)(r3 + 0x0)
    1705	07 05 00 00 01 00 00 00	r5 += 0x1
    1706	25 05 01 00 01 00 00 00	if r5 > 0x1 goto +0x1 <LBB25_125>
    1707	05 00 97 ff 00 00 00 00	goto -0x69 <LBB25_116>

0000000000003560 <LBB25_125>
    1708	7b 53 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r5
    1709	b7 07 00 00 01 00 00 00	r7 = 0x1
    1710	b7 05 00 00 01 00 00 00	r5 = 0x1
    1711	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB25_127>
    1712	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000003588 <LBB25_127>
    1713	b7 04 00 00 01 00 00 00	r4 = 0x1
    1714	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB25_129>
    1715	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000035a0 <LBB25_129>
    1716	7b 4a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r4
    1717	7b 5a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r5
    1718	79 a2 78 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x288)
    1719	71 22 5a 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x5a)
    1720	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB25_131>
    1721	b7 07 00 00 00 00 00 00	r7 = 0x0

00000000000035d0 <LBB25_131>
    1722	7b 7a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r7
    1723	7b 0a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r0
    1724	7b 1a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r1
    1725	79 a5 78 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x288)
    1726	79 58 68 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x68)
    1727	79 84 00 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x0)
    1728	07 04 00 00 01 00 00 00	r4 += 0x1
    1729	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB25_133>
    1730	05 00 80 ff 00 00 00 00	goto -0x80 <LBB25_116>

0000000000003618 <LBB25_133>
    1731	71 51 89 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x89)
    1732	7b 1a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r1
    1733	71 51 88 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x88)
    1734	7b 1a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r1
    1735	79 51 60 00 00 00 00 00	r1 = *(u64 *)(r5 + 0x60)
    1736	79 52 50 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x50)
    1737	79 57 48 00 00 00 00 00	r7 = *(u64 *)(r5 + 0x48)
    1738	7b 48 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r4
    1739	79 50 70 00 00 00 00 00	r0 = *(u64 *)(r5 + 0x70)
    1740	79 04 00 00 00 00 00 00	r4 = *(u64 *)(r0 + 0x0)
    1741	07 04 00 00 01 00 00 00	r4 += 0x1
    1742	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB25_135>
    1743	05 00 73 ff 00 00 00 00	goto -0x8d <LBB25_116>

0000000000003680 <LBB25_135>
    1744	7b 40 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r4
    1745	79 54 78 00 00 00 00 00	r4 = *(u64 *)(r5 + 0x78)
    1746	7b 4a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r4
    1747	79 54 80 00 00 00 00 00	r4 = *(u64 *)(r5 + 0x80)
    1748	7b 4a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r4
    1749	71 54 8a 00 00 00 00 00	r4 = *(u8 *)(r5 + 0x8a)
    1750	7b 0a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r0
    1751	7b 8a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r8
    1752	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    1753	79 a5 38 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2c8)
    1754	73 5a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r5
    1755	79 a5 40 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2c0)
    1756	73 5a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r5
    1757	79 a5 30 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2d0)
    1758	73 5a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r5
    1759	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1760	7b 7a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r7
    1761	7b 3a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r3
    1762	79 a2 50 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b0)
    1763	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1764	79 a2 48 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b8)
    1765	7b 2a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r2
    1766	79 a2 20 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2e0)
    1767	b7 03 00 00 01 00 00 00	r3 = 0x1
    1768	b7 07 00 00 01 00 00 00	r7 = 0x1
    1769	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB25_137>
    1770	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000003758 <LBB25_137>
    1771	b7 04 00 00 01 00 00 00	r4 = 0x1
    1772	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB25_139>
    1773	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003770 <LBB25_139>
    1774	7b 0a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r0
    1775	7b 1a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r1
    1776	7b 8a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r8
    1777	79 a1 28 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2d8)
    1778	bf 12 00 00 00 00 00 00	r2 = r1
    1779	b7 01 00 00 01 00 00 00	r1 = 0x1
    1780	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB25_141>
    1781	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000037b0 <LBB25_141>
    1782	7b 1a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r1
    1783	73 1a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r1
    1784	7b 4a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r4
    1785	73 4a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r4
    1786	79 a1 58 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a8)
    1787	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r1
    1788	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    1789	7b 1a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r1
    1790	73 7a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r7
    1791	b7 02 00 00 03 00 00 00	r2 = 0x3
    1792	7b 2a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r2
    1793	bf a2 00 00 00 00 00 00	r2 = r10
    1794	07 02 00 00 c8 ff ff ff	r2 += -0x38
    1795	7b 2a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r2
    1796	bf a2 00 00 00 00 00 00	r2 = r10
    1797	07 02 00 00 98 fe ff ff	r2 += -0x168
    1798	7b 2a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r2
    1799	7b 3a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r3
    1800	bf a1 00 00 00 00 00 00	r1 = r10
    1801	07 01 00 00 90 ff ff ff	r1 += -0x70
    1802	bf a2 00 00 00 00 00 00	r2 = r10
    1803	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1804	bf a3 00 00 00 00 00 00	r3 = r10
    1805	07 03 00 00 00 ff ff ff	r3 += -0x100
    1806	bf a5 00 00 00 00 00 00	r5 = r10
    1807	b7 04 00 00 02 00 00 00	r4 = 0x2
    1808	85 10 00 00 37 0a 00 00	call 0xa37 ; <solana_program::program::invoke_signed>
    1809	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    1810	15 08 01 00 14 00 00 00	if r8 == 0x14 goto +0x1 <LBB25_142>
    1811	05 00 75 00 00 00 00 00	goto +0x75 <LBB25_163>

00000000000038a0 <LBB25_142>
    1812	bf a1 00 00 00 00 00 00	r1 = r10
    1813	07 01 00 00 00 ff ff ff	r1 += -0x100
    1814	85 10 00 00 15 f9 ff ff	call -0x6eb ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    1815	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1816	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB25_146>
    1817	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1818	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB25_146>
    1819	27 02 00 00 22 00 00 00	r2 *= 0x22
    1820	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB25_146>
    1821	b7 03 00 00 01 00 00 00	r3 = 0x1
    1822	85 10 00 00 02 05 00 00	call 0x502 ; <__rust_dealloc>

00000000000038f8 <LBB25_146>
    1823	7b 7a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r7
    1824	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    1825	79 a8 70 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x290)
    1826	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB25_149>
    1827	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1828	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB25_149>
    1829	b7 03 00 00 01 00 00 00	r3 = 0x1
    1830	85 10 00 00 fa 04 00 00	call 0x4fa ; <__rust_dealloc>

0000000000003938 <LBB25_149>
    1831	18 01 00 00 52 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12652 ll
    1833	b7 02 00 00 29 00 00 00	r2 = 0x29
    1834	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1835	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    1836	79 72 30 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x30)
    1837	bf a1 00 00 00 00 00 00	r1 = r10
    1838	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1839	bf 83 00 00 00 00 00 00	r3 = r8
    1840	85 10 00 00 e1 0b 00 00	call 0xbe1 ; <solana_program::system_instruction::assign>
    1841	79 71 38 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x38)
    1842	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    1843	07 03 00 00 01 00 00 00	r3 += 0x1
    1844	25 03 6e 00 01 00 00 00	if r3 > 0x1 goto +0x6e <LBB25_170>
    1845	05 00 0d ff 00 00 00 00	goto -0xf3 <LBB25_116>

00000000000039b0 <LBB25_151>
    1846	bf 83 00 00 00 00 00 00	r3 = r8
    1847	1f 03 00 00 00 00 00 00	r3 -= r0
    1848	b7 01 00 00 00 00 00 00	r1 = 0x0
    1849	b7 02 00 00 01 00 00 00	r2 = 0x1
    1850	b7 04 00 00 01 00 00 00	r4 = 0x1
    1851	2d 83 01 00 00 00 00 00	if r3 > r8 goto +0x1 <LBB25_153>
    1852	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000039e8 <LBB25_153>
    1853	b7 05 00 00 00 00 00 00	r5 = 0x0
    1854	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB25_155>
    1855	bf 35 00 00 00 00 00 00	r5 = r3

0000000000003a00 <LBB25_155>
    1856	7b 5a 90 fe 00 00 00 00	*(u64 *)(r10 - 0x170) = r5
    1857	7b 2a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r2
    1858	bf a2 00 00 00 00 00 00	r2 = r10
    1859	07 02 00 00 98 fe ff ff	r2 += -0x168
    1860	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1861	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1862	b7 01 00 00 02 00 00 00	r1 = 0x2
    1863	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1864	18 01 00 00 70 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a70 ll
    1866	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1867	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    1869	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    1870	bf a1 00 00 00 00 00 00	r1 = r10
    1871	07 01 00 00 90 fe ff ff	r1 += -0x170
    1872	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    1873	bf a1 00 00 00 00 00 00	r1 = r10
    1874	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1875	bf a2 00 00 00 00 00 00	r2 = r10
    1876	07 02 00 00 00 ff ff ff	r2 += -0x100
    1877	85 10 00 00 c0 0e 00 00	call 0xec0 ; <alloc::fmt::format>
    1878	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1879	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1880	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1881	bf 71 00 00 00 00 00 00	r1 = r7
    1882	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1883	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB25_158>
    1884	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB25_158>
    1885	bf 71 00 00 00 00 00 00	r1 = r7
    1886	bf 82 00 00 00 00 00 00	r2 = r8
    1887	b7 03 00 00 01 00 00 00	r3 = 0x1
    1888	85 10 00 00 c0 04 00 00	call 0x4c0 ; <__rust_dealloc>

0000000000003b08 <LBB25_158>
    1889	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    1890	bf 71 00 00 00 00 00 00	r1 = r7
    1891	85 10 00 00 e9 04 00 00	call 0x4e9 ; <solana_program::account_info::AccountInfo::lamports>
    1892	79 a4 90 fe 00 00 00 00	r4 = *(u64 *)(r10 - 0x170)
    1893	2d 04 a8 00 00 00 00 00	if r4 > r0 goto +0xa8 <LBB25_190>
    1894	79 78 30 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x30)
    1895	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    1896	bf a1 00 00 00 00 00 00	r1 = r10
    1897	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1898	bf 83 00 00 00 00 00 00	r3 = r8
    1899	85 10 00 00 d9 0b 00 00	call 0xbd9 ; <solana_program::system_instruction::transfer>
    1900	79 75 08 00 00 00 00 00	r5 = *(u64 *)(r7 + 0x8)
    1901	79 53 00 00 00 00 00 00	r3 = *(u64 *)(r5 + 0x0)
    1902	07 03 00 00 01 00 00 00	r3 += 0x1
    1903	25 03 c8 00 01 00 00 00	if r3 > 0x1 goto +0xc8 <LBB25_194>
    1904	05 00 d2 fe 00 00 00 00	goto -0x12e <LBB25_116>

0000000000003b88 <LBB25_161>
    1905	79 a7 c0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x140)
    1906	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    1907	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1908	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1909	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    1910	7b 2a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r2
    1911	bf a1 00 00 00 00 00 00	r1 = r10
    1912	07 01 00 00 80 fd ff ff	r1 += -0x280
    1913	bf a2 00 00 00 00 00 00	r2 = r10
    1914	07 02 00 00 00 ff ff ff	r2 += -0x100
    1915	bf a3 00 00 00 00 00 00	r3 = r10
    1916	07 03 00 00 90 ff ff ff	r3 += -0x70
    1917	85 10 00 00 98 fa ff ff	call -0x568 ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1918	79 a2 80 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x280)
    1919	bf 21 00 00 00 00 00 00	r1 = r2
    1920	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1921	15 01 01 00 04 00 00 00	if r1 == 0x4 goto +0x1 <LBB25_162>
    1922	05 00 ba 01 00 00 00 00	goto +0x1ba <LBB25_250>

0000000000003c18 <LBB25_162>
    1923	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1924	07 01 00 00 01 00 00 00	r1 += 0x1
    1925	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    1926	b7 01 00 00 14 00 00 00	r1 = 0x14
    1927	63 1a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r1
    1928	05 00 fa fb 00 00 00 00	goto -0x406 <LBB25_9>

0000000000003c48 <LBB25_163>
    1929	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    1930	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    1931	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    1932	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    1933	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    1934	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    1935	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    1936	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    1937	bf a1 00 00 00 00 00 00	r1 = r10
    1938	07 01 00 00 00 ff ff ff	r1 += -0x100
    1939	85 10 00 00 98 f8 ff ff	call -0x768 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    1940	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1941	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB25_167>
    1942	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1943	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB25_167>
    1944	27 02 00 00 22 00 00 00	r2 *= 0x22
    1945	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB25_167>
    1946	b7 03 00 00 01 00 00 00	r3 = 0x1
    1947	85 10 00 00 85 04 00 00	call 0x485 ; <__rust_dealloc>

0000000000003ce0 <LBB25_167>
    1948	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    1949	15 02 95 01 00 00 00 00	if r2 == 0x0 goto +0x195 <LBB25_249>
    1950	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1951	15 01 93 01 00 00 00 00	if r1 == 0x0 goto +0x193 <LBB25_249>

0000000000003d00 <LBB25_169>
    1952	b7 03 00 00 01 00 00 00	r3 = 0x1
    1953	85 10 00 00 7f 04 00 00	call 0x47f ; <__rust_dealloc>
    1954	05 00 90 01 00 00 00 00	goto +0x190 <LBB25_249>

0000000000003d18 <LBB25_170>
    1955	71 74 59 00 00 00 00 00	r4 = *(u8 *)(r7 + 0x59)
    1956	71 72 58 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x58)
    1957	79 78 30 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x30)
    1958	7b 31 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r3
    1959	79 73 40 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x40)
    1960	79 35 00 00 00 00 00 00	r5 = *(u64 *)(r3 + 0x0)
    1961	07 05 00 00 01 00 00 00	r5 += 0x1
    1962	25 05 01 00 01 00 00 00	if r5 > 0x1 goto +0x1 <LBB25_172>
    1963	05 00 97 fe 00 00 00 00	goto -0x169 <LBB25_116>

0000000000003d60 <LBB25_172>
    1964	7b 53 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r5
    1965	bf 40 00 00 00 00 00 00	r0 = r4
    1966	b7 05 00 00 01 00 00 00	r5 = 0x1
    1967	b7 04 00 00 01 00 00 00	r4 = 0x1
    1968	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB25_174>
    1969	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003d90 <LBB25_174>
    1970	b7 00 00 00 01 00 00 00	r0 = 0x1
    1971	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB25_176>
    1972	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000003da8 <LBB25_176>
    1973	7b 0a 18 fd 00 00 00 00	*(u64 *)(r10 - 0x2e8) = r0
    1974	7b 4a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r4
    1975	79 a2 78 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x288)
    1976	71 22 5a 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x5a)
    1977	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB25_178>
    1978	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000003dd8 <LBB25_178>
    1979	bf 50 00 00 00 00 00 00	r0 = r5
    1980	7b 8a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r8
    1981	79 a4 50 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2b0)
    1982	79 47 00 00 00 00 00 00	r7 = *(u64 *)(r4 + 0x0)
    1983	07 07 00 00 01 00 00 00	r7 += 0x1
    1984	25 07 01 00 01 00 00 00	if r7 > 0x1 goto +0x1 <LBB25_180>
    1985	05 00 81 fe 00 00 00 00	goto -0x17f <LBB25_116>

0000000000003e10 <LBB25_180>
    1986	79 a8 78 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x288)
    1987	79 82 50 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x50)
    1988	79 88 48 00 00 00 00 00	r8 = *(u64 *)(r8 + 0x48)
    1989	7b 74 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r7
    1990	79 a5 48 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2b8)
    1991	79 57 00 00 00 00 00 00	r7 = *(u64 *)(r5 + 0x0)
    1992	07 07 00 00 01 00 00 00	r7 += 0x1
    1993	25 07 01 00 01 00 00 00	if r7 > 0x1 goto +0x1 <LBB25_182>
    1994	05 00 78 fe 00 00 00 00	goto -0x188 <LBB25_116>

0000000000003e58 <LBB25_182>
    1995	7b 75 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r7
    1996	79 a7 28 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2d8)
    1997	73 7a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r7
    1998	79 a7 30 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2d0)
    1999	73 7a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r7
    2000	79 a7 38 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2c8)
    2001	73 7a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r7
    2002	79 a7 58 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2a8)
    2003	7b 7a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r7
    2004	79 a7 60 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2a0)
    2005	7b 7a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r7
    2006	7b 5a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r5
    2007	7b 4a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r4
    2008	79 a4 40 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2c0)
    2009	7b 4a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r4
    2010	73 0a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r0
    2011	79 a4 20 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2e0)
    2012	73 4a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r4
    2013	79 a4 18 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2e8)
    2014	73 4a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r4
    2015	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    2016	7b 8a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r8
    2017	7b 3a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r3
    2018	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2019	79 a1 70 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x290)
    2020	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2021	b7 01 00 00 03 00 00 00	r1 = 0x3
    2022	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    2023	bf a1 00 00 00 00 00 00	r1 = r10
    2024	07 01 00 00 c8 ff ff ff	r1 += -0x38
    2025	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    2026	bf a1 00 00 00 00 00 00	r1 = r10
    2027	07 01 00 00 98 fe ff ff	r1 += -0x168
    2028	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    2029	b7 01 00 00 01 00 00 00	r1 = 0x1
    2030	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    2031	bf a1 00 00 00 00 00 00	r1 = r10
    2032	07 01 00 00 90 ff ff ff	r1 += -0x70
    2033	bf a2 00 00 00 00 00 00	r2 = r10
    2034	07 02 00 00 b0 fe ff ff	r2 += -0x150
    2035	bf a3 00 00 00 00 00 00	r3 = r10
    2036	07 03 00 00 00 ff ff ff	r3 += -0x100
    2037	bf a5 00 00 00 00 00 00	r5 = r10
    2038	b7 04 00 00 02 00 00 00	r4 = 0x2
    2039	85 10 00 00 50 09 00 00	call 0x950 ; <solana_program::program::invoke_signed>
    2040	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    2041	15 08 01 00 14 00 00 00	if r8 == 0x14 goto +0x1 <LBB25_183>
    2042	05 00 49 01 00 00 00 00	goto +0x149 <LBB25_252>

0000000000003fd8 <LBB25_183>
    2043	bf a1 00 00 00 00 00 00	r1 = r10
    2044	07 01 00 00 00 ff ff ff	r1 += -0x100
    2045	85 10 00 00 2e f8 ff ff	call -0x7d2 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    2046	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2047	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB25_187>
    2048	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2049	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB25_187>
    2050	27 02 00 00 22 00 00 00	r2 *= 0x22
    2051	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB25_187>
    2052	b7 03 00 00 01 00 00 00	r3 = 0x1
    2053	85 10 00 00 1b 04 00 00	call 0x41b ; <__rust_dealloc>

0000000000004030 <LBB25_187>
    2054	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2055	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    2056	15 02 6d fe 00 00 00 00	if r2 == 0x0 goto -0x193 <LBB25_121>
    2057	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2058	15 01 6b fe 00 00 00 00	if r1 == 0x0 goto -0x195 <LBB25_121>
    2059	b7 03 00 00 01 00 00 00	r3 = 0x1
    2060	85 10 00 00 14 04 00 00	call 0x414 ; <__rust_dealloc>
    2061	05 00 68 fe 00 00 00 00	goto -0x198 <LBB25_121>

0000000000004070 <LBB25_190>
    2062	bf 71 00 00 00 00 00 00	r1 = r7
    2063	85 10 00 00 3d 04 00 00	call 0x43d ; <solana_program::account_info::AccountInfo::lamports>
    2064	7b 0a a8 fe 00 00 00 00	*(u64 *)(r10 - 0x158) = r0
    2065	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    2067	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    2068	bf a1 00 00 00 00 00 00	r1 = r10
    2069	07 01 00 00 a8 fe ff ff	r1 += -0x158
    2070	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    2071	b7 01 00 00 01 00 00 00	r1 = 0x1
    2072	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    2073	bf a1 00 00 00 00 00 00	r1 = r10
    2074	07 01 00 00 98 fe ff ff	r1 += -0x168
    2075	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    2076	b7 08 00 00 00 00 00 00	r8 = 0x0
    2077	7b 8a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r8
    2078	b7 01 00 00 02 00 00 00	r1 = 0x2
    2079	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2080	18 01 00 00 90 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a90 ll
    2082	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2083	bf a1 00 00 00 00 00 00	r1 = r10
    2084	07 01 00 00 b0 fe ff ff	r1 += -0x150
    2085	bf a2 00 00 00 00 00 00	r2 = r10
    2086	07 02 00 00 00 ff ff ff	r2 += -0x100
    2087	85 10 00 00 ee 0d 00 00	call 0xdee ; <alloc::fmt::format>
    2088	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    2089	7b 1a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r1
    2090	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    2091	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    2092	bf 71 00 00 00 00 00 00	r1 = r7
    2093	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    2094	79 a2 70 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x290)
    2095	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB25_193>
    2096	15 07 03 00 00 00 00 00	if r7 == 0x0 goto +0x3 <LBB25_193>
    2097	bf 71 00 00 00 00 00 00	r1 = r7
    2098	b7 03 00 00 01 00 00 00	r3 = 0x1
    2099	85 10 00 00 ed 03 00 00	call 0x3ed ; <__rust_dealloc>

00000000000041a0 <LBB25_193>
    2100	18 01 00 00 00 00 00 00 00 00 00 00 ae c7 71 00	r1 = 0x71c7ae00000000 ll
    2102	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    2103	05 00 f3 00 00 00 00 00	goto +0xf3 <LBB25_248>

00000000000041c0 <LBB25_194>
    2104	71 72 29 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x29)
    2105	71 71 28 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x28)
    2106	79 70 00 00 00 00 00 00	r0 = *(u64 *)(r7 + 0x0)
    2107	7b 35 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r3
    2108	79 74 10 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x10)
    2109	79 43 00 00 00 00 00 00	r3 = *(u64 *)(r4 + 0x0)
    2110	07 03 00 00 01 00 00 00	r3 += 0x1
    2111	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB25_196>
    2112	05 00 02 fe 00 00 00 00	goto -0x1fe <LBB25_116>

0000000000004208 <LBB25_196>
    2113	7b 4a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r4
    2114	7b 34 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r3
    2115	b7 04 00 00 01 00 00 00	r4 = 0x1
    2116	b7 03 00 00 01 00 00 00	r3 = 0x1
    2117	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB25_198>
    2118	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000004238 <LBB25_198>
    2119	b7 02 00 00 01 00 00 00	r2 = 0x1
    2120	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB25_200>
    2121	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000004250 <LBB25_200>
    2122	7b 0a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r0
    2123	7b 2a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r2
    2124	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    2125	71 11 2a 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x2a)
    2126	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB25_202>
    2127	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000004280 <LBB25_202>
    2128	bf 87 00 00 00 00 00 00	r7 = r8
    2129	7b 4a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r4
    2130	7b 3a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r3
    2131	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    2132	79 10 38 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x38)
    2133	79 02 00 00 00 00 00 00	r2 = *(u64 *)(r0 + 0x0)
    2134	07 02 00 00 01 00 00 00	r2 += 0x1
    2135	25 02 01 00 01 00 00 00	if r2 > 0x1 goto +0x1 <LBB25_204>
    2136	05 00 ea fd 00 00 00 00	goto -0x216 <LBB25_116>

00000000000042c8 <LBB25_204>
    2137	71 13 59 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x59)
    2138	bf 14 00 00 00 00 00 00	r4 = r1
    2139	71 41 58 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x58)
    2140	79 48 20 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x20)
    2141	7b 8a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r8
    2142	79 48 18 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x18)
    2143	7b 8a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r8
    2144	7b 0a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r0
    2145	7b 20 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r2
    2146	79 42 40 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x40)
    2147	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2148	07 04 00 00 01 00 00 00	r4 += 0x1
    2149	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB25_206>
    2150	05 00 dc fd 00 00 00 00	goto -0x224 <LBB25_116>

0000000000004338 <LBB25_206>
    2151	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2152	b7 00 00 00 01 00 00 00	r0 = 0x1
    2153	b7 08 00 00 01 00 00 00	r8 = 0x1
    2154	bf 74 00 00 00 00 00 00	r4 = r7
    2155	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB25_208>
    2156	b7 08 00 00 00 00 00 00	r8 = 0x0

0000000000004368 <LBB25_208>
    2157	b7 07 00 00 01 00 00 00	r7 = 0x1
    2158	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB25_210>
    2159	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000004380 <LBB25_210>
    2160	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    2161	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    2162	71 11 5a 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x5a)
    2163	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB25_212>
    2164	b7 00 00 00 00 00 00 00	r0 = 0x0

00000000000043a8 <LBB25_212>
    2165	7b 0a 18 fd 00 00 00 00	*(u64 *)(r10 - 0x2e8) = r0
    2166	7b 5a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r5
    2167	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    2168	79 10 68 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x68)
    2169	79 03 00 00 00 00 00 00	r3 = *(u64 *)(r0 + 0x0)
    2170	07 03 00 00 01 00 00 00	r3 += 0x1
    2171	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB25_214>
    2172	05 00 c6 fd 00 00 00 00	goto -0x23a <LBB25_116>

00000000000043e8 <LBB25_214>
    2173	7b 8a 08 fd 00 00 00 00	*(u64 *)(r10 - 0x2f8) = r8
    2174	7b 4a 10 fd 00 00 00 00	*(u64 *)(r10 - 0x2f0) = r4
    2175	71 14 89 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x89)
    2176	bf 15 00 00 00 00 00 00	r5 = r1
    2177	71 51 88 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x88)
    2178	79 58 60 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x60)
    2179	7b 8a f0 fc 00 00 00 00	*(u64 *)(r10 - 0x310) = r8
    2180	79 58 50 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x50)
    2181	7b 8a f8 fc 00 00 00 00	*(u64 *)(r10 - 0x308) = r8
    2182	79 58 48 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x48)
    2183	7b 8a 00 fd 00 00 00 00	*(u64 *)(r10 - 0x300) = r8
    2184	7b 30 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r3
    2185	79 55 70 00 00 00 00 00	r5 = *(u64 *)(r5 + 0x70)
    2186	79 53 00 00 00 00 00 00	r3 = *(u64 *)(r5 + 0x0)
    2187	07 03 00 00 01 00 00 00	r3 += 0x1
    2188	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB25_216>
    2189	05 00 b5 fd 00 00 00 00	goto -0x24b <LBB25_116>

0000000000004470 <LBB25_216>
    2190	7b 2a e8 fc 00 00 00 00	*(u64 *)(r10 - 0x318) = r2
    2191	7b 35 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r3
    2192	bf 48 00 00 00 00 00 00	r8 = r4
    2193	bf 13 00 00 00 00 00 00	r3 = r1
    2194	b7 04 00 00 01 00 00 00	r4 = 0x1
    2195	b7 01 00 00 01 00 00 00	r1 = 0x1
    2196	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB25_218>
    2197	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000044b0 <LBB25_218>
    2198	bf 72 00 00 00 00 00 00	r2 = r7
    2199	79 a3 58 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x2a8)
    2200	b7 03 00 00 01 00 00 00	r3 = 0x1
    2201	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB25_220>
    2202	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000044d8 <LBB25_220>
    2203	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    2204	71 78 8a 00 00 00 00 00	r8 = *(u8 *)(r7 + 0x8a)
    2205	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB25_222>
    2206	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000044f8 <LBB25_222>
    2207	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    2208	79 78 78 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x78)
    2209	79 77 80 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x80)
    2210	73 3a 89 ff 00 00 00 00	*(u8 *)(r10 - 0x77) = r3
    2211	73 1a 88 ff 00 00 00 00	*(u8 *)(r10 - 0x78) = r1
    2212	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    2213	7b 8a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r8
    2214	7b 5a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r5
    2215	7b 0a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r0
    2216	79 a1 f0 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x310)
    2217	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    2218	79 a1 18 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2e8)
    2219	73 1a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r1
    2220	79 a1 08 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2f8)
    2221	73 1a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r1
    2222	73 2a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r2
    2223	79 a1 f8 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x308)
    2224	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r1
    2225	79 a1 00 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x300)
    2226	7b 1a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r1
    2227	79 a1 e8 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x318)
    2228	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    2229	79 a1 38 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2c8)
    2230	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    2231	79 a1 10 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2f0)
    2232	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    2233	79 a1 48 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b8)
    2234	73 1a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r1
    2235	79 a1 50 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b0)
    2236	73 1a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r1
    2237	79 a1 40 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2c0)
    2238	73 1a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r1
    2239	79 a1 28 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2d8)
    2240	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    2241	79 a1 30 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2d0)
    2242	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    2243	79 a1 58 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a8)
    2244	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    2245	79 a1 20 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2e0)
    2246	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2247	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    2248	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2249	73 4a 8a ff 00 00 00 00	*(u8 *)(r10 - 0x76) = r4
    2250	bf a1 00 00 00 00 00 00	r1 = r10
    2251	07 01 00 00 90 ff ff ff	r1 += -0x70
    2252	bf a2 00 00 00 00 00 00	r2 = r10
    2253	07 02 00 00 b0 fe ff ff	r2 += -0x150
    2254	bf a3 00 00 00 00 00 00	r3 = r10
    2255	07 03 00 00 00 ff ff ff	r3 += -0x100
    2256	b7 04 00 00 03 00 00 00	r4 = 0x3
    2257	85 10 00 00 6e 08 00 00	call 0x86e ; <solana_program::program::invoke>
    2258	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    2259	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2260	07 02 00 00 ff ff ff ff	r2 += -0x1
    2261	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2262	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB25_225>
    2263	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2264	07 02 00 00 ff ff ff ff	r2 += -0x1
    2265	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2266	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB25_225>
    2267	b7 02 00 00 20 00 00 00	r2 = 0x20
    2268	b7 03 00 00 08 00 00 00	r3 = 0x8
    2269	85 10 00 00 43 03 00 00	call 0x343 ; <__rust_dealloc>

00000000000046f0 <LBB25_225>
    2270	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    2271	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2272	07 02 00 00 ff ff ff ff	r2 += -0x1
    2273	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2274	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB25_228>
    2275	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2276	07 02 00 00 ff ff ff ff	r2 += -0x1
    2277	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2278	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB25_228>
    2279	b7 02 00 00 28 00 00 00	r2 = 0x28
    2280	b7 03 00 00 08 00 00 00	r3 = 0x8
    2281	85 10 00 00 37 03 00 00	call 0x337 ; <__rust_dealloc>

0000000000004750 <LBB25_228>
    2282	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc8)
    2283	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2284	07 02 00 00 ff ff ff ff	r2 += -0x1
    2285	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2286	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB25_231>
    2287	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2288	07 02 00 00 ff ff ff ff	r2 += -0x1
    2289	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2290	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB25_231>
    2291	b7 02 00 00 20 00 00 00	r2 = 0x20
    2292	b7 03 00 00 08 00 00 00	r3 = 0x8
    2293	85 10 00 00 2b 03 00 00	call 0x32b ; <__rust_dealloc>

00000000000047b0 <LBB25_231>
    2294	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
    2295	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2296	07 02 00 00 ff ff ff ff	r2 += -0x1
    2297	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2298	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB25_234>
    2299	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2300	07 02 00 00 ff ff ff ff	r2 += -0x1
    2301	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2302	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB25_234>
    2303	b7 02 00 00 28 00 00 00	r2 = 0x28
    2304	b7 03 00 00 08 00 00 00	r3 = 0x8
    2305	85 10 00 00 1f 03 00 00	call 0x31f ; <__rust_dealloc>

0000000000004810 <LBB25_234>
    2306	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    2307	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2308	07 02 00 00 ff ff ff ff	r2 += -0x1
    2309	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2310	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB25_237>
    2311	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2312	07 02 00 00 ff ff ff ff	r2 += -0x1
    2313	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2314	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB25_237>
    2315	b7 02 00 00 20 00 00 00	r2 = 0x20
    2316	b7 03 00 00 08 00 00 00	r3 = 0x8
    2317	85 10 00 00 13 03 00 00	call 0x313 ; <__rust_dealloc>

0000000000004870 <LBB25_237>
    2318	79 a1 70 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x90)
    2319	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2320	07 02 00 00 ff ff ff ff	r2 += -0x1
    2321	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2322	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB25_240>
    2323	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2324	07 02 00 00 ff ff ff ff	r2 += -0x1
    2325	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2326	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB25_240>
    2327	b7 02 00 00 28 00 00 00	r2 = 0x28
    2328	b7 03 00 00 08 00 00 00	r3 = 0x8
    2329	85 10 00 00 07 03 00 00	call 0x307 ; <__rust_dealloc>

00000000000048d0 <LBB25_240>
    2330	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2331	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB25_244>
    2332	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2333	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB25_244>
    2334	27 02 00 00 22 00 00 00	r2 *= 0x22
    2335	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB25_244>
    2336	b7 03 00 00 01 00 00 00	r3 = 0x1
    2337	85 10 00 00 ff 02 00 00	call 0x2ff ; <__rust_dealloc>

0000000000004910 <LBB25_244>
    2338	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2339	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB25_247>
    2340	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2341	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB25_247>
    2342	b7 03 00 00 01 00 00 00	r3 = 0x1
    2343	85 10 00 00 f9 02 00 00	call 0x2f9 ; <__rust_dealloc>

0000000000004940 <LBB25_247>
    2344	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    2345	55 08 01 00 14 00 00 00	if r8 != 0x14 goto +0x1 <LBB25_248>
    2346	05 00 0a fd 00 00 00 00	goto -0x2f6 <LBB25_115>

0000000000004958 <LBB25_248>
    2347	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    2348	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    2349	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    2350	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    2351	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    2352	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    2353	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    2354	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1

0000000000004998 <LBB25_249>
    2355	61 a1 70 fe 00 00 00 00	r1 = *(u32 *)(r10 - 0x190)
    2356	63 1a fc fd 00 00 00 00	*(u32 *)(r10 - 0x204) = r1
    2357	79 a1 68 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x198)
    2358	7b 1a f4 fd 00 00 00 00	*(u64 *)(r10 - 0x20c) = r1
    2359	79 a1 60 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1a0)
    2360	7b 1a ec fd 00 00 00 00	*(u64 *)(r10 - 0x214) = r1
    2361	79 a1 58 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1a8)
    2362	7b 1a e4 fd 00 00 00 00	*(u64 *)(r10 - 0x21c) = r1
    2363	63 8a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r8
    2364	05 00 46 fa 00 00 00 00	goto -0x5ba <LBB25_9>

00000000000049e8 <LBB25_250>
    2365	79 a3 88 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x278)

00000000000049f0 <LBB25_251>
    2366	bf a1 00 00 00 00 00 00	r1 = r10
    2367	07 01 00 00 e0 fd ff ff	r1 += -0x220
    2368	85 10 00 00 4e 09 00 00	call 0x94e ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    2369	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2370	07 01 00 00 01 00 00 00	r1 += 0x1
    2371	05 00 b6 fc 00 00 00 00	goto -0x34a <LBB25_109>

0000000000004a20 <LBB25_252>
    2372	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    2373	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    2374	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    2375	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    2376	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    2377	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    2378	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    2379	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    2380	bf a1 00 00 00 00 00 00	r1 = r10
    2381	07 01 00 00 00 ff ff ff	r1 += -0x100
    2382	85 10 00 00 dd f6 ff ff	call -0x923 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    2383	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2384	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB25_256>
    2385	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2386	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB25_256>
    2387	27 02 00 00 22 00 00 00	r2 *= 0x22
    2388	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB25_256>
    2389	b7 03 00 00 01 00 00 00	r3 = 0x1
    2390	85 10 00 00 ca 02 00 00	call 0x2ca ; <__rust_dealloc>

0000000000004ab8 <LBB25_256>
    2391	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2392	15 02 da ff 00 00 00 00	if r2 == 0x0 goto -0x26 <LBB25_249>
    2393	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2394	15 01 d8 ff 00 00 00 00	if r1 == 0x0 goto -0x28 <LBB25_249>
    2395	05 00 44 fe 00 00 00 00	goto -0x1bc <LBB25_169>

0000000000004ae0 <__rg_alloc>
    2396	18 03 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r3 = 0x300000000 ll
    2398	79 33 00 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x0)
    2399	18 04 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r4 = 0x300008000 ll
    2401	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB26_2>
    2402	bf 34 00 00 00 00 00 00	r4 = r3

0000000000004b18 <LBB26_2>
    2403	bf 43 00 00 00 00 00 00	r3 = r4
    2404	1f 13 00 00 00 00 00 00	r3 -= r1
    2405	b7 00 00 00 00 00 00 00	r0 = 0x0
    2406	b7 05 00 00 01 00 00 00	r5 = 0x1
    2407	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB26_4>
    2408	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000004b48 <LBB26_4>
    2409	b7 01 00 00 00 00 00 00	r1 = 0x0
    2410	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB26_6>
    2411	bf 31 00 00 00 00 00 00	r1 = r3

0000000000004b60 <LBB26_6>
    2412	87 02 00 00 00 00 00 00	r2 = -r2
    2413	5f 21 00 00 00 00 00 00	r1 &= r2
    2414	18 02 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000008 ll
    2416	2d 12 04 00 00 00 00 00	if r2 > r1 goto +0x4 <LBB26_8>
    2417	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
    2419	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    2420	bf 10 00 00 00 00 00 00	r0 = r1

0000000000004ba8 <LBB26_8>
    2421	95 00 00 00 00 00 00 00	exit

0000000000004bb0 <__rg_dealloc>
    2422	95 00 00 00 00 00 00 00	exit

0000000000004bb8 <__rg_realloc>
    2423	bf 15 00 00 00 00 00 00	r5 = r1
    2424	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2426	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2427	18 06 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r6 = 0x300008000 ll
    2429	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB28_2>
    2430	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004bf8 <LBB28_2>
    2431	bf 61 00 00 00 00 00 00	r1 = r6
    2432	1f 41 00 00 00 00 00 00	r1 -= r4
    2433	b7 00 00 00 00 00 00 00	r0 = 0x0
    2434	b7 07 00 00 01 00 00 00	r7 = 0x1
    2435	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB28_4>
    2436	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000004c28 <LBB28_4>
    2437	b7 06 00 00 00 00 00 00	r6 = 0x0
    2438	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB28_6>
    2439	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004c40 <LBB28_6>
    2440	87 03 00 00 00 00 00 00	r3 = -r3
    2441	5f 36 00 00 00 00 00 00	r6 &= r3
    2442	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
    2444	2d 61 0a 00 00 00 00 00	if r1 > r6 goto +0xa <LBB28_10>
    2445	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2447	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    2448	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB28_9>
    2449	bf 24 00 00 00 00 00 00	r4 = r2

0000000000004c90 <LBB28_9>
    2450	bf 61 00 00 00 00 00 00	r1 = r6
    2451	bf 52 00 00 00 00 00 00	r2 = r5
    2452	bf 43 00 00 00 00 00 00	r3 = r4
    2453	85 10 00 00 33 19 00 00	call 0x1933 ; <memcpy>
    2454	bf 60 00 00 00 00 00 00	r0 = r6

0000000000004cb8 <LBB28_10>
    2455	95 00 00 00 00 00 00 00	exit

0000000000004cc0 <custom_panic>
    2456	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    2457	bf a1 00 00 00 00 00 00	r1 = r10
    2458	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2459	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2460	b7 01 00 00 00 00 00 00	r1 = 0x0
    2461	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2462	b7 01 00 00 01 00 00 00	r1 = 0x1
    2463	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    2464	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    2465	18 01 00 00 c0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ac0 ll
    2467	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2468	18 01 00 00 e0 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x60e0 ll
    2470	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2471	bf a1 00 00 00 00 00 00	r1 = r10
    2472	07 01 00 00 a0 ff ff ff	r1 += -0x60
    2473	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2474	bf a1 00 00 00 00 00 00	r1 = r10
    2475	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2476	bf a2 00 00 00 00 00 00	r2 = r10
    2477	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2478	85 10 00 00 67 0c 00 00	call 0xc67 ; <alloc::fmt::format>
    2479	79 a6 b0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x50)
    2480	79 a7 a8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x58)
    2481	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    2482	bf 71 00 00 00 00 00 00	r1 = r7
    2483	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    2484	15 06 05 00 00 00 00 00	if r6 == 0x0 goto +0x5 <LBB30_3>
    2485	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB30_3>
    2486	bf 71 00 00 00 00 00 00	r1 = r7
    2487	bf 62 00 00 00 00 00 00	r2 = r6
    2488	b7 03 00 00 01 00 00 00	r3 = 0x1
    2489	85 10 00 00 67 02 00 00	call 0x267 ; <__rust_dealloc>

0000000000004dd0 <LBB30_3>
    2490	95 00 00 00 00 00 00 00	exit

0000000000004dd8 <<tictactoe::error::TictactoeError as core::fmt::Display>::fmt>
    2491	bf 23 00 00 00 00 00 00	r3 = r2
    2492	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    2493	65 01 0d 00 ae c7 71 00	if r1 s> 0x71c7ae goto +0xd <LBB32_4>
    2494	15 01 25 00 ac c7 71 00	if r1 == 0x71c7ac goto +0x25 <LBB32_9>
    2495	15 01 2f 00 ad c7 71 00	if r1 == 0x71c7ad goto +0x2f <LBB32_10>
    2496	18 01 00 00 a0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125a0 ll
    2498	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2499	b7 01 00 00 00 00 00 00	r1 = 0x0
    2500	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2501	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2502	b7 01 00 00 01 00 00 00	r1 = 0x1
    2503	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2504	18 01 00 00 10 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b10 ll
    2506	05 00 44 00 00 00 00 00	goto +0x44 <LBB32_13>

0000000000004e58 <LBB32_4>
    2507	65 01 0c 00 b0 c7 71 00	if r1 s> 0x71c7b0 goto +0xc <LBB32_7>
    2508	15 01 2d 00 af c7 71 00	if r1 == 0x71c7af goto +0x2d <LBB32_11>
    2509	18 01 00 00 a0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125a0 ll
    2511	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2512	b7 01 00 00 00 00 00 00	r1 = 0x0
    2513	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2514	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2515	b7 01 00 00 01 00 00 00	r1 = 0x1
    2516	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2517	18 01 00 00 f0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13af0 ll
    2519	05 00 37 00 00 00 00 00	goto +0x37 <LBB32_13>

0000000000004ec0 <LBB32_7>
    2520	15 01 2c 00 b1 c7 71 00	if r1 == 0x71c7b1 goto +0x2c <LBB32_12>
    2521	18 01 00 00 a0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125a0 ll
    2523	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2524	b7 01 00 00 00 00 00 00	r1 = 0x0
    2525	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2526	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2527	b7 01 00 00 01 00 00 00	r1 = 0x1
    2528	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2529	18 01 00 00 d0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ad0 ll
    2531	05 00 2b 00 00 00 00 00	goto +0x2b <LBB32_13>

0000000000004f20 <LBB32_9>
    2532	18 01 00 00 a0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125a0 ll
    2534	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2535	b7 01 00 00 00 00 00 00	r1 = 0x0
    2536	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2537	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2538	b7 01 00 00 01 00 00 00	r1 = 0x1
    2539	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2540	18 01 00 00 30 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b30 ll
    2542	05 00 20 00 00 00 00 00	goto +0x20 <LBB32_13>

0000000000004f78 <LBB32_10>
    2543	18 01 00 00 a0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125a0 ll
    2545	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2546	b7 01 00 00 00 00 00 00	r1 = 0x0
    2547	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2548	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2549	b7 01 00 00 01 00 00 00	r1 = 0x1
    2550	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2551	18 01 00 00 20 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b20 ll
    2553	05 00 15 00 00 00 00 00	goto +0x15 <LBB32_13>

0000000000004fd0 <LBB32_11>
    2554	18 01 00 00 a0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125a0 ll
    2556	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2557	b7 01 00 00 00 00 00 00	r1 = 0x0
    2558	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2559	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2560	b7 01 00 00 01 00 00 00	r1 = 0x1
    2561	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2562	18 01 00 00 00 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b00 ll
    2564	05 00 0a 00 00 00 00 00	goto +0xa <LBB32_13>

0000000000005028 <LBB32_12>
    2565	18 01 00 00 a0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125a0 ll
    2567	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2568	b7 01 00 00 00 00 00 00	r1 = 0x0
    2569	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2570	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2571	b7 01 00 00 01 00 00 00	r1 = 0x1
    2572	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2573	18 01 00 00 e0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ae0 ll

0000000000005078 <LBB32_13>
    2575	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2576	bf a2 00 00 00 00 00 00	r2 = r10
    2577	07 02 00 00 d0 ff ff ff	r2 += -0x30
    2578	bf 31 00 00 00 00 00 00	r1 = r3
    2579	85 10 00 00 e0 10 00 00	call 0x10e0 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    2580	95 00 00 00 00 00 00 00	exit

00000000000050a8 <<tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize>
    2581	bf 16 00 00 00 00 00 00	r6 = r1
    2582	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
    2583	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB33_5>
    2584	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2585	b7 02 00 00 01 00 00 00	r2 = 0x1
    2586	85 10 00 00 04 02 00 00	call 0x204 ; <__rust_alloc>
    2587	bf 07 00 00 00 00 00 00	r7 = r0
    2588	55 07 3c 00 00 00 00 00	if r7 != 0x0 goto +0x3c <LBB33_3>
    2589	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2590	b7 02 00 00 01 00 00 00	r2 = 0x1
    2591	85 10 00 00 ee 0b 00 00	call 0xbee ; <alloc::alloc::handle_alloc_error>
    2592	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005108 <LBB33_5>
    2593	07 03 00 00 ff ff ff ff	r3 += -0x1
    2594	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2595	71 41 00 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x0)
    2596	7b 32 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r3
    2597	07 04 00 00 01 00 00 00	r4 += 0x1
    2598	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2599	73 1a 8f ff 00 00 00 00	*(u8 *)(r10 - 0x71) = r1
    2600	15 01 0c 00 00 00 00 00	if r1 == 0x0 goto +0xc <LBB33_12>
    2601	15 01 73 00 01 00 00 00	if r1 == 0x1 goto +0x73 <LBB33_15>
    2602	15 01 01 00 02 00 00 00	if r1 == 0x2 goto +0x1 <LBB33_13>
    2603	05 00 12 00 00 00 00 00	goto +0x12 <LBB33_9>

0000000000005160 <LBB33_13>
    2604	bf a1 00 00 00 00 00 00	r1 = r10
    2605	07 01 00 00 c0 ff ff ff	r1 += -0x40
    2606	85 10 00 00 ec 00 00 00	call 0xec ; <<tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize>
    2607	71 a1 c0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x40)
    2608	15 01 0a 00 01 00 00 00	if r1 == 0x1 goto +0xa <LBB33_17>
    2609	b7 01 00 00 02 00 00 00	r1 = 0x2
    2610	71 a5 c2 ff 00 00 00 00	r5 = *(u8 *)(r10 - 0x3e)
    2611	71 a4 c1 ff 00 00 00 00	r4 = *(u8 *)(r10 - 0x3f)
    2612	05 00 68 00 00 00 00 00	goto +0x68 <LBB33_15>

00000000000051a8 <LBB33_12>
    2613	bf a1 00 00 00 00 00 00	r1 = r10
    2614	07 01 00 00 c0 ff ff ff	r1 += -0x40
    2615	85 10 00 00 79 09 00 00	call 0x979 ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
    2616	71 a1 c0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x40)
    2617	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB33_17>
    2618	05 00 55 00 00 00 00 00	goto +0x55 <LBB33_16>

00000000000051d8 <LBB33_17>
    2619	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    2620	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    2621	05 00 3b 00 00 00 00 00	goto +0x3b <LBB33_18>

00000000000051f0 <LBB33_9>
    2622	bf a1 00 00 00 00 00 00	r1 = r10
    2623	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2624	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2625	b7 01 00 00 00 00 00 00	r1 = 0x0
    2626	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2627	b7 07 00 00 01 00 00 00	r7 = 0x1
    2628	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
    2629	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    2630	18 01 00 00 b0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ab0 ll
    2632	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2633	18 01 00 00 38 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6038 ll
    2635	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2636	bf a1 00 00 00 00 00 00	r1 = r10
    2637	07 01 00 00 8f ff ff ff	r1 += -0x71
    2638	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2639	bf a1 00 00 00 00 00 00	r1 = r10
    2640	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2641	bf a2 00 00 00 00 00 00	r2 = r10
    2642	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2643	85 10 00 00 c2 0b 00 00	call 0xbc2 ; <alloc::fmt::format>
    2644	b7 01 00 00 18 00 00 00	r1 = 0x18
    2645	b7 02 00 00 08 00 00 00	r2 = 0x8
    2646	85 10 00 00 c8 01 00 00	call 0x1c8 ; <__rust_alloc>
    2647	55 00 25 00 00 00 00 00	if r0 != 0x0 goto +0x25 <LBB33_11>
    2648	05 00 0f 00 00 00 00 00	goto +0xf <LBB33_4>

00000000000052c8 <LBB33_3>
    2649	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2650	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2651	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2653	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2654	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2656	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2657	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2659	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2660	b7 01 00 00 18 00 00 00	r1 = 0x18
    2661	b7 02 00 00 08 00 00 00	r2 = 0x8
    2662	85 10 00 00 b8 01 00 00	call 0x1b8 ; <__rust_alloc>
    2663	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB33_8>

0000000000005340 <LBB33_4>
    2664	b7 01 00 00 18 00 00 00	r1 = 0x18
    2665	b7 02 00 00 08 00 00 00	r2 = 0x8
    2666	85 10 00 00 a3 0b 00 00	call 0xba3 ; <alloc::alloc::handle_alloc_error>
    2667	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005360 <LBB33_8>
    2668	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2669	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2670	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2671	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2672	bf a1 00 00 00 00 00 00	r1 = r10
    2673	07 01 00 00 68 ff ff ff	r1 += -0x98
    2674	b7 02 00 00 14 00 00 00	r2 = 0x14
    2675	bf 03 00 00 00 00 00 00	r3 = r0
    2676	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
    2678	85 10 00 00 73 0a 00 00	call 0xa73 ; <std::io::error::Error::_new>
    2679	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    2680	79 a2 70 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x90)

00000000000053c8 <LBB33_18>
    2681	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2682	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2683	b7 01 00 00 01 00 00 00	r1 = 0x1
    2684	05 00 2e 00 00 00 00 00	goto +0x2e <LBB33_19>

00000000000053e8 <LBB33_11>
    2685	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2686	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2687	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    2688	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2689	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    2690	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    2691	bf a1 00 00 00 00 00 00	r1 = r10
    2692	07 01 00 00 78 ff ff ff	r1 += -0x88
    2693	b7 02 00 00 14 00 00 00	r2 = 0x14
    2694	bf 03 00 00 00 00 00 00	r3 = r0
    2695	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
    2697	85 10 00 00 60 0a 00 00	call 0xa60 ; <std::io::error::Error::_new>
    2698	79 a1 78 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x88)
    2699	79 a2 80 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x80)
    2700	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2701	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2702	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7
    2703	05 00 1c 00 00 00 00 00	goto +0x1c <LBB33_20>

0000000000005480 <LBB33_16>
    2704	61 a1 c3 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x3d)
    2705	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 0x60) = r1
    2706	71 a1 c7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x39)
    2707	73 1a a4 ff 00 00 00 00	*(u8 *)(r10 - 0x5c) = r1
    2708	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    2709	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    2710	71 a1 e0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x20)
    2711	73 1a 98 ff 00 00 00 00	*(u8 *)(r10 - 0x68) = r1
    2712	79 a0 d0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x30)
    2713	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    2714	b7 01 00 00 00 00 00 00	r1 = 0x0
    2715	71 a5 c2 ff 00 00 00 00	r5 = *(u8 *)(r10 - 0x3e)
    2716	71 a4 c1 ff 00 00 00 00	r4 = *(u8 *)(r10 - 0x3f)

00000000000054e8 <LBB33_15>
    2717	71 a2 a4 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x5c)
    2718	73 26 08 00 00 00 00 00	*(u8 *)(r6 + 0x8) = r2
    2719	61 a2 a0 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x60)
    2720	63 26 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r2
    2721	71 a2 98 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x68)
    2722	79 a7 90 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x70)
    2723	7b 06 11 00 00 00 00 00	*(u64 *)(r6 + 0x11) = r0
    2724	7b 36 09 00 00 00 00 00	*(u64 *)(r6 + 0x9) = r3
    2725	7b 76 19 00 00 00 00 00	*(u64 *)(r6 + 0x19) = r7
    2726	73 26 21 00 00 00 00 00	*(u8 *)(r6 + 0x21) = r2
    2727	73 56 03 00 00 00 00 00	*(u8 *)(r6 + 0x3) = r5
    2728	73 46 02 00 00 00 00 00	*(u8 *)(r6 + 0x2) = r4
    2729	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
    2730	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000005558 <LBB33_19>
    2731	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1

0000000000005560 <LBB33_20>
    2732	95 00 00 00 00 00 00 00	exit

0000000000005568 <<tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize>
    2733	bf 16 00 00 00 00 00 00	r6 = r1
    2734	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    2735	55 01 09 00 00 00 00 00	if r1 != 0x0 goto +0x9 <LBB35_5>
    2736	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2737	b7 02 00 00 01 00 00 00	r2 = 0x1
    2738	85 10 00 00 6c 01 00 00	call 0x16c ; <__rust_alloc>
    2739	bf 07 00 00 00 00 00 00	r7 = r0
    2740	55 07 29 00 00 00 00 00	if r7 != 0x0 goto +0x29 <LBB35_3>
    2741	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2742	b7 02 00 00 01 00 00 00	r2 = 0x1
    2743	85 10 00 00 56 0b 00 00	call 0xb56 ; <alloc::alloc::handle_alloc_error>
    2744	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000055c8 <LBB35_5>
    2745	07 01 00 00 ff ff ff ff	r1 += -0x1
    2746	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2747	71 43 00 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x0)
    2748	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    2749	07 04 00 00 01 00 00 00	r4 += 0x1
    2750	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2751	b7 01 00 00 01 00 00 00	r1 = 0x1
    2752	73 3a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r3
    2753	15 03 42 00 00 00 00 00	if r3 == 0x0 goto +0x42 <LBB35_13>
    2754	15 03 40 00 01 00 00 00	if r3 == 0x1 goto +0x40 <LBB35_12>
    2755	bf a1 00 00 00 00 00 00	r1 = r10
    2756	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2757	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2758	b7 01 00 00 00 00 00 00	r1 = 0x0
    2759	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2760	b7 07 00 00 01 00 00 00	r7 = 0x1
    2761	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
    2762	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    2763	18 01 00 00 b0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ab0 ll
    2765	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2766	18 01 00 00 38 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6038 ll
    2768	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2769	bf a1 00 00 00 00 00 00	r1 = r10
    2770	07 01 00 00 a7 ff ff ff	r1 += -0x59
    2771	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2772	bf a1 00 00 00 00 00 00	r1 = r10
    2773	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2774	bf a2 00 00 00 00 00 00	r2 = r10
    2775	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2776	85 10 00 00 3d 0b 00 00	call 0xb3d ; <alloc::fmt::format>
    2777	b7 01 00 00 18 00 00 00	r1 = 0x18
    2778	b7 02 00 00 08 00 00 00	r2 = 0x8
    2779	85 10 00 00 43 01 00 00	call 0x143 ; <__rust_alloc>
    2780	55 00 2b 00 00 00 00 00	if r0 != 0x0 goto +0x2b <LBB35_9>
    2781	05 00 0f 00 00 00 00 00	goto +0xf <LBB35_4>

00000000000056f0 <LBB35_3>
    2782	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2783	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2784	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2786	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2787	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2789	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2790	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2792	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2793	b7 01 00 00 18 00 00 00	r1 = 0x18
    2794	b7 02 00 00 08 00 00 00	r2 = 0x8
    2795	85 10 00 00 33 01 00 00	call 0x133 ; <__rust_alloc>
    2796	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB35_10>

0000000000005768 <LBB35_4>
    2797	b7 01 00 00 18 00 00 00	r1 = 0x18
    2798	b7 02 00 00 08 00 00 00	r2 = 0x8
    2799	85 10 00 00 1e 0b 00 00	call 0xb1e ; <alloc::alloc::handle_alloc_error>
    2800	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005788 <LBB35_10>
    2801	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2802	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2803	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2804	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2805	bf a1 00 00 00 00 00 00	r1 = r10
    2806	07 01 00 00 80 ff ff ff	r1 += -0x80
    2807	b7 02 00 00 14 00 00 00	r2 = 0x14
    2808	bf 03 00 00 00 00 00 00	r3 = r0
    2809	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
    2811	85 10 00 00 ee 09 00 00	call 0x9ee ; <std::io::error::Error::_new>
    2812	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    2813	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
    2814	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2815	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2816	b7 01 00 00 01 00 00 00	r1 = 0x1
    2817	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    2818	05 00 17 00 00 00 00 00	goto +0x17 <LBB35_11>

0000000000005818 <LBB35_12>
    2819	b7 01 00 00 02 00 00 00	r1 = 0x2

0000000000005820 <LBB35_13>
    2820	b7 02 00 00 00 00 00 00	r2 = 0x0
    2821	73 26 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r2
    2822	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
    2823	05 00 12 00 00 00 00 00	goto +0x12 <LBB35_11>

0000000000005840 <LBB35_9>
    2824	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2825	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2826	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    2827	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2828	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    2829	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    2830	bf a1 00 00 00 00 00 00	r1 = r10
    2831	07 01 00 00 90 ff ff ff	r1 += -0x70
    2832	b7 02 00 00 14 00 00 00	r2 = 0x14
    2833	bf 03 00 00 00 00 00 00	r3 = r0
    2834	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
    2836	85 10 00 00 d5 09 00 00	call 0x9d5 ; <std::io::error::Error::_new>
    2837	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    2838	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
    2839	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2840	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2841	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

00000000000058d0 <LBB35_11>
    2842	95 00 00 00 00 00 00 00	exit

00000000000058d8 <<tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize>
    2843	bf 27 00 00 00 00 00 00	r7 = r2
    2844	bf 16 00 00 00 00 00 00	r6 = r1
    2845	bf a1 00 00 00 00 00 00	r1 = r10
    2846	07 01 00 00 e8 ff ff ff	r1 += -0x18
    2847	85 10 00 00 8d ff ff ff	call -0x73 ; <<tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize>
    2848	71 a1 e8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x18)
    2849	15 01 0b 00 01 00 00 00	if r1 == 0x1 goto +0xb <LBB36_6>
    2850	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    2851	55 01 0c 00 00 00 00 00	if r1 != 0x0 goto +0xc <LBB36_7>
    2852	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2853	b7 02 00 00 01 00 00 00	r2 = 0x1
    2854	85 10 00 00 f8 00 00 00	call 0xf8 ; <__rust_alloc>
    2855	bf 07 00 00 00 00 00 00	r7 = r0
    2856	55 07 12 00 00 00 00 00	if r7 != 0x0 goto +0x12 <LBB36_4>
    2857	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2858	b7 02 00 00 01 00 00 00	r2 = 0x1
    2859	85 10 00 00 e2 0a 00 00	call 0xae2 ; <alloc::alloc::handle_alloc_error>
    2860	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005968 <LBB36_6>
    2861	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    2862	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    2863	05 00 2b 00 00 00 00 00	goto +0x2b <LBB36_9>

0000000000005980 <LBB36_7>
    2864	71 a2 e9 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x17)
    2865	07 01 00 00 ff ff ff ff	r1 += -0x1
    2866	79 73 00 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x0)
    2867	71 34 00 00 00 00 00 00	r4 = *(u8 *)(r3 + 0x0)
    2868	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2869	07 03 00 00 01 00 00 00	r3 += 0x1
    2870	7b 37 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r3
    2871	73 46 02 00 00 00 00 00	*(u8 *)(r6 + 0x2) = r4
    2872	73 26 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r2
    2873	b7 01 00 00 00 00 00 00	r1 = 0x0
    2874	05 00 23 00 00 00 00 00	goto +0x23 <LBB36_10>

00000000000059d8 <LBB36_4>
    2875	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2876	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2877	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2879	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2880	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2882	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2883	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2885	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2886	b7 01 00 00 18 00 00 00	r1 = 0x18
    2887	b7 02 00 00 08 00 00 00	r2 = 0x8
    2888	85 10 00 00 d6 00 00 00	call 0xd6 ; <__rust_alloc>
    2889	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB36_8>
    2890	b7 01 00 00 18 00 00 00	r1 = 0x18
    2891	b7 02 00 00 08 00 00 00	r2 = 0x8
    2892	85 10 00 00 c1 0a 00 00	call 0xac1 ; <alloc::alloc::handle_alloc_error>
    2893	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005a70 <LBB36_8>
    2894	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2895	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2896	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2897	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2898	bf a1 00 00 00 00 00 00	r1 = r10
    2899	07 01 00 00 d8 ff ff ff	r1 += -0x28
    2900	b7 02 00 00 14 00 00 00	r2 = 0x14
    2901	bf 03 00 00 00 00 00 00	r3 = r0
    2902	18 04 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b60 ll
    2904	85 10 00 00 91 09 00 00	call 0x991 ; <std::io::error::Error::_new>
    2905	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    2906	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)

0000000000005ad8 <LBB36_9>
    2907	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2908	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2909	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000005af0 <LBB36_10>
    2910	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    2911	95 00 00 00 00 00 00 00	exit

0000000000005b00 <std::error::Error::type_id>
    2912	18 00 00 00 ed d3 f7 ec 00 00 00 00 03 94 b8 10	r0 = 0x10b89403ecf7d3ed ll
    2914	95 00 00 00 00 00 00 00	exit

0000000000005b18 <std::error::Error::backtrace>
    2915	b7 00 00 00 00 00 00 00	r0 = 0x0
    2916	95 00 00 00 00 00 00 00	exit

0000000000005b28 <std::error::Error::cause>
    2917	b7 02 00 00 00 00 00 00	r2 = 0x0
    2918	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2919	95 00 00 00 00 00 00 00	exit

0000000000005b40 <<alloc::string::String as core::fmt::Write>::write_str>
    2920	bf 36 00 00 00 00 00 00	r6 = r3
    2921	bf 28 00 00 00 00 00 00	r8 = r2
    2922	bf 17 00 00 00 00 00 00	r7 = r1
    2923	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    2924	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    2925	1f 91 00 00 00 00 00 00	r1 -= r9
    2926	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB42_2>
    2927	bf 71 00 00 00 00 00 00	r1 = r7
    2928	bf 92 00 00 00 00 00 00	r2 = r9
    2929	bf 63 00 00 00 00 00 00	r3 = r6
    2930	85 10 00 00 eb f4 ff ff	call -0xb15 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    2931	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000005ba0 <LBB42_2>
    2932	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2933	0f 91 00 00 00 00 00 00	r1 += r9
    2934	bf 82 00 00 00 00 00 00	r2 = r8
    2935	bf 63 00 00 00 00 00 00	r3 = r6
    2936	85 10 00 00 50 17 00 00	call 0x1750 ; <memcpy>
    2937	0f 69 00 00 00 00 00 00	r9 += r6
    2938	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    2939	b7 00 00 00 00 00 00 00	r0 = 0x0
    2940	95 00 00 00 00 00 00 00	exit

0000000000005be8 <<alloc::string::String as core::fmt::Write>::write_char>
    2941	bf 27 00 00 00 00 00 00	r7 = r2
    2942	bf 16 00 00 00 00 00 00	r6 = r1
    2943	bf 71 00 00 00 00 00 00	r1 = r7
    2944	67 01 00 00 20 00 00 00	r1 <<= 0x20
    2945	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2946	25 01 0c 00 7f 00 00 00	if r1 > 0x7f goto +0xc <LBB43_4>
    2947	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    2948	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    2949	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB43_3>
    2950	bf 61 00 00 00 00 00 00	r1 = r6
    2951	85 10 00 00 02 f5 ff ff	call -0xafe ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    2952	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

0000000000005c48 <LBB43_3>
    2953	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    2954	0f 21 00 00 00 00 00 00	r1 += r2
    2955	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    2956	07 02 00 00 01 00 00 00	r2 += 0x1
    2957	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2958	05 00 42 00 00 00 00 00	goto +0x42 <LBB43_12>

0000000000005c78 <LBB43_4>
    2959	b7 02 00 00 00 00 00 00	r2 = 0x0
    2960	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    2961	b7 02 00 00 00 08 00 00	r2 = 0x800
    2962	2d 12 13 00 00 00 00 00	if r2 > r1 goto +0x13 <LBB43_6>
    2963	bf 71 00 00 00 00 00 00	r1 = r7
    2964	67 01 00 00 20 00 00 00	r1 <<= 0x20
    2965	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2966	b7 02 00 00 00 00 01 00	r2 = 0x10000
    2967	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB43_7>
    2968	05 00 16 00 00 00 00 00	goto +0x16 <LBB43_8>

0000000000005cc8 <LBB43_7>
    2969	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    2970	47 07 00 00 80 00 00 00	r7 |= 0x80
    2971	73 7a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r7
    2972	bf 12 00 00 00 00 00 00	r2 = r1
    2973	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    2974	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    2975	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2976	77 01 00 00 06 00 00 00	r1 >>= 0x6
    2977	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    2978	47 01 00 00 80 00 00 00	r1 |= 0x80
    2979	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    2980	b7 07 00 00 03 00 00 00	r7 = 0x3
    2981	05 00 1a 00 00 00 00 00	goto +0x1a <LBB43_9>

0000000000005d30 <LBB43_6>
    2982	bf 71 00 00 00 00 00 00	r1 = r7
    2983	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    2984	47 01 00 00 80 00 00 00	r1 |= 0x80
    2985	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    2986	77 07 00 00 06 00 00 00	r7 >>= 0x6
    2987	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    2988	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    2989	b7 07 00 00 02 00 00 00	r7 = 0x2
    2990	05 00 11 00 00 00 00 00	goto +0x11 <LBB43_9>

0000000000005d78 <LBB43_8>
    2991	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    2992	47 07 00 00 80 00 00 00	r7 |= 0x80
    2993	73 7a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r7
    2994	bf 12 00 00 00 00 00 00	r2 = r1
    2995	77 02 00 00 12 00 00 00	r2 >>= 0x12
    2996	47 02 00 00 f0 00 00 00	r2 |= 0xf0
    2997	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2998	bf 12 00 00 00 00 00 00	r2 = r1
    2999	77 02 00 00 06 00 00 00	r2 >>= 0x6
    3000	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    3001	47 02 00 00 80 00 00 00	r2 |= 0x80
    3002	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    3003	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    3004	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    3005	47 01 00 00 80 00 00 00	r1 |= 0x80
    3006	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    3007	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000005e00 <LBB43_9>
    3008	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    3009	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    3010	1f 81 00 00 00 00 00 00	r1 -= r8
    3011	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB43_11>
    3012	bf 61 00 00 00 00 00 00	r1 = r6
    3013	bf 82 00 00 00 00 00 00	r2 = r8
    3014	bf 73 00 00 00 00 00 00	r3 = r7
    3015	85 10 00 00 96 f4 ff ff	call -0xb6a ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3016	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

0000000000005e48 <LBB43_11>
    3017	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    3018	0f 81 00 00 00 00 00 00	r1 += r8
    3019	bf a2 00 00 00 00 00 00	r2 = r10
    3020	07 02 00 00 fc ff ff ff	r2 += -0x4
    3021	bf 73 00 00 00 00 00 00	r3 = r7
    3022	85 10 00 00 fa 16 00 00	call 0x16fa ; <memcpy>
    3023	0f 78 00 00 00 00 00 00	r8 += r7
    3024	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

0000000000005e88 <LBB43_12>
    3025	b7 00 00 00 00 00 00 00	r0 = 0x0
    3026	95 00 00 00 00 00 00 00	exit

0000000000005e98 <core::fmt::Write::write_fmt>
    3027	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3028	bf a6 00 00 00 00 00 00	r6 = r10
    3029	07 06 00 00 d0 ff ff ff	r6 += -0x30
    3030	bf 61 00 00 00 00 00 00	r1 = r6
    3031	b7 03 00 00 30 00 00 00	r3 = 0x30
    3032	85 10 00 00 f0 16 00 00	call 0x16f0 ; <memcpy>
    3033	bf a1 00 00 00 00 00 00	r1 = r10
    3034	07 01 00 00 c8 ff ff ff	r1 += -0x38
    3035	18 02 00 00 30 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13c30 ll
    3037	bf 63 00 00 00 00 00 00	r3 = r6
    3038	85 10 00 00 bd 0c 00 00	call 0xcbd ; <core::fmt::write>
    3039	95 00 00 00 00 00 00 00	exit

0000000000005f00 <<&mut W as core::fmt::Write>::write_str>
    3040	bf 36 00 00 00 00 00 00	r6 = r3
    3041	bf 28 00 00 00 00 00 00	r8 = r2
    3042	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    3043	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    3044	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    3045	1f 91 00 00 00 00 00 00	r1 -= r9
    3046	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB45_2>
    3047	bf 71 00 00 00 00 00 00	r1 = r7
    3048	bf 92 00 00 00 00 00 00	r2 = r9
    3049	bf 63 00 00 00 00 00 00	r3 = r6
    3050	85 10 00 00 73 f4 ff ff	call -0xb8d ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3051	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000005f60 <LBB45_2>
    3052	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    3053	0f 91 00 00 00 00 00 00	r1 += r9
    3054	bf 82 00 00 00 00 00 00	r2 = r8
    3055	bf 63 00 00 00 00 00 00	r3 = r6
    3056	85 10 00 00 d8 16 00 00	call 0x16d8 ; <memcpy>
    3057	0f 69 00 00 00 00 00 00	r9 += r6
    3058	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    3059	b7 00 00 00 00 00 00 00	r0 = 0x0
    3060	95 00 00 00 00 00 00 00	exit

0000000000005fa8 <<&mut W as core::fmt::Write>::write_char>
    3061	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3062	85 10 00 00 86 ff ff ff	call -0x7a ; <<alloc::string::String as core::fmt::Write>::write_char>
    3063	b7 00 00 00 00 00 00 00	r0 = 0x0
    3064	95 00 00 00 00 00 00 00	exit

0000000000005fc8 <<&mut W as core::fmt::Write>::write_fmt>
    3065	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3066	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3067	bf a6 00 00 00 00 00 00	r6 = r10
    3068	07 06 00 00 d0 ff ff ff	r6 += -0x30
    3069	bf 61 00 00 00 00 00 00	r1 = r6
    3070	b7 03 00 00 30 00 00 00	r3 = 0x30
    3071	85 10 00 00 c9 16 00 00	call 0x16c9 ; <memcpy>
    3072	bf a1 00 00 00 00 00 00	r1 = r10
    3073	07 01 00 00 c8 ff ff ff	r1 += -0x38
    3074	18 02 00 00 30 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13c30 ll
    3076	bf 63 00 00 00 00 00 00	r3 = r6
    3077	85 10 00 00 96 0c 00 00	call 0xc96 ; <core::fmt::write>
    3078	95 00 00 00 00 00 00 00	exit

0000000000006038 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt>
    3079	bf 26 00 00 00 00 00 00	r6 = r2
    3080	bf 17 00 00 00 00 00 00	r7 = r1
    3081	bf 61 00 00 00 00 00 00	r1 = r6
    3082	85 10 00 00 f5 0e 00 00	call 0xef5 ; <core::fmt::Formatter::debug_lower_hex>
    3083	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB48_2>
    3084	bf 61 00 00 00 00 00 00	r1 = r6
    3085	85 10 00 00 f6 0e 00 00	call 0xef6 ; <core::fmt::Formatter::debug_upper_hex>
    3086	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB48_5>
    3087	05 00 08 00 00 00 00 00	goto +0x8 <LBB48_4>

0000000000006080 <LBB48_5>
    3088	bf 71 00 00 00 00 00 00	r1 = r7
    3089	bf 62 00 00 00 00 00 00	r2 = r6
    3090	85 10 00 00 9c 12 00 00	call 0x129c ; <core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt>
    3091	05 00 07 00 00 00 00 00	goto +0x7 <LBB48_3>

00000000000060a0 <LBB48_2>
    3092	bf 71 00 00 00 00 00 00	r1 = r7
    3093	bf 62 00 00 00 00 00 00	r2 = r6
    3094	85 10 00 00 6a 12 00 00	call 0x126a ; <core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt>
    3095	05 00 03 00 00 00 00 00	goto +0x3 <LBB48_3>

00000000000060c0 <LBB48_4>
    3096	bf 71 00 00 00 00 00 00	r1 = r7
    3097	bf 62 00 00 00 00 00 00	r2 = r6
    3098	85 10 00 00 69 13 00 00	call 0x1369 ; <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>

00000000000060d8 <LBB48_3>
    3099	95 00 00 00 00 00 00 00	exit

00000000000060e0 <<&T as core::fmt::Display>::fmt>
    3100	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3101	85 10 00 00 af 0b 00 00	call 0xbaf ; <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt>
    3102	95 00 00 00 00 00 00 00	exit

00000000000060f8 <__rust_alloc>
    3103	85 10 00 00 3c fd ff ff	call -0x2c4 ; <__rg_alloc>
    3104	95 00 00 00 00 00 00 00	exit

0000000000006108 <__rust_dealloc>
    3105	85 10 00 00 54 fd ff ff	call -0x2ac ; <__rg_dealloc>
    3106	95 00 00 00 00 00 00 00	exit

0000000000006118 <__rust_realloc>
    3107	85 10 00 00 53 fd ff ff	call -0x2ad ; <__rg_realloc>
    3108	95 00 00 00 00 00 00 00	exit

0000000000006128 <__rust_alloc_error_handler>
    3109	85 10 00 00 ec 09 00 00	call 0x9ec ; <__rg_oom>
    3110	95 00 00 00 00 00 00 00	exit

0000000000006138 <core::ptr::drop_in_place<&alloc::vec::Vec<(u64,solana_program::stake_history::StakeHistoryEntry)>>>
    3111	95 00 00 00 00 00 00 00	exit

0000000000006140 <core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>>
    3112	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    3113	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB6_3>
    3114	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3115	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB6_3>
    3116	b7 03 00 00 01 00 00 00	r3 = 0x1
    3117	85 10 00 00 f3 ff ff ff	call -0xd ; <__rust_dealloc>

0000000000006170 <LBB6_3>
    3118	95 00 00 00 00 00 00 00	exit

0000000000006178 <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    3119	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    3120	65 02 08 00 09 00 00 00	if r2 s> 0x9 goto +0x8 <LBB10_3>
    3121	15 02 14 00 03 00 00 00	if r2 == 0x3 goto +0x14 <LBB10_6>
    3122	15 02 01 00 09 00 00 00	if r2 == 0x9 goto +0x1 <LBB10_9>
    3123	05 00 07 00 00 00 00 00	goto +0x7 <LBB10_5>

00000000000061a0 <LBB10_9>
    3124	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3125	15 02 05 00 00 00 00 00	if r2 == 0x0 goto +0x5 <LBB10_5>
    3126	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3127	15 01 03 00 00 00 00 00	if r1 == 0x0 goto +0x3 <LBB10_5>
    3128	05 00 11 00 00 00 00 00	goto +0x11 <LBB10_8>

00000000000061c8 <LBB10_3>
    3129	15 02 02 00 0a 00 00 00	if r2 == 0xa goto +0x2 <LBB10_12>
    3130	15 02 06 00 0b 00 00 00	if r2 == 0xb goto +0x6 <LBB10_15>

00000000000061d8 <LBB10_5>
    3131	95 00 00 00 00 00 00 00	exit

00000000000061e0 <LBB10_12>
    3132	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3133	15 02 fd ff 00 00 00 00	if r2 == 0x0 goto -0x3 <LBB10_5>
    3134	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3135	15 01 fb ff 00 00 00 00	if r1 == 0x0 goto -0x5 <LBB10_5>
    3136	05 00 09 00 00 00 00 00	goto +0x9 <LBB10_8>

0000000000006208 <LBB10_15>
    3137	79 12 38 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x38)
    3138	15 02 f8 ff 00 00 00 00	if r2 == 0x0 goto -0x8 <LBB10_5>
    3139	79 11 30 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x30)
    3140	15 01 f6 ff 00 00 00 00	if r1 == 0x0 goto -0xa <LBB10_5>
    3141	05 00 04 00 00 00 00 00	goto +0x4 <LBB10_8>

0000000000006230 <LBB10_6>
    3142	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3143	15 02 f3 ff 00 00 00 00	if r2 == 0x0 goto -0xd <LBB10_5>
    3144	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3145	15 01 f1 ff 00 00 00 00	if r1 == 0x0 goto -0xf <LBB10_5>

0000000000006250 <LBB10_8>
    3146	b7 03 00 00 01 00 00 00	r3 = 0x1
    3147	85 10 00 00 d5 ff ff ff	call -0x2b ; <__rust_dealloc>
    3148	05 00 ee ff 00 00 00 00	goto -0x12 <LBB10_5>

0000000000006268 <solana_program::account_info::AccountInfo::lamports>
    3149	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    3150	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    3151	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    3153	2d 23 0b 00 00 00 00 00	if r3 > r2 goto +0xb <LBB14_2>
    3154	bf a3 00 00 00 00 00 00	r3 = r10
    3155	07 03 00 00 f8 ff ff ff	r3 += -0x8
    3156	18 01 00 00 e8 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ae8 ll
    3158	b7 02 00 00 18 00 00 00	r2 = 0x18
    3159	18 04 00 00 40 3d 01 00 00 00 00 00 00 00 00 00	r4 = 0x13d40 ll
    3161	18 05 00 00 60 3c 01 00 00 00 00 00 00 00 00 00	r5 = 0x13c60 ll
    3163	85 10 00 00 15 0c 00 00	call 0xc15 ; <core::result::unwrap_failed>
    3164	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000062e8 <LBB14_2>
    3165	bf 23 00 00 00 00 00 00	r3 = r2
    3166	07 03 00 00 01 00 00 00	r3 += 0x1
    3167	7b 31 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r3
    3168	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    3169	79 30 00 00 00 00 00 00	r0 = *(u64 *)(r3 + 0x0)
    3170	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    3171	95 00 00 00 00 00 00 00	exit

0000000000006320 <solana_program::account_info::AccountInfo::try_borrow_data>
    3172	79 22 10 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x10)
    3173	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    3174	18 04 00 00 fe ff ff ff 00 00 00 00 ff ff ff 7f	r4 = 0x7ffffffffffffffe ll
    3176	2d 43 09 00 00 00 00 00	if r3 > r4 goto +0x9 <LBB23_2>
    3177	bf 24 00 00 00 00 00 00	r4 = r2
    3178	07 04 00 00 10 00 00 00	r4 += 0x10
    3179	07 03 00 00 01 00 00 00	r3 += 0x1
    3180	7b 32 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r3
    3181	7b 41 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r4
    3182	07 02 00 00 18 00 00 00	r2 += 0x18
    3183	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    3184	b7 02 00 00 00 00 00 00	r2 = 0x0
    3185	05 00 03 00 00 00 00 00	goto +0x3 <LBB23_3>

0000000000006390 <LBB23_2>
    3186	b7 02 00 00 0b 00 00 00	r2 = 0xb
    3187	63 21 08 00 00 00 00 00	*(u32 *)(r1 + 0x8) = r2
    3188	b7 02 00 00 01 00 00 00	r2 = 0x1

00000000000063a8 <LBB23_3>
    3189	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3190	95 00 00 00 00 00 00 00	exit

00000000000063b8 <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    3191	79 22 10 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x10)
    3192	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    3193	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB27_2>
    3194	bf 23 00 00 00 00 00 00	r3 = r2
    3195	07 03 00 00 10 00 00 00	r3 += 0x10
    3196	b7 04 00 00 ff ff ff ff	r4 = -0x1
    3197	7b 42 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r4
    3198	7b 31 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r3
    3199	07 02 00 00 18 00 00 00	r2 += 0x18
    3200	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    3201	b7 02 00 00 00 00 00 00	r2 = 0x0
    3202	05 00 03 00 00 00 00 00	goto +0x3 <LBB27_3>

0000000000006418 <LBB27_2>
    3203	b7 02 00 00 0b 00 00 00	r2 = 0xb
    3204	63 21 08 00 00 00 00 00	*(u32 *)(r1 + 0x8) = r2
    3205	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000006430 <LBB27_3>
    3206	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3207	95 00 00 00 00 00 00 00	exit

0000000000006440 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3208	bf 16 00 00 00 00 00 00	r6 = r1
    3209	bf 24 00 00 00 00 00 00	r4 = r2
    3210	0f 34 00 00 00 00 00 00	r4 += r3
    3211	b7 01 00 00 01 00 00 00	r1 = 0x1
    3212	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB32_2>
    3213	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006470 <LBB32_2>
    3214	57 01 00 00 01 00 00 00	r1 &= 0x1
    3215	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB32_12>
    3216	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    3217	bf 17 00 00 00 00 00 00	r7 = r1
    3218	67 07 00 00 01 00 00 00	r7 <<= 0x1
    3219	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB32_5>
    3220	bf 47 00 00 00 00 00 00	r7 = r4

00000000000064a8 <LBB32_5>
    3221	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB32_7>
    3222	b7 07 00 00 08 00 00 00	r7 = 0x8

00000000000064b8 <LBB32_7>
    3223	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB32_9>
    3224	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    3225	b7 03 00 00 01 00 00 00	r3 = 0x1
    3226	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3227	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3228	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    3229	05 00 02 00 00 00 00 00	goto +0x2 <LBB32_10>

00000000000064f0 <LBB32_9>
    3230	b7 01 00 00 00 00 00 00	r1 = 0x0
    3231	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

0000000000006500 <LBB32_10>
    3232	bf a1 00 00 00 00 00 00	r1 = r10
    3233	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3234	bf a4 00 00 00 00 00 00	r4 = r10
    3235	07 04 00 00 e8 ff ff ff	r4 += -0x18
    3236	bf 72 00 00 00 00 00 00	r2 = r7
    3237	b7 03 00 00 01 00 00 00	r3 = 0x1
    3238	85 10 00 00 47 00 00 00	call 0x47 ; <alloc::raw_vec::finish_grow>
    3239	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    3240	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB32_14>
    3241	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3242	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB32_13>

0000000000006558 <LBB32_12>
    3243	85 10 00 00 5b 09 00 00	call 0x95b ; <alloc::raw_vec::capacity_overflow>
    3244	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006568 <LBB32_14>
    3245	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3246	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3247	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3248	95 00 00 00 00 00 00 00	exit

0000000000006588 <LBB32_13>
    3249	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3250	85 10 00 00 5b 09 00 00	call 0x95b ; <alloc::alloc::handle_alloc_error>
    3251	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000065a0 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3252	bf 16 00 00 00 00 00 00	r6 = r1
    3253	bf 21 00 00 00 00 00 00	r1 = r2
    3254	07 01 00 00 01 00 00 00	r1 += 0x1
    3255	b7 03 00 00 01 00 00 00	r3 = 0x1
    3256	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB42_2>
    3257	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000065d0 <LBB42_2>
    3258	57 03 00 00 01 00 00 00	r3 &= 0x1
    3259	55 03 29 00 00 00 00 00	if r3 != 0x0 goto +0x29 <LBB42_16>
    3260	79 69 08 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x8)
    3261	bf 97 00 00 00 00 00 00	r7 = r9
    3262	67 07 00 00 01 00 00 00	r7 <<= 0x1
    3263	2d 17 01 00 00 00 00 00	if r7 > r1 goto +0x1 <LBB42_5>
    3264	bf 17 00 00 00 00 00 00	r7 = r1

0000000000006608 <LBB42_5>
    3265	25 07 01 00 04 00 00 00	if r7 > 0x4 goto +0x1 <LBB42_7>
    3266	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000006618 <LBB42_7>
    3267	bf a1 00 00 00 00 00 00	r1 = r10
    3268	07 01 00 00 c0 ff ff ff	r1 += -0x40
    3269	b7 08 00 00 00 00 00 00	r8 = 0x0
    3270	bf 72 00 00 00 00 00 00	r2 = r7
    3271	b7 03 00 00 00 00 00 00	r3 = 0x0
    3272	b7 04 00 00 30 00 00 00	r4 = 0x30
    3273	b7 05 00 00 00 00 00 00	r5 = 0x0
    3274	85 10 00 00 bd 17 00 00	call 0x17bd ; <__multi3>
    3275	b7 01 00 00 01 00 00 00	r1 = 0x1
    3276	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
    3277	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB42_9>
    3278	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006678 <LBB42_9>
    3279	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB42_11>
    3280	b7 08 00 00 08 00 00 00	r8 = 0x8

0000000000006688 <LBB42_11>
    3281	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    3282	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB42_13>
    3283	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    3284	b7 03 00 00 08 00 00 00	r3 = 0x8
    3285	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3286	27 09 00 00 30 00 00 00	r9 *= 0x30
    3287	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    3288	05 00 01 00 00 00 00 00	goto +0x1 <LBB42_14>

00000000000066c8 <LBB42_13>
    3289	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000066d0 <LBB42_14>
    3290	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3291	bf a1 00 00 00 00 00 00	r1 = r10
    3292	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3293	bf a4 00 00 00 00 00 00	r4 = r10
    3294	07 04 00 00 e8 ff ff ff	r4 += -0x18
    3295	bf 83 00 00 00 00 00 00	r3 = r8
    3296	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
    3297	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    3298	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB42_18>
    3299	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3300	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB42_17>

0000000000006728 <LBB42_16>
    3301	85 10 00 00 21 09 00 00	call 0x921 ; <alloc::raw_vec::capacity_overflow>
    3302	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006738 <LBB42_18>
    3303	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3304	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3305	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3306	95 00 00 00 00 00 00 00	exit

0000000000006758 <LBB42_17>
    3307	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3308	85 10 00 00 21 09 00 00	call 0x921 ; <alloc::alloc::handle_alloc_error>
    3309	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006770 <alloc::raw_vec::finish_grow>
    3310	bf 38 00 00 00 00 00 00	r8 = r3
    3311	bf 27 00 00 00 00 00 00	r7 = r2
    3312	bf 16 00 00 00 00 00 00	r6 = r1
    3313	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB45_12>
    3314	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3315	b7 01 00 00 01 00 00 00	r1 = 0x1
    3316	b7 07 00 00 00 00 00 00	r7 = 0x0
    3317	05 00 1d 00 00 00 00 00	goto +0x1d <LBB45_2>

00000000000067b0 <LBB45_12>
    3318	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    3319	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB45_7>
    3320	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    3321	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB45_6>
    3322	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB45_9>
    3323	bf 71 00 00 00 00 00 00	r1 = r7
    3324	bf 82 00 00 00 00 00 00	r2 = r8
    3325	85 10 00 00 21 ff ff ff	call -0xdf ; <__rust_alloc>
    3326	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB45_11>
    3327	05 00 11 00 00 00 00 00	goto +0x11 <LBB45_10>

0000000000006800 <LBB45_6>
    3328	bf 83 00 00 00 00 00 00	r3 = r8
    3329	bf 74 00 00 00 00 00 00	r4 = r7
    3330	85 10 00 00 20 ff ff ff	call -0xe0 ; <__rust_realloc>
    3331	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB45_11>
    3332	05 00 0c 00 00 00 00 00	goto +0xc <LBB45_10>

0000000000006828 <LBB45_7>
    3333	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB45_9>
    3334	bf 71 00 00 00 00 00 00	r1 = r7
    3335	bf 82 00 00 00 00 00 00	r2 = r8
    3336	85 10 00 00 16 ff ff ff	call -0xea ; <__rust_alloc>
    3337	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB45_11>
    3338	05 00 06 00 00 00 00 00	goto +0x6 <LBB45_10>

0000000000006858 <LBB45_11>
    3339	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3340	b7 01 00 00 01 00 00 00	r1 = 0x1
    3341	bf 87 00 00 00 00 00 00	r7 = r8
    3342	05 00 04 00 00 00 00 00	goto +0x4 <LBB45_2>

0000000000006878 <LBB45_9>
    3343	b7 07 00 00 00 00 00 00	r7 = 0x0
    3344	bf 80 00 00 00 00 00 00	r0 = r8

0000000000006888 <LBB45_10>
    3345	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    3346	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006898 <LBB45_2>
    3347	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3348	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    3349	95 00 00 00 00 00 00 00	exit

00000000000068b0 <solana_program::entrypoint::deserialize>
    3350	bf 16 00 00 00 00 00 00	r6 = r1
    3351	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    3352	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
    3353	bf a1 00 00 00 00 00 00	r1 = r10
    3354	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3355	b7 07 00 00 00 00 00 00	r7 = 0x0
    3356	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    3357	b7 03 00 00 00 00 00 00	r3 = 0x0
    3358	b7 04 00 00 30 00 00 00	r4 = 0x30
    3359	b7 05 00 00 00 00 00 00	r5 = 0x0
    3360	85 10 00 00 67 17 00 00	call 0x1767 ; <__multi3>
    3361	b7 01 00 00 01 00 00 00	r1 = 0x1
    3362	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    3363	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB91_2>
    3364	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006928 <LBB91_2>
    3365	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB91_4>
    3366	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000006938 <LBB91_4>
    3367	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB91_6>
    3368	85 10 00 00 de 08 00 00	call 0x8de ; <alloc::raw_vec::capacity_overflow>
    3369	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006950 <LBB91_6>
    3370	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    3371	7b 6a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r6
    3372	15 08 0a 00 00 00 00 00	if r8 == 0x0 goto +0xa <LBB91_9>
    3373	bf 81 00 00 00 00 00 00	r1 = r8
    3374	bf 72 00 00 00 00 00 00	r2 = r7
    3375	85 10 00 00 ef fe ff ff	call -0x111 ; <__rust_alloc>
    3376	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3377	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB91_8>
    3378	05 00 06 00 00 00 00 00	goto +0x6 <LBB91_10>

0000000000006998 <LBB91_8>
    3379	bf 81 00 00 00 00 00 00	r1 = r8
    3380	bf 72 00 00 00 00 00 00	r2 = r7
    3381	85 10 00 00 d8 08 00 00	call 0x8d8 ; <alloc::alloc::handle_alloc_error>
    3382	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000069b8 <LBB91_9>
    3383	bf 70 00 00 00 00 00 00	r0 = r7
    3384	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)

00000000000069c8 <LBB91_10>
    3385	b7 01 00 00 00 00 00 00	r1 = 0x0
    3386	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3387	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r0
    3388	b7 09 00 00 08 00 00 00	r9 = 0x8
    3389	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    3390	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3391	15 01 21 00 00 00 00 00	if r1 == 0x0 goto +0x21 <LBB91_14>
    3392	b7 09 00 00 08 00 00 00	r9 = 0x8
    3393	bf 07 00 00 00 00 00 00	r7 = r0
    3394	b7 02 00 00 00 00 00 00	r2 = 0x0
    3395	b7 04 00 00 00 00 00 00	r4 = 0x0
    3396	05 00 2f 00 00 00 00 00	goto +0x2f <LBB91_15>

0000000000006a28 <LBB91_12>
    3397	bf 21 00 00 00 00 00 00	r1 = r2
    3398	27 01 00 00 30 00 00 00	r1 *= 0x30
    3399	bf 03 00 00 00 00 00 00	r3 = r0
    3400	0f 13 00 00 00 00 00 00	r3 += r1
    3401	73 53 2a 00 00 00 00 00	*(u8 *)(r3 + 0x2a) = r5
    3402	73 63 29 00 00 00 00 00	*(u8 *)(r3 + 0x29) = r6
    3403	73 43 28 00 00 00 00 00	*(u8 *)(r3 + 0x28) = r4
    3404	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3405	7b 13 20 00 00 00 00 00	*(u64 *)(r3 + 0x20) = r1
    3406	7b 73 18 00 00 00 00 00	*(u64 *)(r3 + 0x18) = r7
    3407	7b 83 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r8
    3408	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    3409	7b 13 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r1
    3410	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    3411	7b 13 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r1
    3412	61 a1 fb ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x5)
    3413	63 13 2b 00 00 00 00 00	*(u32 *)(r3 + 0x2b) = r1
    3414	71 a1 ff ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x1)
    3415	73 13 2f 00 00 00 00 00	*(u8 *)(r3 + 0x2f) = r1
    3416	07 02 00 00 01 00 00 00	r2 += 0x1
    3417	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    3418	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)

0000000000006ad8 <LBB91_13>
    3419	79 a4 c8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x38)
    3420	07 04 00 00 01 00 00 00	r4 += 0x1
    3421	07 09 00 00 08 00 00 00	r9 += 0x8
    3422	bf 07 00 00 00 00 00 00	r7 = r0
    3423	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    3424	2d 41 13 00 00 00 00 00	if r1 > r4 goto +0x13 <LBB91_15>

0000000000006b08 <LBB91_14>
    3425	bf 31 00 00 00 00 00 00	r1 = r3
    3426	0f 91 00 00 00 00 00 00	r1 += r9
    3427	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3428	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3429	79 a4 80 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x80)
    3430	7b 24 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r2
    3431	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    3432	7b 24 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r2
    3433	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3434	7b 24 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r2
    3435	07 09 00 00 08 00 00 00	r9 += 0x8
    3436	bf 32 00 00 00 00 00 00	r2 = r3
    3437	0f 92 00 00 00 00 00 00	r2 += r9
    3438	7b 24 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r2
    3439	7b 14 28 00 00 00 00 00	*(u64 *)(r4 + 0x28) = r1
    3440	0f 91 00 00 00 00 00 00	r1 += r9
    3441	0f 13 00 00 00 00 00 00	r3 += r1
    3442	7b 34 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r3
    3443	95 00 00 00 00 00 00 00	exit

0000000000006ba0 <LBB91_15>
    3444	bf 31 00 00 00 00 00 00	r1 = r3
    3445	0f 91 00 00 00 00 00 00	r1 += r9
    3446	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    3447	7b 4a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r4
    3448	15 01 3b 00 ff 00 00 00	if r1 == 0xff goto +0x3b <LBB91_30>
    3449	2d 12 04 00 00 00 00 00	if r2 > r1 goto +0x4 <LBB91_18>
    3450	18 03 00 00 88 3c 01 00 00 00 00 00 00 00 00 00	r3 = 0x13c88 ll
    3452	85 10 00 00 cc 0a 00 00	call 0xacc ; <core::panicking::panic_bounds_check>
    3453	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006bf0 <LBB91_18>
    3454	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r9
    3455	27 01 00 00 30 00 00 00	r1 *= 0x30
    3456	bf 74 00 00 00 00 00 00	r4 = r7
    3457	0f 14 00 00 00 00 00 00	r4 += r1
    3458	79 46 08 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x8)
    3459	79 68 00 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x0)
    3460	07 08 00 00 01 00 00 00	r8 += 0x1
    3461	25 08 02 00 01 00 00 00	if r8 > 0x1 goto +0x2 <LBB91_20>

0000000000006c30 <LBB91_19>
    3462	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    3463	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006c40 <LBB91_20>
    3464	71 45 29 00 00 00 00 00	r5 = *(u8 *)(r4 + 0x29)
    3465	71 43 28 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x28)
    3466	79 49 00 00 00 00 00 00	r9 = *(u64 *)(r4 + 0x0)
    3467	7b 9a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r9
    3468	7b 86 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r8
    3469	79 48 10 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x10)
    3470	79 84 00 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x0)
    3471	07 04 00 00 01 00 00 00	r4 += 0x1
    3472	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB91_22>
    3473	05 00 f4 ff 00 00 00 00	goto -0xc <LBB91_19>

0000000000006c90 <LBB91_22>
    3474	7b 6a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r6
    3475	7b 48 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r4
    3476	bf 54 00 00 00 00 00 00	r4 = r5
    3477	b7 05 00 00 01 00 00 00	r5 = 0x1
    3478	b7 06 00 00 01 00 00 00	r6 = 0x1
    3479	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB91_24>
    3480	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000006cc8 <LBB91_24>
    3481	b7 04 00 00 01 00 00 00	r4 = 0x1
    3482	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x48)
    3483	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_26>
    3484	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000006ce8 <LBB91_26>
    3485	0f 17 00 00 00 00 00 00	r7 += r1
    3486	71 71 2a 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x2a)
    3487	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB91_28>
    3488	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000006d08 <LBB91_28>
    3489	79 71 20 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x20)
    3490	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3491	79 77 18 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x18)
    3492	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3493	5d 12 9f ff 00 00 00 00	if r2 != r1 goto -0x61 <LBB91_12>
    3494	bf a1 00 00 00 00 00 00	r1 = r10
    3495	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3496	7b 7a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r7
    3497	bf 57 00 00 00 00 00 00	r7 = r5
    3498	7b 6a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r6
    3499	bf 46 00 00 00 00 00 00	r6 = r4
    3500	85 10 00 00 07 ff ff ff	call -0xf9 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3501	bf 64 00 00 00 00 00 00	r4 = r6
    3502	79 a6 90 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x70)
    3503	bf 75 00 00 00 00 00 00	r5 = r7
    3504	79 a7 88 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x78)
    3505	79 a0 e0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x20)
    3506	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3507	05 00 91 ff 00 00 00 00	goto -0x6f <LBB91_12>

0000000000006da0 <LBB91_30>
    3508	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    3509	bf 96 00 00 00 00 00 00	r6 = r9
    3510	0f 36 00 00 00 00 00 00	r6 += r3
    3511	71 61 03 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x3)
    3512	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3513	71 61 02 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x2)
    3514	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    3515	71 61 01 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x1)
    3516	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    3517	b7 01 00 00 20 00 00 00	r1 = 0x20
    3518	b7 02 00 00 08 00 00 00	r2 = 0x8
    3519	85 10 00 00 5f fe ff ff	call -0x1a1 ; <__rust_alloc>
    3520	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB91_32>
    3521	b7 01 00 00 20 00 00 00	r1 = 0x20
    3522	05 00 54 00 00 00 00 00	goto +0x54 <LBB91_43>

0000000000006e18 <LBB91_32>
    3523	b7 01 00 00 00 00 00 00	r1 = 0x0
    3524	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    3525	b7 01 00 00 01 00 00 00	r1 = 0x1
    3526	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    3527	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    3528	bf 61 00 00 00 00 00 00	r1 = r6
    3529	07 01 00 00 48 00 00 00	r1 += 0x48
    3530	7b 0a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r0
    3531	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    3532	79 67 50 00 00 00 00 00	r7 = *(u64 *)(r6 + 0x50)
    3533	63 76 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r7
    3534	b7 01 00 00 28 00 00 00	r1 = 0x28
    3535	b7 02 00 00 08 00 00 00	r2 = 0x8
    3536	85 10 00 00 4e fe ff ff	call -0x1b2 ; <__rust_alloc>
    3537	bf 08 00 00 00 00 00 00	r8 = r0
    3538	55 08 02 00 00 00 00 00	if r8 != 0x0 goto +0x2 <LBB91_34>
    3539	b7 01 00 00 28 00 00 00	r1 = 0x28
    3540	05 00 42 00 00 00 00 00	goto +0x42 <LBB91_43>

0000000000006ea8 <LBB91_34>
    3541	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3542	bf 13 00 00 00 00 00 00	r3 = r1
    3543	b7 04 00 00 00 00 00 00	r4 = 0x0
    3544	b7 01 00 00 01 00 00 00	r1 = 0x1
    3545	b7 05 00 00 01 00 00 00	r5 = 0x1
    3546	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    3547	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_36>
    3548	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000006ee8 <LBB91_36>
    3549	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x58)
    3550	7b 48 10 00 00 00 00 00	*(u64 *)(r8 + 0x10) = r4
    3551	b7 04 00 00 01 00 00 00	r4 = 0x1
    3552	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_38>
    3553	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000006f10 <LBB91_38>
    3554	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    3555	b7 00 00 00 01 00 00 00	r0 = 0x1
    3556	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_40>
    3557	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000006f30 <LBB91_40>
    3558	7b 0a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r0
    3559	7b 4a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r4
    3560	bf 63 00 00 00 00 00 00	r3 = r6
    3561	07 03 00 00 28 00 00 00	r3 += 0x28
    3562	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    3563	07 06 00 00 08 00 00 00	r6 += 0x8
    3564	7b 18 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r1
    3565	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    3566	bf 91 00 00 00 00 00 00	r1 = r9
    3567	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3568	0f 31 00 00 00 00 00 00	r1 += r3
    3569	07 01 00 00 58 00 00 00	r1 += 0x58
    3570	7b 18 18 00 00 00 00 00	*(u64 *)(r8 + 0x18) = r1
    3571	7b 78 20 00 00 00 00 00	*(u64 *)(r8 + 0x20) = r7
    3572	0f 79 00 00 00 00 00 00	r9 += r7
    3573	07 09 00 00 5f 28 00 00	r9 += 0x285f
    3574	57 09 00 00 f8 ff ff ff	r9 &= -0x8
    3575	bf 31 00 00 00 00 00 00	r1 = r3
    3576	0f 91 00 00 00 00 00 00	r1 += r9
    3577	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    3578	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3579	5d 12 07 00 00 00 00 00	if r2 != r1 goto +0x7 <LBB91_42>
    3580	bf a1 00 00 00 00 00 00	r1 = r10
    3581	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3582	7b 5a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r5
    3583	85 10 00 00 b4 fe ff ff	call -0x14c ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3584	79 a5 b8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x48)
    3585	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3586	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)

0000000000007018 <LBB91_42>
    3587	bf 21 00 00 00 00 00 00	r1 = r2
    3588	27 01 00 00 30 00 00 00	r1 *= 0x30
    3589	79 a0 e0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x20)
    3590	bf 04 00 00 00 00 00 00	r4 = r0
    3591	0f 14 00 00 00 00 00 00	r4 += r1
    3592	73 54 2a 00 00 00 00 00	*(u8 *)(r4 + 0x2a) = r5
    3593	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    3594	73 14 29 00 00 00 00 00	*(u8 *)(r4 + 0x29) = r1
    3595	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    3596	73 14 28 00 00 00 00 00	*(u8 *)(r4 + 0x28) = r1
    3597	7b 74 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r7
    3598	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3599	7b 14 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r1
    3600	7b 84 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r8
    3601	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    3602	7b 14 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r1
    3603	7b 64 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r6
    3604	07 02 00 00 01 00 00 00	r2 += 0x1
    3605	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    3606	05 00 44 ff 00 00 00 00	goto -0xbc <LBB91_13>

00000000000070b8 <LBB91_43>
    3607	b7 02 00 00 08 00 00 00	r2 = 0x8
    3608	85 10 00 00 f5 07 00 00	call 0x7f5 ; <alloc::alloc::handle_alloc_error>
    3609	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000070d0 <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    3610	b7 03 00 00 20 00 00 00	r3 = 0x20
    3611	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    3612	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3613	95 00 00 00 00 00 00 00	exit

00000000000070f0 <solana_program::instruction::Instruction::new_with_bincode>
    3614	bf 47 00 00 00 00 00 00	r7 = r4
    3615	bf 39 00 00 00 00 00 00	r9 = r3
    3616	bf 26 00 00 00 00 00 00	r6 = r2
    3617	bf 18 00 00 00 00 00 00	r8 = r1
    3618	85 10 00 00 ee 05 00 00	call 0x5ee ; <bincode::config::DefaultOptions::new>
    3619	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    3620	7b 6a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r6
    3621	65 02 06 00 05 00 00 00	if r2 s> 0x5 goto +0x6 <LBB131_5>
    3622	65 02 0d 00 02 00 00 00	if r2 s> 0x2 goto +0xd <LBB131_12>
    3623	b7 06 00 00 34 00 00 00	r6 = 0x34
    3624	15 02 21 00 00 00 00 00	if r2 == 0x0 goto +0x21 <LBB131_25>
    3625	15 02 0d 00 01 00 00 00	if r2 == 0x1 goto +0xd <LBB131_18>

0000000000007150 <LBB131_4>
    3626	b7 06 00 00 0c 00 00 00	r6 = 0xc
    3627	05 00 1e 00 00 00 00 00	goto +0x1e <LBB131_25>

0000000000007160 <LBB131_5>
    3628	65 02 03 00 08 00 00 00	if r2 s> 0x8 goto +0x3 <LBB131_9>
    3629	15 02 09 00 06 00 00 00	if r2 == 0x6 goto +0x9 <LBB131_18>
    3630	15 02 08 00 07 00 00 00	if r2 == 0x7 goto +0x8 <LBB131_18>
    3631	05 00 fa ff 00 00 00 00	goto -0x6 <LBB131_4>

0000000000007180 <LBB131_9>
    3632	65 02 08 00 0a 00 00 00	if r2 s> 0xa goto +0x8 <LBB131_16>
    3633	15 02 0a 00 09 00 00 00	if r2 == 0x9 goto +0xa <LBB131_19>
    3634	b7 01 00 00 4c 00 00 00	r1 = 0x4c
    3635	05 00 0b 00 00 00 00 00	goto +0xb <LBB131_21>

00000000000071a0 <LBB131_12>
    3636	15 02 09 00 03 00 00 00	if r2 == 0x3 goto +0x9 <LBB131_20>
    3637	15 02 04 00 04 00 00 00	if r2 == 0x4 goto +0x4 <LBB131_17>
    3638	05 00 f3 ff 00 00 00 00	goto -0xd <LBB131_4>

00000000000071b8 <LBB131_18>
    3639	b7 06 00 00 24 00 00 00	r6 = 0x24
    3640	05 00 11 00 00 00 00 00	goto +0x11 <LBB131_25>

00000000000071c8 <LBB131_16>
    3641	15 02 08 00 0b 00 00 00	if r2 == 0xb goto +0x8 <LBB131_23>

00000000000071d0 <LBB131_17>
    3642	b7 06 00 00 04 00 00 00	r6 = 0x4
    3643	05 00 0e 00 00 00 00 00	goto +0xe <LBB131_25>

00000000000071e0 <LBB131_19>
    3644	b7 01 00 00 54 00 00 00	r1 = 0x54
    3645	05 00 01 00 00 00 00 00	goto +0x1 <LBB131_21>

00000000000071f0 <LBB131_20>
    3646	b7 01 00 00 5c 00 00 00	r1 = 0x5c

00000000000071f8 <LBB131_21>
    3647	bf 93 00 00 00 00 00 00	r3 = r9
    3648	07 03 00 00 58 00 00 00	r3 += 0x58
    3649	05 00 03 00 00 00 00 00	goto +0x3 <LBB131_24>

0000000000007210 <LBB131_23>
    3650	b7 01 00 00 34 00 00 00	r1 = 0x34
    3651	bf 93 00 00 00 00 00 00	r3 = r9
    3652	07 03 00 00 40 00 00 00	r3 += 0x40

0000000000007228 <LBB131_24>
    3653	79 36 00 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x0)
    3654	0f 16 00 00 00 00 00 00	r6 += r1
    3655	b7 00 00 00 01 00 00 00	r0 = 0x1
    3656	b7 01 00 00 00 00 00 00	r1 = 0x0
    3657	15 06 06 00 00 00 00 00	if r6 == 0x0 goto +0x6 <LBB131_27>

0000000000007250 <LBB131_25>
    3658	bf 61 00 00 00 00 00 00	r1 = r6
    3659	b7 02 00 00 01 00 00 00	r2 = 0x1
    3660	85 10 00 00 d2 fd ff ff	call -0x22e ; <__rust_alloc>
    3661	15 00 ee 02 00 00 00 00	if r0 == 0x0 goto +0x2ee <LBB131_147>
    3662	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    3663	bf 61 00 00 00 00 00 00	r1 = r6

0000000000007280 <LBB131_27>
    3664	b7 03 00 00 00 00 00 00	r3 = 0x0
    3665	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3666	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3667	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    3668	bf a3 00 00 00 00 00 00	r3 = r10
    3669	07 03 00 00 f0 ff ff ff	r3 += -0x10
    3670	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    3671	7b 8a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r8
    3672	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    3673	65 02 11 00 05 00 00 00	if r2 s> 0x5 goto +0x11 <LBB131_33>
    3674	65 02 58 00 02 00 00 00	if r2 s> 0x2 goto +0x58 <LBB131_48>
    3675	15 02 78 00 00 00 00 00	if r2 == 0x0 goto +0x78 <LBB131_56>
    3676	15 02 b2 00 01 00 00 00	if r2 == 0x1 goto +0xb2 <LBB131_65>
    3677	b7 02 00 00 00 00 00 00	r2 = 0x0
    3678	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_32>
    3679	05 00 9c 02 00 00 00 00	goto +0x29c <LBB131_140>

0000000000007300 <LBB131_32>
    3680	0f 20 00 00 00 00 00 00	r0 += r2
    3681	b7 01 00 00 02 00 00 00	r1 = 0x2
    3682	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3683	07 02 00 00 04 00 00 00	r2 += 0x4
    3684	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3685	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3686	1f 21 00 00 00 00 00 00	r1 -= r2
    3687	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3688	b7 03 00 00 08 00 00 00	r3 = 0x8
    3689	2d 13 5d 00 00 00 00 00	if r3 > r1 goto +0x5d <LBB131_52>
    3690	05 00 15 00 00 00 00 00	goto +0x15 <LBB131_38>

0000000000007358 <LBB131_33>
    3691	65 02 19 00 08 00 00 00	if r2 s> 0x8 goto +0x19 <LBB131_39>
    3692	15 02 c5 00 06 00 00 00	if r2 == 0x6 goto +0xc5 <LBB131_71>
    3693	15 02 e7 00 07 00 00 00	if r2 == 0x7 goto +0xe7 <LBB131_77>
    3694	b7 02 00 00 00 00 00 00	r2 = 0x0
    3695	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_37>
    3696	bf a1 00 00 00 00 00 00	r1 = r10
    3697	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3698	b7 02 00 00 00 00 00 00	r2 = 0x0
    3699	b7 03 00 00 04 00 00 00	r3 = 0x4
    3700	85 10 00 00 13 fe ff ff	call -0x1ed ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3701	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3702	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000073b8 <LBB131_37>
    3703	0f 20 00 00 00 00 00 00	r0 += r2
    3704	b7 01 00 00 08 00 00 00	r1 = 0x8
    3705	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3706	07 02 00 00 04 00 00 00	r2 += 0x4
    3707	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3708	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    3709	1f 23 00 00 00 00 00 00	r3 -= r2
    3710	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3711	2d 31 47 00 00 00 00 00	if r1 > r3 goto +0x47 <LBB131_52>

0000000000007400 <LBB131_38>
    3712	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3713	0f 21 00 00 00 00 00 00	r1 += r2
    3714	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3715	07 02 00 00 08 00 00 00	r2 += 0x8
    3716	05 00 8d 01 00 00 00 00	goto +0x18d <LBB131_109>

0000000000007428 <LBB131_39>
    3717	65 02 47 00 0a 00 00 00	if r2 s> 0xa goto +0x47 <LBB131_53>
    3718	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r9
    3719	15 02 f0 00 09 00 00 00	if r2 == 0x9 goto +0xf0 <LBB131_83>
    3720	b7 08 00 00 00 00 00 00	r8 = 0x0
    3721	b7 06 00 00 00 00 00 00	r6 = 0x0
    3722	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_42>
    3723	05 00 78 02 00 00 00 00	goto +0x278 <LBB131_142>

0000000000007460 <LBB131_42>
    3724	0f 60 00 00 00 00 00 00	r0 += r6
    3725	b7 01 00 00 0a 00 00 00	r1 = 0xa
    3726	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3727	07 09 00 00 01 00 00 00	r9 += 0x1
    3728	07 06 00 00 04 00 00 00	r6 += 0x4
    3729	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3730	05 00 14 00 00 00 00 00	goto +0x14 <LBB131_46>

0000000000007498 <LBB131_43>
    3731	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3732	0f 61 00 00 00 00 00 00	r1 += r6
    3733	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3734	07 06 00 00 01 00 00 00	r6 += 0x1
    3735	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3736	07 08 00 00 01 00 00 00	r8 += 0x1
    3737	55 08 0d 00 20 00 00 00	if r8 != 0x20 goto +0xd <LBB131_46>
    3738	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3739	1f 61 00 00 00 00 00 00	r1 -= r6
    3740	79 a9 c0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x40)
    3741	79 98 58 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x58)
    3742	79 97 48 00 00 00 00 00	r7 = *(u64 *)(r9 + 0x48)
    3743	25 01 0b 01 07 00 00 00	if r1 > 0x7 goto +0x10b <LBB131_91>
    3744	bf a1 00 00 00 00 00 00	r1 = r10
    3745	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3746	bf 62 00 00 00 00 00 00	r2 = r6
    3747	b7 03 00 00 08 00 00 00	r3 = 0x8
    3748	85 10 00 00 e3 fd ff ff	call -0x21d ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3749	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    3750	05 00 04 01 00 00 00 00	goto +0x104 <LBB131_91>

0000000000007538 <LBB131_46>
    3751	bf 91 00 00 00 00 00 00	r1 = r9
    3752	0f 81 00 00 00 00 00 00	r1 += r8
    3753	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3754	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3755	5d 61 e7 ff 00 00 00 00	if r1 != r6 goto -0x19 <LBB131_43>
    3756	bf a1 00 00 00 00 00 00	r1 = r10
    3757	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3758	bf 62 00 00 00 00 00 00	r2 = r6
    3759	b7 03 00 00 01 00 00 00	r3 = 0x1
    3760	85 10 00 00 d7 fd ff ff	call -0x229 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3761	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    3762	05 00 e0 ff 00 00 00 00	goto -0x20 <LBB131_43>

0000000000007598 <LBB131_48>
    3763	15 02 1d 01 03 00 00 00	if r2 == 0x3 goto +0x11d <LBB131_97>
    3764	15 02 50 01 04 00 00 00	if r2 == 0x4 goto +0x150 <LBB131_105>
    3765	b7 02 00 00 00 00 00 00	r2 = 0x0
    3766	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3767	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_51>
    3768	bf a1 00 00 00 00 00 00	r1 = r10
    3769	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3770	b7 02 00 00 00 00 00 00	r2 = 0x0
    3771	b7 03 00 00 04 00 00 00	r3 = 0x4
    3772	85 10 00 00 cb fd ff ff	call -0x235 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3773	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3774	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000075f8 <LBB131_51>
    3775	0f 20 00 00 00 00 00 00	r0 += r2
    3776	b7 01 00 00 05 00 00 00	r1 = 0x5
    3777	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3778	07 02 00 00 04 00 00 00	r2 += 0x4
    3779	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3780	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3781	1f 21 00 00 00 00 00 00	r1 -= r2
    3782	25 01 b9 ff 07 00 00 00	if r1 > 0x7 goto -0x47 <LBB131_38>

0000000000007638 <LBB131_52>
    3783	bf a1 00 00 00 00 00 00	r1 = r10
    3784	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3785	b7 03 00 00 08 00 00 00	r3 = 0x8
    3786	85 10 00 00 bd fd ff ff	call -0x243 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3787	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3788	05 00 b3 ff 00 00 00 00	goto -0x4d <LBB131_38>

0000000000007668 <LBB131_53>
    3789	15 02 5e 01 0b 00 00 00	if r2 == 0xb goto +0x15e <LBB131_111>
    3790	b7 02 00 00 00 00 00 00	r2 = 0x0
    3791	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_55>
    3792	05 00 3b 02 00 00 00 00	goto +0x23b <LBB131_144>

0000000000007688 <LBB131_55>
    3793	0f 20 00 00 00 00 00 00	r0 += r2
    3794	b7 01 00 00 0c 00 00 00	r1 = 0xc
    3795	05 00 3c 01 00 00 00 00	goto +0x13c <LBB131_108>

00000000000076a0 <LBB131_56>
    3796	b7 06 00 00 00 00 00 00	r6 = 0x0
    3797	b7 02 00 00 00 00 00 00	r2 = 0x0
    3798	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_58>
    3799	bf a1 00 00 00 00 00 00	r1 = r10
    3800	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3801	b7 02 00 00 00 00 00 00	r2 = 0x0
    3802	b7 03 00 00 04 00 00 00	r3 = 0x4
    3803	85 10 00 00 ac fd ff ff	call -0x254 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3804	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3805	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000076f0 <LBB131_58>
    3806	0f 20 00 00 00 00 00 00	r0 += r2
    3807	63 60 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r6
    3808	07 02 00 00 04 00 00 00	r2 += 0x4
    3809	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3810	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3811	1f 21 00 00 00 00 00 00	r1 -= r2
    3812	79 96 28 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x28)
    3813	b7 03 00 00 08 00 00 00	r3 = 0x8
    3814	2d 13 2d 02 00 00 00 00	if r3 > r1 goto +0x22d <LBB131_145>

0000000000007738 <LBB131_59>
    3815	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3816	0f 21 00 00 00 00 00 00	r1 += r2
    3817	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3818	07 02 00 00 08 00 00 00	r2 += 0x8
    3819	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3820	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3821	1f 21 00 00 00 00 00 00	r1 -= r2
    3822	79 96 30 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x30)
    3823	25 01 05 00 07 00 00 00	if r1 > 0x7 goto +0x5 <LBB131_61>
    3824	bf a1 00 00 00 00 00 00	r1 = r10
    3825	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3826	b7 03 00 00 08 00 00 00	r3 = 0x8
    3827	85 10 00 00 94 fd ff ff	call -0x26c ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3828	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000077a8 <LBB131_61>
    3829	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3830	0f 21 00 00 00 00 00 00	r1 += r2
    3831	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3832	b7 06 00 00 00 00 00 00	r6 = 0x0
    3833	07 09 00 00 01 00 00 00	r9 += 0x1
    3834	07 02 00 00 08 00 00 00	r2 += 0x8
    3835	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3836	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_63>

00000000000077e8 <LBB131_62>
    3837	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3838	0f 21 00 00 00 00 00 00	r1 += r2
    3839	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3840	07 02 00 00 01 00 00 00	r2 += 0x1
    3841	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3842	07 06 00 00 01 00 00 00	r6 += 0x1
    3843	15 06 0f 01 20 00 00 00	if r6 == 0x20 goto +0x10f <LBB131_110>

0000000000007820 <LBB131_63>
    3844	bf 91 00 00 00 00 00 00	r1 = r9
    3845	0f 61 00 00 00 00 00 00	r1 += r6
    3846	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3847	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3848	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_62>
    3849	bf a1 00 00 00 00 00 00	r1 = r10
    3850	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3851	b7 03 00 00 01 00 00 00	r3 = 0x1
    3852	85 10 00 00 7b fd ff ff	call -0x285 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3853	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3854	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_62>

0000000000007878 <LBB131_65>
    3855	b7 06 00 00 00 00 00 00	r6 = 0x0
    3856	b7 02 00 00 00 00 00 00	r2 = 0x0
    3857	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_67>
    3858	bf a1 00 00 00 00 00 00	r1 = r10
    3859	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3860	b7 02 00 00 00 00 00 00	r2 = 0x0
    3861	b7 03 00 00 04 00 00 00	r3 = 0x4
    3862	85 10 00 00 71 fd ff ff	call -0x28f ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3863	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3864	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000078c8 <LBB131_67>
    3865	0f 20 00 00 00 00 00 00	r0 += r2
    3866	b7 01 00 00 01 00 00 00	r1 = 0x1
    3867	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3868	07 09 00 00 01 00 00 00	r9 += 0x1
    3869	07 02 00 00 04 00 00 00	r2 += 0x4
    3870	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3871	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_69>

0000000000007900 <LBB131_68>
    3872	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3873	0f 21 00 00 00 00 00 00	r1 += r2
    3874	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3875	07 02 00 00 01 00 00 00	r2 += 0x1
    3876	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3877	07 06 00 00 01 00 00 00	r6 += 0x1
    3878	15 06 ec 00 20 00 00 00	if r6 == 0x20 goto +0xec <LBB131_110>

0000000000007938 <LBB131_69>
    3879	bf 91 00 00 00 00 00 00	r1 = r9
    3880	0f 61 00 00 00 00 00 00	r1 += r6
    3881	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3882	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3883	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_68>
    3884	bf a1 00 00 00 00 00 00	r1 = r10
    3885	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3886	b7 03 00 00 01 00 00 00	r3 = 0x1
    3887	85 10 00 00 58 fd ff ff	call -0x2a8 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3888	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3889	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_68>

0000000000007990 <LBB131_71>
    3890	b7 06 00 00 00 00 00 00	r6 = 0x0
    3891	b7 02 00 00 00 00 00 00	r2 = 0x0
    3892	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_73>
    3893	bf a1 00 00 00 00 00 00	r1 = r10
    3894	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3895	b7 02 00 00 00 00 00 00	r2 = 0x0
    3896	b7 03 00 00 04 00 00 00	r3 = 0x4
    3897	85 10 00 00 4e fd ff ff	call -0x2b2 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3898	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3899	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000079e0 <LBB131_73>
    3900	0f 20 00 00 00 00 00 00	r0 += r2
    3901	b7 01 00 00 06 00 00 00	r1 = 0x6
    3902	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3903	07 09 00 00 01 00 00 00	r9 += 0x1
    3904	07 02 00 00 04 00 00 00	r2 += 0x4
    3905	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3906	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_75>

0000000000007a18 <LBB131_74>
    3907	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3908	0f 21 00 00 00 00 00 00	r1 += r2
    3909	73 81 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r8
    3910	07 02 00 00 01 00 00 00	r2 += 0x1
    3911	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3912	07 06 00 00 01 00 00 00	r6 += 0x1
    3913	15 06 c9 00 20 00 00 00	if r6 == 0x20 goto +0xc9 <LBB131_110>

0000000000007a50 <LBB131_75>
    3914	bf 91 00 00 00 00 00 00	r1 = r9
    3915	0f 61 00 00 00 00 00 00	r1 += r6
    3916	71 18 00 00 00 00 00 00	r8 = *(u8 *)(r1 + 0x0)
    3917	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3918	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_74>
    3919	bf a1 00 00 00 00 00 00	r1 = r10
    3920	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3921	b7 03 00 00 01 00 00 00	r3 = 0x1
    3922	85 10 00 00 35 fd ff ff	call -0x2cb ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3923	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3924	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_74>

0000000000007aa8 <LBB131_77>
    3925	b7 06 00 00 00 00 00 00	r6 = 0x0
    3926	b7 02 00 00 00 00 00 00	r2 = 0x0
    3927	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_79>
    3928	bf a1 00 00 00 00 00 00	r1 = r10
    3929	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3930	b7 02 00 00 00 00 00 00	r2 = 0x0
    3931	b7 03 00 00 04 00 00 00	r3 = 0x4
    3932	85 10 00 00 2b fd ff ff	call -0x2d5 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3933	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3934	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007af8 <LBB131_79>
    3935	0f 20 00 00 00 00 00 00	r0 += r2
    3936	b7 01 00 00 07 00 00 00	r1 = 0x7
    3937	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3938	07 09 00 00 01 00 00 00	r9 += 0x1
    3939	07 02 00 00 04 00 00 00	r2 += 0x4
    3940	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3941	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_81>

0000000000007b30 <LBB131_80>
    3942	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3943	0f 21 00 00 00 00 00 00	r1 += r2
    3944	73 81 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r8
    3945	07 02 00 00 01 00 00 00	r2 += 0x1
    3946	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3947	07 06 00 00 01 00 00 00	r6 += 0x1
    3948	15 06 a6 00 20 00 00 00	if r6 == 0x20 goto +0xa6 <LBB131_110>

0000000000007b68 <LBB131_81>
    3949	bf 91 00 00 00 00 00 00	r1 = r9
    3950	0f 61 00 00 00 00 00 00	r1 += r6
    3951	71 18 00 00 00 00 00 00	r8 = *(u8 *)(r1 + 0x0)
    3952	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3953	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_80>
    3954	bf a1 00 00 00 00 00 00	r1 = r10
    3955	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3956	b7 03 00 00 01 00 00 00	r3 = 0x1
    3957	85 10 00 00 12 fd ff ff	call -0x2ee ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3958	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3959	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_80>

0000000000007bc0 <LBB131_83>
    3960	b7 08 00 00 00 00 00 00	r8 = 0x0
    3961	b7 06 00 00 00 00 00 00	r6 = 0x0
    3962	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_85>
    3963	bf a1 00 00 00 00 00 00	r1 = r10
    3964	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3965	b7 02 00 00 00 00 00 00	r2 = 0x0
    3966	b7 03 00 00 04 00 00 00	r3 = 0x4
    3967	85 10 00 00 08 fd ff ff	call -0x2f8 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3968	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3969	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000007c10 <LBB131_85>
    3970	0f 60 00 00 00 00 00 00	r0 += r6
    3971	b7 01 00 00 09 00 00 00	r1 = 0x9
    3972	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3973	07 09 00 00 01 00 00 00	r9 += 0x1
    3974	07 06 00 00 04 00 00 00	r6 += 0x4
    3975	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3976	05 00 16 00 00 00 00 00	goto +0x16 <LBB131_89>

0000000000007c48 <LBB131_86>
    3977	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3978	0f 61 00 00 00 00 00 00	r1 += r6
    3979	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3980	07 06 00 00 01 00 00 00	r6 += 0x1
    3981	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3982	07 08 00 00 01 00 00 00	r8 += 0x1
    3983	55 08 0f 00 20 00 00 00	if r8 != 0x20 goto +0xf <LBB131_89>
    3984	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3985	1f 61 00 00 00 00 00 00	r1 -= r6
    3986	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    3987	79 27 58 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x58)
    3988	79 22 48 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x48)
    3989	25 01 e5 00 07 00 00 00	if r1 > 0x7 goto +0xe5 <LBB131_122>
    3990	bf a1 00 00 00 00 00 00	r1 = r10
    3991	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3992	bf 28 00 00 00 00 00 00	r8 = r2
    3993	bf 62 00 00 00 00 00 00	r2 = r6
    3994	b7 03 00 00 08 00 00 00	r3 = 0x8
    3995	85 10 00 00 ec fc ff ff	call -0x314 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3996	bf 82 00 00 00 00 00 00	r2 = r8
    3997	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    3998	05 00 dc 00 00 00 00 00	goto +0xdc <LBB131_122>

0000000000007cf8 <LBB131_89>
    3999	bf 91 00 00 00 00 00 00	r1 = r9
    4000	0f 81 00 00 00 00 00 00	r1 += r8
    4001	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4002	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4003	5d 61 e5 ff 00 00 00 00	if r1 != r6 goto -0x1b <LBB131_86>
    4004	bf a1 00 00 00 00 00 00	r1 = r10
    4005	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4006	bf 62 00 00 00 00 00 00	r2 = r6
    4007	b7 03 00 00 01 00 00 00	r3 = 0x1
    4008	85 10 00 00 df fc ff ff	call -0x321 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4009	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4010	05 00 de ff 00 00 00 00	goto -0x22 <LBB131_86>

0000000000007d58 <LBB131_91>
    4011	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4012	0f 61 00 00 00 00 00 00	r1 += r6
    4013	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4014	07 06 00 00 08 00 00 00	r6 += 0x8
    4015	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4016	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4017	1f 61 00 00 00 00 00 00	r1 -= r6
    4018	3d 81 01 00 00 00 00 00	if r1 >= r8 goto +0x1 <LBB131_93>
    4019	05 00 66 01 00 00 00 00	goto +0x166 <LBB131_92>

0000000000007da0 <LBB131_93>
    4020	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4021	0f 61 00 00 00 00 00 00	r1 += r6
    4022	bf 72 00 00 00 00 00 00	r2 = r7
    4023	bf 83 00 00 00 00 00 00	r3 = r8
    4024	85 10 00 00 10 13 00 00	call 0x1310 ; <memcpy>
    4025	0f 86 00 00 00 00 00 00	r6 += r8
    4026	b7 08 00 00 00 00 00 00	r8 = 0x0
    4027	07 09 00 00 21 00 00 00	r9 += 0x21
    4028	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4029	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_95>

0000000000007df0 <LBB131_94>
    4030	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4031	0f 61 00 00 00 00 00 00	r1 += r6
    4032	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4033	07 06 00 00 01 00 00 00	r6 += 0x1
    4034	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4035	07 08 00 00 01 00 00 00	r8 += 0x1
    4036	15 08 4e 00 20 00 00 00	if r8 == 0x20 goto +0x4e <LBB131_110>

0000000000007e28 <LBB131_95>
    4037	bf 91 00 00 00 00 00 00	r1 = r9
    4038	0f 81 00 00 00 00 00 00	r1 += r8
    4039	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4040	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4041	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_94>
    4042	bf a1 00 00 00 00 00 00	r1 = r10
    4043	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4044	bf 62 00 00 00 00 00 00	r2 = r6
    4045	b7 03 00 00 01 00 00 00	r3 = 0x1
    4046	85 10 00 00 b9 fc ff ff	call -0x347 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4047	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4048	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_94>

0000000000007e88 <LBB131_97>
    4049	b7 08 00 00 00 00 00 00	r8 = 0x0
    4050	b7 06 00 00 00 00 00 00	r6 = 0x0
    4051	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_99>
    4052	bf a1 00 00 00 00 00 00	r1 = r10
    4053	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4054	b7 02 00 00 00 00 00 00	r2 = 0x0
    4055	b7 03 00 00 04 00 00 00	r3 = 0x4
    4056	85 10 00 00 af fc ff ff	call -0x351 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4057	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4058	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000007ed8 <LBB131_99>
    4059	0f 60 00 00 00 00 00 00	r0 += r6
    4060	b7 01 00 00 03 00 00 00	r1 = 0x3
    4061	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4062	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r9
    4063	07 09 00 00 01 00 00 00	r9 += 0x1
    4064	07 06 00 00 04 00 00 00	r6 += 0x4
    4065	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4066	05 00 16 00 00 00 00 00	goto +0x16 <LBB131_103>

0000000000007f18 <LBB131_100>
    4067	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4068	0f 61 00 00 00 00 00 00	r1 += r6
    4069	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4070	07 06 00 00 01 00 00 00	r6 += 0x1
    4071	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4072	07 08 00 00 01 00 00 00	r8 += 0x1
    4073	55 08 0f 00 20 00 00 00	if r8 != 0x20 goto +0xf <LBB131_103>
    4074	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4075	1f 61 00 00 00 00 00 00	r1 -= r6
    4076	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    4077	79 27 58 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x58)
    4078	79 22 48 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x48)
    4079	25 01 c4 00 07 00 00 00	if r1 > 0x7 goto +0xc4 <LBB131_130>
    4080	bf a1 00 00 00 00 00 00	r1 = r10
    4081	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4082	bf 28 00 00 00 00 00 00	r8 = r2
    4083	bf 62 00 00 00 00 00 00	r2 = r6
    4084	b7 03 00 00 08 00 00 00	r3 = 0x8
    4085	85 10 00 00 92 fc ff ff	call -0x36e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4086	bf 82 00 00 00 00 00 00	r2 = r8
    4087	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4088	05 00 bb 00 00 00 00 00	goto +0xbb <LBB131_130>

0000000000007fc8 <LBB131_103>
    4089	bf 91 00 00 00 00 00 00	r1 = r9
    4090	0f 81 00 00 00 00 00 00	r1 += r8
    4091	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4092	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4093	5d 61 e5 ff 00 00 00 00	if r1 != r6 goto -0x1b <LBB131_100>
    4094	bf a1 00 00 00 00 00 00	r1 = r10
    4095	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4096	bf 62 00 00 00 00 00 00	r2 = r6
    4097	b7 03 00 00 01 00 00 00	r3 = 0x1
    4098	85 10 00 00 85 fc ff ff	call -0x37b ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4099	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4100	05 00 de ff 00 00 00 00	goto -0x22 <LBB131_100>

0000000000008028 <LBB131_105>
    4101	b7 02 00 00 00 00 00 00	r2 = 0x0
    4102	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_107>
    4103	bf a1 00 00 00 00 00 00	r1 = r10
    4104	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4105	b7 02 00 00 00 00 00 00	r2 = 0x0
    4106	b7 03 00 00 04 00 00 00	r3 = 0x4
    4107	85 10 00 00 7c fc ff ff	call -0x384 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4108	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4109	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000008070 <LBB131_107>
    4110	0f 20 00 00 00 00 00 00	r0 += r2
    4111	b7 01 00 00 04 00 00 00	r1 = 0x4

0000000000008080 <LBB131_108>
    4112	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4113	07 02 00 00 04 00 00 00	r2 += 0x4

0000000000008090 <LBB131_109>
    4114	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2

0000000000008098 <LBB131_110>
    4115	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    4116	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4117	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    4118	79 a4 d0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x30)
    4119	7b 14 28 00 00 00 00 00	*(u64 *)(r4 + 0x28) = r1
    4120	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4121	7b 14 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r1
    4122	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    4123	79 31 18 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x18)
    4124	7b 14 48 00 00 00 00 00	*(u64 *)(r4 + 0x48) = r1
    4125	79 31 10 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x10)
    4126	7b 14 40 00 00 00 00 00	*(u64 *)(r4 + 0x40) = r1
    4127	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4128	7b 14 38 00 00 00 00 00	*(u64 *)(r4 + 0x38) = r1
    4129	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4130	7b 14 30 00 00 00 00 00	*(u64 *)(r4 + 0x30) = r1
    4131	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    4132	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4133	7b 14 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r1
    4134	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4135	7b 14 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r1
    4136	79 31 10 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x10)
    4137	7b 14 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r1
    4138	7b 24 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r2
    4139	95 00 00 00 00 00 00 00	exit

0000000000008160 <LBB131_111>
    4140	b7 06 00 00 00 00 00 00	r6 = 0x0
    4141	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_113>
    4142	bf a1 00 00 00 00 00 00	r1 = r10
    4143	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4144	b7 02 00 00 00 00 00 00	r2 = 0x0
    4145	b7 03 00 00 04 00 00 00	r3 = 0x4
    4146	85 10 00 00 55 fc ff ff	call -0x3ab ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4147	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4148	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000081a8 <LBB131_113>
    4149	0f 60 00 00 00 00 00 00	r0 += r6
    4150	b7 01 00 00 0b 00 00 00	r1 = 0xb
    4151	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4152	07 06 00 00 04 00 00 00	r6 += 0x4
    4153	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4154	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4155	1f 61 00 00 00 00 00 00	r1 -= r6
    4156	79 98 28 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x28)
    4157	b7 02 00 00 08 00 00 00	r2 = 0x8
    4158	2d 12 e2 00 00 00 00 00	if r2 > r1 goto +0xe2 <LBB131_146>

00000000000081f8 <LBB131_114>
    4159	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4160	0f 61 00 00 00 00 00 00	r1 += r6
    4161	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4162	07 06 00 00 08 00 00 00	r6 += 0x8
    4163	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4164	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4165	1f 61 00 00 00 00 00 00	r1 -= r6
    4166	79 98 40 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x40)
    4167	79 97 30 00 00 00 00 00	r7 = *(u64 *)(r9 + 0x30)
    4168	25 01 06 00 07 00 00 00	if r1 > 0x7 goto +0x6 <LBB131_116>
    4169	bf a1 00 00 00 00 00 00	r1 = r10
    4170	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4171	bf 62 00 00 00 00 00 00	r2 = r6
    4172	b7 03 00 00 08 00 00 00	r3 = 0x8
    4173	85 10 00 00 3a fc ff ff	call -0x3c6 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4174	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008278 <LBB131_116>
    4175	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4176	0f 61 00 00 00 00 00 00	r1 += r6
    4177	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4178	07 06 00 00 08 00 00 00	r6 += 0x8
    4179	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4180	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4181	1f 61 00 00 00 00 00 00	r1 -= r6
    4182	3d 81 06 00 00 00 00 00	if r1 >= r8 goto +0x6 <LBB131_118>
    4183	bf a1 00 00 00 00 00 00	r1 = r10
    4184	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4185	bf 62 00 00 00 00 00 00	r2 = r6
    4186	bf 83 00 00 00 00 00 00	r3 = r8
    4187	85 10 00 00 2c fc ff ff	call -0x3d4 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4188	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000082e8 <LBB131_118>
    4189	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4190	0f 61 00 00 00 00 00 00	r1 += r6
    4191	bf 72 00 00 00 00 00 00	r2 = r7
    4192	bf 83 00 00 00 00 00 00	r3 = r8
    4193	85 10 00 00 67 12 00 00	call 0x1267 ; <memcpy>
    4194	0f 86 00 00 00 00 00 00	r6 += r8
    4195	b7 08 00 00 00 00 00 00	r8 = 0x0
    4196	07 09 00 00 01 00 00 00	r9 += 0x1
    4197	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4198	05 00 08 00 00 00 00 00	goto +0x8 <LBB131_120>

0000000000008338 <LBB131_119>
    4199	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4200	0f 61 00 00 00 00 00 00	r1 += r6
    4201	73 91 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r9
    4202	07 06 00 00 01 00 00 00	r6 += 0x1
    4203	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4204	07 08 00 00 01 00 00 00	r8 += 0x1
    4205	bf 79 00 00 00 00 00 00	r9 = r7
    4206	15 08 a4 ff 20 00 00 00	if r8 == 0x20 goto -0x5c <LBB131_110>

0000000000008378 <LBB131_120>
    4207	bf 97 00 00 00 00 00 00	r7 = r9
    4208	0f 89 00 00 00 00 00 00	r9 += r8
    4209	71 99 00 00 00 00 00 00	r9 = *(u8 *)(r9 + 0x0)
    4210	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4211	5d 61 f3 ff 00 00 00 00	if r1 != r6 goto -0xd <LBB131_119>
    4212	bf a1 00 00 00 00 00 00	r1 = r10
    4213	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4214	bf 62 00 00 00 00 00 00	r2 = r6
    4215	b7 03 00 00 01 00 00 00	r3 = 0x1
    4216	85 10 00 00 0f fc ff ff	call -0x3f1 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4217	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4218	05 00 ec ff 00 00 00 00	goto -0x14 <LBB131_119>

00000000000083d8 <LBB131_122>
    4219	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4220	0f 61 00 00 00 00 00 00	r1 += r6
    4221	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7
    4222	07 06 00 00 08 00 00 00	r6 += 0x8
    4223	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4224	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4225	bf 91 00 00 00 00 00 00	r1 = r9
    4226	1f 61 00 00 00 00 00 00	r1 -= r6
    4227	3d 71 01 00 00 00 00 00	if r1 >= r7 goto +0x1 <LBB131_124>
    4228	05 00 a3 00 00 00 00 00	goto +0xa3 <LBB131_123>

0000000000008428 <LBB131_124>
    4229	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4230	bf 81 00 00 00 00 00 00	r1 = r8
    4231	0f 61 00 00 00 00 00 00	r1 += r6
    4232	bf 73 00 00 00 00 00 00	r3 = r7
    4233	85 10 00 00 3f 12 00 00	call 0x123f ; <memcpy>
    4234	0f 76 00 00 00 00 00 00	r6 += r7
    4235	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4236	1f 69 00 00 00 00 00 00	r9 -= r6
    4237	79 a7 c0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x40)
    4238	79 71 60 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x60)
    4239	25 09 09 00 07 00 00 00	if r9 > 0x7 goto +0x9 <LBB131_126>
    4240	bf 18 00 00 00 00 00 00	r8 = r1
    4241	bf a1 00 00 00 00 00 00	r1 = r10
    4242	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4243	bf 62 00 00 00 00 00 00	r2 = r6
    4244	b7 03 00 00 08 00 00 00	r3 = 0x8
    4245	85 10 00 00 f2 fb ff ff	call -0x40e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4246	bf 81 00 00 00 00 00 00	r1 = r8
    4247	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4248	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000084c8 <LBB131_126>
    4249	0f 68 00 00 00 00 00 00	r8 += r6
    4250	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    4251	b7 08 00 00 00 00 00 00	r8 = 0x0
    4252	07 07 00 00 21 00 00 00	r7 += 0x21
    4253	07 06 00 00 08 00 00 00	r6 += 0x8
    4254	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4255	bf 79 00 00 00 00 00 00	r9 = r7
    4256	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_128>

0000000000008508 <LBB131_127>
    4257	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4258	0f 61 00 00 00 00 00 00	r1 += r6
    4259	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4260	07 06 00 00 01 00 00 00	r6 += 0x1
    4261	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4262	07 08 00 00 01 00 00 00	r8 += 0x1
    4263	15 08 6b ff 20 00 00 00	if r8 == 0x20 goto -0x95 <LBB131_110>

0000000000008540 <LBB131_128>
    4264	bf 91 00 00 00 00 00 00	r1 = r9
    4265	0f 81 00 00 00 00 00 00	r1 += r8
    4266	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4267	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4268	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_127>
    4269	bf a1 00 00 00 00 00 00	r1 = r10
    4270	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4271	bf 62 00 00 00 00 00 00	r2 = r6
    4272	b7 03 00 00 01 00 00 00	r3 = 0x1
    4273	85 10 00 00 d6 fb ff ff	call -0x42a ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4274	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4275	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_127>

00000000000085a0 <LBB131_130>
    4276	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4277	0f 61 00 00 00 00 00 00	r1 += r6
    4278	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7
    4279	07 06 00 00 08 00 00 00	r6 += 0x8
    4280	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4281	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4282	bf 91 00 00 00 00 00 00	r1 = r9
    4283	1f 61 00 00 00 00 00 00	r1 -= r6
    4284	3d 71 01 00 00 00 00 00	if r1 >= r7 goto +0x1 <LBB131_132>
    4285	05 00 74 00 00 00 00 00	goto +0x74 <LBB131_131>

00000000000085f0 <LBB131_132>
    4286	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4287	bf 81 00 00 00 00 00 00	r1 = r8
    4288	0f 61 00 00 00 00 00 00	r1 += r6
    4289	bf 73 00 00 00 00 00 00	r3 = r7
    4290	85 10 00 00 06 12 00 00	call 0x1206 ; <memcpy>
    4291	0f 76 00 00 00 00 00 00	r6 += r7
    4292	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4293	1f 69 00 00 00 00 00 00	r9 -= r6
    4294	79 a7 c0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x40)
    4295	79 71 60 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x60)
    4296	25 09 09 00 07 00 00 00	if r9 > 0x7 goto +0x9 <LBB131_134>
    4297	bf 18 00 00 00 00 00 00	r8 = r1
    4298	bf a1 00 00 00 00 00 00	r1 = r10
    4299	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4300	bf 62 00 00 00 00 00 00	r2 = r6
    4301	b7 03 00 00 08 00 00 00	r3 = 0x8
    4302	85 10 00 00 b9 fb ff ff	call -0x447 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4303	bf 81 00 00 00 00 00 00	r1 = r8
    4304	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4305	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008690 <LBB131_134>
    4306	0f 68 00 00 00 00 00 00	r8 += r6
    4307	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    4308	07 06 00 00 08 00 00 00	r6 += 0x8
    4309	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4310	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4311	1f 61 00 00 00 00 00 00	r1 -= r6
    4312	79 78 68 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x68)
    4313	bf 79 00 00 00 00 00 00	r9 = r7
    4314	25 01 06 00 07 00 00 00	if r1 > 0x7 goto +0x6 <LBB131_136>
    4315	bf a1 00 00 00 00 00 00	r1 = r10
    4316	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4317	bf 62 00 00 00 00 00 00	r2 = r6
    4318	b7 03 00 00 08 00 00 00	r3 = 0x8
    4319	85 10 00 00 a8 fb ff ff	call -0x458 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4320	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008708 <LBB131_136>
    4321	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4322	0f 61 00 00 00 00 00 00	r1 += r6
    4323	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4324	b7 08 00 00 00 00 00 00	r8 = 0x0
    4325	07 09 00 00 21 00 00 00	r9 += 0x21
    4326	07 06 00 00 08 00 00 00	r6 += 0x8
    4327	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4328	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_138>

0000000000008748 <LBB131_137>
    4329	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4330	0f 61 00 00 00 00 00 00	r1 += r6
    4331	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4332	07 06 00 00 01 00 00 00	r6 += 0x1
    4333	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4334	07 08 00 00 01 00 00 00	r8 += 0x1
    4335	15 08 23 ff 20 00 00 00	if r8 == 0x20 goto -0xdd <LBB131_110>

0000000000008780 <LBB131_138>
    4336	bf 91 00 00 00 00 00 00	r1 = r9
    4337	0f 81 00 00 00 00 00 00	r1 += r8
    4338	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4339	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4340	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_137>
    4341	bf a1 00 00 00 00 00 00	r1 = r10
    4342	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4343	bf 62 00 00 00 00 00 00	r2 = r6
    4344	b7 03 00 00 01 00 00 00	r3 = 0x1
    4345	85 10 00 00 8e fb ff ff	call -0x472 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4346	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4347	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_137>

00000000000087e0 <LBB131_140>
    4348	bf a1 00 00 00 00 00 00	r1 = r10
    4349	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4350	b7 02 00 00 00 00 00 00	r2 = 0x0
    4351	b7 03 00 00 04 00 00 00	r3 = 0x4
    4352	85 10 00 00 87 fb ff ff	call -0x479 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4353	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4354	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4355	05 00 5c fd 00 00 00 00	goto -0x2a4 <LBB131_32>

0000000000008820 <LBB131_142>
    4356	bf a1 00 00 00 00 00 00	r1 = r10
    4357	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4358	b7 02 00 00 00 00 00 00	r2 = 0x0
    4359	b7 03 00 00 04 00 00 00	r3 = 0x4
    4360	85 10 00 00 7f fb ff ff	call -0x481 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4361	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4362	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4363	05 00 80 fd 00 00 00 00	goto -0x280 <LBB131_42>

0000000000008860 <LBB131_144>
    4364	bf a1 00 00 00 00 00 00	r1 = r10
    4365	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4366	b7 02 00 00 00 00 00 00	r2 = 0x0
    4367	b7 03 00 00 04 00 00 00	r3 = 0x4
    4368	85 10 00 00 77 fb ff ff	call -0x489 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4369	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4370	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4371	05 00 bd fd 00 00 00 00	goto -0x243 <LBB131_55>

00000000000088a0 <LBB131_145>
    4372	bf a1 00 00 00 00 00 00	r1 = r10
    4373	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4374	b7 03 00 00 08 00 00 00	r3 = 0x8
    4375	85 10 00 00 70 fb ff ff	call -0x490 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4376	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4377	05 00 cd fd 00 00 00 00	goto -0x233 <LBB131_59>

00000000000088d0 <LBB131_92>
    4378	bf a1 00 00 00 00 00 00	r1 = r10
    4379	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4380	bf 62 00 00 00 00 00 00	r2 = r6
    4381	bf 83 00 00 00 00 00 00	r3 = r8
    4382	85 10 00 00 69 fb ff ff	call -0x497 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4383	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4384	05 00 93 fe 00 00 00 00	goto -0x16d <LBB131_93>

0000000000008908 <LBB131_146>
    4385	bf a1 00 00 00 00 00 00	r1 = r10
    4386	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4387	bf 62 00 00 00 00 00 00	r2 = r6
    4388	b7 03 00 00 08 00 00 00	r3 = 0x8
    4389	85 10 00 00 62 fb ff ff	call -0x49e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4390	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4391	05 00 17 ff 00 00 00 00	goto -0xe9 <LBB131_114>

0000000000008940 <LBB131_123>
    4392	bf a1 00 00 00 00 00 00	r1 = r10
    4393	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4394	bf 28 00 00 00 00 00 00	r8 = r2
    4395	bf 62 00 00 00 00 00 00	r2 = r6
    4396	bf 73 00 00 00 00 00 00	r3 = r7
    4397	85 10 00 00 5a fb ff ff	call -0x4a6 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4398	bf 82 00 00 00 00 00 00	r2 = r8
    4399	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4400	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4401	05 00 53 ff 00 00 00 00	goto -0xad <LBB131_124>

0000000000008990 <LBB131_131>
    4402	bf a1 00 00 00 00 00 00	r1 = r10
    4403	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4404	bf 28 00 00 00 00 00 00	r8 = r2
    4405	bf 62 00 00 00 00 00 00	r2 = r6
    4406	bf 73 00 00 00 00 00 00	r3 = r7
    4407	85 10 00 00 50 fb ff ff	call -0x4b0 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4408	bf 82 00 00 00 00 00 00	r2 = r8
    4409	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4410	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4411	05 00 82 ff 00 00 00 00	goto -0x7e <LBB131_132>

00000000000089e0 <LBB131_147>
    4412	bf 61 00 00 00 00 00 00	r1 = r6
    4413	b7 02 00 00 01 00 00 00	r2 = 0x1
    4414	85 10 00 00 cf 04 00 00	call 0x4cf ; <alloc::alloc::handle_alloc_error>
    4415	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008a00 <solana_program::program::invoke>
    4416	18 05 00 00 e8 2a 01 00 00 00 00 00 00 00 00 00	r5 = 0x12ae8 ll
    4418	7b 5a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r5
    4419	b7 05 00 00 00 00 00 00	r5 = 0x0
    4420	7b 5a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r5
    4421	bf a5 00 00 00 00 00 00	r5 = r10
    4422	85 10 00 00 01 00 00 00	call 0x1 ; <solana_program::program::invoke_signed>
    4423	95 00 00 00 00 00 00 00	exit

0000000000008a40 <solana_program::program::invoke_signed>
    4424	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
    4425	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    4426	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    4427	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    4428	79 21 10 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x10)
    4429	79 52 08 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0xff8)
    4430	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
    4431	79 52 00 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0x1000)
    4432	7b 2a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r2
    4433	15 01 4d 00 00 00 00 00	if r1 == 0x0 goto +0x4d <LBB200_4>
    4434	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    4435	79 27 00 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x0)
    4436	27 01 00 00 22 00 00 00	r1 *= 0x22
    4437	bf 72 00 00 00 00 00 00	r2 = r7
    4438	0f 12 00 00 00 00 00 00	r2 += r1
    4439	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    4440	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    4441	27 01 00 00 30 00 00 00	r1 *= 0x30
    4442	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4443	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    4444	07 01 00 00 d8 ff ff ff	r1 += -0x28
    4445	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4446	05 00 3b 00 00 00 00 00	goto +0x3b <LBB200_2>

0000000000008af8 <LBB200_3>
    4447	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB200_7>
    4448	05 00 37 00 00 00 00 00	goto +0x37 <LBB200_14>

0000000000008b08 <LBB200_7>
    4449	79 92 28 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x28)
    4450	bf 61 00 00 00 00 00 00	r1 = r6
    4451	b7 03 00 00 20 00 00 00	r3 = 0x20
    4452	85 10 00 00 aa 11 00 00	call 0x11aa ; <memcmp>
    4453	07 08 00 00 d0 ff ff ff	r8 += -0x30
    4454	07 09 00 00 30 00 00 00	r9 += 0x30
    4455	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4456	77 00 00 00 20 00 00 00	r0 >>= 0x20
    4457	55 00 f5 ff 00 00 00 00	if r0 != 0x0 goto -0xb <LBB200_3>
    4458	71 61 21 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x21)
    4459	55 01 18 00 00 00 00 00	if r1 != 0x0 goto +0x18 <LBB200_10>
    4460	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4461	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4462	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    4464	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB200_16>
    4465	05 00 4a 00 00 00 00 00	goto +0x4a <LBB200_17>

0000000000008b90 <LBB200_16>
    4466	bf 13 00 00 00 00 00 00	r3 = r1
    4467	07 03 00 00 10 00 00 00	r3 += 0x10
    4468	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    4469	7b 23 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r2
    4470	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4471	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    4472	18 04 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r4 = 0x7fffffffffffffff ll
    4474	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB200_18>
    4475	05 00 47 00 00 00 00 00	goto +0x47 <LBB200_19>

0000000000008be0 <LBB200_18>
    4476	bf 23 00 00 00 00 00 00	r3 = r2
    4477	07 03 00 00 10 00 00 00	r3 += 0x10
    4478	7b 3a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r3
    4479	07 02 00 00 18 00 00 00	r2 += 0x18
    4480	07 01 00 00 18 00 00 00	r1 += 0x18
    4481	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    4482	7b 2a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r2
    4483	05 00 14 00 00 00 00 00	goto +0x14 <LBB200_14>

0000000000008c20 <LBB200_10>
    4484	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4485	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4486	b7 04 00 00 00 00 00 00	r4 = 0x0
    4487	55 02 26 00 00 00 00 00	if r2 != 0x0 goto +0x26 <LBB200_12>
    4488	bf 12 00 00 00 00 00 00	r2 = r1
    4489	07 02 00 00 10 00 00 00	r2 += 0x10
    4490	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    4491	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    4492	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4493	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    4494	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB200_13>
    4495	05 00 25 00 00 00 00 00	goto +0x25 <LBB200_15>

0000000000008c80 <LBB200_13>
    4496	bf 23 00 00 00 00 00 00	r3 = r2
    4497	07 03 00 00 10 00 00 00	r3 += 0x10
    4498	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    4499	7b 42 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r4
    4500	07 02 00 00 18 00 00 00	r2 += 0x18
    4501	07 01 00 00 18 00 00 00	r1 += 0x18
    4502	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
    4503	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1

0000000000008cc0 <LBB200_14>
    4504	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4505	1d 17 05 00 00 00 00 00	if r7 == r1 goto +0x5 <LBB200_4>

0000000000008cd0 <LBB200_2>
    4506	bf 76 00 00 00 00 00 00	r6 = r7
    4507	07 07 00 00 22 00 00 00	r7 += 0x22
    4508	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x8)
    4509	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4510	05 00 c0 ff 00 00 00 00	goto -0x40 <LBB200_3>

0000000000008cf8 <LBB200_4>
    4511	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    4512	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    4513	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    4514	79 a4 78 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x88)
    4515	79 a5 80 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x80)
    4516	85 10 00 00 ff ff ff ff	call -0x1 ; sol_invoke_signed_rust
    4517	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB200_6>
    4518	b7 01 00 00 14 00 00 00	r1 = 0x14
    4519	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4520	63 12 00 00 00 00 00 00	*(u32 *)(r2 + 0x0) = r1
    4521	05 00 22 00 00 00 00 00	goto +0x22 <LBB200_21>

0000000000008d50 <LBB200_6>
    4522	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    4523	bf 02 00 00 00 00 00 00	r2 = r0
    4524	85 10 00 00 7b 00 00 00	call 0x7b ; <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    4525	05 00 1e 00 00 00 00 00	goto +0x1e <LBB200_21>

0000000000008d70 <LBB200_12>
    4526	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4527	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    4528	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4529	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4531	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    4532	05 00 14 00 00 00 00 00	goto +0x14 <LBB200_20>

0000000000008da8 <LBB200_15>
    4533	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4534	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4535	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4536	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4538	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    4539	05 00 0d 00 00 00 00 00	goto +0xd <LBB200_20>

0000000000008de0 <LBB200_17>
    4540	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4541	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    4542	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4543	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4545	79 a3 98 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x68)
    4546	05 00 06 00 00 00 00 00	goto +0x6 <LBB200_20>

0000000000008e18 <LBB200_19>
    4547	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4548	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    4549	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4550	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4552	79 a3 88 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x78)

0000000000008e48 <LBB200_20>
    4553	5f 13 00 00 00 00 00 00	r3 &= r1
    4554	47 03 00 00 0b 00 00 00	r3 |= 0xb
    4555	7b 32 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r3

0000000000008e60 <LBB200_21>
    4556	95 00 00 00 00 00 00 00	exit

0000000000008e68 <solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from>
    4557	61 12 00 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x0)
    4558	65 02 06 00 09 00 00 00	if r2 s> 0x9 goto +0x6 <LBB206_14>
    4559	65 02 0b 00 04 00 00 00	if r2 s> 0x4 goto +0xb <LBB206_8>
    4560	65 02 14 00 01 00 00 00	if r2 s> 0x1 goto +0x14 <LBB206_5>
    4561	15 02 27 00 00 00 00 00	if r2 == 0x0 goto +0x27 <LBB206_27>
    4562	18 06 00 00 00 00 00 00 00 00 00 00 02 00 00 00	r6 = 0x200000000 ll
    4564	05 00 4a 00 00 00 00 00	goto +0x4a <LBB206_39>

0000000000008ea8 <LBB206_14>
    4565	65 02 0a 00 0e 00 00 00	if r2 s> 0xe goto +0xa <LBB206_21>
    4566	65 02 13 00 0b 00 00 00	if r2 s> 0xb goto +0x13 <LBB206_18>
    4567	15 02 27 00 0a 00 00 00	if r2 == 0xa goto +0x27 <LBB206_33>
    4568	18 06 00 00 00 00 00 00 00 00 00 00 0c 00 00 00	r6 = 0xc00000000 ll
    4570	05 00 44 00 00 00 00 00	goto +0x44 <LBB206_39>

0000000000008ed8 <LBB206_8>
    4571	65 02 13 00 06 00 00 00	if r2 s> 0x6 goto +0x13 <LBB206_11>
    4572	15 02 25 00 05 00 00 00	if r2 == 0x5 goto +0x25 <LBB206_30>
    4573	18 06 00 00 00 00 00 00 00 00 00 00 07 00 00 00	r6 = 0x700000000 ll
    4575	05 00 3f 00 00 00 00 00	goto +0x3f <LBB206_39>

0000000000008f00 <LBB206_21>
    4576	65 02 13 00 10 00 00 00	if r2 s> 0x10 goto +0x13 <LBB206_24>
    4577	15 02 23 00 0f 00 00 00	if r2 == 0xf goto +0x23 <LBB206_36>
    4578	18 06 00 00 00 00 00 00 00 00 00 00 11 00 00 00	r6 = 0x1100000000 ll
    4580	05 00 3a 00 00 00 00 00	goto +0x3a <LBB206_39>

0000000000008f28 <LBB206_5>
    4581	15 02 22 00 02 00 00 00	if r2 == 0x2 goto +0x22 <LBB206_28>
    4582	15 02 24 00 03 00 00 00	if r2 == 0x3 goto +0x24 <LBB206_29>
    4583	18 06 00 00 00 00 00 00 00 00 00 00 05 00 00 00	r6 = 0x500000000 ll
    4585	05 00 35 00 00 00 00 00	goto +0x35 <LBB206_39>

0000000000008f50 <LBB206_18>
    4586	15 02 23 00 0c 00 00 00	if r2 == 0xc goto +0x23 <LBB206_34>
    4587	15 02 25 00 0d 00 00 00	if r2 == 0xd goto +0x25 <LBB206_35>
    4588	18 06 00 00 00 00 00 00 00 00 00 00 0f 00 00 00	r6 = 0xf00000000 ll
    4590	05 00 30 00 00 00 00 00	goto +0x30 <LBB206_39>

0000000000008f78 <LBB206_11>
    4591	15 02 24 00 07 00 00 00	if r2 == 0x7 goto +0x24 <LBB206_31>
    4592	15 02 26 00 08 00 00 00	if r2 == 0x8 goto +0x26 <LBB206_32>
    4593	18 06 00 00 00 00 00 00 00 00 00 00 0a 00 00 00	r6 = 0xa00000000 ll
    4595	05 00 2b 00 00 00 00 00	goto +0x2b <LBB206_39>

0000000000008fa0 <LBB206_24>
    4596	15 02 25 00 11 00 00 00	if r2 == 0x11 goto +0x25 <LBB206_37>
    4597	15 02 27 00 12 00 00 00	if r2 == 0x12 goto +0x27 <LBB206_38>
    4598	18 06 00 00 00 00 00 00 00 00 00 00 14 00 00 00	r6 = 0x1400000000 ll
    4600	05 00 26 00 00 00 00 00	goto +0x26 <LBB206_39>

0000000000008fc8 <LBB206_27>
    4601	18 06 00 00 00 00 00 00 00 00 00 00 01 00 00 00	r6 = 0x100000000 ll
    4603	61 13 04 00 00 00 00 00	r3 = *(u32 *)(r1 + 0x4)
    4604	15 03 22 00 00 00 00 00	if r3 == 0x0 goto +0x22 <LBB206_39>
    4605	bf 36 00 00 00 00 00 00	r6 = r3
    4606	05 00 20 00 00 00 00 00	goto +0x20 <LBB206_39>

0000000000008ff8 <LBB206_33>
    4607	18 06 00 00 00 00 00 00 00 00 00 00 0b 00 00 00	r6 = 0xb00000000 ll
    4609	05 00 1d 00 00 00 00 00	goto +0x1d <LBB206_39>

0000000000009010 <LBB206_30>
    4610	18 06 00 00 00 00 00 00 00 00 00 00 06 00 00 00	r6 = 0x600000000 ll
    4612	05 00 1a 00 00 00 00 00	goto +0x1a <LBB206_39>

0000000000009028 <LBB206_36>
    4613	18 06 00 00 00 00 00 00 00 00 00 00 10 00 00 00	r6 = 0x1000000000 ll
    4615	05 00 17 00 00 00 00 00	goto +0x17 <LBB206_39>

0000000000009040 <LBB206_28>
    4616	18 06 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r6 = 0x300000000 ll
    4618	05 00 14 00 00 00 00 00	goto +0x14 <LBB206_39>

0000000000009058 <LBB206_29>
    4619	18 06 00 00 00 00 00 00 00 00 00 00 04 00 00 00	r6 = 0x400000000 ll
    4621	05 00 11 00 00 00 00 00	goto +0x11 <LBB206_39>

0000000000009070 <LBB206_34>
    4622	18 06 00 00 00 00 00 00 00 00 00 00 0d 00 00 00	r6 = 0xd00000000 ll
    4624	05 00 0e 00 00 00 00 00	goto +0xe <LBB206_39>

0000000000009088 <LBB206_35>
    4625	18 06 00 00 00 00 00 00 00 00 00 00 0e 00 00 00	r6 = 0xe00000000 ll
    4627	05 00 0b 00 00 00 00 00	goto +0xb <LBB206_39>

00000000000090a0 <LBB206_31>
    4628	18 06 00 00 00 00 00 00 00 00 00 00 08 00 00 00	r6 = 0x800000000 ll
    4630	05 00 08 00 00 00 00 00	goto +0x8 <LBB206_39>

00000000000090b8 <LBB206_32>
    4631	18 06 00 00 00 00 00 00 00 00 00 00 09 00 00 00	r6 = 0x900000000 ll
    4633	05 00 05 00 00 00 00 00	goto +0x5 <LBB206_39>

00000000000090d0 <LBB206_37>
    4634	18 06 00 00 00 00 00 00 00 00 00 00 12 00 00 00	r6 = 0x1200000000 ll
    4636	05 00 02 00 00 00 00 00	goto +0x2 <LBB206_39>

00000000000090e8 <LBB206_38>
    4637	18 06 00 00 00 00 00 00 00 00 00 00 13 00 00 00	r6 = 0x1300000000 ll

00000000000090f8 <LBB206_39>
    4639	55 02 06 00 0e 00 00 00	if r2 != 0xe goto +0x6 <LBB206_43>
    4640	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4641	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB206_43>
    4642	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    4643	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB206_43>
    4644	b7 03 00 00 01 00 00 00	r3 = 0x1
    4645	85 10 00 00 fb f9 ff ff	call -0x605 ; <__rust_dealloc>

0000000000009130 <LBB206_43>
    4646	bf 60 00 00 00 00 00 00	r0 = r6
    4647	95 00 00 00 00 00 00 00	exit

0000000000009140 <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    4648	bf 16 00 00 00 00 00 00	r6 = r1
    4649	18 03 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r3 = -0x100000000 ll
    4651	bf 21 00 00 00 00 00 00	r1 = r2
    4652	0f 31 00 00 00 00 00 00	r1 += r3
    4653	bf 13 00 00 00 00 00 00	r3 = r1
    4654	77 03 00 00 20 00 00 00	r3 >>= 0x20
    4655	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4656	4f 31 00 00 00 00 00 00	r1 |= r3
    4657	65 01 06 00 09 00 00 00	if r1 s> 0x9 goto +0x6 <LBB207_14>
    4658	65 01 0c 00 04 00 00 00	if r1 s> 0x4 goto +0xc <LBB207_8>
    4659	65 01 17 00 01 00 00 00	if r1 s> 0x1 goto +0x17 <LBB207_5>
    4660	15 01 35 00 00 00 00 00	if r1 == 0x0 goto +0x35 <LBB207_28>
    4661	b7 03 00 00 01 00 00 00	r3 = 0x1
    4662	15 01 56 00 01 00 00 00	if r1 == 0x1 goto +0x56 <LBB207_49>
    4663	05 00 2f 00 00 00 00 00	goto +0x2f <LBB207_27>

00000000000091c0 <LBB207_14>
    4664	65 01 0c 00 0e 00 00 00	if r1 s> 0xe goto +0xc <LBB207_21>
    4665	65 01 17 00 0b 00 00 00	if r1 s> 0xb goto +0x17 <LBB207_18>
    4666	15 01 32 00 0a 00 00 00	if r1 == 0xa goto +0x32 <LBB207_37>
    4667	15 01 01 00 0b 00 00 00	if r1 == 0xb goto +0x1 <LBB207_38>
    4668	05 00 2a 00 00 00 00 00	goto +0x2a <LBB207_27>

00000000000091e8 <LBB207_38>
    4669	b7 03 00 00 0b 00 00 00	r3 = 0xb
    4670	05 00 4e 00 00 00 00 00	goto +0x4e <LBB207_49>

00000000000091f8 <LBB207_8>
    4671	65 01 1e 00 06 00 00 00	if r1 s> 0x6 goto +0x1e <LBB207_11>
    4672	15 01 2e 00 05 00 00 00	if r1 == 0x5 goto +0x2e <LBB207_32>
    4673	15 01 01 00 06 00 00 00	if r1 == 0x6 goto +0x1 <LBB207_33>
    4674	05 00 24 00 00 00 00 00	goto +0x24 <LBB207_27>

0000000000009218 <LBB207_33>
    4675	b7 03 00 00 06 00 00 00	r3 = 0x6
    4676	05 00 48 00 00 00 00 00	goto +0x48 <LBB207_49>

0000000000009228 <LBB207_21>
    4677	65 01 1e 00 10 00 00 00	if r1 s> 0x10 goto +0x1e <LBB207_24>
    4678	15 01 2a 00 0f 00 00 00	if r1 == 0xf goto +0x2a <LBB207_44>
    4679	15 01 01 00 10 00 00 00	if r1 == 0x10 goto +0x1 <LBB207_45>
    4680	05 00 1e 00 00 00 00 00	goto +0x1e <LBB207_27>

0000000000009248 <LBB207_45>
    4681	b7 03 00 00 10 00 00 00	r3 = 0x10
    4682	05 00 42 00 00 00 00 00	goto +0x42 <LBB207_49>

0000000000009258 <LBB207_5>
    4683	15 01 27 00 02 00 00 00	if r1 == 0x2 goto +0x27 <LBB207_29>
    4684	15 01 28 00 03 00 00 00	if r1 == 0x3 goto +0x28 <LBB207_30>
    4685	15 01 01 00 04 00 00 00	if r1 == 0x4 goto +0x1 <LBB207_31>
    4686	05 00 18 00 00 00 00 00	goto +0x18 <LBB207_27>

0000000000009278 <LBB207_31>
    4687	b7 03 00 00 04 00 00 00	r3 = 0x4
    4688	05 00 3c 00 00 00 00 00	goto +0x3c <LBB207_49>

0000000000009288 <LBB207_18>
    4689	15 01 25 00 0c 00 00 00	if r1 == 0xc goto +0x25 <LBB207_39>
    4690	15 01 26 00 0d 00 00 00	if r1 == 0xd goto +0x26 <LBB207_40>
    4691	15 01 01 00 0e 00 00 00	if r1 == 0xe goto +0x1 <LBB207_41>
    4692	05 00 12 00 00 00 00 00	goto +0x12 <LBB207_27>

00000000000092a8 <LBB207_41>
    4693	b7 07 00 00 07 00 00 00	r7 = 0x7
    4694	b7 01 00 00 07 00 00 00	r1 = 0x7
    4695	b7 02 00 00 01 00 00 00	r2 = 0x1
    4696	85 10 00 00 c6 f9 ff ff	call -0x63a ; <__rust_alloc>
    4697	55 00 2b 00 00 00 00 00	if r0 != 0x0 goto +0x2b <LBB207_43>
    4698	b7 01 00 00 07 00 00 00	r1 = 0x7
    4699	b7 02 00 00 01 00 00 00	r2 = 0x1
    4700	85 10 00 00 b1 03 00 00	call 0x3b1 ; <alloc::alloc::handle_alloc_error>
    4701	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000092f0 <LBB207_11>
    4702	15 01 1c 00 07 00 00 00	if r1 == 0x7 goto +0x1c <LBB207_34>
    4703	15 01 1d 00 08 00 00 00	if r1 == 0x8 goto +0x1d <LBB207_35>
    4704	15 01 01 00 09 00 00 00	if r1 == 0x9 goto +0x1 <LBB207_36>
    4705	05 00 05 00 00 00 00 00	goto +0x5 <LBB207_27>

0000000000009310 <LBB207_36>
    4706	b7 03 00 00 09 00 00 00	r3 = 0x9
    4707	05 00 29 00 00 00 00 00	goto +0x29 <LBB207_49>

0000000000009320 <LBB207_24>
    4708	15 01 1a 00 11 00 00 00	if r1 == 0x11 goto +0x1a <LBB207_46>
    4709	15 01 1b 00 12 00 00 00	if r1 == 0x12 goto +0x1b <LBB207_47>
    4710	15 01 1c 00 13 00 00 00	if r1 == 0x13 goto +0x1c <LBB207_48>

0000000000009338 <LBB207_27>
    4711	63 26 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r2
    4712	b7 03 00 00 00 00 00 00	r3 = 0x0
    4713	05 00 23 00 00 00 00 00	goto +0x23 <LBB207_49>

0000000000009350 <LBB207_28>
    4714	b7 03 00 00 00 00 00 00	r3 = 0x0
    4715	63 36 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r3
    4716	05 00 20 00 00 00 00 00	goto +0x20 <LBB207_49>

0000000000009368 <LBB207_37>
    4717	b7 03 00 00 0a 00 00 00	r3 = 0xa
    4718	05 00 1e 00 00 00 00 00	goto +0x1e <LBB207_49>

0000000000009378 <LBB207_32>
    4719	b7 03 00 00 05 00 00 00	r3 = 0x5
    4720	05 00 1c 00 00 00 00 00	goto +0x1c <LBB207_49>

0000000000009388 <LBB207_44>
    4721	b7 03 00 00 0f 00 00 00	r3 = 0xf
    4722	05 00 1a 00 00 00 00 00	goto +0x1a <LBB207_49>

0000000000009398 <LBB207_29>
    4723	b7 03 00 00 02 00 00 00	r3 = 0x2
    4724	05 00 18 00 00 00 00 00	goto +0x18 <LBB207_49>

00000000000093a8 <LBB207_30>
    4725	b7 03 00 00 03 00 00 00	r3 = 0x3
    4726	05 00 16 00 00 00 00 00	goto +0x16 <LBB207_49>

00000000000093b8 <LBB207_39>
    4727	b7 03 00 00 0c 00 00 00	r3 = 0xc
    4728	05 00 14 00 00 00 00 00	goto +0x14 <LBB207_49>

00000000000093c8 <LBB207_40>
    4729	b7 03 00 00 0d 00 00 00	r3 = 0xd
    4730	05 00 12 00 00 00 00 00	goto +0x12 <LBB207_49>

00000000000093d8 <LBB207_34>
    4731	b7 03 00 00 07 00 00 00	r3 = 0x7
    4732	05 00 10 00 00 00 00 00	goto +0x10 <LBB207_49>

00000000000093e8 <LBB207_35>
    4733	b7 03 00 00 08 00 00 00	r3 = 0x8
    4734	05 00 0e 00 00 00 00 00	goto +0xe <LBB207_49>

00000000000093f8 <LBB207_46>
    4735	b7 03 00 00 11 00 00 00	r3 = 0x11
    4736	05 00 0c 00 00 00 00 00	goto +0xc <LBB207_49>

0000000000009408 <LBB207_47>
    4737	b7 03 00 00 12 00 00 00	r3 = 0x12
    4738	05 00 0a 00 00 00 00 00	goto +0xa <LBB207_49>

0000000000009418 <LBB207_48>
    4739	b7 03 00 00 13 00 00 00	r3 = 0x13
    4740	05 00 08 00 00 00 00 00	goto +0x8 <LBB207_49>

0000000000009428 <LBB207_43>
    4741	b7 01 00 00 6e 6f 77 6e	r1 = 0x6e776f6e
    4742	63 10 03 00 00 00 00 00	*(u32 *)(r0 + 0x3) = r1
    4743	b7 01 00 00 55 6e 6b 6e	r1 = 0x6e6b6e55
    4744	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4745	7b 76 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r7
    4746	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    4747	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    4748	b7 03 00 00 0e 00 00 00	r3 = 0xe

0000000000009468 <LBB207_49>
    4749	63 36 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r3
    4750	95 00 00 00 00 00 00 00	exit

0000000000009478 <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    4751	bf 16 00 00 00 00 00 00	r6 = r1
    4752	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    4753	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    4754	bf a1 00 00 00 00 00 00	r1 = r10
    4755	07 01 00 00 f0 ff ff ff	r1 += -0x10
    4756	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4757	b7 01 00 00 00 00 00 00	r1 = 0x0
    4758	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4759	b7 01 00 00 01 00 00 00	r1 = 0x1
    4760	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    4761	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    4762	18 01 00 00 78 3c 01 00 00 00 00 00 00 00 00 00	r1 = 0x13c78 ll
    4764	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    4765	18 01 00 00 e8 a7 00 00 00 00 00 00 00 00 00 00	r1 = 0xa7e8 ll
    4767	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4768	bf a1 00 00 00 00 00 00	r1 = r10
    4769	07 01 00 00 b0 ff ff ff	r1 += -0x50
    4770	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4771	bf 61 00 00 00 00 00 00	r1 = r6
    4772	07 01 00 00 08 00 00 00	r1 += 0x8
    4773	bf a2 00 00 00 00 00 00	r2 = r10
    4774	07 02 00 00 c0 ff ff ff	r2 += -0x40
    4775	85 10 00 00 6e 03 00 00	call 0x36e ; <alloc::fmt::format>
    4776	b7 01 00 00 0e 00 00 00	r1 = 0xe
    4777	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
    4778	71 a1 b0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x50)
    4779	55 01 0f 00 03 00 00 00	if r1 != 0x3 goto +0xf <LBB210_4>
    4780	79 a6 b8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x48)
    4781	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4782	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    4783	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4784	8d 00 00 00 02 00 00 00	callx r2
    4785	79 63 08 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x8)
    4786	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
    4787	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB210_3>
    4788	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4789	79 33 10 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x10)
    4790	85 10 00 00 6a f9 ff ff	call -0x696 ; <__rust_dealloc>

00000000000095b8 <LBB210_3>
    4791	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    4792	b7 02 00 00 18 00 00 00	r2 = 0x18
    4793	b7 03 00 00 08 00 00 00	r3 = 0x8
    4794	85 10 00 00 66 f9 ff ff	call -0x69a ; <__rust_dealloc>

00000000000095d8 <LBB210_4>
    4795	95 00 00 00 00 00 00 00	exit

00000000000095e0 <solana_program::pubkey::Pubkey::find_program_address>
    4796	bf 40 00 00 00 00 00 00	r0 = r4
    4797	bf 16 00 00 00 00 00 00	r6 = r1
    4798	b7 01 00 00 00 00 00 00	r1 = 0x0
    4799	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    4800	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4801	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    4802	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4803	b7 01 00 00 ff 00 00 00	r1 = 0xff
    4804	73 1a cf ff 00 00 00 00	*(u8 *)(r10 - 0x31) = r1
    4805	bf a4 00 00 00 00 00 00	r4 = r10
    4806	07 04 00 00 d0 ff ff ff	r4 += -0x30
    4807	bf a5 00 00 00 00 00 00	r5 = r10
    4808	07 05 00 00 cf ff ff ff	r5 += -0x31
    4809	bf 21 00 00 00 00 00 00	r1 = r2
    4810	bf 32 00 00 00 00 00 00	r2 = r3
    4811	bf 03 00 00 00 00 00 00	r3 = r0
    4812	85 10 00 00 ff ff ff ff	call -0x1 ; sol_try_find_program_address
    4813	55 00 09 00 00 00 00 00	if r0 != 0x0 goto +0x9 <LBB221_2>
    4814	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4815	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    4816	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    4817	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    4818	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4819	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    4820	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    4821	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    4822	71 a1 cf ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x31)

00000000000096b8 <LBB221_2>
    4823	15 00 11 00 00 00 00 00	if r0 == 0x0 goto +0x11 <LBB221_4>
    4824	18 01 00 00 e8 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ae8 ll
    4826	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4827	b7 01 00 00 00 00 00 00	r1 = 0x0
    4828	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4829	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4830	b7 01 00 00 01 00 00 00	r1 = 0x1
    4831	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    4832	18 01 00 00 a0 3c 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ca0 ll
    4834	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4835	bf a1 00 00 00 00 00 00	r1 = r10
    4836	07 01 00 00 d0 ff ff ff	r1 += -0x30
    4837	18 02 00 00 b0 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13cb0 ll
    4839	85 10 00 00 7d 05 00 00	call 0x57d ; <core::panicking::panic_fmt>
    4840	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009748 <LBB221_4>
    4841	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    4842	7b 26 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r2
    4843	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    4844	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    4845	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    4846	7b 26 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r2
    4847	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4848	7b 26 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r2
    4849	73 16 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r1
    4850	95 00 00 00 00 00 00 00	exit

0000000000009798 <solana_program::rent::Rent::minimum_balance>
    4851	bf 16 00 00 00 00 00 00	r6 = r1
    4852	07 02 00 00 80 00 00 00	r2 += 0x80
    4853	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4854	2f 21 00 00 00 00 00 00	r1 *= r2
    4855	85 10 00 00 7f 11 00 00	call 0x117f ; <__floatundidf>
    4856	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4857	bf 02 00 00 00 00 00 00	r2 = r0
    4858	85 10 00 00 cc 0e 00 00	call 0xecc ; <__muldf3>
    4859	bf 06 00 00 00 00 00 00	r6 = r0
    4860	bf 61 00 00 00 00 00 00	r1 = r6
    4861	85 10 00 00 66 0e 00 00	call 0xe66 ; <__fixunsdfdi>
    4862	bf 07 00 00 00 00 00 00	r7 = r0
    4863	b7 08 00 00 00 00 00 00	r8 = 0x0
    4864	bf 61 00 00 00 00 00 00	r1 = r6
    4865	b7 02 00 00 00 00 00 00	r2 = 0x0
    4866	85 10 00 00 a0 0e 00 00	call 0xea0 ; <__gedf2>
    4867	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4868	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    4869	6d 08 01 00 00 00 00 00	if r8 s> r0 goto +0x1 <LBB230_2>
    4870	bf 78 00 00 00 00 00 00	r8 = r7

0000000000009838 <LBB230_2>
    4871	bf 61 00 00 00 00 00 00	r1 = r6
    4872	18 02 00 00 ff ff ff ff 00 00 00 00 ff ff ef 43	r2 = 0x43efffffffffffff ll
    4874	85 10 00 00 74 0e 00 00	call 0xe74 ; <__gtdf2>
    4875	bf 01 00 00 00 00 00 00	r1 = r0
    4876	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4877	c7 01 00 00 20 00 00 00	r1 s>>= 0x20
    4878	b7 00 00 00 ff ff ff ff	r0 = -0x1
    4879	65 01 01 00 00 00 00 00	if r1 s> 0x0 goto +0x1 <LBB230_4>
    4880	bf 80 00 00 00 00 00 00	r0 = r8

0000000000009888 <LBB230_4>
    4881	95 00 00 00 00 00 00 00	exit

0000000000009890 <solana_program::system_instruction::assign>
    4882	bf 37 00 00 00 00 00 00	r7 = r3
    4883	bf 28 00 00 00 00 00 00	r8 = r2
    4884	bf 16 00 00 00 00 00 00	r6 = r1
    4885	b7 09 00 00 01 00 00 00	r9 = 0x1
    4886	b7 01 00 00 22 00 00 00	r1 = 0x22
    4887	b7 02 00 00 01 00 00 00	r2 = 0x1
    4888	85 10 00 00 06 f9 ff ff	call -0x6fa ; <__rust_alloc>
    4889	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB332_2>
    4890	b7 01 00 00 22 00 00 00	r1 = 0x22
    4891	b7 02 00 00 01 00 00 00	r2 = 0x1
    4892	85 10 00 00 f1 02 00 00	call 0x2f1 ; <alloc::alloc::handle_alloc_error>
    4893	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000098f0 <LBB332_2>
    4894	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    4895	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    4896	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    4897	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    4898	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    4899	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    4900	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    4901	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    4902	b7 01 00 00 01 01 00 00	r1 = 0x101
    4903	6b 10 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r1
    4904	b7 01 00 00 00 00 00 00	r1 = 0x0
    4905	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    4906	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    4907	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    4908	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    4909	79 71 18 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x18)
    4910	7b 1a 91 ff 00 00 00 00	*(u64 *)(r10 - 0x6f) = r1
    4911	79 71 10 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x10)
    4912	7b 1a 89 ff 00 00 00 00	*(u64 *)(r10 - 0x77) = r1
    4913	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    4914	7b 1a 81 ff 00 00 00 00	*(u64 *)(r10 - 0x7f) = r1
    4915	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    4916	7b 1a 79 ff 00 00 00 00	*(u64 *)(r10 - 0x87) = r1
    4917	73 9a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r9
    4918	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    4919	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    4920	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    4921	bf a2 00 00 00 00 00 00	r2 = r10
    4922	07 02 00 00 58 ff ff ff	r2 += -0xa8
    4923	bf a7 00 00 00 00 00 00	r7 = r10
    4924	07 07 00 00 78 ff ff ff	r7 += -0x88
    4925	bf a4 00 00 00 00 00 00	r4 = r10
    4926	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4927	bf 61 00 00 00 00 00 00	r1 = r6
    4928	bf 73 00 00 00 00 00 00	r3 = r7
    4929	85 10 00 00 dc fa ff ff	call -0x524 ; <solana_program::instruction::Instruction::new_with_bincode>
    4930	bf 71 00 00 00 00 00 00	r1 = r7
    4931	85 10 00 00 eb f8 ff ff	call -0x715 ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    4932	95 00 00 00 00 00 00 00	exit

0000000000009a28 <solana_program::system_instruction::transfer>
    4933	bf 47 00 00 00 00 00 00	r7 = r4
    4934	bf 38 00 00 00 00 00 00	r8 = r3
    4935	bf 29 00 00 00 00 00 00	r9 = r2
    4936	bf 16 00 00 00 00 00 00	r6 = r1
    4937	b7 01 00 00 44 00 00 00	r1 = 0x44
    4938	b7 02 00 00 01 00 00 00	r2 = 0x1
    4939	85 10 00 00 d3 f8 ff ff	call -0x72d ; <__rust_alloc>
    4940	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB334_2>
    4941	b7 01 00 00 44 00 00 00	r1 = 0x44
    4942	b7 02 00 00 01 00 00 00	r2 = 0x1
    4943	85 10 00 00 be 02 00 00	call 0x2be ; <alloc::alloc::handle_alloc_error>
    4944	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009a88 <LBB334_2>
    4945	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4946	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4947	79 93 10 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x10)
    4948	79 94 18 00 00 00 00 00	r4 = *(u64 *)(r9 + 0x18)
    4949	b7 05 00 00 01 01 00 00	r5 = 0x101
    4950	6b 50 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r5
    4951	7b 40 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r4
    4952	7b 30 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r3
    4953	7b 20 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r2
    4954	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    4955	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    4956	7b 10 22 00 00 00 00 00	*(u64 *)(r0 + 0x22) = r1
    4957	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    4958	7b 10 2a 00 00 00 00 00	*(u64 *)(r0 + 0x2a) = r1
    4959	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    4960	7b 10 32 00 00 00 00 00	*(u64 *)(r0 + 0x32) = r1
    4961	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    4962	7b 10 3a 00 00 00 00 00	*(u64 *)(r0 + 0x3a) = r1
    4963	b7 01 00 00 00 01 00 00	r1 = 0x100
    4964	6b 10 42 00 00 00 00 00	*(u16 *)(r0 + 0x42) = r1
    4965	b7 01 00 00 00 00 00 00	r1 = 0x0
    4966	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    4967	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    4968	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    4969	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    4970	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    4971	b7 01 00 00 02 00 00 00	r1 = 0x2
    4972	73 1a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r1
    4973	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4974	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4975	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    4976	bf a2 00 00 00 00 00 00	r2 = r10
    4977	07 02 00 00 58 ff ff ff	r2 += -0xa8
    4978	bf a7 00 00 00 00 00 00	r7 = r10
    4979	07 07 00 00 78 ff ff ff	r7 += -0x88
    4980	bf a4 00 00 00 00 00 00	r4 = r10
    4981	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4982	bf 61 00 00 00 00 00 00	r1 = r6
    4983	bf 73 00 00 00 00 00 00	r3 = r7
    4984	85 10 00 00 a5 fa ff ff	call -0x55b ; <solana_program::instruction::Instruction::new_with_bincode>
    4985	bf 71 00 00 00 00 00 00	r1 = r7
    4986	85 10 00 00 b4 f8 ff ff	call -0x74c ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    4987	95 00 00 00 00 00 00 00	exit

0000000000009be0 <solana_program::system_instruction::allocate>
    4988	bf 37 00 00 00 00 00 00	r7 = r3
    4989	bf 28 00 00 00 00 00 00	r8 = r2
    4990	bf 16 00 00 00 00 00 00	r6 = r1
    4991	b7 09 00 00 01 00 00 00	r9 = 0x1
    4992	b7 01 00 00 22 00 00 00	r1 = 0x22
    4993	b7 02 00 00 01 00 00 00	r2 = 0x1
    4994	85 10 00 00 9c f8 ff ff	call -0x764 ; <__rust_alloc>
    4995	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB336_2>
    4996	b7 01 00 00 22 00 00 00	r1 = 0x22
    4997	b7 02 00 00 01 00 00 00	r2 = 0x1
    4998	85 10 00 00 87 02 00 00	call 0x287 ; <alloc::alloc::handle_alloc_error>
    4999	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009c40 <LBB336_2>
    5000	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    5001	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    5002	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    5003	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    5004	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    5005	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5006	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    5007	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    5008	b7 01 00 00 01 01 00 00	r1 = 0x101
    5009	6b 10 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r1
    5010	b7 01 00 00 00 00 00 00	r1 = 0x0
    5011	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    5012	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    5013	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    5014	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    5015	b7 01 00 00 08 00 00 00	r1 = 0x8
    5016	73 1a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r1
    5017	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    5018	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    5019	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    5020	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    5021	bf a2 00 00 00 00 00 00	r2 = r10
    5022	07 02 00 00 58 ff ff ff	r2 += -0xa8
    5023	bf a7 00 00 00 00 00 00	r7 = r10
    5024	07 07 00 00 78 ff ff ff	r7 += -0x88
    5025	bf a4 00 00 00 00 00 00	r4 = r10
    5026	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5027	bf 61 00 00 00 00 00 00	r1 = r6
    5028	bf 73 00 00 00 00 00 00	r3 = r7
    5029	85 10 00 00 78 fa ff ff	call -0x588 ; <solana_program::instruction::Instruction::new_with_bincode>
    5030	bf 71 00 00 00 00 00 00	r1 = r7
    5031	85 10 00 00 87 f8 ff ff	call -0x779 ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    5032	95 00 00 00 00 00 00 00	exit

0000000000009d48 <std::error::Error::type_id>
    5033	18 00 00 00 ed d3 f7 ec 00 00 00 00 03 94 b8 10	r0 = 0x10b89403ecf7d3ed ll
    5035	95 00 00 00 00 00 00 00	exit

0000000000009d60 <std::error::Error::backtrace>
    5036	b7 00 00 00 00 00 00 00	r0 = 0x0
    5037	95 00 00 00 00 00 00 00	exit

0000000000009d70 <std::error::Error::cause>
    5038	b7 02 00 00 00 00 00 00	r2 = 0x0
    5039	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5040	95 00 00 00 00 00 00 00	exit

0000000000009d88 <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
    5041	bf 16 00 00 00 00 00 00	r6 = r1
    5042	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    5043	25 01 09 00 1f 00 00 00	if r1 > 0x1f goto +0x9 <LBB408_5>
    5044	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5045	b7 02 00 00 01 00 00 00	r2 = 0x1
    5046	85 10 00 00 68 f8 ff ff	call -0x798 ; <__rust_alloc>
    5047	bf 07 00 00 00 00 00 00	r7 = r0
    5048	55 07 18 00 00 00 00 00	if r7 != 0x0 goto +0x18 <LBB408_3>
    5049	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5050	b7 02 00 00 01 00 00 00	r2 = 0x1
    5051	85 10 00 00 52 02 00 00	call 0x252 ; <alloc::alloc::handle_alloc_error>
    5052	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009de8 <LBB408_5>
    5053	07 01 00 00 e0 ff ff ff	r1 += -0x20
    5054	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    5055	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    5056	bf 13 00 00 00 00 00 00	r3 = r1
    5057	07 03 00 00 20 00 00 00	r3 += 0x20
    5058	7b 32 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r3
    5059	79 12 0f 00 00 00 00 00	r2 = *(u64 *)(r1 + 0xf)
    5060	79 13 07 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x7)
    5061	61 14 03 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x3)
    5062	63 46 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r4
    5063	61 14 00 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x0)
    5064	63 46 01 00 00 00 00 00	*(u32 *)(r6 + 0x1) = r4
    5065	71 14 1f 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x1f)
    5066	73 46 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r4
    5067	79 11 17 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x17)
    5068	7b 16 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r1
    5069	7b 36 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r3
    5070	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5071	b7 01 00 00 00 00 00 00	r1 = 0x0
    5072	05 00 23 00 00 00 00 00	goto +0x23 <LBB408_7>

0000000000009e88 <LBB408_3>
    5073	b7 01 00 00 75 74 00 00	r1 = 0x7475
    5074	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    5075	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    5077	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    5078	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    5080	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    5081	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    5083	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    5084	b7 01 00 00 18 00 00 00	r1 = 0x18
    5085	b7 02 00 00 08 00 00 00	r2 = 0x8
    5086	85 10 00 00 40 f8 ff ff	call -0x7c0 ; <__rust_alloc>
    5087	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB408_6>
    5088	b7 01 00 00 18 00 00 00	r1 = 0x18
    5089	b7 02 00 00 08 00 00 00	r2 = 0x8
    5090	85 10 00 00 2b 02 00 00	call 0x22b ; <alloc::alloc::handle_alloc_error>
    5091	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009f20 <LBB408_6>
    5092	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5093	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    5094	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5095	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    5096	bf a1 00 00 00 00 00 00	r1 = r10
    5097	07 01 00 00 f0 ff ff ff	r1 += -0x10
    5098	b7 02 00 00 14 00 00 00	r2 = 0x14
    5099	bf 03 00 00 00 00 00 00	r3 = r0
    5100	18 04 00 00 e8 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13ce8 ll
    5102	85 10 00 00 fb 00 00 00	call 0xfb ; <std::io::error::Error::_new>
    5103	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    5104	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5105	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5106	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    5107	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000009fa0 <LBB408_7>
    5108	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    5109	95 00 00 00 00 00 00 00	exit

0000000000009fb0 <solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get>
    5110	bf 16 00 00 00 00 00 00	r6 = r1
    5111	b7 01 00 00 32 00 00 00	r1 = 0x32
    5112	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
    5113	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 40	r1 = 0x4000000000000000 ll
    5115	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5116	b7 01 00 00 98 0d 00 00	r1 = 0xd98
    5117	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    5118	bf a1 00 00 00 00 00 00	r1 = r10
    5119	07 01 00 00 e8 ff ff ff	r1 += -0x18
    5120	85 10 00 00 ff ff ff ff	call -0x1 ; sol_get_rent_sysvar
    5121	bf 61 00 00 00 00 00 00	r1 = r6
    5122	07 01 00 00 08 00 00 00	r1 += 0x8
    5123	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB623_2>
    5124	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5125	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    5126	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    5127	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    5128	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    5129	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5130	b7 01 00 00 00 00 00 00	r1 = 0x0
    5131	05 00 03 00 00 00 00 00	goto +0x3 <LBB623_3>

000000000000a060 <LBB623_2>
    5132	bf 02 00 00 00 00 00 00	r2 = r0
    5133	85 10 00 00 1a fe ff ff	call -0x1e6 ; <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    5134	b7 01 00 00 01 00 00 00	r1 = 0x1

000000000000a078 <LBB623_3>
    5135	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5136	95 00 00 00 00 00 00 00	exit

000000000000a088 <bincode::config::DefaultOptions::new>
    5137	95 00 00 00 00 00 00 00	exit

000000000000a090 <<std::sys_common::wtf8::Wtf8Buf as core::ops::deref::DerefMut>::deref_mut>
    5138	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    5139	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    5140	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
    5141	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5142	95 00 00 00 00 00 00 00	exit

000000000000a0b8 <<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Display>::fmt>
    5143	bf 23 00 00 00 00 00 00	r3 = r2
    5144	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5145	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5146	85 10 00 00 32 08 00 00	call 0x832 ; <<str as core::fmt::Display>::fmt>
    5147	95 00 00 00 00 00 00 00	exit

000000000000a0e0 <<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Debug>::fmt>
    5148	bf 23 00 00 00 00 00 00	r3 = r2
    5149	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5150	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5151	85 10 00 00 e8 06 00 00	call 0x6e8 ; <<str as core::fmt::Debug>::fmt>
    5152	95 00 00 00 00 00 00 00	exit

000000000000a108 <std::io::error::ErrorKind::as_str>
    5153	b7 03 00 00 10 00 00 00	r3 = 0x10
    5154	57 02 00 00 ff 00 00 00	r2 &= 0xff
    5155	65 02 0a 00 13 00 00 00	if r2 s> 0x13 goto +0xa <LBB213_28>
    5156	65 02 18 00 09 00 00 00	if r2 s> 0x9 goto +0x18 <LBB213_15>
    5157	65 02 24 00 04 00 00 00	if r2 s> 0x4 goto +0x24 <LBB213_9>
    5158	65 02 35 00 01 00 00 00	if r2 s> 0x1 goto +0x35 <LBB213_6>
    5159	18 04 00 00 10 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b10 ll
    5161	15 02 bd 00 00 00 00 00	if r2 == 0x0 goto +0xbd <LBB213_82>
    5162	18 04 00 00 f5 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12df5 ll
    5164	b7 03 00 00 11 00 00 00	r3 = 0x11
    5165	05 00 b9 00 00 00 00 00	goto +0xb9 <LBB213_82>

000000000000a170 <LBB213_28>
    5166	65 02 07 00 1d 00 00 00	if r2 s> 0x1d goto +0x7 <LBB213_42>
    5167	65 02 20 00 18 00 00 00	if r2 s> 0x18 goto +0x20 <LBB213_36>
    5168	65 02 30 00 15 00 00 00	if r2 s> 0x15 goto +0x30 <LBB213_33>
    5169	15 02 58 00 14 00 00 00	if r2 == 0x14 goto +0x58 <LBB213_68>
    5170	18 04 00 00 83 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c83 ll
    5172	b7 03 00 00 0c 00 00 00	r3 = 0xc
    5173	05 00 b1 00 00 00 00 00	goto +0xb1 <LBB213_82>

000000000000a1b0 <LBB213_42>
    5174	65 02 0c 00 22 00 00 00	if r2 s> 0x22 goto +0xc <LBB213_49>
    5175	65 02 2e 00 1f 00 00 00	if r2 s> 0x1f goto +0x2e <LBB213_46>
    5176	15 02 55 00 1e 00 00 00	if r2 == 0x1e goto +0x55 <LBB213_74>
    5177	18 04 00 00 f6 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bf6 ll
    5179	b7 03 00 00 1b 00 00 00	r3 = 0x1b
    5180	05 00 aa 00 00 00 00 00	goto +0xaa <LBB213_82>

000000000000a1e8 <LBB213_15>
    5181	65 02 18 00 0e 00 00 00	if r2 s> 0xe goto +0x18 <LBB213_22>
    5182	65 02 2d 00 0b 00 00 00	if r2 s> 0xb goto +0x2d <LBB213_19>
    5183	15 02 52 00 0a 00 00 00	if r2 == 0xa goto +0x52 <LBB213_62>
    5184	18 04 00 00 77 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d77 ll
    5186	05 00 8b 00 00 00 00 00	goto +0x8b <LBB213_81>

000000000000a218 <LBB213_49>
    5187	65 02 2e 00 25 00 00 00	if r2 s> 0x25 goto +0x2e <LBB213_53>
    5188	15 02 51 00 23 00 00 00	if r2 == 0x23 goto +0x51 <LBB213_77>
    5189	15 02 54 00 24 00 00 00	if r2 == 0x24 goto +0x54 <LBB213_78>
    5190	18 04 00 00 8b 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b8b ll
    5192	b7 03 00 00 16 00 00 00	r3 = 0x16
    5193	05 00 9d 00 00 00 00 00	goto +0x9d <LBB213_82>

000000000000a250 <LBB213_9>
    5194	65 02 2d 00 06 00 00 00	if r2 s> 0x6 goto +0x2d <LBB213_12>
    5195	15 02 51 00 05 00 00 00	if r2 == 0x5 goto +0x51 <LBB213_58>
    5196	18 04 00 00 be 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12dbe ll
    5198	b7 03 00 00 12 00 00 00	r3 = 0x12
    5199	05 00 97 00 00 00 00 00	goto +0x97 <LBB213_82>

000000000000a280 <LBB213_36>
    5200	65 02 2d 00 1a 00 00 00	if r2 s> 0x1a goto +0x2d <LBB213_39>
    5201	15 02 4f 00 19 00 00 00	if r2 == 0x19 goto +0x4f <LBB213_71>
    5202	18 04 00 00 40 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c40 ll
    5204	b7 03 00 00 19 00 00 00	r3 = 0x19
    5205	05 00 91 00 00 00 00 00	goto +0x91 <LBB213_82>

000000000000a2b0 <LBB213_22>
    5206	65 02 2d 00 10 00 00 00	if r2 s> 0x10 goto +0x2d <LBB213_25>
    5207	15 02 4d 00 0f 00 00 00	if r2 == 0xf goto +0x4d <LBB213_65>
    5208	18 04 00 00 1d 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d1d ll
    5210	b7 03 00 00 13 00 00 00	r3 = 0x13
    5211	05 00 8b 00 00 00 00 00	goto +0x8b <LBB213_82>

000000000000a2e0 <LBB213_6>
    5212	15 02 4c 00 02 00 00 00	if r2 == 0x2 goto +0x4c <LBB213_56>
    5213	15 02 4f 00 03 00 00 00	if r2 == 0x3 goto +0x4f <LBB213_57>
    5214	18 04 00 00 40 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b40 ll
    5216	05 00 86 00 00 00 00 00	goto +0x86 <LBB213_82>

000000000000a308 <LBB213_33>
    5217	15 02 4e 00 16 00 00 00	if r2 == 0x16 goto +0x4e <LBB213_69>
    5218	15 02 51 00 17 00 00 00	if r2 == 0x17 goto +0x51 <LBB213_70>
    5219	18 04 00 00 00 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b00 ll
    5221	05 00 81 00 00 00 00 00	goto +0x81 <LBB213_82>

000000000000a330 <LBB213_46>
    5222	15 02 51 00 20 00 00 00	if r2 == 0x20 goto +0x51 <LBB213_75>
    5223	15 02 54 00 21 00 00 00	if r2 == 0x21 goto +0x54 <LBB213_76>
    5224	18 04 00 00 c1 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bc1 ll
    5226	b7 03 00 00 16 00 00 00	r3 = 0x16
    5227	05 00 7b 00 00 00 00 00	goto +0x7b <LBB213_82>

000000000000a360 <LBB213_19>
    5228	15 02 53 00 0c 00 00 00	if r2 == 0xc goto +0x53 <LBB213_63>
    5229	15 02 56 00 0d 00 00 00	if r2 == 0xd goto +0x56 <LBB213_64>
    5230	18 04 00 00 3e 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d3e ll
    5232	b7 03 00 00 0f 00 00 00	r3 = 0xf
    5233	05 00 75 00 00 00 00 00	goto +0x75 <LBB213_82>

000000000000a390 <LBB213_53>
    5234	15 02 55 00 26 00 00 00	if r2 == 0x26 goto +0x55 <LBB213_79>
    5235	15 02 58 00 27 00 00 00	if r2 == 0x27 goto +0x58 <LBB213_80>
    5236	18 04 00 00 60 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b60 ll
    5238	b7 03 00 00 13 00 00 00	r3 = 0x13
    5239	05 00 6f 00 00 00 00 00	goto +0x6f <LBB213_82>

000000000000a3c0 <LBB213_12>
    5240	15 02 57 00 07 00 00 00	if r2 == 0x7 goto +0x57 <LBB213_60>
    5241	15 02 5a 00 08 00 00 00	if r2 == 0x8 goto +0x5a <LBB213_61>
    5242	18 04 00 00 8e 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d8e ll
    5244	b7 03 00 00 15 00 00 00	r3 = 0x15
    5245	05 00 69 00 00 00 00 00	goto +0x69 <LBB213_82>

000000000000a3f0 <LBB213_39>
    5246	15 02 59 00 1b 00 00 00	if r2 == 0x1b goto +0x59 <LBB213_72>
    5247	15 02 5c 00 1c 00 00 00	if r2 == 0x1c goto +0x5c <LBB213_73>
    5248	18 04 00 00 11 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c11 ll
    5250	b7 03 00 00 14 00 00 00	r3 = 0x14
    5251	05 00 63 00 00 00 00 00	goto +0x63 <LBB213_82>

000000000000a420 <LBB213_25>
    5252	15 02 5b 00 11 00 00 00	if r2 == 0x11 goto +0x5b <LBB213_66>
    5253	15 02 5e 00 12 00 00 00	if r2 == 0x12 goto +0x5e <LBB213_67>
    5254	18 04 00 00 a6 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ca6 ll
    5256	b7 03 00 00 19 00 00 00	r3 = 0x19
    5257	05 00 5d 00 00 00 00 00	goto +0x5d <LBB213_82>

000000000000a450 <LBB213_68>
    5258	18 04 00 00 8f 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c8f ll
    5260	b7 03 00 00 17 00 00 00	r3 = 0x17
    5261	05 00 59 00 00 00 00 00	goto +0x59 <LBB213_82>

000000000000a470 <LBB213_74>
    5262	18 04 00 00 90 26 01 00 00 00 00 00 00 00 00 00	r4 = 0x12690 ll
    5264	b7 03 00 00 08 00 00 00	r3 = 0x8
    5265	05 00 55 00 00 00 00 00	goto +0x55 <LBB213_82>

000000000000a490 <LBB213_62>
    5266	18 04 00 00 82 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d82 ll
    5268	b7 03 00 00 0c 00 00 00	r3 = 0xc
    5269	05 00 51 00 00 00 00 00	goto +0x51 <LBB213_82>

000000000000a4b0 <LBB213_77>
    5270	18 04 00 00 ac 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bac ll
    5272	b7 03 00 00 15 00 00 00	r3 = 0x15
    5273	05 00 4d 00 00 00 00 00	goto +0x4d <LBB213_82>

000000000000a4d0 <LBB213_78>
    5274	18 04 00 00 a1 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ba1 ll
    5276	05 00 31 00 00 00 00 00	goto +0x31 <LBB213_81>

000000000000a4e8 <LBB213_58>
    5277	18 04 00 00 d0 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12dd0 ll
    5279	b7 03 00 00 13 00 00 00	r3 = 0x13
    5280	05 00 46 00 00 00 00 00	goto +0x46 <LBB213_82>

000000000000a508 <LBB213_71>
    5281	18 04 00 00 59 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c59 ll
    5283	b7 03 00 00 17 00 00 00	r3 = 0x17
    5284	05 00 42 00 00 00 00 00	goto +0x42 <LBB213_82>

000000000000a528 <LBB213_65>
    5285	18 04 00 00 30 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d30 ll
    5287	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5288	05 00 3e 00 00 00 00 00	goto +0x3e <LBB213_82>

000000000000a548 <LBB213_56>
    5289	18 04 00 00 e3 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12de3 ll
    5291	b7 03 00 00 12 00 00 00	r3 = 0x12
    5292	05 00 3a 00 00 00 00 00	goto +0x3a <LBB213_82>

000000000000a568 <LBB213_57>
    5293	18 04 00 00 30 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b30 ll
    5295	05 00 37 00 00 00 00 00	goto +0x37 <LBB213_82>

000000000000a580 <LBB213_69>
    5296	18 04 00 00 7a 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c7a ll
    5298	b7 03 00 00 09 00 00 00	r3 = 0x9
    5299	05 00 33 00 00 00 00 00	goto +0x33 <LBB213_82>

000000000000a5a0 <LBB213_70>
    5300	18 04 00 00 70 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c70 ll
    5302	b7 03 00 00 0a 00 00 00	r3 = 0xa
    5303	05 00 2f 00 00 00 00 00	goto +0x2f <LBB213_82>

000000000000a5c0 <LBB213_75>
    5304	18 04 00 00 e8 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12be8 ll
    5306	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5307	05 00 2b 00 00 00 00 00	goto +0x2b <LBB213_82>

000000000000a5e0 <LBB213_76>
    5308	18 04 00 00 d7 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bd7 ll
    5310	b7 03 00 00 11 00 00 00	r3 = 0x11
    5311	05 00 27 00 00 00 00 00	goto +0x27 <LBB213_82>

000000000000a600 <LBB213_63>
    5312	18 04 00 00 62 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d62 ll
    5314	b7 03 00 00 15 00 00 00	r3 = 0x15
    5315	05 00 23 00 00 00 00 00	goto +0x23 <LBB213_82>

000000000000a620 <LBB213_64>
    5316	18 04 00 00 4d 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d4d ll
    5318	b7 03 00 00 15 00 00 00	r3 = 0x15
    5319	05 00 1f 00 00 00 00 00	goto +0x1f <LBB213_82>

000000000000a640 <LBB213_79>
    5320	18 04 00 00 7e 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b7e ll
    5322	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5323	05 00 1b 00 00 00 00 00	goto +0x1b <LBB213_82>

000000000000a660 <LBB213_80>
    5324	18 04 00 00 73 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b73 ll

000000000000a670 <LBB213_81>
    5326	b7 03 00 00 0b 00 00 00	r3 = 0xb
    5327	05 00 17 00 00 00 00 00	goto +0x17 <LBB213_82>

000000000000a680 <LBB213_60>
    5328	18 04 00 00 b1 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12db1 ll
    5330	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5331	05 00 13 00 00 00 00 00	goto +0x13 <LBB213_82>

000000000000a6a0 <LBB213_61>
    5332	18 04 00 00 a3 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12da3 ll
    5334	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5335	05 00 0f 00 00 00 00 00	goto +0xf <LBB213_82>

000000000000a6c0 <LBB213_72>
    5336	18 04 00 00 32 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c32 ll
    5338	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5339	05 00 0b 00 00 00 00 00	goto +0xb <LBB213_82>

000000000000a6e0 <LBB213_73>
    5340	18 04 00 00 25 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c25 ll
    5342	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5343	05 00 07 00 00 00 00 00	goto +0x7 <LBB213_82>

000000000000a700 <LBB213_66>
    5344	18 04 00 00 f7 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cf7 ll
    5346	b7 03 00 00 26 00 00 00	r3 = 0x26
    5347	05 00 03 00 00 00 00 00	goto +0x3 <LBB213_82>

000000000000a720 <LBB213_67>
    5348	18 04 00 00 bf 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cbf ll
    5350	b7 03 00 00 38 00 00 00	r3 = 0x38

000000000000a738 <LBB213_82>
    5351	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    5352	7b 41 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r4
    5353	95 00 00 00 00 00 00 00	exit

000000000000a750 <std::io::error::Error::_new>
    5354	bf 48 00 00 00 00 00 00	r8 = r4
    5355	bf 37 00 00 00 00 00 00	r7 = r3
    5356	bf 29 00 00 00 00 00 00	r9 = r2
    5357	bf 16 00 00 00 00 00 00	r6 = r1
    5358	b7 01 00 00 18 00 00 00	r1 = 0x18
    5359	b7 02 00 00 08 00 00 00	r2 = 0x8
    5360	85 10 00 00 2e f7 ff ff	call -0x8d2 ; <__rust_alloc>
    5361	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB214_2>
    5362	b7 01 00 00 18 00 00 00	r1 = 0x18
    5363	b7 02 00 00 08 00 00 00	r2 = 0x8
    5364	85 10 00 00 19 01 00 00	call 0x119 ; <alloc::alloc::handle_alloc_error>
    5365	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a7b0 <LBB214_2>
    5366	73 90 10 00 00 00 00 00	*(u8 *)(r0 + 0x10) = r9
    5367	7b 80 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r8
    5368	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    5369	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    5370	b7 01 00 00 03 00 00 00	r1 = 0x3
    5371	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5372	95 00 00 00 00 00 00 00	exit

000000000000a7e8 <<std::io::error::Error as core::fmt::Display>::fmt>
    5373	bf 26 00 00 00 00 00 00	r6 = r2
    5374	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    5375	65 02 1f 00 01 00 00 00	if r2 s> 0x1 goto +0x1f <LBB216_3>
    5376	15 02 26 00 00 00 00 00	if r2 == 0x0 goto +0x26 <LBB216_5>
    5377	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x1)
    5378	bf a1 00 00 00 00 00 00	r1 = r10
    5379	07 01 00 00 80 ff ff ff	r1 += -0x80
    5380	85 10 00 00 1c ff ff ff	call -0xe4 ; <std::io::error::ErrorKind::as_str>
    5381	18 01 00 00 f8 ab 00 00 00 00 00 00 00 00 00 00	r1 = 0xabf8 ll
    5383	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    5384	bf a1 00 00 00 00 00 00	r1 = r10
    5385	07 01 00 00 b0 ff ff ff	r1 += -0x50
    5386	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    5387	bf a1 00 00 00 00 00 00	r1 = r10
    5388	07 01 00 00 98 ff ff ff	r1 += -0x68
    5389	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5390	b7 01 00 00 00 00 00 00	r1 = 0x0
    5391	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    5392	b7 01 00 00 01 00 00 00	r1 = 0x1
    5393	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    5394	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    5395	18 01 00 00 60 3d 01 00 00 00 00 00 00 00 00 00	r1 = 0x13d60 ll
    5397	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    5398	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
    5399	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    5400	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    5401	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    5402	bf a2 00 00 00 00 00 00	r2 = r10
    5403	07 02 00 00 d0 ff ff ff	r2 += -0x30
    5404	bf 61 00 00 00 00 00 00	r1 = r6
    5405	85 10 00 00 d6 05 00 00	call 0x5d6 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    5406	05 00 18 00 00 00 00 00	goto +0x18 <LBB216_11>

000000000000a8f8 <LBB216_3>
    5407	15 02 12 00 02 00 00 00	if r2 == 0x2 goto +0x12 <LBB216_10>
    5408	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5409	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    5410	79 22 08 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x8)
    5411	79 23 20 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x20)
    5412	bf 62 00 00 00 00 00 00	r2 = r6
    5413	8d 00 00 00 03 00 00 00	callx r3
    5414	05 00 10 00 00 00 00 00	goto +0x10 <LBB216_11>

000000000000a938 <LBB216_5>
    5415	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x4)
    5416	63 1a 94 ff 00 00 00 00	*(u32 *)(r10 - 0x6c) = r1
    5417	b7 07 00 00 14 00 00 00	r7 = 0x14
    5418	b7 01 00 00 14 00 00 00	r1 = 0x14
    5419	b7 02 00 00 01 00 00 00	r2 = 0x1
    5420	85 10 00 00 f2 f6 ff ff	call -0x90e ; <__rust_alloc>
    5421	55 00 0c 00 00 00 00 00	if r0 != 0x0 goto +0xc <LBB216_7>
    5422	b7 01 00 00 14 00 00 00	r1 = 0x14
    5423	b7 02 00 00 01 00 00 00	r2 = 0x1
    5424	85 10 00 00 dd 00 00 00	call 0xdd ; <alloc::alloc::handle_alloc_error>
    5425	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a990 <LBB216_10>
    5426	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    5427	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5428	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5429	bf 63 00 00 00 00 00 00	r3 = r6
    5430	85 10 00 00 16 07 00 00	call 0x716 ; <<str as core::fmt::Display>::fmt>

000000000000a9b8 <LBB216_11>
    5431	bf 06 00 00 00 00 00 00	r6 = r0

000000000000a9c0 <LBB216_12>
    5432	bf 60 00 00 00 00 00 00	r0 = r6
    5433	95 00 00 00 00 00 00 00	exit

000000000000a9d0 <LBB216_7>
    5434	b7 01 00 00 73 66 75 6c	r1 = 0x6c756673
    5435	63 10 10 00 00 00 00 00	*(u32 *)(r0 + 0x10) = r1
    5436	18 01 00 00 6e 20 73 75 00 00 00 00 63 63 65 73	r1 = 0x736563637573206e ll
    5438	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5439	18 01 00 00 6f 70 65 72 00 00 00 00 61 74 69 6f	r1 = 0x6f6974617265706f ll
    5441	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    5442	7b 7a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r7
    5443	7b 7a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r7
    5444	7b 0a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r0
    5445	b7 01 00 00 02 00 00 00	r1 = 0x2
    5446	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    5447	bf a1 00 00 00 00 00 00	r1 = r10
    5448	07 01 00 00 b0 ff ff ff	r1 += -0x50
    5449	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5450	b7 01 00 00 00 00 00 00	r1 = 0x0
    5451	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    5452	b7 01 00 00 03 00 00 00	r1 = 0x3
    5453	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    5454	18 01 00 00 70 3d 01 00 00 00 00 00 00 00 00 00	r1 = 0x13d70 ll
    5456	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    5457	18 01 00 00 98 fd 00 00 00 00 00 00 00 00 00 00	r1 = 0xfd98 ll
    5459	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    5460	bf a1 00 00 00 00 00 00	r1 = r10
    5461	07 01 00 00 94 ff ff ff	r1 += -0x6c
    5462	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    5463	18 01 00 00 48 ab 00 00 00 00 00 00 00 00 00 00	r1 = 0xab48 ll
    5465	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    5466	bf a1 00 00 00 00 00 00	r1 = r10
    5467	07 01 00 00 98 ff ff ff	r1 += -0x68
    5468	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    5469	bf a2 00 00 00 00 00 00	r2 = r10
    5470	07 02 00 00 d0 ff ff ff	r2 += -0x30
    5471	bf 61 00 00 00 00 00 00	r1 = r6
    5472	85 10 00 00 93 05 00 00	call 0x593 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    5473	bf 06 00 00 00 00 00 00	r6 = r0
    5474	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
    5475	15 02 d4 ff 00 00 00 00	if r2 == 0x0 goto -0x2c <LBB216_12>
    5476	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    5477	15 01 d2 ff 00 00 00 00	if r1 == 0x0 goto -0x2e <LBB216_12>
    5478	b7 03 00 00 01 00 00 00	r3 = 0x1
    5479	85 10 00 00 b9 f6 ff ff	call -0x947 ; <__rust_dealloc>
    5480	05 00 cf ff 00 00 00 00	goto -0x31 <LBB216_12>

000000000000ab48 <<alloc::string::String as core::fmt::Display>::fmt>
    5481	bf 23 00 00 00 00 00 00	r3 = r2
    5482	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5483	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5484	85 10 00 00 e0 06 00 00	call 0x6e0 ; <<str as core::fmt::Display>::fmt>
    5485	95 00 00 00 00 00 00 00	exit

000000000000ab70 <std::process::abort>
    5486	85 10 00 00 0e 00 00 00	call 0xe ; <std::sys::sbf::abort_internal>
    5487	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ab80 <rust_oom>
    5488	18 01 00 00 12 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12e12 ll
    5490	b7 02 00 00 2e 00 00 00	r2 = 0x2e
    5491	85 10 00 00 04 00 00 00	call 0x4 ; <std::sys::sbf::sol_log>
    5492	85 10 00 00 f9 ff ff ff	call -0x7 ; <std::process::abort>
    5493	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000abb0 <rust_begin_unwind>
    5494	85 10 00 00 03 00 00 00	call 0x3 ; <std::sys::sbf::panic>
    5495	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000abc0 <std::sys::sbf::sol_log>
    5496	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    5497	95 00 00 00 00 00 00 00	exit

000000000000abd0 <std::sys::sbf::panic>
    5498	85 10 00 00 ff ff ff ff	call -0x1 ; <std::sys::sbf::panic>
    5499	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5500	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000abe8 <std::sys::sbf::abort_internal>
    5501	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5502	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000abf8 <<&T as core::fmt::Display>::fmt>
    5503	bf 23 00 00 00 00 00 00	r3 = r2
    5504	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5505	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5506	85 10 00 00 ca 06 00 00	call 0x6ca ; <<str as core::fmt::Display>::fmt>
    5507	95 00 00 00 00 00 00 00	exit

000000000000ac20 <core::ops::function::FnOnce::call_once>
    5508	85 10 00 00 8b 00 00 00	call 0x8b ; <alloc::alloc::handle_alloc_error::rt_error>
    5509	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ac30 <core::ptr::drop_in_place<&u8>>
    5510	95 00 00 00 00 00 00 00	exit

000000000000ac38 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5511	bf 16 00 00 00 00 00 00	r6 = r1
    5512	bf 24 00 00 00 00 00 00	r4 = r2
    5513	0f 34 00 00 00 00 00 00	r4 += r3
    5514	b7 01 00 00 01 00 00 00	r1 = 0x1
    5515	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB2_2>
    5516	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000ac68 <LBB2_2>
    5517	57 01 00 00 01 00 00 00	r1 &= 0x1
    5518	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB2_12>
    5519	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5520	bf 17 00 00 00 00 00 00	r7 = r1
    5521	67 07 00 00 01 00 00 00	r7 <<= 0x1
    5522	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB2_5>
    5523	bf 47 00 00 00 00 00 00	r7 = r4

000000000000aca0 <LBB2_5>
    5524	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB2_7>
    5525	b7 07 00 00 08 00 00 00	r7 = 0x8

000000000000acb0 <LBB2_7>
    5526	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB2_9>
    5527	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    5528	b7 03 00 00 01 00 00 00	r3 = 0x1
    5529	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5530	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5531	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    5532	05 00 02 00 00 00 00 00	goto +0x2 <LBB2_10>

000000000000ace8 <LBB2_9>
    5533	b7 01 00 00 00 00 00 00	r1 = 0x0
    5534	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

000000000000acf8 <LBB2_10>
    5535	bf a1 00 00 00 00 00 00	r1 = r10
    5536	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5537	bf a4 00 00 00 00 00 00	r4 = r10
    5538	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5539	bf 72 00 00 00 00 00 00	r2 = r7
    5540	b7 03 00 00 01 00 00 00	r3 = 0x1
    5541	85 10 00 00 39 00 00 00	call 0x39 ; <alloc::raw_vec::finish_grow>
    5542	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    5543	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB2_14>
    5544	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    5545	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB2_13>

000000000000ad50 <LBB2_12>
    5546	85 10 00 00 5c 00 00 00	call 0x5c ; <alloc::raw_vec::capacity_overflow>
    5547	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ad60 <LBB2_14>
    5548	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5549	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5550	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5551	95 00 00 00 00 00 00 00	exit

000000000000ad80 <LBB2_13>
    5552	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5553	85 10 00 00 5c 00 00 00	call 0x5c ; <alloc::alloc::handle_alloc_error>
    5554	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ad98 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    5555	bf 16 00 00 00 00 00 00	r6 = r1
    5556	bf 23 00 00 00 00 00 00	r3 = r2
    5557	07 03 00 00 01 00 00 00	r3 += 0x1
    5558	b7 01 00 00 01 00 00 00	r1 = 0x1
    5559	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB3_2>
    5560	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000adc8 <LBB3_2>
    5561	57 01 00 00 01 00 00 00	r1 &= 0x1
    5562	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB3_12>
    5563	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5564	bf 17 00 00 00 00 00 00	r7 = r1
    5565	67 07 00 00 01 00 00 00	r7 <<= 0x1
    5566	2d 37 01 00 00 00 00 00	if r7 > r3 goto +0x1 <LBB3_5>
    5567	bf 37 00 00 00 00 00 00	r7 = r3

000000000000ae00 <LBB3_5>
    5568	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB3_7>
    5569	b7 07 00 00 08 00 00 00	r7 = 0x8

000000000000ae10 <LBB3_7>
    5570	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB3_9>
    5571	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    5572	b7 03 00 00 01 00 00 00	r3 = 0x1
    5573	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5574	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5575	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    5576	05 00 02 00 00 00 00 00	goto +0x2 <LBB3_10>

000000000000ae48 <LBB3_9>
    5577	b7 01 00 00 00 00 00 00	r1 = 0x0
    5578	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

000000000000ae58 <LBB3_10>
    5579	bf a1 00 00 00 00 00 00	r1 = r10
    5580	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5581	bf a4 00 00 00 00 00 00	r4 = r10
    5582	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5583	bf 72 00 00 00 00 00 00	r2 = r7
    5584	b7 03 00 00 01 00 00 00	r3 = 0x1
    5585	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
    5586	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    5587	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB3_14>
    5588	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    5589	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB3_13>

000000000000aeb0 <LBB3_12>
    5590	85 10 00 00 30 00 00 00	call 0x30 ; <alloc::raw_vec::capacity_overflow>
    5591	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000aec0 <LBB3_14>
    5592	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5593	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5594	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5595	95 00 00 00 00 00 00 00	exit

000000000000aee0 <LBB3_13>
    5596	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5597	85 10 00 00 30 00 00 00	call 0x30 ; <alloc::alloc::handle_alloc_error>
    5598	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000aef8 <alloc::raw_vec::finish_grow>
    5599	bf 38 00 00 00 00 00 00	r8 = r3
    5600	bf 27 00 00 00 00 00 00	r7 = r2
    5601	bf 16 00 00 00 00 00 00	r6 = r1
    5602	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB4_12>
    5603	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5604	b7 01 00 00 01 00 00 00	r1 = 0x1
    5605	b7 07 00 00 00 00 00 00	r7 = 0x0
    5606	05 00 1d 00 00 00 00 00	goto +0x1d <LBB4_2>

000000000000af38 <LBB4_12>
    5607	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    5608	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB4_7>
    5609	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    5610	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB4_6>
    5611	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB4_9>
    5612	bf 71 00 00 00 00 00 00	r1 = r7
    5613	bf 82 00 00 00 00 00 00	r2 = r8
    5614	85 10 00 00 30 f6 ff ff	call -0x9d0 ; <__rust_alloc>
    5615	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB4_11>
    5616	05 00 11 00 00 00 00 00	goto +0x11 <LBB4_10>

000000000000af88 <LBB4_6>
    5617	bf 83 00 00 00 00 00 00	r3 = r8
    5618	bf 74 00 00 00 00 00 00	r4 = r7
    5619	85 10 00 00 2f f6 ff ff	call -0x9d1 ; <__rust_realloc>
    5620	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB4_11>
    5621	05 00 0c 00 00 00 00 00	goto +0xc <LBB4_10>

000000000000afb0 <LBB4_7>
    5622	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB4_9>
    5623	bf 71 00 00 00 00 00 00	r1 = r7
    5624	bf 82 00 00 00 00 00 00	r2 = r8
    5625	85 10 00 00 25 f6 ff ff	call -0x9db ; <__rust_alloc>
    5626	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB4_11>
    5627	05 00 06 00 00 00 00 00	goto +0x6 <LBB4_10>

000000000000afe0 <LBB4_11>
    5628	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5629	b7 01 00 00 01 00 00 00	r1 = 0x1
    5630	bf 87 00 00 00 00 00 00	r7 = r8
    5631	05 00 04 00 00 00 00 00	goto +0x4 <LBB4_2>

000000000000b000 <LBB4_9>
    5632	b7 07 00 00 00 00 00 00	r7 = 0x0
    5633	bf 80 00 00 00 00 00 00	r0 = r8

000000000000b010 <LBB4_10>
    5634	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    5635	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000b020 <LBB4_2>
    5636	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5637	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    5638	95 00 00 00 00 00 00 00	exit

000000000000b038 <alloc::raw_vec::capacity_overflow>
    5639	18 01 00 00 5c 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12e5c ll
    5641	b7 02 00 00 11 00 00 00	r2 = 0x11
    5642	18 03 00 00 a0 3d 01 00 00 00 00 00 00 00 00 00	r3 = 0x13da0 ll
    5644	85 10 00 00 2a 02 00 00	call 0x22a ; <core::panicking::panic>
    5645	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b070 <alloc::alloc::handle_alloc_error>
    5646	85 10 00 00 05 00 00 00	call 0x5 ; <core::intrinsics::const_eval_select>
    5647	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b080 <alloc::alloc::handle_alloc_error::rt_error>
    5648	85 10 00 00 14 f6 ff ff	call -0x9ec ; <__rust_alloc_error_handler>
    5649	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b090 <__rg_oom>
    5650	85 10 00 00 5d ff ff ff	call -0xa3 ; <rust_oom>
    5651	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b0a0 <core::intrinsics::const_eval_select>
    5652	85 10 00 00 6f ff ff ff	call -0x91 ; <core::ops::function::FnOnce::call_once>
    5653	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b0b0 <alloc::fmt::format>
    5654	bf 26 00 00 00 00 00 00	r6 = r2
    5655	bf 17 00 00 00 00 00 00	r7 = r1
    5656	b7 08 00 00 00 00 00 00	r8 = 0x0
    5657	79 63 28 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x28)
    5658	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5659	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x8)
    5660	bf 24 00 00 00 00 00 00	r4 = r2
    5661	67 04 00 00 04 00 00 00	r4 <<= 0x4
    5662	15 04 09 00 00 00 00 00	if r4 == 0x0 goto +0x9 <LBB20_3>
    5663	b7 00 00 00 00 00 00 00	r0 = 0x0
    5664	bf 15 00 00 00 00 00 00	r5 = r1
    5665	07 05 00 00 08 00 00 00	r5 += 0x8

000000000000b110 <LBB20_2>
    5666	79 58 00 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x0)
    5667	0f 08 00 00 00 00 00 00	r8 += r0
    5668	07 05 00 00 10 00 00 00	r5 += 0x10
    5669	07 04 00 00 f0 ff ff ff	r4 += -0x10
    5670	bf 80 00 00 00 00 00 00	r0 = r8
    5671	55 04 fa ff 00 00 00 00	if r4 != 0x0 goto -0x6 <LBB20_2>

000000000000b140 <LBB20_3>
    5672	15 03 11 00 00 00 00 00	if r3 == 0x0 goto +0x11 <LBB20_10>
    5673	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB20_7>
    5674	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    5675	55 01 04 00 00 00 00 00	if r1 != 0x0 goto +0x4 <LBB20_7>
    5676	b7 00 00 00 01 00 00 00	r0 = 0x1
    5677	b7 01 00 00 00 00 00 00	r1 = 0x0
    5678	b7 02 00 00 10 00 00 00	r2 = 0x10
    5679	2d 82 16 00 00 00 00 00	if r2 > r8 goto +0x16 <LBB20_13>

000000000000b180 <LBB20_7>
    5680	bf 82 00 00 00 00 00 00	r2 = r8
    5681	0f 22 00 00 00 00 00 00	r2 += r2
    5682	b7 01 00 00 00 00 00 00	r1 = 0x0
    5683	b7 00 00 00 01 00 00 00	r0 = 0x1
    5684	b7 03 00 00 01 00 00 00	r3 = 0x1
    5685	2d 28 01 00 00 00 00 00	if r8 > r2 goto +0x1 <LBB20_9>
    5686	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000b1b8 <LBB20_9>
    5687	57 03 00 00 01 00 00 00	r3 &= 0x1
    5688	bf 28 00 00 00 00 00 00	r8 = r2
    5689	55 03 0c 00 00 00 00 00	if r3 != 0x0 goto +0xc <LBB20_13>

000000000000b1d0 <LBB20_10>
    5690	b7 00 00 00 01 00 00 00	r0 = 0x1
    5691	b7 01 00 00 00 00 00 00	r1 = 0x0
    5692	15 08 09 00 00 00 00 00	if r8 == 0x0 goto +0x9 <LBB20_13>
    5693	bf 81 00 00 00 00 00 00	r1 = r8
    5694	b7 02 00 00 01 00 00 00	r2 = 0x1
    5695	85 10 00 00 df f5 ff ff	call -0xa21 ; <__rust_alloc>
    5696	bf 81 00 00 00 00 00 00	r1 = r8
    5697	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB20_13>
    5698	bf 81 00 00 00 00 00 00	r1 = r8
    5699	b7 02 00 00 01 00 00 00	r2 = 0x1
    5700	85 10 00 00 c9 ff ff ff	call -0x37 ; <alloc::alloc::handle_alloc_error>
    5701	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b230 <LBB20_13>
    5702	b7 02 00 00 00 00 00 00	r2 = 0x0
    5703	7b 27 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r2
    5704	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    5705	7b 07 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r0
    5706	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    5707	bf a7 00 00 00 00 00 00	r7 = r10
    5708	07 07 00 00 d0 ff ff ff	r7 += -0x30
    5709	bf 71 00 00 00 00 00 00	r1 = r7
    5710	bf 62 00 00 00 00 00 00	r2 = r6
    5711	b7 03 00 00 30 00 00 00	r3 = 0x30
    5712	85 10 00 00 78 0c 00 00	call 0xc78 ; <memcpy>
    5713	bf a1 00 00 00 00 00 00	r1 = r10
    5714	07 01 00 00 c8 ff ff ff	r1 += -0x38
    5715	18 02 00 00 f0 3d 01 00 00 00 00 00 00 00 00 00	r2 = 0x13df0 ll
    5717	bf 73 00 00 00 00 00 00	r3 = r7
    5718	85 10 00 00 45 02 00 00	call 0x245 ; <core::fmt::write>
    5719	15 00 0b 00 00 00 00 00	if r0 == 0x0 goto +0xb <LBB20_15>
    5720	bf a3 00 00 00 00 00 00	r3 = r10
    5721	07 03 00 00 d0 ff ff ff	r3 += -0x30
    5722	18 01 00 00 6d 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12e6d ll
    5724	b7 02 00 00 33 00 00 00	r2 = 0x33
    5725	18 04 00 00 d0 3d 01 00 00 00 00 00 00 00 00 00	r4 = 0x13dd0 ll
    5727	18 05 00 00 b8 3d 01 00 00 00 00 00 00 00 00 00	r5 = 0x13db8 ll
    5729	85 10 00 00 0f 02 00 00	call 0x20f ; <core::result::unwrap_failed>
    5730	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b318 <LBB20_15>
    5731	95 00 00 00 00 00 00 00	exit

000000000000b320 <alloc::string::String::push>
    5732	bf 27 00 00 00 00 00 00	r7 = r2
    5733	bf 16 00 00 00 00 00 00	r6 = r1
    5734	bf 71 00 00 00 00 00 00	r1 = r7
    5735	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5736	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5737	25 01 0c 00 7f 00 00 00	if r1 > 0x7f goto +0xc <LBB30_4>
    5738	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    5739	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5740	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB30_3>
    5741	bf 61 00 00 00 00 00 00	r1 = r6
    5742	85 10 00 00 44 ff ff ff	call -0xbc ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    5743	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

000000000000b380 <LBB30_3>
    5744	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5745	0f 21 00 00 00 00 00 00	r1 += r2
    5746	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    5747	07 02 00 00 01 00 00 00	r2 += 0x1
    5748	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5749	05 00 42 00 00 00 00 00	goto +0x42 <LBB30_12>

000000000000b3b0 <LBB30_4>
    5750	b7 02 00 00 00 00 00 00	r2 = 0x0
    5751	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    5752	b7 02 00 00 00 08 00 00	r2 = 0x800
    5753	2d 12 13 00 00 00 00 00	if r2 > r1 goto +0x13 <LBB30_6>
    5754	bf 71 00 00 00 00 00 00	r1 = r7
    5755	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5756	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5757	b7 02 00 00 00 00 01 00	r2 = 0x10000
    5758	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB30_7>
    5759	05 00 16 00 00 00 00 00	goto +0x16 <LBB30_8>

000000000000b400 <LBB30_7>
    5760	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    5761	47 07 00 00 80 00 00 00	r7 |= 0x80
    5762	73 7a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r7
    5763	bf 12 00 00 00 00 00 00	r2 = r1
    5764	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    5765	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    5766	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    5767	77 01 00 00 06 00 00 00	r1 >>= 0x6
    5768	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5769	47 01 00 00 80 00 00 00	r1 |= 0x80
    5770	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5771	b7 07 00 00 03 00 00 00	r7 = 0x3
    5772	05 00 1a 00 00 00 00 00	goto +0x1a <LBB30_9>

000000000000b468 <LBB30_6>
    5773	bf 71 00 00 00 00 00 00	r1 = r7
    5774	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5775	47 01 00 00 80 00 00 00	r1 |= 0x80
    5776	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5777	77 07 00 00 06 00 00 00	r7 >>= 0x6
    5778	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    5779	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    5780	b7 07 00 00 02 00 00 00	r7 = 0x2
    5781	05 00 11 00 00 00 00 00	goto +0x11 <LBB30_9>

000000000000b4b0 <LBB30_8>
    5782	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    5783	47 07 00 00 80 00 00 00	r7 |= 0x80
    5784	73 7a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r7
    5785	bf 12 00 00 00 00 00 00	r2 = r1
    5786	77 02 00 00 12 00 00 00	r2 >>= 0x12
    5787	47 02 00 00 f0 00 00 00	r2 |= 0xf0
    5788	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    5789	bf 12 00 00 00 00 00 00	r2 = r1
    5790	77 02 00 00 06 00 00 00	r2 >>= 0x6
    5791	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    5792	47 02 00 00 80 00 00 00	r2 |= 0x80
    5793	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    5794	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    5795	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5796	47 01 00 00 80 00 00 00	r1 |= 0x80
    5797	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5798	b7 07 00 00 04 00 00 00	r7 = 0x4

000000000000b538 <LBB30_9>
    5799	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    5800	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5801	1f 81 00 00 00 00 00 00	r1 -= r8
    5802	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB30_11>
    5803	bf 61 00 00 00 00 00 00	r1 = r6
    5804	bf 82 00 00 00 00 00 00	r2 = r8
    5805	bf 73 00 00 00 00 00 00	r3 = r7
    5806	85 10 00 00 d8 fe ff ff	call -0x128 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5807	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

000000000000b580 <LBB30_11>
    5808	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5809	0f 81 00 00 00 00 00 00	r1 += r8
    5810	bf a2 00 00 00 00 00 00	r2 = r10
    5811	07 02 00 00 fc ff ff ff	r2 += -0x4
    5812	bf 73 00 00 00 00 00 00	r3 = r7
    5813	85 10 00 00 13 0c 00 00	call 0xc13 ; <memcpy>
    5814	0f 78 00 00 00 00 00 00	r8 += r7
    5815	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

000000000000b5c0 <LBB30_12>
    5816	95 00 00 00 00 00 00 00	exit

000000000000b5c8 <<&mut W as core::fmt::Write>::write_str>
    5817	bf 36 00 00 00 00 00 00	r6 = r3
    5818	bf 28 00 00 00 00 00 00	r8 = r2
    5819	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    5820	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    5821	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    5822	1f 91 00 00 00 00 00 00	r1 -= r9
    5823	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB60_2>
    5824	bf 71 00 00 00 00 00 00	r1 = r7
    5825	bf 92 00 00 00 00 00 00	r2 = r9
    5826	bf 63 00 00 00 00 00 00	r3 = r6
    5827	85 10 00 00 c3 fe ff ff	call -0x13d ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5828	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

000000000000b628 <LBB60_2>
    5829	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    5830	0f 91 00 00 00 00 00 00	r1 += r9
    5831	bf 82 00 00 00 00 00 00	r2 = r8
    5832	bf 63 00 00 00 00 00 00	r3 = r6
    5833	85 10 00 00 ff 0b 00 00	call 0xbff ; <memcpy>
    5834	0f 69 00 00 00 00 00 00	r9 += r6
    5835	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    5836	b7 00 00 00 00 00 00 00	r0 = 0x0
    5837	95 00 00 00 00 00 00 00	exit

000000000000b670 <<&mut W as core::fmt::Write>::write_char>
    5838	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5839	85 10 00 00 94 ff ff ff	call -0x6c ; <alloc::string::String::push>
    5840	b7 00 00 00 00 00 00 00	r0 = 0x0
    5841	95 00 00 00 00 00 00 00	exit

000000000000b690 <<&mut W as core::fmt::Write>::write_fmt>
    5842	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5843	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    5844	bf a6 00 00 00 00 00 00	r6 = r10
    5845	07 06 00 00 d0 ff ff ff	r6 += -0x30
    5846	bf 61 00 00 00 00 00 00	r1 = r6
    5847	b7 03 00 00 30 00 00 00	r3 = 0x30
    5848	85 10 00 00 f0 0b 00 00	call 0xbf0 ; <memcpy>
    5849	bf a1 00 00 00 00 00 00	r1 = r10
    5850	07 01 00 00 c8 ff ff ff	r1 += -0x38
    5851	18 02 00 00 f0 3d 01 00 00 00 00 00 00 00 00 00	r2 = 0x13df0 ll
    5853	bf 63 00 00 00 00 00 00	r3 = r6
    5854	85 10 00 00 bd 01 00 00	call 0x1bd ; <core::fmt::write>
    5855	95 00 00 00 00 00 00 00	exit

000000000000b700 <core::ops::function::FnOnce::call_once>
    5856	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5857	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5858	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b718 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>>
    5859	95 00 00 00 00 00 00 00	exit

000000000000b720 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt>
    5860	bf 26 00 00 00 00 00 00	r6 = r2
    5861	bf 17 00 00 00 00 00 00	r7 = r1
    5862	85 10 00 00 f6 07 00 00	call 0x7f6 ; <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    5863	bf 01 00 00 00 00 00 00	r1 = r0
    5864	b7 00 00 00 01 00 00 00	r0 = 0x1
    5865	55 01 13 00 00 00 00 00	if r1 != 0x0 goto +0x13 <LBB70_2>
    5866	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    5867	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    5868	18 03 00 00 b8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12eb8 ll
    5870	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
    5871	b7 03 00 00 00 00 00 00	r3 = 0x0
    5872	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5873	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    5874	18 03 00 00 20 3e 01 00 00 00 00 00 00 00 00 00	r3 = 0x13e20 ll
    5876	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    5877	b7 03 00 00 01 00 00 00	r3 = 0x1
    5878	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    5879	bf a3 00 00 00 00 00 00	r3 = r10
    5880	07 03 00 00 d0 ff ff ff	r3 += -0x30
    5881	85 10 00 00 a2 01 00 00	call 0x1a2 ; <core::fmt::write>
    5882	bf 01 00 00 00 00 00 00	r1 = r0
    5883	b7 00 00 00 01 00 00 00	r0 = 0x1
    5884	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB70_3>

000000000000b7e8 <LBB70_2>
    5885	95 00 00 00 00 00 00 00	exit

000000000000b7f0 <LBB70_3>
    5886	07 07 00 00 08 00 00 00	r7 += 0x8
    5887	bf 71 00 00 00 00 00 00	r1 = r7
    5888	bf 62 00 00 00 00 00 00	r2 = r6
    5889	85 10 00 00 db 07 00 00	call 0x7db ; <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    5890	bf 01 00 00 00 00 00 00	r1 = r0
    5891	b7 00 00 00 00 00 00 00	r0 = 0x0
    5892	15 01 f8 ff 00 00 00 00	if r1 == 0x0 goto -0x8 <LBB70_2>
    5893	b7 00 00 00 01 00 00 00	r0 = 0x1
    5894	05 00 f6 ff 00 00 00 00	goto -0xa <LBB70_2>

000000000000b838 <<T as core::any::Any>::type_id>
    5895	18 00 00 00 24 5c 34 ae 00 00 00 00 4d b3 17 4e	r0 = 0x4e17b34dae345c24 ll
    5897	95 00 00 00 00 00 00 00	exit

000000000000b850 <<core::cell::BorrowError as core::fmt::Debug>::fmt>
    5898	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    5899	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    5900	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    5901	18 02 00 00 ba 2e 01 00 00 00 00 00 00 00 00 00	r2 = 0x12eba ll
    5903	b7 03 00 00 0b 00 00 00	r3 = 0xb
    5904	8d 00 00 00 04 00 00 00	callx r4
    5905	95 00 00 00 00 00 00 00	exit

000000000000b890 <core::char::methods::<impl char>::escape_debug_ext>
    5906	bf 27 00 00 00 00 00 00	r7 = r2
    5907	bf 16 00 00 00 00 00 00	r6 = r1
    5908	b7 01 00 00 02 00 00 00	r1 = 0x2
    5909	bf 75 00 00 00 00 00 00	r5 = r7
    5910	67 05 00 00 20 00 00 00	r5 <<= 0x20
    5911	77 05 00 00 20 00 00 00	r5 >>= 0x20
    5912	65 05 09 00 21 00 00 00	if r5 s> 0x21 goto +0x9 <LBB91_4>
    5913	b7 04 00 00 74 00 00 00	r4 = 0x74
    5914	15 05 ad 00 09 00 00 00	if r5 == 0x9 goto +0xad <LBB91_14>
    5915	15 05 04 00 0a 00 00 00	if r5 == 0xa goto +0x4 <LBB91_10>
    5916	15 05 01 00 0d 00 00 00	if r5 == 0xd goto +0x1 <LBB91_8>
    5917	05 00 07 00 00 00 00 00	goto +0x7 <LBB91_7>

000000000000b8f0 <LBB91_8>
    5918	b7 04 00 00 72 00 00 00	r4 = 0x72
    5919	05 00 a8 00 00 00 00 00	goto +0xa8 <LBB91_14>

000000000000b900 <LBB91_10>
    5920	b7 04 00 00 6e 00 00 00	r4 = 0x6e
    5921	05 00 a6 00 00 00 00 00	goto +0xa6 <LBB91_14>

000000000000b910 <LBB91_4>
    5922	15 05 5c 00 22 00 00 00	if r5 == 0x22 goto +0x5c <LBB91_12>
    5923	15 05 a0 00 27 00 00 00	if r5 == 0x27 goto +0xa0 <LBB91_13>
    5924	15 05 5f 00 5c 00 00 00	if r5 == 0x5c goto +0x5f <LBB91_11>

000000000000b928 <LBB91_7>
    5925	57 03 00 00 01 00 00 00	r3 &= 0x1
    5926	15 03 03 00 00 00 00 00	if r3 == 0x0 goto +0x3 <LBB91_16>
    5927	bf 71 00 00 00 00 00 00	r1 = r7
    5928	85 10 00 00 cd 09 00 00	call 0x9cd ; <core::unicode::unicode_data::grapheme_extend::lookup>
    5929	55 00 1a 00 00 00 00 00	if r0 != 0x0 goto +0x1a <LBB91_28>

000000000000b950 <LBB91_16>
    5930	bf 71 00 00 00 00 00 00	r1 = r7
    5931	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5932	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5933	b7 02 00 00 00 00 01 00	r2 = 0x10000
    5934	2d 12 57 00 00 00 00 00	if r2 > r1 goto +0x57 <LBB91_18>
    5935	b7 02 00 00 00 00 02 00	r2 = 0x20000
    5936	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB91_27>
    5937	05 00 67 00 00 00 00 00	goto +0x67 <LBB91_19>

000000000000b990 <LBB91_27>
    5938	18 01 00 00 c8 34 01 00 00 00 00 00 00 00 00 00	r1 = 0x134c8 ll
    5940	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    5941	b7 01 00 00 b6 01 00 00	r1 = 0x1b6
    5942	7b 1a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r1
    5943	b7 01 00 00 c0 00 00 00	r1 = 0xc0
    5944	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    5945	bf a5 00 00 00 00 00 00	r5 = r10
    5946	bf 71 00 00 00 00 00 00	r1 = r7
    5947	18 02 00 00 b4 33 01 00 00 00 00 00 00 00 00 00	r2 = 0x133b4 ll
    5949	b7 03 00 00 2a 00 00 00	r3 = 0x2a
    5950	18 04 00 00 08 34 01 00 00 00 00 00 00 00 00 00	r4 = 0x13408 ll
    5952	85 10 00 00 de 06 00 00	call 0x6de ; <core::unicode::printable::check>
    5953	b7 01 00 00 01 00 00 00	r1 = 0x1
    5954	bf 74 00 00 00 00 00 00	r4 = r7
    5955	55 00 84 00 00 00 00 00	if r0 != 0x0 goto +0x84 <LBB91_14>

000000000000ba20 <LBB91_28>
    5956	bf 71 00 00 00 00 00 00	r1 = r7
    5957	47 01 00 00 01 00 00 00	r1 |= 0x1
    5958	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5959	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5960	bf 12 00 00 00 00 00 00	r2 = r1
    5961	77 02 00 00 01 00 00 00	r2 >>= 0x1
    5962	4f 21 00 00 00 00 00 00	r1 |= r2
    5963	bf 12 00 00 00 00 00 00	r2 = r1
    5964	77 02 00 00 02 00 00 00	r2 >>= 0x2
    5965	4f 21 00 00 00 00 00 00	r1 |= r2
    5966	bf 12 00 00 00 00 00 00	r2 = r1
    5967	77 02 00 00 04 00 00 00	r2 >>= 0x4
    5968	4f 21 00 00 00 00 00 00	r1 |= r2
    5969	67 07 00 00 20 00 00 00	r7 <<= 0x20
    5970	77 07 00 00 20 00 00 00	r7 >>= 0x20
    5971	18 02 00 00 00 00 00 00 00 00 00 00 05 00 00 00	r2 = 0x500000000 ll
    5973	4f 27 00 00 00 00 00 00	r7 |= r2
    5974	bf 12 00 00 00 00 00 00	r2 = r1
    5975	77 02 00 00 08 00 00 00	r2 >>= 0x8
    5976	4f 21 00 00 00 00 00 00	r1 |= r2
    5977	bf 12 00 00 00 00 00 00	r2 = r1
    5978	77 02 00 00 10 00 00 00	r2 >>= 0x10
    5979	4f 21 00 00 00 00 00 00	r1 |= r2
    5980	bf 12 00 00 00 00 00 00	r2 = r1
    5981	77 02 00 00 20 00 00 00	r2 >>= 0x20
    5982	4f 21 00 00 00 00 00 00	r1 |= r2
    5983	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    5984	18 02 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r2 = 0x5555555555555555 ll
    5986	bf 13 00 00 00 00 00 00	r3 = r1
    5987	77 03 00 00 01 00 00 00	r3 >>= 0x1
    5988	5f 23 00 00 00 00 00 00	r3 &= r2
    5989	1f 31 00 00 00 00 00 00	r1 -= r3
    5990	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    5992	bf 12 00 00 00 00 00 00	r2 = r1
    5993	5f 32 00 00 00 00 00 00	r2 &= r3
    5994	77 01 00 00 02 00 00 00	r1 >>= 0x2
    5995	5f 31 00 00 00 00 00 00	r1 &= r3
    5996	0f 12 00 00 00 00 00 00	r2 += r1
    5997	bf 21 00 00 00 00 00 00	r1 = r2
    5998	77 01 00 00 04 00 00 00	r1 >>= 0x4
    5999	0f 12 00 00 00 00 00 00	r2 += r1
    6000	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    6002	5f 12 00 00 00 00 00 00	r2 &= r1
    6003	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    6005	2f 12 00 00 00 00 00 00	r2 *= r1
    6006	77 02 00 00 38 00 00 00	r2 >>= 0x38
    6007	07 02 00 00 e0 ff ff ff	r2 += -0x20
    6008	18 01 00 00 fc ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xfffffffc ll
    6010	5f 12 00 00 00 00 00 00	r2 &= r1
    6011	b7 01 00 00 03 00 00 00	r1 = 0x3
    6012	77 02 00 00 02 00 00 00	r2 >>= 0x2
    6013	a7 02 00 00 07 00 00 00	r2 ^= 0x7
    6014	05 00 49 00 00 00 00 00	goto +0x49 <LBB91_14>

000000000000bbf8 <LBB91_12>
    6015	b7 04 00 00 22 00 00 00	r4 = 0x22
    6016	bf 35 00 00 00 00 00 00	r5 = r3
    6017	57 05 00 00 00 00 01 00	r5 &= 0x10000
    6018	15 05 a2 ff 00 00 00 00	if r5 == 0x0 goto -0x5e <LBB91_7>
    6019	05 00 44 00 00 00 00 00	goto +0x44 <LBB91_14>

000000000000bc20 <LBB91_11>
    6020	b7 04 00 00 5c 00 00 00	r4 = 0x5c
    6021	05 00 42 00 00 00 00 00	goto +0x42 <LBB91_14>

000000000000bc30 <LBB91_18>
    6022	18 01 00 00 85 32 01 00 00 00 00 00 00 00 00 00	r1 = 0x13285 ll
    6024	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    6025	b7 01 00 00 2f 01 00 00	r1 = 0x12f
    6026	7b 1a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r1
    6027	b7 01 00 00 20 01 00 00	r1 = 0x120
    6028	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    6029	bf a5 00 00 00 00 00 00	r5 = r10
    6030	bf 71 00 00 00 00 00 00	r1 = r7
    6031	18 02 00 00 15 31 01 00 00 00 00 00 00 00 00 00	r2 = 0x13115 ll
    6033	b7 03 00 00 28 00 00 00	r3 = 0x28
    6034	18 04 00 00 65 31 01 00 00 00 00 00 00 00 00 00	r4 = 0x13165 ll
    6036	85 10 00 00 8a 06 00 00	call 0x68a ; <core::unicode::printable::check>
    6037	b7 01 00 00 01 00 00 00	r1 = 0x1
    6038	bf 74 00 00 00 00 00 00	r4 = r7
    6039	55 00 30 00 00 00 00 00	if r0 != 0x0 goto +0x30 <LBB91_14>
    6040	05 00 ab ff 00 00 00 00	goto -0x55 <LBB91_28>

000000000000bcc8 <LBB91_19>
    6041	bf 71 00 00 00 00 00 00	r1 = r7
    6042	57 01 00 00 e0 ff 1f 00	r1 &= 0x1fffe0
    6043	15 01 a8 ff e0 a6 02 00	if r1 == 0x2a6e0 goto -0x58 <LBB91_28>
    6044	bf 71 00 00 00 00 00 00	r1 = r7
    6045	07 01 00 00 c7 48 fd ff	r1 += -0x2b739
    6046	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6047	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6048	b7 02 00 00 07 00 00 00	r2 = 0x7
    6049	2d 12 a2 ff 00 00 00 00	if r2 > r1 goto -0x5e <LBB91_28>
    6050	bf 71 00 00 00 00 00 00	r1 = r7
    6051	57 01 00 00 fe ff 1f 00	r1 &= 0x1ffffe
    6052	15 01 9f ff 1e b8 02 00	if r1 == 0x2b81e goto -0x61 <LBB91_28>
    6053	bf 71 00 00 00 00 00 00	r1 = r7
    6054	07 01 00 00 5e 31 fd ff	r1 += -0x2cea2
    6055	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6056	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6057	b7 02 00 00 0e 00 00 00	r2 = 0xe
    6058	2d 12 99 ff 00 00 00 00	if r2 > r1 goto -0x67 <LBB91_28>
    6059	bf 71 00 00 00 00 00 00	r1 = r7
    6060	07 01 00 00 1f 14 fd ff	r1 += -0x2ebe1
    6061	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6062	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6063	b7 02 00 00 1f 0c 00 00	r2 = 0xc1f
    6064	2d 12 93 ff 00 00 00 00	if r2 > r1 goto -0x6d <LBB91_28>
    6065	bf 71 00 00 00 00 00 00	r1 = r7
    6066	07 01 00 00 e2 05 fd ff	r1 += -0x2fa1e
    6067	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6068	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6069	b7 02 00 00 e2 05 00 00	r2 = 0x5e2
    6070	2d 12 8d ff 00 00 00 00	if r2 > r1 goto -0x73 <LBB91_28>
    6071	bf 71 00 00 00 00 00 00	r1 = r7
    6072	07 01 00 00 b5 ec fc ff	r1 += -0x3134b
    6073	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6074	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6075	b7 02 00 00 b5 ed 0a 00	r2 = 0xaedb5
    6076	2d 12 87 ff 00 00 00 00	if r2 > r1 goto -0x79 <LBB91_28>
    6077	b7 01 00 00 01 00 00 00	r1 = 0x1
    6078	bf 73 00 00 00 00 00 00	r3 = r7
    6079	67 03 00 00 20 00 00 00	r3 <<= 0x20
    6080	77 03 00 00 20 00 00 00	r3 >>= 0x20
    6081	bf 74 00 00 00 00 00 00	r4 = r7
    6082	25 03 81 ff ef 01 0e 00	if r3 > 0xe01ef goto -0x7f <LBB91_28>
    6083	05 00 04 00 00 00 00 00	goto +0x4 <LBB91_14>

000000000000be20 <LBB91_13>
    6084	b7 04 00 00 27 00 00 00	r4 = 0x27
    6085	bf 35 00 00 00 00 00 00	r5 = r3
    6086	57 05 00 00 00 01 00 00	r5 &= 0x100
    6087	15 05 5d ff 00 00 00 00	if r5 == 0x0 goto -0xa3 <LBB91_7>

000000000000be40 <LBB91_14>
    6088	7b 26 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r2
    6089	63 46 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r4
    6090	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
    6091	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    6092	95 00 00 00 00 00 00 00	exit

000000000000be68 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt>
    6093	bf 18 00 00 00 00 00 00	r8 = r1
    6094	79 26 20 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x20)
    6095	79 27 28 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x28)
    6096	79 74 18 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x18)
    6097	bf 61 00 00 00 00 00 00	r1 = r6
    6098	18 02 00 00 f1 2e 01 00 00 00 00 00 00 00 00 00	r2 = 0x12ef1 ll
    6100	b7 03 00 00 0c 00 00 00	r3 = 0xc
    6101	8d 00 00 00 04 00 00 00	callx r4
    6102	b7 09 00 00 01 00 00 00	r9 = 0x1
    6103	55 00 5d 00 00 00 00 00	if r0 != 0x0 goto +0x5d <LBB125_6>
    6104	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    6105	15 01 1a 00 00 00 00 00	if r1 == 0x0 goto +0x1a <LBB125_3>
    6106	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    6107	18 01 00 00 18 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10718 ll
    6109	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    6110	bf a1 00 00 00 00 00 00	r1 = r10
    6111	07 01 00 00 98 ff ff ff	r1 += -0x68
    6112	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6113	bf a1 00 00 00 00 00 00	r1 = r10
    6114	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6115	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6116	b7 01 00 00 00 00 00 00	r1 = 0x0
    6117	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6118	b7 01 00 00 02 00 00 00	r1 = 0x2
    6119	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6120	18 01 00 00 80 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e80 ll
    6122	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6123	b7 09 00 00 01 00 00 00	r9 = 0x1
    6124	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    6125	bf a3 00 00 00 00 00 00	r3 = r10
    6126	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6127	bf 61 00 00 00 00 00 00	r1 = r6
    6128	bf 72 00 00 00 00 00 00	r2 = r7
    6129	85 10 00 00 aa 00 00 00	call 0xaa ; <core::fmt::write>
    6130	55 00 42 00 00 00 00 00	if r0 != 0x0 goto +0x42 <LBB125_6>
    6131	05 00 21 00 00 00 00 00	goto +0x21 <LBB125_5>

000000000000bfa0 <LBB125_3>
    6132	79 89 00 00 00 00 00 00	r9 = *(u64 *)(r8 + 0x0)
    6133	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    6134	79 12 18 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x18)
    6135	bf 91 00 00 00 00 00 00	r1 = r9
    6136	8d 00 00 00 02 00 00 00	callx r2
    6137	18 01 00 00 f4 bc c7 ec 00 00 00 00 1e a9 f2 7e	r1 = 0x7ef2a91eecc7bcf4 ll
    6139	5d 10 19 00 00 00 00 00	if r0 != r1 goto +0x19 <LBB125_5>
    6140	7b 9a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r9
    6141	18 01 00 00 e0 06 01 00 00 00 00 00 00 00 00 00	r1 = 0x106e0 ll
    6143	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    6144	bf a1 00 00 00 00 00 00	r1 = r10
    6145	07 01 00 00 98 ff ff ff	r1 += -0x68
    6146	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6147	bf a1 00 00 00 00 00 00	r1 = r10
    6148	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6149	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6150	b7 01 00 00 00 00 00 00	r1 = 0x0
    6151	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6152	b7 01 00 00 02 00 00 00	r1 = 0x2
    6153	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6154	18 01 00 00 80 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e80 ll
    6156	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6157	b7 09 00 00 01 00 00 00	r9 = 0x1
    6158	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    6159	bf a3 00 00 00 00 00 00	r3 = r10
    6160	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6161	bf 61 00 00 00 00 00 00	r1 = r6
    6162	bf 72 00 00 00 00 00 00	r2 = r7
    6163	85 10 00 00 88 00 00 00	call 0x88 ; <core::fmt::write>
    6164	55 00 20 00 00 00 00 00	if r0 != 0x0 goto +0x20 <LBB125_6>

000000000000c0a8 <LBB125_5>
    6165	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    6166	bf 12 00 00 00 00 00 00	r2 = r1
    6167	07 02 00 00 14 00 00 00	r2 += 0x14
    6168	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    6169	18 02 00 00 c0 00 01 00 00 00 00 00 00 00 00 00	r2 = 0x100c0 ll
    6171	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    6172	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    6173	bf 12 00 00 00 00 00 00	r2 = r1
    6174	07 02 00 00 10 00 00 00	r2 += 0x10
    6175	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    6176	18 02 00 00 80 07 01 00 00 00 00 00 00 00 00 00	r2 = 0x10780 ll
    6178	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    6179	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6180	bf a1 00 00 00 00 00 00	r1 = r10
    6181	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6182	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6183	b7 01 00 00 00 00 00 00	r1 = 0x0
    6184	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6185	b7 01 00 00 03 00 00 00	r1 = 0x3
    6186	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6187	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6188	18 01 00 00 30 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e30 ll
    6190	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6191	bf a3 00 00 00 00 00 00	r3 = r10
    6192	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6193	bf 61 00 00 00 00 00 00	r1 = r6
    6194	bf 72 00 00 00 00 00 00	r2 = r7
    6195	85 10 00 00 68 00 00 00	call 0x68 ; <core::fmt::write>
    6196	bf 09 00 00 00 00 00 00	r9 = r0

000000000000c1a8 <LBB125_6>
    6197	bf 90 00 00 00 00 00 00	r0 = r9
    6198	95 00 00 00 00 00 00 00	exit

000000000000c1b8 <core::panicking::panic>
    6199	18 04 00 00 b8 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12eb8 ll
    6201	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    6202	b7 04 00 00 00 00 00 00	r4 = 0x0
    6203	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
    6204	7b 4a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r4
    6205	b7 04 00 00 01 00 00 00	r4 = 0x1
    6206	7b 4a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r4
    6207	bf a4 00 00 00 00 00 00	r4 = r10
    6208	07 04 00 00 f0 ff ff ff	r4 += -0x10
    6209	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
    6210	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6211	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6212	bf a1 00 00 00 00 00 00	r1 = r10
    6213	07 01 00 00 c0 ff ff ff	r1 += -0x40
    6214	bf 32 00 00 00 00 00 00	r2 = r3
    6215	85 10 00 00 1d 00 00 00	call 0x1d ; <core::panicking::panic_fmt>
    6216	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c248 <core::panicking::panic_bounds_check>
    6217	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    6218	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6219	bf a1 00 00 00 00 00 00	r1 = r10
    6220	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6221	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6222	b7 01 00 00 00 00 00 00	r1 = 0x0
    6223	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    6224	b7 01 00 00 02 00 00 00	r1 = 0x2
    6225	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6226	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    6227	18 01 00 00 a0 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ea0 ll
    6229	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    6230	bf a1 00 00 00 00 00 00	r1 = r10
    6231	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6232	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6233	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    6235	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6236	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6237	bf a1 00 00 00 00 00 00	r1 = r10
    6238	07 01 00 00 a8 ff ff ff	r1 += -0x58
    6239	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6240	bf a1 00 00 00 00 00 00	r1 = r10
    6241	07 01 00 00 b0 ff ff ff	r1 += -0x50
    6242	bf 32 00 00 00 00 00 00	r2 = r3
    6243	85 10 00 00 01 00 00 00	call 0x1 ; <core::panicking::panic_fmt>
    6244	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c328 <core::panicking::panic_fmt>
    6245	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6246	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6247	18 01 00 00 60 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e60 ll
    6249	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6250	18 01 00 00 b8 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12eb8 ll
    6252	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6253	bf a1 00 00 00 00 00 00	r1 = r10
    6254	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6255	85 10 00 00 06 fd ff ff	call -0x2fa ; <rust_begin_unwind>
    6256	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c388 <core::result::unwrap_failed>
    6257	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    6258	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    6259	7b 4a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r4
    6260	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    6261	bf a1 00 00 00 00 00 00	r1 = r10
    6262	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6263	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6264	b7 01 00 00 00 00 00 00	r1 = 0x0
    6265	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    6266	b7 01 00 00 02 00 00 00	r1 = 0x2
    6267	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6268	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    6269	18 01 00 00 c0 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ec0 ll
    6271	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    6272	18 01 00 00 b0 06 01 00 00 00 00 00 00 00 00 00	r1 = 0x106b0 ll
    6274	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6275	bf a1 00 00 00 00 00 00	r1 = r10
    6276	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6277	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6278	18 01 00 00 80 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10780 ll
    6280	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6281	bf a1 00 00 00 00 00 00	r1 = r10
    6282	07 01 00 00 90 ff ff ff	r1 += -0x70
    6283	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6284	bf a1 00 00 00 00 00 00	r1 = r10
    6285	07 01 00 00 b0 ff ff ff	r1 += -0x50
    6286	bf 52 00 00 00 00 00 00	r2 = r5
    6287	85 10 00 00 d5 ff ff ff	call -0x2b ; <core::panicking::panic_fmt>
    6288	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c488 <core::fmt::Formatter::new>
    6289	b7 04 00 00 03 00 00 00	r4 = 0x3
    6290	73 41 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r4
    6291	18 04 00 00 00 00 00 00 00 00 00 00 20 00 00 00	r4 = 0x2000000000 ll
    6293	7b 41 30 00 00 00 00 00	*(u64 *)(r1 + 0x30) = r4
    6294	7b 31 28 00 00 00 00 00	*(u64 *)(r1 + 0x28) = r3
    6295	7b 21 20 00 00 00 00 00	*(u64 *)(r1 + 0x20) = r2
    6296	b7 02 00 00 00 00 00 00	r2 = 0x0
    6297	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    6298	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    6299	95 00 00 00 00 00 00 00	exit

000000000000c4e0 <core::fmt::write>
    6300	b7 04 00 00 03 00 00 00	r4 = 0x3
    6301	73 4a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r4
    6302	18 04 00 00 00 00 00 00 00 00 00 00 20 00 00 00	r4 = 0x2000000000 ll
    6304	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6305	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    6306	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6307	b7 07 00 00 00 00 00 00	r7 = 0x0
    6308	7b 7a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r7
    6309	7b 7a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r7
    6310	79 38 10 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x10)
    6311	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    6312	55 08 1e 00 00 00 00 00	if r8 != 0x0 goto +0x1e <LBB172_4>
    6313	79 36 28 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x28)
    6314	15 06 6b 00 00 00 00 00	if r6 == 0x0 goto +0x6b <LBB172_22>
    6315	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6316	79 18 20 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x20)
    6317	b7 07 00 00 00 00 00 00	r7 = 0x0
    6318	67 06 00 00 04 00 00 00	r6 <<= 0x4
    6319	07 08 00 00 08 00 00 00	r8 += 0x8
    6320	79 19 00 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x0)
    6321	07 09 00 00 08 00 00 00	r9 += 0x8

000000000000c590 <LBB172_3>
    6322	79 93 00 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x0)
    6323	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB172_26>
    6324	05 00 06 00 00 00 00 00	goto +0x6 <LBB172_25>

000000000000c5a8 <LBB172_26>
    6325	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6326	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6327	79 92 f8 ff 00 00 00 00	r2 = *(u64 *)(r9 - 0x8)
    6328	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6329	8d 00 00 00 04 00 00 00	callx r4
    6330	55 00 6e 00 00 00 00 00	if r0 != 0x0 goto +0x6e <LBB172_28>

000000000000c5d8 <LBB172_25>
    6331	79 81 f8 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x8)
    6332	79 83 00 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x0)
    6333	bf a2 00 00 00 00 00 00	r2 = r10
    6334	07 02 00 00 c0 ff ff ff	r2 += -0x40
    6335	8d 00 00 00 03 00 00 00	callx r3
    6336	55 00 68 00 00 00 00 00	if r0 != 0x0 goto +0x68 <LBB172_28>
    6337	07 07 00 00 01 00 00 00	r7 += 0x1
    6338	07 08 00 00 10 00 00 00	r8 += 0x10
    6339	07 09 00 00 10 00 00 00	r9 += 0x10
    6340	07 06 00 00 f0 ff ff ff	r6 += -0x10
    6341	15 06 50 00 00 00 00 00	if r6 == 0x0 goto +0x50 <LBB172_22>
    6342	05 00 eb ff 00 00 00 00	goto -0x15 <LBB172_3>

000000000000c638 <LBB172_4>
    6343	79 39 18 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x18)
    6344	15 09 4d 00 00 00 00 00	if r9 == 0x0 goto +0x4d <LBB172_22>
    6345	b7 07 00 00 00 00 00 00	r7 = 0x0
    6346	07 08 00 00 30 00 00 00	r8 += 0x30
    6347	27 09 00 00 38 00 00 00	r9 *= 0x38
    6348	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6349	79 16 00 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x0)
    6350	07 06 00 00 08 00 00 00	r6 += 0x8

000000000000c678 <LBB172_6>
    6351	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
    6352	55 03 0e 00 00 00 00 00	if r3 != 0x0 goto +0xe <LBB172_20>

000000000000c688 <LBB172_7>
    6353	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6354	79 12 20 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x20)
    6355	61 81 f8 ff 00 00 00 00	r1 = *(u32 *)(r8 - 0x8)
    6356	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 0xc) = r1
    6357	71 81 00 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x0)
    6358	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
    6359	61 81 fc ff 00 00 00 00	r1 = *(u32 *)(r8 - 0x4)
    6360	63 1a f0 ff 00 00 00 00	*(u32 *)(r10 - 0x10) = r1
    6361	79 81 f0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x10)
    6362	79 84 e8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x18)
    6363	15 04 0a 00 00 00 00 00	if r4 == 0x0 goto +0xa <LBB172_10>
    6364	b7 03 00 00 00 00 00 00	r3 = 0x0
    6365	15 04 0a 00 01 00 00 00	if r4 == 0x1 goto +0xa <LBB172_11>
    6366	05 00 13 00 00 00 00 00	goto +0x13 <LBB172_13>

000000000000c6f8 <LBB172_20>
    6367	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6368	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6369	79 62 f8 ff 00 00 00 00	r2 = *(u64 *)(r6 - 0x8)
    6370	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6371	8d 00 00 00 04 00 00 00	callx r4
    6372	55 00 44 00 00 00 00 00	if r0 != 0x0 goto +0x44 <LBB172_28>
    6373	05 00 eb ff 00 00 00 00	goto -0x15 <LBB172_7>

000000000000c730 <LBB172_10>
    6374	b7 03 00 00 01 00 00 00	r3 = 0x1
    6375	05 00 0a 00 00 00 00 00	goto +0xa <LBB172_13>

000000000000c740 <LBB172_11>
    6376	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6377	bf 24 00 00 00 00 00 00	r4 = r2
    6378	0f 14 00 00 00 00 00 00	r4 += r1
    6379	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
    6380	18 00 00 00 00 b7 00 00 00 00 00 00 00 00 00 00	r0 = 0xb700 ll
    6382	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB172_13>
    6383	b7 03 00 00 01 00 00 00	r3 = 0x1
    6384	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    6385	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

000000000000c790 <LBB172_13>
    6386	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6387	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
    6388	79 81 e0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x20)
    6389	79 84 d8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x28)
    6390	15 04 03 00 00 00 00 00	if r4 == 0x0 goto +0x3 <LBB172_16>
    6391	b7 03 00 00 00 00 00 00	r3 = 0x0
    6392	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB172_17>
    6393	05 00 0c 00 00 00 00 00	goto +0xc <LBB172_19>

000000000000c7d0 <LBB172_16>
    6394	b7 03 00 00 01 00 00 00	r3 = 0x1
    6395	05 00 0a 00 00 00 00 00	goto +0xa <LBB172_19>

000000000000c7e0 <LBB172_17>
    6396	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6397	bf 24 00 00 00 00 00 00	r4 = r2
    6398	0f 14 00 00 00 00 00 00	r4 += r1
    6399	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
    6400	18 00 00 00 00 b7 00 00 00 00 00 00 00 00 00 00	r0 = 0xb700 ll
    6402	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB172_19>
    6403	b7 03 00 00 01 00 00 00	r3 = 0x1
    6404	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    6405	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

000000000000c830 <LBB172_19>
    6406	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6407	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    6408	79 81 d0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x30)
    6409	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6410	0f 12 00 00 00 00 00 00	r2 += r1
    6411	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    6412	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
    6413	bf a2 00 00 00 00 00 00	r2 = r10
    6414	07 02 00 00 c0 ff ff ff	r2 += -0x40
    6415	8d 00 00 00 03 00 00 00	callx r3
    6416	55 00 18 00 00 00 00 00	if r0 != 0x0 goto +0x18 <LBB172_28>
    6417	07 07 00 00 01 00 00 00	r7 += 0x1
    6418	07 08 00 00 38 00 00 00	r8 += 0x38
    6419	07 06 00 00 10 00 00 00	r6 += 0x10
    6420	07 09 00 00 c8 ff ff ff	r9 += -0x38
    6421	55 09 b9 ff 00 00 00 00	if r9 != 0x0 goto -0x47 <LBB172_6>

000000000000c8b0 <LBB172_22>
    6422	bf 72 00 00 00 00 00 00	r2 = r7
    6423	67 02 00 00 04 00 00 00	r2 <<= 0x4
    6424	79 a3 b8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x48)
    6425	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    6426	0f 21 00 00 00 00 00 00	r1 += r2
    6427	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
    6428	2d 72 01 00 00 00 00 00	if r2 > r7 goto +0x1 <LBB172_24>
    6429	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000c8f0 <LBB172_24>
    6430	2d 72 01 00 00 00 00 00	if r2 > r7 goto +0x1 <LBB172_29>
    6431	05 00 07 00 00 00 00 00	goto +0x7 <LBB172_30>

000000000000c900 <LBB172_29>
    6432	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    6433	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6434	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    6435	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    6436	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6437	8d 00 00 00 04 00 00 00	callx r4
    6438	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB172_28>

000000000000c938 <LBB172_30>
    6439	b7 00 00 00 00 00 00 00	r0 = 0x0
    6440	05 00 01 00 00 00 00 00	goto +0x1 <LBB172_31>

000000000000c948 <LBB172_28>
    6441	b7 00 00 00 01 00 00 00	r0 = 0x1

000000000000c950 <LBB172_31>
    6442	95 00 00 00 00 00 00 00	exit

000000000000c958 <core::fmt::Formatter::pad_integral>
    6443	79 50 08 f0 00 00 00 00	r0 = *(u64 *)(r5 - 0xff8)
    6444	15 02 09 00 00 00 00 00	if r2 == 0x0 goto +0x9 <LBB173_2>
    6445	bf 38 00 00 00 00 00 00	r8 = r3
    6446	b7 07 00 00 00 00 11 00	r7 = 0x110000
    6447	61 19 30 00 00 00 00 00	r9 = *(u32 *)(r1 + 0x30)
    6448	bf 92 00 00 00 00 00 00	r2 = r9
    6449	57 02 00 00 01 00 00 00	r2 &= 0x1
    6450	bf 06 00 00 00 00 00 00	r6 = r0
    6451	15 02 07 00 00 00 00 00	if r2 == 0x0 goto +0x7 <LBB173_4>
    6452	b7 07 00 00 2b 00 00 00	r7 = 0x2b
    6453	05 00 03 00 00 00 00 00	goto +0x3 <LBB173_3>

000000000000c9b0 <LBB173_2>
    6454	bf 38 00 00 00 00 00 00	r8 = r3
    6455	b7 07 00 00 2d 00 00 00	r7 = 0x2d
    6456	61 19 30 00 00 00 00 00	r9 = *(u32 *)(r1 + 0x30)

000000000000c9c8 <LBB173_3>
    6457	bf 06 00 00 00 00 00 00	r6 = r0
    6458	07 06 00 00 01 00 00 00	r6 += 0x1

000000000000c9d8 <LBB173_4>
    6459	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    6460	b7 03 00 00 00 00 00 00	r3 = 0x0
    6461	bf 92 00 00 00 00 00 00	r2 = r9
    6462	57 02 00 00 04 00 00 00	r2 &= 0x4
    6463	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB173_12>
    6464	05 00 0a 00 00 00 00 00	goto +0xa <LBB173_6>

000000000000ca08 <LBB173_12>
    6465	79 52 00 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0x1000)
    6466	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6467	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    6468	15 02 1f 00 01 00 00 00	if r2 == 0x1 goto +0x1f <LBB173_14>
    6469	bf 16 00 00 00 00 00 00	r6 = r1
    6470	bf 72 00 00 00 00 00 00	r2 = r7
    6471	85 10 00 00 c8 00 00 00	call 0xc8 ; <core::fmt::Formatter::pad_integral::write_prefix>
    6472	b7 07 00 00 01 00 00 00	r7 = 0x1
    6473	55 00 3e 00 00 00 00 00	if r0 != 0x0 goto +0x3e <LBB173_51>
    6474	05 00 36 00 00 00 00 00	goto +0x36 <LBB173_17>

000000000000ca58 <LBB173_6>
    6475	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    6476	b7 02 00 00 00 00 00 00	r2 = 0x0
    6477	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6478	bf 83 00 00 00 00 00 00	r3 = r8
    6479	15 04 08 00 00 00 00 00	if r4 == 0x0 goto +0x8 <LBB173_11>
    6480	b7 02 00 00 00 00 00 00	r2 = 0x0
    6481	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6482	bf 30 00 00 00 00 00 00	r0 = r3
    6483	05 00 09 00 00 00 00 00	goto +0x9 <LBB173_8>

000000000000caa0 <LBB173_10>
    6484	0f 72 00 00 00 00 00 00	r2 += r7
    6485	07 00 00 00 01 00 00 00	r0 += 0x1
    6486	07 04 00 00 ff ff ff ff	r4 += -0x1
    6487	55 04 05 00 00 00 00 00	if r4 != 0x0 goto +0x5 <LBB173_8>

000000000000cac0 <LBB173_11>
    6488	0f 62 00 00 00 00 00 00	r2 += r6
    6489	bf 26 00 00 00 00 00 00	r6 = r2
    6490	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6491	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x28)
    6492	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB173_12>

000000000000cae8 <LBB173_8>
    6493	71 08 00 00 00 00 00 00	r8 = *(u8 *)(r0 + 0x0)
    6494	67 08 00 00 38 00 00 00	r8 <<= 0x38
    6495	c7 08 00 00 38 00 00 00	r8 s>>= 0x38
    6496	b7 07 00 00 01 00 00 00	r7 = 0x1
    6497	65 08 f2 ff bf ff ff ff	if r8 s> -0x41 goto -0xe <LBB173_10>
    6498	b7 07 00 00 00 00 00 00	r7 = 0x0
    6499	05 00 f0 ff 00 00 00 00	goto -0x10 <LBB173_10>

000000000000cb20 <LBB173_14>
    6500	79 18 08 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x8)
    6501	3d 86 16 00 00 00 00 00	if r6 >= r8 goto +0x16 <LBB173_16>
    6502	57 09 00 00 08 00 00 00	r9 &= 0x8
    6503	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6504	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB173_18>
    6505	05 00 21 00 00 00 00 00	goto +0x21 <LBB173_27>

000000000000cb50 <LBB173_18>
    6506	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
    6507	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6508	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6509	b7 01 00 00 01 00 00 00	r1 = 0x1
    6510	15 02 01 00 03 00 00 00	if r2 == 0x3 goto +0x1 <LBB173_20>
    6511	bf 21 00 00 00 00 00 00	r1 = r2

000000000000cb80 <LBB173_20>
    6512	1f 68 00 00 00 00 00 00	r8 -= r6
    6513	b7 09 00 00 00 00 00 00	r9 = 0x0
    6514	57 01 00 00 03 00 00 00	r1 &= 0x3
    6515	7b 8a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r8
    6516	15 01 35 00 00 00 00 00	if r1 == 0x0 goto +0x35 <LBB173_23>
    6517	15 01 31 00 01 00 00 00	if r1 == 0x1 goto +0x31 <LBB173_52>
    6518	bf 89 00 00 00 00 00 00	r9 = r8
    6519	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6520	07 08 00 00 01 00 00 00	r8 += 0x1
    6521	77 08 00 00 01 00 00 00	r8 >>= 0x1
    6522	7b 8a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r8
    6523	05 00 2e 00 00 00 00 00	goto +0x2e <LBB173_23>

000000000000cbe0 <LBB173_16>
    6524	bf 16 00 00 00 00 00 00	r6 = r1
    6525	bf 72 00 00 00 00 00 00	r2 = r7
    6526	85 10 00 00 91 00 00 00	call 0x91 ; <core::fmt::Formatter::pad_integral::write_prefix>
    6527	b7 07 00 00 01 00 00 00	r7 = 0x1
    6528	55 00 07 00 00 00 00 00	if r0 != 0x0 goto +0x7 <LBB173_51>

000000000000cc08 <LBB173_17>
    6529	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    6530	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    6531	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6532	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6533	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6534	8d 00 00 00 04 00 00 00	callx r4
    6535	bf 07 00 00 00 00 00 00	r7 = r0

000000000000cc40 <LBB173_51>
    6536	57 07 00 00 01 00 00 00	r7 &= 0x1
    6537	bf 70 00 00 00 00 00 00	r0 = r7
    6538	95 00 00 00 00 00 00 00	exit

000000000000cc58 <LBB173_27>
    6539	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6540	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
    6541	b7 02 00 00 30 00 00 00	r2 = 0x30
    6542	63 21 34 00 00 00 00 00	*(u32 *)(r1 + 0x34) = r2
    6543	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6544	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    6545	bf 72 00 00 00 00 00 00	r2 = r7
    6546	b7 07 00 00 01 00 00 00	r7 = 0x1
    6547	73 71 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r7
    6548	85 10 00 00 7b 00 00 00	call 0x7b ; <core::fmt::Formatter::pad_integral::write_prefix>
    6549	55 00 f2 ff 00 00 00 00	if r0 != 0x0 goto -0xe <LBB173_51>
    6550	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6551	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6552	b7 01 00 00 01 00 00 00	r1 = 0x1
    6553	15 02 01 00 03 00 00 00	if r2 == 0x3 goto +0x1 <LBB173_30>
    6554	bf 21 00 00 00 00 00 00	r1 = r2

000000000000ccd8 <LBB173_30>
    6555	1f 68 00 00 00 00 00 00	r8 -= r6
    6556	b7 09 00 00 00 00 00 00	r9 = 0x0
    6557	57 01 00 00 03 00 00 00	r1 &= 0x3
    6558	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r8
    6559	15 01 41 00 00 00 00 00	if r1 == 0x0 goto +0x41 <LBB173_33>
    6560	15 01 3d 00 01 00 00 00	if r1 == 0x1 goto +0x3d <LBB173_53>
    6561	bf 89 00 00 00 00 00 00	r9 = r8
    6562	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6563	07 08 00 00 01 00 00 00	r8 += 0x1
    6564	77 08 00 00 01 00 00 00	r8 >>= 0x1
    6565	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r8
    6566	05 00 3a 00 00 00 00 00	goto +0x3a <LBB173_33>

000000000000cd38 <LBB173_52>
    6567	b7 01 00 00 00 00 00 00	r1 = 0x0
    6568	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6569	bf 89 00 00 00 00 00 00	r9 = r8

000000000000cd50 <LBB173_23>
    6570	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    6571	07 09 00 00 01 00 00 00	r9 += 0x1
    6572	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6573	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6574	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6575	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6576	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6577	b7 07 00 00 01 00 00 00	r7 = 0x1

000000000000cd90 <LBB173_24>
    6578	07 09 00 00 ff ff ff ff	r9 += -0x1
    6579	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB173_26>
    6580	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6581	bf 61 00 00 00 00 00 00	r1 = r6
    6582	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6583	8d 00 00 00 03 00 00 00	callx r3
    6584	55 00 cf ff 00 00 00 00	if r0 != 0x0 goto -0x31 <LBB173_51>
    6585	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB173_24>

000000000000cdd0 <LBB173_26>
    6586	b7 07 00 00 01 00 00 00	r7 = 0x1
    6587	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6588	15 01 cb ff 00 00 11 00	if r1 == 0x110000 goto -0x35 <LBB173_51>
    6589	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6590	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    6591	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    6592	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6593	85 10 00 00 4e 00 00 00	call 0x4e ; <core::fmt::Formatter::pad_integral::write_prefix>
    6594	55 00 c5 ff 00 00 00 00	if r0 != 0x0 goto -0x3b <LBB173_51>
    6595	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    6596	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    6597	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    6598	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6599	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6600	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6601	8d 00 00 00 04 00 00 00	callx r4
    6602	55 00 bd ff 00 00 00 00	if r0 != 0x0 goto -0x43 <LBB173_51>
    6603	b7 07 00 00 00 00 00 00	r7 = 0x0
    6604	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6605	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6606	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6607	79 a9 c8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x38)

000000000000ce80 <LBB173_46>
    6608	bf 91 00 00 00 00 00 00	r1 = r9
    6609	1d 79 08 00 00 00 00 00	if r9 == r7 goto +0x8 <LBB173_49>
    6610	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6611	bf 61 00 00 00 00 00 00	r1 = r6
    6612	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6613	8d 00 00 00 03 00 00 00	callx r3
    6614	07 07 00 00 01 00 00 00	r7 += 0x1
    6615	15 00 f8 ff 00 00 00 00	if r0 == 0x0 goto -0x8 <LBB173_46>
    6616	07 07 00 00 ff ff ff ff	r7 += -0x1
    6617	bf 71 00 00 00 00 00 00	r1 = r7

000000000000ced0 <LBB173_49>
    6618	b7 07 00 00 01 00 00 00	r7 = 0x1
    6619	2d 19 ac ff 00 00 00 00	if r9 > r1 goto -0x54 <LBB173_51>

000000000000cee0 <LBB173_50>
    6620	b7 07 00 00 00 00 00 00	r7 = 0x0
    6621	05 00 aa ff 00 00 00 00	goto -0x56 <LBB173_51>

000000000000cef0 <LBB173_53>
    6622	b7 01 00 00 00 00 00 00	r1 = 0x0
    6623	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6624	bf 89 00 00 00 00 00 00	r9 = r8

000000000000cf08 <LBB173_33>
    6625	07 09 00 00 01 00 00 00	r9 += 0x1
    6626	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6627	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6628	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6629	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6630	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6631	b7 07 00 00 01 00 00 00	r7 = 0x1

000000000000cf40 <LBB173_34>
    6632	07 09 00 00 ff ff ff ff	r9 += -0x1
    6633	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB173_36>
    6634	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6635	bf 61 00 00 00 00 00 00	r1 = r6
    6636	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6637	8d 00 00 00 03 00 00 00	callx r3
    6638	55 00 99 ff 00 00 00 00	if r0 != 0x0 goto -0x67 <LBB173_51>
    6639	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB173_34>

000000000000cf80 <LBB173_36>
    6640	b7 07 00 00 01 00 00 00	r7 = 0x1
    6641	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6642	15 01 95 ff 00 00 11 00	if r1 == 0x110000 goto -0x6b <LBB173_51>
    6643	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    6644	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    6645	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    6646	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6647	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6648	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6649	8d 00 00 00 04 00 00 00	callx r4
    6650	55 00 8d ff 00 00 00 00	if r0 != 0x0 goto -0x73 <LBB173_51>
    6651	b7 09 00 00 00 00 00 00	r9 = 0x0
    6652	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6653	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6654	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)

000000000000cff8 <LBB173_39>
    6655	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    6656	1d 91 09 00 00 00 00 00	if r1 == r9 goto +0x9 <LBB173_42>
    6657	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6658	bf 61 00 00 00 00 00 00	r1 = r6
    6659	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6660	8d 00 00 00 03 00 00 00	callx r3
    6661	07 09 00 00 01 00 00 00	r9 += 0x1
    6662	15 00 f8 ff 00 00 00 00	if r0 == 0x0 goto -0x8 <LBB173_39>
    6663	07 09 00 00 ff ff ff ff	r9 += -0x1
    6664	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    6665	2d 91 7e ff 00 00 00 00	if r1 > r9 goto -0x82 <LBB173_51>

000000000000d050 <LBB173_42>
    6666	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6667	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
    6668	73 21 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r2
    6669	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    6670	63 21 34 00 00 00 00 00	*(u32 *)(r1 + 0x34) = r2
    6671	05 00 cc ff 00 00 00 00	goto -0x34 <LBB173_50>

000000000000d080 <core::fmt::Formatter::pad_integral::write_prefix>
    6672	bf 46 00 00 00 00 00 00	r6 = r4
    6673	bf 37 00 00 00 00 00 00	r7 = r3
    6674	bf 18 00 00 00 00 00 00	r8 = r1
    6675	bf 21 00 00 00 00 00 00	r1 = r2
    6676	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6677	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6678	15 01 07 00 00 00 11 00	if r1 == 0x110000 goto +0x7 <LBB174_2>
    6679	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
    6680	79 83 28 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x28)
    6681	79 33 20 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x20)
    6682	8d 00 00 00 03 00 00 00	callx r3
    6683	bf 01 00 00 00 00 00 00	r1 = r0
    6684	b7 00 00 00 01 00 00 00	r0 = 0x1
    6685	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB174_3>

000000000000d0f0 <LBB174_2>
    6686	b7 00 00 00 00 00 00 00	r0 = 0x0
    6687	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB174_4>

000000000000d100 <LBB174_3>
    6688	95 00 00 00 00 00 00 00	exit

000000000000d108 <LBB174_4>
    6689	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
    6690	79 82 28 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x28)
    6691	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6692	bf 72 00 00 00 00 00 00	r2 = r7
    6693	bf 63 00 00 00 00 00 00	r3 = r6
    6694	8d 00 00 00 04 00 00 00	callx r4
    6695	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB174_3>

000000000000d140 <core::fmt::Formatter::pad>
    6696	79 14 10 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x10)
    6697	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    6698	15 05 02 00 01 00 00 00	if r5 == 0x1 goto +0x2 <LBB175_2>
    6699	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB175_5>
    6700	05 00 65 00 00 00 00 00	goto +0x65 <LBB175_3>

000000000000d168 <LBB175_2>
    6701	15 04 01 00 01 00 00 00	if r4 == 0x1 goto +0x1 <LBB175_5>
    6702	05 00 48 00 00 00 00 00	goto +0x48 <LBB175_27>

000000000000d178 <LBB175_5>
    6703	7b 5a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r5
    6704	b7 05 00 00 00 00 00 00	r5 = 0x0
    6705	bf 24 00 00 00 00 00 00	r4 = r2
    6706	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    6707	0f 34 00 00 00 00 00 00	r4 += r3
    6708	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    6709	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    6710	bf 28 00 00 00 00 00 00	r8 = r2
    6711	15 03 28 00 00 00 00 00	if r3 == 0x0 goto +0x28 <LBB175_13>
    6712	b7 05 00 00 00 00 00 00	r5 = 0x0
    6713	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    6714	b7 07 00 00 00 00 00 00	r7 = 0x0

000000000000d1d8 <LBB175_7>
    6715	bf 89 00 00 00 00 00 00	r9 = r8
    6716	1d 49 35 00 00 00 00 00	if r9 == r4 goto +0x35 <LBB175_16>
    6717	bf 98 00 00 00 00 00 00	r8 = r9
    6718	07 08 00 00 01 00 00 00	r8 += 0x1
    6719	71 90 00 00 00 00 00 00	r0 = *(u8 *)(r9 + 0x0)
    6720	bf 06 00 00 00 00 00 00	r6 = r0
    6721	67 06 00 00 38 00 00 00	r6 <<= 0x38
    6722	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    6723	65 06 18 00 ff ff ff ff	if r6 s> -0x1 goto +0x18 <LBB175_12>
    6724	bf 98 00 00 00 00 00 00	r8 = r9
    6725	07 08 00 00 02 00 00 00	r8 += 0x2
    6726	b7 02 00 00 e0 00 00 00	r2 = 0xe0
    6727	2d 02 14 00 00 00 00 00	if r2 > r0 goto +0x14 <LBB175_12>
    6728	bf 98 00 00 00 00 00 00	r8 = r9
    6729	07 08 00 00 03 00 00 00	r8 += 0x3
    6730	b7 02 00 00 f0 00 00 00	r2 = 0xf0
    6731	2d 02 10 00 00 00 00 00	if r2 > r0 goto +0x10 <LBB175_12>
    6732	71 96 01 00 00 00 00 00	r6 = *(u8 *)(r9 + 0x1)
    6733	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    6734	67 06 00 00 0c 00 00 00	r6 <<= 0xc
    6735	71 92 02 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x2)
    6736	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6737	67 02 00 00 06 00 00 00	r2 <<= 0x6
    6738	4f 62 00 00 00 00 00 00	r2 |= r6
    6739	71 96 03 00 00 00 00 00	r6 = *(u8 *)(r9 + 0x3)
    6740	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    6741	4f 62 00 00 00 00 00 00	r2 |= r6
    6742	67 00 00 00 12 00 00 00	r0 <<= 0x12
    6743	57 00 00 00 00 00 1c 00	r0 &= 0x1c0000
    6744	4f 02 00 00 00 00 00 00	r2 |= r0
    6745	bf 98 00 00 00 00 00 00	r8 = r9
    6746	07 08 00 00 04 00 00 00	r8 += 0x4
    6747	15 02 16 00 00 00 11 00	if r2 == 0x110000 goto +0x16 <LBB175_16>

000000000000d2e0 <LBB175_12>
    6748	07 07 00 00 01 00 00 00	r7 += 0x1
    6749	1f 95 00 00 00 00 00 00	r5 -= r9
    6750	0f 85 00 00 00 00 00 00	r5 += r8
    6751	2d 73 db ff 00 00 00 00	if r3 > r7 goto -0x25 <LBB175_7>

000000000000d300 <LBB175_13>
    6752	1d 48 11 00 00 00 00 00	if r8 == r4 goto +0x11 <LBB175_16>
    6753	71 84 00 00 00 00 00 00	r4 = *(u8 *)(r8 + 0x0)
    6754	b7 02 00 00 f0 00 00 00	r2 = 0xf0
    6755	2d 42 42 00 00 00 00 00	if r2 > r4 goto +0x42 <LBB175_17>
    6756	71 82 01 00 00 00 00 00	r2 = *(u8 *)(r8 + 0x1)
    6757	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6758	67 02 00 00 0c 00 00 00	r2 <<= 0xc
    6759	71 83 02 00 00 00 00 00	r3 = *(u8 *)(r8 + 0x2)
    6760	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    6761	67 03 00 00 06 00 00 00	r3 <<= 0x6
    6762	4f 23 00 00 00 00 00 00	r3 |= r2
    6763	71 82 03 00 00 00 00 00	r2 = *(u8 *)(r8 + 0x3)
    6764	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6765	4f 23 00 00 00 00 00 00	r3 |= r2
    6766	67 04 00 00 12 00 00 00	r4 <<= 0x12
    6767	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    6768	4f 43 00 00 00 00 00 00	r3 |= r4
    6769	55 03 34 00 00 00 11 00	if r3 != 0x110000 goto +0x34 <LBB175_17>

000000000000d390 <LBB175_16>
    6770	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6771	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    6772	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    6773	15 04 01 00 01 00 00 00	if r4 == 0x1 goto +0x1 <LBB175_27>
    6774	05 00 1b 00 00 00 00 00	goto +0x1b <LBB175_3>

000000000000d3b8 <LBB175_27>
    6775	b7 08 00 00 00 00 00 00	r8 = 0x0
    6776	79 19 08 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x8)
    6777	15 03 08 00 00 00 00 00	if r3 == 0x0 goto +0x8 <LBB175_32>
    6778	b7 08 00 00 00 00 00 00	r8 = 0x0
    6779	bf 34 00 00 00 00 00 00	r4 = r3
    6780	bf 25 00 00 00 00 00 00	r5 = r2
    6781	05 00 0d 00 00 00 00 00	goto +0xd <LBB175_29>

000000000000d3f0 <LBB175_31>
    6782	0f 08 00 00 00 00 00 00	r8 += r0
    6783	07 05 00 00 01 00 00 00	r5 += 0x1
    6784	07 04 00 00 ff ff ff ff	r4 += -0x1
    6785	55 04 09 00 00 00 00 00	if r4 != 0x0 goto +0x9 <LBB175_29>

000000000000d410 <LBB175_32>
    6786	3d 98 0f 00 00 00 00 00	if r8 >= r9 goto +0xf <LBB175_3>
    6787	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    6788	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    6789	71 15 38 00 00 00 00 00	r5 = *(u8 *)(r1 + 0x38)
    6790	b7 07 00 00 00 00 00 00	r7 = 0x0
    6791	b7 04 00 00 00 00 00 00	r4 = 0x0
    6792	15 05 12 00 03 00 00 00	if r5 == 0x3 goto +0x12 <LBB175_35>
    6793	bf 54 00 00 00 00 00 00	r4 = r5
    6794	05 00 10 00 00 00 00 00	goto +0x10 <LBB175_35>

000000000000d458 <LBB175_29>
    6795	71 56 00 00 00 00 00 00	r6 = *(u8 *)(r5 + 0x0)
    6796	67 06 00 00 38 00 00 00	r6 <<= 0x38
    6797	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    6798	b7 00 00 00 01 00 00 00	r0 = 0x1
    6799	65 06 ee ff bf ff ff ff	if r6 s> -0x41 goto -0x12 <LBB175_31>
    6800	b7 00 00 00 00 00 00 00	r0 = 0x0
    6801	05 00 ec ff 00 00 00 00	goto -0x14 <LBB175_31>

000000000000d490 <LBB175_3>
    6802	79 15 20 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x20)
    6803	79 11 28 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x28)
    6804	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6805	bf 51 00 00 00 00 00 00	r1 = r5
    6806	8d 00 00 00 04 00 00 00	callx r4
    6807	bf 06 00 00 00 00 00 00	r6 = r0

000000000000d4c0 <LBB175_4>
    6808	57 06 00 00 01 00 00 00	r6 &= 0x1
    6809	bf 60 00 00 00 00 00 00	r0 = r6
    6810	95 00 00 00 00 00 00 00	exit

000000000000d4d8 <LBB175_35>
    6811	1f 89 00 00 00 00 00 00	r9 -= r8
    6812	57 04 00 00 03 00 00 00	r4 &= 0x3
    6813	7b 9a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r9
    6814	15 04 13 00 00 00 00 00	if r4 == 0x0 goto +0x13 <LBB175_38>
    6815	15 04 0f 00 01 00 00 00	if r4 == 0x1 goto +0xf <LBB175_49>
    6816	bf 97 00 00 00 00 00 00	r7 = r9
    6817	77 07 00 00 01 00 00 00	r7 >>= 0x1
    6818	07 09 00 00 01 00 00 00	r9 += 0x1
    6819	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6820	7b 9a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r9
    6821	05 00 0c 00 00 00 00 00	goto +0xc <LBB175_38>

000000000000d530 <LBB175_17>
    6822	b7 03 00 00 00 00 00 00	r3 = 0x0
    6823	79 a6 e8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x18)
    6824	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)
    6825	15 05 3b 00 00 00 00 00	if r5 == 0x0 goto +0x3b <LBB175_21>
    6826	2d 56 31 00 00 00 00 00	if r6 > r5 goto +0x31 <LBB175_20>
    6827	b7 04 00 00 00 00 00 00	r4 = 0x0
    6828	bf 63 00 00 00 00 00 00	r3 = r6
    6829	1d 65 37 00 00 00 00 00	if r5 == r6 goto +0x37 <LBB175_21>
    6830	05 00 38 00 00 00 00 00	goto +0x38 <LBB175_22>

000000000000d578 <LBB175_49>
    6831	b7 02 00 00 00 00 00 00	r2 = 0x0
    6832	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6833	bf 97 00 00 00 00 00 00	r7 = r9

000000000000d590 <LBB175_38>
    6834	07 07 00 00 01 00 00 00	r7 += 0x1
    6835	61 18 34 00 00 00 00 00	r8 = *(u32 *)(r1 + 0x34)
    6836	79 12 28 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x28)
    6837	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6838	79 19 20 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x20)
    6839	b7 06 00 00 01 00 00 00	r6 = 0x1

000000000000d5c0 <LBB175_39>
    6840	07 07 00 00 ff ff ff ff	r7 += -0x1
    6841	15 07 07 00 00 00 00 00	if r7 == 0x0 goto +0x7 <LBB175_41>
    6842	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6843	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6844	bf 91 00 00 00 00 00 00	r1 = r9
    6845	bf 82 00 00 00 00 00 00	r2 = r8
    6846	8d 00 00 00 03 00 00 00	callx r3
    6847	55 00 d8 ff 00 00 00 00	if r0 != 0x0 goto -0x28 <LBB175_4>
    6848	05 00 f7 ff 00 00 00 00	goto -0x9 <LBB175_39>

000000000000d608 <LBB175_41>
    6849	b7 06 00 00 01 00 00 00	r6 = 0x1
    6850	bf 81 00 00 00 00 00 00	r1 = r8
    6851	15 01 d4 ff 00 00 11 00	if r1 == 0x110000 goto -0x2c <LBB175_4>
    6852	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6853	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6854	bf 91 00 00 00 00 00 00	r1 = r9
    6855	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    6856	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6857	8d 00 00 00 04 00 00 00	callx r4
    6858	55 00 cd ff 00 00 00 00	if r0 != 0x0 goto -0x33 <LBB175_4>
    6859	b7 06 00 00 00 00 00 00	r6 = 0x0
    6860	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x20)

000000000000d668 <LBB175_44>
    6861	bf 71 00 00 00 00 00 00	r1 = r7
    6862	1d 67 09 00 00 00 00 00	if r7 == r6 goto +0x9 <LBB175_47>
    6863	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6864	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6865	bf 91 00 00 00 00 00 00	r1 = r9
    6866	bf 82 00 00 00 00 00 00	r2 = r8
    6867	8d 00 00 00 03 00 00 00	callx r3
    6868	07 06 00 00 01 00 00 00	r6 += 0x1
    6869	15 00 f7 ff 00 00 00 00	if r0 == 0x0 goto -0x9 <LBB175_44>
    6870	07 06 00 00 ff ff ff ff	r6 += -0x1
    6871	bf 61 00 00 00 00 00 00	r1 = r6

000000000000d6c0 <LBB175_47>
    6872	b7 06 00 00 01 00 00 00	r6 = 0x1
    6873	2d 17 be ff 00 00 00 00	if r7 > r1 goto -0x42 <LBB175_4>
    6874	b7 06 00 00 00 00 00 00	r6 = 0x0
    6875	05 00 bc ff 00 00 00 00	goto -0x44 <LBB175_4>

000000000000d6e0 <LBB175_20>
    6876	bf 72 00 00 00 00 00 00	r2 = r7
    6877	0f 52 00 00 00 00 00 00	r2 += r5
    6878	b7 04 00 00 00 00 00 00	r4 = 0x0
    6879	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    6880	67 02 00 00 38 00 00 00	r2 <<= 0x38
    6881	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    6882	b7 00 00 00 c0 ff ff ff	r0 = -0x40
    6883	bf 53 00 00 00 00 00 00	r3 = r5
    6884	6d 20 02 00 00 00 00 00	if r0 s> r2 goto +0x2 <LBB175_22>

000000000000d728 <LBB175_21>
    6885	bf 35 00 00 00 00 00 00	r5 = r3
    6886	bf 74 00 00 00 00 00 00	r4 = r7

000000000000d738 <LBB175_22>
    6887	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB175_24>
    6888	bf 56 00 00 00 00 00 00	r6 = r5

000000000000d748 <LBB175_24>
    6889	7b 6a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r6
    6890	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB175_26>
    6891	bf 47 00 00 00 00 00 00	r7 = r4

000000000000d760 <LBB175_26>
    6892	7b 7a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r7
    6893	05 00 84 ff 00 00 00 00	goto -0x7c <LBB175_16>

000000000000d770 <<core::fmt::Formatter as core::fmt::Write>::write_str>
    6894	79 14 20 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x20)
    6895	79 11 28 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x28)
    6896	79 15 18 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x18)
    6897	bf 41 00 00 00 00 00 00	r1 = r4
    6898	8d 00 00 00 05 00 00 00	callx r5
    6899	95 00 00 00 00 00 00 00	exit

000000000000d7a0 <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    6900	79 16 28 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x28)
    6901	79 17 20 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x20)
    6902	bf a8 00 00 00 00 00 00	r8 = r10
    6903	07 08 00 00 d0 ff ff ff	r8 += -0x30
    6904	bf 81 00 00 00 00 00 00	r1 = r8
    6905	b7 03 00 00 30 00 00 00	r3 = 0x30
    6906	85 10 00 00 ce 07 00 00	call 0x7ce ; <memcpy>
    6907	bf 71 00 00 00 00 00 00	r1 = r7
    6908	bf 62 00 00 00 00 00 00	r2 = r6
    6909	bf 83 00 00 00 00 00 00	r3 = r8
    6910	85 10 00 00 9d fd ff ff	call -0x263 ; <core::fmt::write>
    6911	95 00 00 00 00 00 00 00	exit

000000000000d800 <core::fmt::Formatter::debug_lower_hex>
    6912	61 10 30 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x30)
    6913	57 00 00 00 10 00 00 00	r0 &= 0x10
    6914	77 00 00 00 04 00 00 00	r0 >>= 0x4
    6915	95 00 00 00 00 00 00 00	exit

000000000000d820 <core::fmt::Formatter::debug_upper_hex>
    6916	61 10 30 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x30)
    6917	57 00 00 00 20 00 00 00	r0 &= 0x20
    6918	77 00 00 00 05 00 00 00	r0 >>= 0x5
    6919	95 00 00 00 00 00 00 00	exit

000000000000d840 <<str as core::fmt::Debug>::fmt>
    6920	bf 28 00 00 00 00 00 00	r8 = r2
    6921	bf 16 00 00 00 00 00 00	r6 = r1
    6922	79 37 20 00 00 00 00 00	r7 = *(u64 *)(r3 + 0x20)
    6923	79 31 28 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x28)
    6924	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6925	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6926	bf 71 00 00 00 00 00 00	r1 = r7
    6927	b7 02 00 00 22 00 00 00	r2 = 0x22
    6928	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    6929	8d 00 00 00 03 00 00 00	callx r3
    6930	b7 01 00 00 01 00 00 00	r1 = 0x1
    6931	55 00 37 01 00 00 00 00	if r0 != 0x0 goto +0x137 <LBB201_61>
    6932	b7 01 00 00 00 00 00 00	r1 = 0x0
    6933	15 08 26 01 00 00 00 00	if r8 == 0x0 goto +0x126 <LBB201_12>
    6934	bf 61 00 00 00 00 00 00	r1 = r6
    6935	7b 8a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r8
    6936	0f 81 00 00 00 00 00 00	r1 += r8
    6937	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    6938	b7 01 00 00 00 00 00 00	r1 = 0x0
    6939	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6940	bf 68 00 00 00 00 00 00	r8 = r6
    6941	bf 60 00 00 00 00 00 00	r0 = r6
    6942	b7 01 00 00 00 00 00 00	r1 = 0x0
    6943	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6944	7b 8a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r8

000000000000d908 <LBB201_3>
    6945	bf 01 00 00 00 00 00 00	r1 = r0
    6946	71 13 00 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x0)
    6947	bf 32 00 00 00 00 00 00	r2 = r3
    6948	67 02 00 00 38 00 00 00	r2 <<= 0x38
    6949	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    6950	65 02 2b 00 ff ff ff ff	if r2 s> -0x1 goto +0x2b <LBB201_13>
    6951	bf 16 00 00 00 00 00 00	r6 = r1
    6952	07 06 00 00 02 00 00 00	r6 += 0x2
    6953	71 19 01 00 00 00 00 00	r9 = *(u8 *)(r1 + 0x1)
    6954	57 09 00 00 3f 00 00 00	r9 &= 0x3f
    6955	bf 34 00 00 00 00 00 00	r4 = r3
    6956	57 04 00 00 1f 00 00 00	r4 &= 0x1f
    6957	bf 42 00 00 00 00 00 00	r2 = r4
    6958	67 02 00 00 06 00 00 00	r2 <<= 0x6
    6959	4f 92 00 00 00 00 00 00	r2 |= r9
    6960	25 03 01 00 df 00 00 00	if r3 > 0xdf goto +0x1 <LBB201_5>
    6961	05 00 23 00 00 00 00 00	goto +0x23 <LBB201_14>

000000000000d990 <LBB201_5>
    6962	67 09 00 00 06 00 00 00	r9 <<= 0x6
    6963	71 15 02 00 00 00 00 00	r5 = *(u8 *)(r1 + 0x2)
    6964	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    6965	4f 59 00 00 00 00 00 00	r9 |= r5
    6966	bf 16 00 00 00 00 00 00	r6 = r1
    6967	07 06 00 00 03 00 00 00	r6 += 0x3
    6968	bf 45 00 00 00 00 00 00	r5 = r4
    6969	67 05 00 00 0c 00 00 00	r5 <<= 0xc
    6970	bf 92 00 00 00 00 00 00	r2 = r9
    6971	4f 52 00 00 00 00 00 00	r2 |= r5
    6972	b7 05 00 00 f0 00 00 00	r5 = 0xf0
    6973	2d 35 17 00 00 00 00 00	if r5 > r3 goto +0x17 <LBB201_14>
    6974	67 09 00 00 06 00 00 00	r9 <<= 0x6
    6975	71 13 03 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x3)
    6976	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    6977	4f 39 00 00 00 00 00 00	r9 |= r3
    6978	67 04 00 00 12 00 00 00	r4 <<= 0x12
    6979	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    6980	4f 49 00 00 00 00 00 00	r9 |= r4
    6981	07 01 00 00 04 00 00 00	r1 += 0x4
    6982	bf 16 00 00 00 00 00 00	r6 = r1
    6983	bf 92 00 00 00 00 00 00	r2 = r9
    6984	55 09 0c 00 00 00 11 00	if r9 != 0x110000 goto +0xc <LBB201_14>

000000000000da48 <LBB201_7>
    6985	b7 01 00 00 00 00 00 00	r1 = 0x0
    6986	bf 86 00 00 00 00 00 00	r6 = r8
    6987	79 a8 a8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x58)
    6988	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    6989	15 03 ee 00 00 00 00 00	if r3 == 0x0 goto +0xee <LBB201_12>
    6990	2d 38 df 00 00 00 00 00	if r8 > r3 goto +0xdf <LBB201_10>
    6991	bf 31 00 00 00 00 00 00	r1 = r3
    6992	1d 83 eb 00 00 00 00 00	if r3 == r8 goto +0xeb <LBB201_12>
    6993	05 00 e3 00 00 00 00 00	goto +0xe3 <LBB201_11>

000000000000da90 <LBB201_13>
    6994	07 01 00 00 01 00 00 00	r1 += 0x1
    6995	bf 16 00 00 00 00 00 00	r6 = r1
    6996	bf 32 00 00 00 00 00 00	r2 = r3

000000000000daa8 <LBB201_14>
    6997	7b 6a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r6
    6998	7b 0a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r0
    6999	bf a1 00 00 00 00 00 00	r1 = r10
    7000	07 01 00 00 e8 ff ff ff	r1 += -0x18
    7001	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    7002	b7 03 00 00 01 00 01 00	r3 = 0x10001
    7003	85 10 00 00 b6 fb ff ff	call -0x44a ; <core::char::methods::<impl char>::escape_debug_ext>
    7004	61 a6 e8 ff 00 00 00 00	r6 = *(u32 *)(r10 - 0x18)
    7005	65 06 0a 00 01 00 00 00	if r6 s> 0x1 goto +0xa <LBB201_17>
    7006	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7007	15 06 1d 00 00 00 00 00	if r6 == 0x0 goto +0x1d <LBB201_29>

000000000000db00 <LBB201_16>
    7008	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    7009	1f 13 00 00 00 00 00 00	r3 -= r1
    7010	79 a0 b8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x48)
    7011	0f 03 00 00 00 00 00 00	r3 += r0
    7012	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    7013	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    7014	1d 10 e2 ff 00 00 00 00	if r0 == r1 goto -0x1e <LBB201_7>
    7015	05 00 b9 ff 00 00 00 00	goto -0x47 <LBB201_3>

000000000000db40 <LBB201_17>
    7016	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7017	15 06 13 00 02 00 00 00	if r6 == 0x2 goto +0x13 <LBB201_29>
    7018	71 a2 fc ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x4)
    7019	65 02 05 00 02 00 00 00	if r2 s> 0x2 goto +0x5 <LBB201_22>
    7020	b7 01 00 00 00 00 00 00	r1 = 0x0
    7021	15 02 0c 00 00 00 00 00	if r2 == 0x0 goto +0xc <LBB201_28>
    7022	15 02 06 00 01 00 00 00	if r2 == 0x1 goto +0x6 <LBB201_25>
    7023	b7 01 00 00 02 00 00 00	r1 = 0x2
    7024	05 00 09 00 00 00 00 00	goto +0x9 <LBB201_28>

000000000000db88 <LBB201_22>
    7025	15 02 05 00 03 00 00 00	if r2 == 0x3 goto +0x5 <LBB201_26>
    7026	15 02 06 00 04 00 00 00	if r2 == 0x4 goto +0x6 <LBB201_27>
    7027	b7 01 00 00 05 00 00 00	r1 = 0x5
    7028	05 00 05 00 00 00 00 00	goto +0x5 <LBB201_28>

000000000000dba8 <LBB201_25>
    7029	b7 01 00 00 01 00 00 00	r1 = 0x1
    7030	05 00 03 00 00 00 00 00	goto +0x3 <LBB201_28>

000000000000dbb8 <LBB201_26>
    7031	b7 01 00 00 03 00 00 00	r1 = 0x3
    7032	05 00 01 00 00 00 00 00	goto +0x1 <LBB201_28>

000000000000dbc8 <LBB201_27>
    7033	b7 01 00 00 04 00 00 00	r1 = 0x4

000000000000dbd0 <LBB201_28>
    7034	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    7035	0f 21 00 00 00 00 00 00	r1 += r2
    7036	15 01 e3 ff 01 00 00 00	if r1 == 0x1 goto -0x1d <LBB201_16>

000000000000dbe8 <LBB201_29>
    7037	79 a5 a8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x58)
    7038	79 a0 d8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x28)
    7039	2d 30 5f 00 00 00 00 00	if r0 > r3 goto +0x5f <LBB201_38>
    7040	15 00 0a 00 00 00 00 00	if r0 == 0x0 goto +0xa <LBB201_34>
    7041	2d 05 02 00 00 00 00 00	if r5 > r0 goto +0x2 <LBB201_33>
    7042	1d 50 08 00 00 00 00 00	if r0 == r5 goto +0x8 <LBB201_34>
    7043	05 00 5b 00 00 00 00 00	goto +0x5b <LBB201_38>

000000000000dc20 <LBB201_33>
    7044	bf 81 00 00 00 00 00 00	r1 = r8
    7045	0f 01 00 00 00 00 00 00	r1 += r0
    7046	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    7047	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7048	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7049	b7 02 00 00 c0 ff ff ff	r2 = -0x40
    7050	6d 12 54 00 00 00 00 00	if r2 s> r1 goto +0x54 <LBB201_38>

000000000000dc58 <LBB201_34>
    7051	15 03 03 00 00 00 00 00	if r3 == 0x0 goto +0x3 <LBB201_39>
    7052	2d 35 4c 00 00 00 00 00	if r5 > r3 goto +0x4c <LBB201_37>
    7053	1d 53 01 00 00 00 00 00	if r3 == r5 goto +0x1 <LBB201_39>
    7054	05 00 50 00 00 00 00 00	goto +0x50 <LBB201_38>

000000000000dc78 <LBB201_39>
    7055	0f 08 00 00 00 00 00 00	r8 += r0
    7056	1f 03 00 00 00 00 00 00	r3 -= r0
    7057	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    7058	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    7059	bf 71 00 00 00 00 00 00	r1 = r7
    7060	bf 82 00 00 00 00 00 00	r2 = r8
    7061	8d 00 00 00 04 00 00 00	callx r4
    7062	55 00 57 00 00 00 00 00	if r0 != 0x0 goto +0x57 <LBB201_60>
    7063	71 a9 fc ff 00 00 00 00	r9 = *(u8 *)(r10 - 0x4)
    7064	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x8)
    7065	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7066	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    7067	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x14)
    7068	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7069	15 01 52 00 00 00 11 00	if r1 == 0x110000 goto +0x52 <LBB201_42>

000000000000dcf0 <LBB201_41>
    7070	bf 81 00 00 00 00 00 00	r1 = r8
    7071	67 06 00 00 20 00 00 00	r6 <<= 0x20
    7072	bf 63 00 00 00 00 00 00	r3 = r6
    7073	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7074	65 03 01 00 01 00 00 00	if r3 s> 0x1 goto +0x1 <LBB201_64>
    7075	05 00 0e 00 00 00 00 00	goto +0xe <LBB201_62>

000000000000dd20 <LBB201_64>
    7076	b7 06 00 00 01 00 00 00	r6 = 0x1
    7077	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7078	bf 18 00 00 00 00 00 00	r8 = r1
    7079	15 03 0f 00 02 00 00 00	if r3 == 0x2 goto +0xf <LBB201_84>
    7080	b7 06 00 00 03 00 00 00	r6 = 0x3
    7081	bf 93 00 00 00 00 00 00	r3 = r9
    7082	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7083	65 03 10 00 02 00 00 00	if r3 s> 0x2 goto +0x10 <LBB201_69>
    7084	b7 09 00 00 00 00 00 00	r9 = 0x0
    7085	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7086	bf 18 00 00 00 00 00 00	r8 = r1
    7087	15 03 07 00 01 00 00 00	if r3 == 0x1 goto +0x7 <LBB201_84>
    7088	15 03 0f 00 02 00 00 00	if r3 == 0x2 goto +0xf <LBB201_72>
    7089	05 00 46 00 00 00 00 00	goto +0x46 <LBB201_44>

000000000000dd90 <LBB201_62>
    7090	15 03 01 00 01 00 00 00	if r3 == 0x1 goto +0x1 <LBB201_77>
    7091	05 00 44 00 00 00 00 00	goto +0x44 <LBB201_44>

000000000000dda0 <LBB201_77>
    7092	b7 06 00 00 00 00 00 00	r6 = 0x0
    7093	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)

000000000000ddb0 <LBB201_83>
    7094	bf 18 00 00 00 00 00 00	r8 = r1

000000000000ddb8 <LBB201_84>
    7095	bf 71 00 00 00 00 00 00	r1 = r7
    7096	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7097	8d 00 00 00 03 00 00 00	callx r3
    7098	55 00 33 00 00 00 00 00	if r0 != 0x0 goto +0x33 <LBB201_60>
    7099	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB201_41>

000000000000dde0 <LBB201_69>
    7100	15 03 14 00 03 00 00 00	if r3 == 0x3 goto +0x14 <LBB201_82>
    7101	15 03 16 00 04 00 00 00	if r3 == 0x4 goto +0x16 <LBB201_75>
    7102	b7 09 00 00 04 00 00 00	r9 = 0x4
    7103	05 00 f6 ff 00 00 00 00	goto -0xa <LBB201_83>

000000000000de00 <LBB201_72>
    7104	bf 12 00 00 00 00 00 00	r2 = r1
    7105	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7106	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7107	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    7108	7f 23 00 00 00 00 00 00	r3 >>= r2
    7109	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7110	b7 02 00 00 30 00 00 00	r2 = 0x30
    7111	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7112	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB201_74>
    7113	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000de50 <LBB201_74>
    7114	0f 32 00 00 00 00 00 00	r2 += r3
    7115	b7 08 00 00 00 00 00 00	r8 = 0x0
    7116	b7 09 00 00 01 00 00 00	r9 = 0x1
    7117	15 01 e9 ff 00 00 00 00	if r1 == 0x0 goto -0x17 <LBB201_84>
    7118	b7 09 00 00 02 00 00 00	r9 = 0x2
    7119	07 01 00 00 ff ff ff ff	r1 += -0x1
    7120	05 00 e5 ff 00 00 00 00	goto -0x1b <LBB201_83>

000000000000de88 <LBB201_82>
    7121	b7 09 00 00 02 00 00 00	r9 = 0x2
    7122	b7 02 00 00 7b 00 00 00	r2 = 0x7b
    7123	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB201_83>

000000000000dea0 <LBB201_75>
    7124	b7 09 00 00 03 00 00 00	r9 = 0x3
    7125	b7 02 00 00 75 00 00 00	r2 = 0x75
    7126	bf 18 00 00 00 00 00 00	r8 = r1
    7127	b7 06 00 00 03 00 00 00	r6 = 0x3
    7128	05 00 de ff 00 00 00 00	goto -0x22 <LBB201_84>

000000000000dec8 <LBB201_37>
    7129	bf 81 00 00 00 00 00 00	r1 = r8
    7130	0f 31 00 00 00 00 00 00	r1 += r3
    7131	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    7132	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7133	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7134	65 01 b0 ff bf ff ff ff	if r1 s> -0x41 goto -0x50 <LBB201_39>

000000000000def8 <LBB201_38>
    7135	bf 81 00 00 00 00 00 00	r1 = r8
    7136	bf 52 00 00 00 00 00 00	r2 = r5
    7137	bf 34 00 00 00 00 00 00	r4 = r3
    7138	bf 03 00 00 00 00 00 00	r3 = r0
    7139	18 05 00 00 f8 3e 01 00 00 00 00 00 00 00 00 00	r5 = 0x13ef8 ll
    7141	85 10 00 00 4f 01 00 00	call 0x14f ; <core::str::slice_error_fail>
    7142	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000df38 <LBB201_53>
    7143	b7 09 00 00 02 00 00 00	r9 = 0x2
    7144	b7 02 00 00 7b 00 00 00	r2 = 0x7b

000000000000df48 <LBB201_58>
    7145	bf 18 00 00 00 00 00 00	r8 = r1

000000000000df50 <LBB201_59>
    7146	bf 71 00 00 00 00 00 00	r1 = r7
    7147	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7148	8d 00 00 00 03 00 00 00	callx r3
    7149	15 00 02 00 00 00 00 00	if r0 == 0x0 goto +0x2 <LBB201_42>

000000000000df70 <LBB201_60>
    7150	b7 01 00 00 01 00 00 00	r1 = 0x1
    7151	05 00 5b 00 00 00 00 00	goto +0x5b <LBB201_61>

000000000000df80 <LBB201_42>
    7152	bf 81 00 00 00 00 00 00	r1 = r8
    7153	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7154	67 06 00 00 20 00 00 00	r6 <<= 0x20
    7155	bf 63 00 00 00 00 00 00	r3 = r6
    7156	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7157	b7 06 00 00 01 00 00 00	r6 = 0x1
    7158	15 03 f3 ff 02 00 00 00	if r3 == 0x2 goto -0xd <LBB201_59>
    7159	15 03 08 00 03 00 00 00	if r3 == 0x3 goto +0x8 <LBB201_45>

000000000000dfc0 <LBB201_44>
    7160	79 a5 a8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x58)
    7161	79 a8 90 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x70)
    7162	b7 00 00 00 01 00 00 00	r0 = 0x1
    7163	b7 01 00 00 80 00 00 00	r1 = 0x80
    7164	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7165	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
    7166	2d 21 2c 00 00 00 00 00	if r1 > r2 goto +0x2c <LBB201_81>
    7167	05 00 24 00 00 00 00 00	goto +0x24 <LBB201_78>

000000000000e000 <LBB201_45>
    7168	b7 06 00 00 03 00 00 00	r6 = 0x3
    7169	bf 93 00 00 00 00 00 00	r3 = r9
    7170	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7171	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB201_49>
    7172	b7 09 00 00 00 00 00 00	r9 = 0x0
    7173	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7174	bf 18 00 00 00 00 00 00	r8 = r1
    7175	15 03 e2 ff 01 00 00 00	if r3 == 0x1 goto -0x1e <LBB201_59>
    7176	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB201_54>
    7177	05 00 ee ff 00 00 00 00	goto -0x12 <LBB201_44>

000000000000e050 <LBB201_49>
    7178	15 03 dc ff 03 00 00 00	if r3 == 0x3 goto -0x24 <LBB201_53>
    7179	15 03 13 00 04 00 00 00	if r3 == 0x4 goto +0x13 <LBB201_52>
    7180	b7 09 00 00 04 00 00 00	r9 = 0x4
    7181	05 00 db ff 00 00 00 00	goto -0x25 <LBB201_58>

000000000000e070 <LBB201_54>
    7182	bf 12 00 00 00 00 00 00	r2 = r1
    7183	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7184	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7185	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    7186	7f 23 00 00 00 00 00 00	r3 >>= r2
    7187	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7188	b7 02 00 00 30 00 00 00	r2 = 0x30
    7189	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7190	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB201_56>
    7191	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e0c0 <LBB201_56>
    7192	0f 32 00 00 00 00 00 00	r2 += r3
    7193	b7 08 00 00 00 00 00 00	r8 = 0x0
    7194	b7 09 00 00 01 00 00 00	r9 = 0x1
    7195	15 01 ce ff 00 00 00 00	if r1 == 0x0 goto -0x32 <LBB201_59>
    7196	b7 09 00 00 02 00 00 00	r9 = 0x2
    7197	07 01 00 00 ff ff ff ff	r1 += -0x1
    7198	05 00 ca ff 00 00 00 00	goto -0x36 <LBB201_58>

000000000000e0f8 <LBB201_52>
    7199	b7 09 00 00 03 00 00 00	r9 = 0x3
    7200	b7 02 00 00 75 00 00 00	r2 = 0x75
    7201	bf 18 00 00 00 00 00 00	r8 = r1
    7202	b7 06 00 00 03 00 00 00	r6 = 0x3
    7203	05 00 c6 ff 00 00 00 00	goto -0x3a <LBB201_59>

000000000000e120 <LBB201_78>
    7204	b7 00 00 00 02 00 00 00	r0 = 0x2
    7205	b7 01 00 00 00 08 00 00	r1 = 0x800
    7206	2d 21 04 00 00 00 00 00	if r1 > r2 goto +0x4 <LBB201_81>
    7207	b7 00 00 00 03 00 00 00	r0 = 0x3
    7208	b7 01 00 00 00 00 01 00	r1 = 0x10000
    7209	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB201_81>
    7210	b7 00 00 00 04 00 00 00	r0 = 0x4

000000000000e158 <LBB201_81>
    7211	0f 30 00 00 00 00 00 00	r0 += r3
    7212	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r0
    7213	05 00 32 ff 00 00 00 00	goto -0xce <LBB201_16>

000000000000e170 <LBB201_10>
    7214	bf 61 00 00 00 00 00 00	r1 = r6
    7215	0f 31 00 00 00 00 00 00	r1 += r3
    7216	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    7217	67 02 00 00 38 00 00 00	r2 <<= 0x38
    7218	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    7219	bf 31 00 00 00 00 00 00	r1 = r3
    7220	65 02 07 00 bf ff ff ff	if r2 s> -0x41 goto +0x7 <LBB201_12>

000000000000e1a8 <LBB201_11>
    7221	bf 61 00 00 00 00 00 00	r1 = r6
    7222	bf 82 00 00 00 00 00 00	r2 = r8
    7223	bf 84 00 00 00 00 00 00	r4 = r8
    7224	18 05 00 00 10 3f 01 00 00 00 00 00 00 00 00 00	r5 = 0x13f10 ll
    7226	85 10 00 00 fa 00 00 00	call 0xfa ; <core::str::slice_error_fail>
    7227	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e1e0 <LBB201_12>
    7228	0f 16 00 00 00 00 00 00	r6 += r1
    7229	1f 18 00 00 00 00 00 00	r8 -= r1
    7230	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    7231	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    7232	bf 71 00 00 00 00 00 00	r1 = r7
    7233	bf 62 00 00 00 00 00 00	r2 = r6
    7234	bf 83 00 00 00 00 00 00	r3 = r8
    7235	8d 00 00 00 04 00 00 00	callx r4
    7236	b7 01 00 00 01 00 00 00	r1 = 0x1
    7237	55 00 05 00 00 00 00 00	if r0 != 0x0 goto +0x5 <LBB201_61>
    7238	bf 71 00 00 00 00 00 00	r1 = r7
    7239	b7 02 00 00 22 00 00 00	r2 = 0x22
    7240	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7241	8d 00 00 00 03 00 00 00	callx r3
    7242	bf 01 00 00 00 00 00 00	r1 = r0

000000000000e258 <LBB201_61>
    7243	bf 10 00 00 00 00 00 00	r0 = r1
    7244	95 00 00 00 00 00 00 00	exit

000000000000e268 <<str as core::fmt::Display>::fmt>
    7245	bf 24 00 00 00 00 00 00	r4 = r2
    7246	bf 12 00 00 00 00 00 00	r2 = r1
    7247	bf 31 00 00 00 00 00 00	r1 = r3
    7248	bf 43 00 00 00 00 00 00	r3 = r4
    7249	85 10 00 00 d6 fd ff ff	call -0x22a ; <core::fmt::Formatter::pad>
    7250	95 00 00 00 00 00 00 00	exit

000000000000e298 <<char as core::fmt::Debug>::fmt>
    7251	bf 18 00 00 00 00 00 00	r8 = r1
    7252	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    7253	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    7254	79 23 20 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x20)
    7255	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7256	b7 02 00 00 27 00 00 00	r2 = 0x27
    7257	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    7258	8d 00 00 00 03 00 00 00	callx r3
    7259	b7 07 00 00 01 00 00 00	r7 = 0x1
    7260	55 00 56 00 00 00 00 00	if r0 != 0x0 goto +0x56 <LBB203_23>
    7261	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0x0)
    7262	bf a1 00 00 00 00 00 00	r1 = r10
    7263	07 01 00 00 e8 ff ff ff	r1 += -0x18
    7264	b7 03 00 00 01 01 00 00	r3 = 0x101
    7265	85 10 00 00 b0 fa ff ff	call -0x550 ; <core::char::methods::<impl char>::escape_debug_ext>
    7266	71 a9 fc ff 00 00 00 00	r9 = *(u8 *)(r10 - 0x4)
    7267	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x8)
    7268	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7269	79 a6 f0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x10)
    7270	61 a8 e8 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x18)
    7271	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x14)
    7272	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7273	15 01 02 00 00 00 11 00	if r1 == 0x110000 goto +0x2 <LBB203_4>
    7274	b7 07 00 00 01 00 00 00	r7 = 0x1
    7275	05 00 10 00 00 00 00 00	goto +0x10 <LBB203_3>

000000000000e360 <LBB203_4>
    7276	b7 07 00 00 01 00 00 00	r7 = 0x1
    7277	05 00 47 00 00 00 00 00	goto +0x47 <LBB203_5>

000000000000e370 <LBB203_24>
    7278	15 03 06 00 01 00 00 00	if r3 == 0x1 goto +0x6 <LBB203_39>

000000000000e378 <LBB203_25>
    7279	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7280	b7 02 00 00 27 00 00 00	r2 = 0x27
    7281	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7282	8d 00 00 00 03 00 00 00	callx r3
    7283	bf 07 00 00 00 00 00 00	r7 = r0
    7284	05 00 3e 00 00 00 00 00	goto +0x3e <LBB203_23>

000000000000e3a8 <LBB203_39>
    7285	b7 08 00 00 00 00 00 00	r8 = 0x0
    7286	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)

000000000000e3b8 <LBB203_41>
    7287	bf 16 00 00 00 00 00 00	r6 = r1

000000000000e3c0 <LBB203_42>
    7288	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7289	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7290	8d 00 00 00 03 00 00 00	callx r3
    7291	55 00 37 00 00 00 00 00	if r0 != 0x0 goto +0x37 <LBB203_23>

000000000000e3e0 <LBB203_3>
    7292	bf 61 00 00 00 00 00 00	r1 = r6
    7293	67 08 00 00 20 00 00 00	r8 <<= 0x20
    7294	bf 83 00 00 00 00 00 00	r3 = r8
    7295	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7296	65 03 01 00 01 00 00 00	if r3 s> 0x1 goto +0x1 <LBB203_26>
    7297	05 00 ec ff 00 00 00 00	goto -0x14 <LBB203_24>

000000000000e410 <LBB203_26>
    7298	b7 08 00 00 01 00 00 00	r8 = 0x1
    7299	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7300	bf 16 00 00 00 00 00 00	r6 = r1
    7301	15 03 f2 ff 02 00 00 00	if r3 == 0x2 goto -0xe <LBB203_42>
    7302	b7 08 00 00 03 00 00 00	r8 = 0x3
    7303	bf 93 00 00 00 00 00 00	r3 = r9
    7304	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7305	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB203_31>
    7306	b7 09 00 00 00 00 00 00	r9 = 0x0
    7307	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7308	bf 16 00 00 00 00 00 00	r6 = r1
    7309	15 03 ea ff 01 00 00 00	if r3 == 0x1 goto -0x16 <LBB203_42>
    7310	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB203_34>
    7311	05 00 df ff 00 00 00 00	goto -0x21 <LBB203_25>

000000000000e480 <LBB203_31>
    7312	15 03 14 00 03 00 00 00	if r3 == 0x3 goto +0x14 <LBB203_40>
    7313	15 03 16 00 04 00 00 00	if r3 == 0x4 goto +0x16 <LBB203_37>
    7314	b7 09 00 00 04 00 00 00	r9 = 0x4
    7315	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB203_41>

000000000000e4a0 <LBB203_34>
    7316	bf 12 00 00 00 00 00 00	r2 = r1
    7317	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7318	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7319	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    7320	7f 23 00 00 00 00 00 00	r3 >>= r2
    7321	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7322	b7 02 00 00 30 00 00 00	r2 = 0x30
    7323	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7324	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB203_36>
    7325	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e4f0 <LBB203_36>
    7326	0f 32 00 00 00 00 00 00	r2 += r3
    7327	b7 06 00 00 00 00 00 00	r6 = 0x0
    7328	b7 09 00 00 01 00 00 00	r9 = 0x1
    7329	15 01 d6 ff 00 00 00 00	if r1 == 0x0 goto -0x2a <LBB203_42>
    7330	b7 09 00 00 02 00 00 00	r9 = 0x2
    7331	07 01 00 00 ff ff ff ff	r1 += -0x1
    7332	05 00 d2 ff 00 00 00 00	goto -0x2e <LBB203_41>

000000000000e528 <LBB203_40>
    7333	b7 09 00 00 02 00 00 00	r9 = 0x2
    7334	b7 02 00 00 7b 00 00 00	r2 = 0x7b
    7335	05 00 cf ff 00 00 00 00	goto -0x31 <LBB203_41>

000000000000e540 <LBB203_37>
    7336	b7 08 00 00 03 00 00 00	r8 = 0x3
    7337	b7 02 00 00 75 00 00 00	r2 = 0x75
    7338	b7 09 00 00 03 00 00 00	r9 = 0x3
    7339	05 00 cb ff 00 00 00 00	goto -0x35 <LBB203_41>

000000000000e560 <LBB203_16>
    7340	b7 09 00 00 02 00 00 00	r9 = 0x2
    7341	b7 02 00 00 7b 00 00 00	r2 = 0x7b

000000000000e570 <LBB203_21>
    7342	bf 16 00 00 00 00 00 00	r6 = r1

000000000000e578 <LBB203_22>
    7343	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7344	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7345	8d 00 00 00 03 00 00 00	callx r3
    7346	15 00 02 00 00 00 00 00	if r0 == 0x0 goto +0x2 <LBB203_5>

000000000000e598 <LBB203_23>
    7347	bf 70 00 00 00 00 00 00	r0 = r7
    7348	95 00 00 00 00 00 00 00	exit

000000000000e5a8 <LBB203_5>
    7349	bf 61 00 00 00 00 00 00	r1 = r6
    7350	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7351	67 08 00 00 20 00 00 00	r8 <<= 0x20
    7352	bf 83 00 00 00 00 00 00	r3 = r8
    7353	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7354	b7 08 00 00 01 00 00 00	r8 = 0x1
    7355	15 03 f3 ff 02 00 00 00	if r3 == 0x2 goto -0xd <LBB203_22>
    7356	15 03 01 00 03 00 00 00	if r3 == 0x3 goto +0x1 <LBB203_8>
    7357	05 00 b1 ff 00 00 00 00	goto -0x4f <LBB203_25>

000000000000e5f0 <LBB203_8>
    7358	b7 08 00 00 03 00 00 00	r8 = 0x3
    7359	bf 93 00 00 00 00 00 00	r3 = r9
    7360	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7361	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB203_12>
    7362	b7 09 00 00 00 00 00 00	r9 = 0x0
    7363	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7364	bf 16 00 00 00 00 00 00	r6 = r1
    7365	15 03 e9 ff 01 00 00 00	if r3 == 0x1 goto -0x17 <LBB203_22>
    7366	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB203_17>
    7367	05 00 a7 ff 00 00 00 00	goto -0x59 <LBB203_25>

000000000000e640 <LBB203_12>
    7368	15 03 e3 ff 03 00 00 00	if r3 == 0x3 goto -0x1d <LBB203_16>
    7369	15 03 13 00 04 00 00 00	if r3 == 0x4 goto +0x13 <LBB203_15>
    7370	b7 09 00 00 04 00 00 00	r9 = 0x4
    7371	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB203_21>

000000000000e660 <LBB203_17>
    7372	bf 12 00 00 00 00 00 00	r2 = r1
    7373	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7374	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7375	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    7376	7f 23 00 00 00 00 00 00	r3 >>= r2
    7377	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7378	b7 02 00 00 30 00 00 00	r2 = 0x30
    7379	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7380	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB203_19>
    7381	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e6b0 <LBB203_19>
    7382	0f 32 00 00 00 00 00 00	r2 += r3
    7383	b7 06 00 00 00 00 00 00	r6 = 0x0
    7384	b7 09 00 00 01 00 00 00	r9 = 0x1
    7385	15 01 d5 ff 00 00 00 00	if r1 == 0x0 goto -0x2b <LBB203_22>
    7386	b7 09 00 00 02 00 00 00	r9 = 0x2
    7387	07 01 00 00 ff ff ff ff	r1 += -0x1
    7388	05 00 d1 ff 00 00 00 00	goto -0x2f <LBB203_21>

000000000000e6e8 <LBB203_15>
    7389	b7 08 00 00 03 00 00 00	r8 = 0x3
    7390	b7 02 00 00 75 00 00 00	r2 = 0x75
    7391	b7 09 00 00 03 00 00 00	r9 = 0x3
    7392	05 00 cd ff 00 00 00 00	goto -0x33 <LBB203_21>

000000000000e708 <core::slice::index::slice_start_index_len_fail>
    7393	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7394	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7395	bf a1 00 00 00 00 00 00	r1 = r10
    7396	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7397	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7398	b7 01 00 00 00 00 00 00	r1 = 0x0
    7399	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7400	b7 01 00 00 02 00 00 00	r1 = 0x2
    7401	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7402	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7403	18 01 00 00 28 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f28 ll
    7405	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7406	bf a1 00 00 00 00 00 00	r1 = r10
    7407	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7408	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7409	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    7411	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7412	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7413	bf a1 00 00 00 00 00 00	r1 = r10
    7414	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7415	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7416	bf a1 00 00 00 00 00 00	r1 = r10
    7417	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7418	bf 32 00 00 00 00 00 00	r2 = r3
    7419	85 10 00 00 69 fb ff ff	call -0x497 ; <core::panicking::panic_fmt>
    7420	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e7e8 <core::slice::index::slice_end_index_len_fail>
    7421	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7422	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7423	bf a1 00 00 00 00 00 00	r1 = r10
    7424	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7425	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7426	b7 01 00 00 00 00 00 00	r1 = 0x0
    7427	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7428	b7 01 00 00 02 00 00 00	r1 = 0x2
    7429	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7430	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7431	18 01 00 00 48 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f48 ll
    7433	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7434	bf a1 00 00 00 00 00 00	r1 = r10
    7435	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7436	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7437	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    7439	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7440	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7441	bf a1 00 00 00 00 00 00	r1 = r10
    7442	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7443	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7444	bf a1 00 00 00 00 00 00	r1 = r10
    7445	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7446	bf 32 00 00 00 00 00 00	r2 = r3
    7447	85 10 00 00 4d fb ff ff	call -0x4b3 ; <core::panicking::panic_fmt>
    7448	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e8c8 <core::slice::index::slice_index_order_fail>
    7449	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7450	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7451	bf a1 00 00 00 00 00 00	r1 = r10
    7452	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7453	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7454	b7 01 00 00 00 00 00 00	r1 = 0x0
    7455	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7456	b7 01 00 00 02 00 00 00	r1 = 0x2
    7457	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7458	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7459	18 01 00 00 68 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f68 ll
    7461	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7462	bf a1 00 00 00 00 00 00	r1 = r10
    7463	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7464	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7465	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    7467	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7468	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7469	bf a1 00 00 00 00 00 00	r1 = r10
    7470	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7471	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7472	bf a1 00 00 00 00 00 00	r1 = r10
    7473	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7474	bf 32 00 00 00 00 00 00	r2 = r3
    7475	85 10 00 00 31 fb ff ff	call -0x4cf ; <core::panicking::panic_fmt>
    7476	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e9a8 <core::str::slice_error_fail>
    7477	7b 4a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r4
    7478	7b 3a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r3
    7479	18 06 00 00 b8 2e 01 00 00 00 00 00 00 00 00 00	r6 = 0x12eb8 ll
    7481	b7 07 00 00 00 00 00 00	r7 = 0x0
    7482	b7 00 00 00 01 01 00 00	r0 = 0x101
    7483	bf 29 00 00 00 00 00 00	r9 = r2
    7484	2d 20 09 00 00 00 00 00	if r0 > r2 goto +0x9 <LBB242_7>
    7485	b7 00 00 00 00 01 00 00	r0 = 0x100
    7486	b7 08 00 00 c0 ff ff ff	r8 = -0x40
    7487	b7 09 00 00 00 00 00 00	r9 = 0x0
    7488	b7 07 00 00 05 00 00 00	r7 = 0x5
    7489	05 00 0c 00 00 00 00 00	goto +0xc <LBB242_2>

000000000000ea10 <LBB242_6>
    7490	18 06 00 00 90 30 01 00 00 00 00 00 00 00 00 00	r6 = 0x13090 ll
    7492	07 00 00 00 ff ff ff ff	r0 += -0x1
    7493	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB242_2>

000000000000ea30 <LBB242_7>
    7494	7b 9a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r9
    7495	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    7496	7b 7a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r7
    7497	7b 6a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r6
    7498	2d 23 16 00 00 00 00 00	if r3 > r2 goto +0x16 <LBB242_10>
    7499	2d 24 15 00 00 00 00 00	if r4 > r2 goto +0x15 <LBB242_10>
    7500	2d 43 32 00 00 00 00 00	if r3 > r4 goto +0x32 <LBB242_37>
    7501	05 00 50 00 00 00 00 00	goto +0x50 <LBB242_14>

000000000000ea70 <LBB242_2>
    7502	bf 16 00 00 00 00 00 00	r6 = r1
    7503	0f 06 00 00 00 00 00 00	r6 += r0
    7504	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    7505	67 06 00 00 38 00 00 00	r6 <<= 0x38
    7506	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    7507	6d 68 ee ff 00 00 00 00	if r8 s> r6 goto -0x12 <LBB242_6>
    7508	18 06 00 00 90 30 01 00 00 00 00 00 00 00 00 00	r6 = 0x13090 ll
    7510	b7 07 00 00 05 00 00 00	r7 = 0x5
    7511	bf 09 00 00 00 00 00 00	r9 = r0
    7512	2d 02 ed ff 00 00 00 00	if r2 > r0 goto -0x13 <LBB242_7>
    7513	bf 29 00 00 00 00 00 00	r9 = r2
    7514	1d 02 eb ff 00 00 00 00	if r2 == r0 goto -0x15 <LBB242_7>
    7515	b7 03 00 00 00 00 00 00	r3 = 0x0
    7516	bf 04 00 00 00 00 00 00	r4 = r0
    7517	18 05 00 00 88 3f 01 00 00 00 00 00 00 00 00 00	r5 = 0x13f88 ll
    7519	85 10 00 00 d5 ff ff ff	call -0x2b ; <core::str::slice_error_fail>
    7520	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000eb08 <LBB242_10>
    7521	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB242_12>
    7522	bf 43 00 00 00 00 00 00	r3 = r4

000000000000eb18 <LBB242_12>
    7523	7b 3a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r3
    7524	bf a1 00 00 00 00 00 00	r1 = r10
    7525	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7526	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7527	b7 01 00 00 00 00 00 00	r1 = 0x0
    7528	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7529	b7 01 00 00 03 00 00 00	r1 = 0x3
    7530	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7531	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7532	18 01 00 00 a0 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13fa0 ll
    7534	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7535	bf a1 00 00 00 00 00 00	r1 = r10
    7536	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7537	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7538	18 01 00 00 80 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10780 ll
    7540	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7541	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7542	bf a1 00 00 00 00 00 00	r1 = r10
    7543	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7544	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7545	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    7547	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7548	bf a1 00 00 00 00 00 00	r1 = r10
    7549	07 01 00 00 70 ff ff ff	r1 += -0x90
    7550	05 00 8e 00 00 00 00 00	goto +0x8e <LBB242_13>

000000000000ebf8 <LBB242_37>
    7551	bf a1 00 00 00 00 00 00	r1 = r10
    7552	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7553	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7554	b7 01 00 00 00 00 00 00	r1 = 0x0
    7555	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7556	b7 01 00 00 04 00 00 00	r1 = 0x4
    7557	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7558	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7559	18 01 00 00 d0 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13fd0 ll
    7561	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7562	bf a1 00 00 00 00 00 00	r1 = r10
    7563	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7564	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7565	18 01 00 00 80 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10780 ll
    7567	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7568	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7569	bf a1 00 00 00 00 00 00	r1 = r10
    7570	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7571	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7572	bf a1 00 00 00 00 00 00	r1 = r10
    7573	07 01 00 00 38 ff ff ff	r1 += -0xc8
    7574	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7575	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    7577	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7578	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7579	bf a1 00 00 00 00 00 00	r1 = r10
    7580	07 01 00 00 30 ff ff ff	r1 += -0xd0
    7581	05 00 6f 00 00 00 00 00	goto +0x6f <LBB242_13>

000000000000ecf0 <LBB242_14>
    7582	15 03 0a 00 00 00 00 00	if r3 == 0x0 goto +0xa <LBB242_18>
    7583	2d 32 02 00 00 00 00 00	if r2 > r3 goto +0x2 <LBB242_17>
    7584	1d 32 08 00 00 00 00 00	if r2 == r3 goto +0x8 <LBB242_18>
    7585	05 00 08 00 00 00 00 00	goto +0x8 <LBB242_19>

000000000000ed10 <LBB242_17>
    7586	bf 10 00 00 00 00 00 00	r0 = r1
    7587	0f 30 00 00 00 00 00 00	r0 += r3
    7588	71 00 00 00 00 00 00 00	r0 = *(u8 *)(r0 + 0x0)
    7589	67 00 00 00 38 00 00 00	r0 <<= 0x38
    7590	c7 00 00 00 38 00 00 00	r0 s>>= 0x38
    7591	b7 06 00 00 c0 ff ff ff	r6 = -0x40
    7592	6d 06 01 00 00 00 00 00	if r6 s> r0 goto +0x1 <LBB242_19>

000000000000ed48 <LBB242_18>
    7593	bf 43 00 00 00 00 00 00	r3 = r4

000000000000ed50 <LBB242_19>
    7594	7b 3a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r3
    7595	15 03 0c 00 00 00 00 00	if r3 == 0x0 goto +0xc <LBB242_23>

000000000000ed60 <LBB242_20>
    7596	2d 32 02 00 00 00 00 00	if r2 > r3 goto +0x2 <LBB242_22>
    7597	1d 32 2e 00 00 00 00 00	if r2 == r3 goto +0x2e <LBB242_30>
    7598	05 00 06 00 00 00 00 00	goto +0x6 <LBB242_36>

000000000000ed78 <LBB242_22>
    7599	bf 14 00 00 00 00 00 00	r4 = r1
    7600	0f 34 00 00 00 00 00 00	r4 += r3
    7601	71 44 00 00 00 00 00 00	r4 = *(u8 *)(r4 + 0x0)
    7602	67 04 00 00 38 00 00 00	r4 <<= 0x38
    7603	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
    7604	65 04 04 00 bf ff ff ff	if r4 s> -0x41 goto +0x4 <LBB242_24>

000000000000eda8 <LBB242_36>
    7605	07 03 00 00 ff ff ff ff	r3 += -0x1
    7606	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB242_23>
    7607	05 00 f4 ff 00 00 00 00	goto -0xc <LBB242_20>

000000000000edc0 <LBB242_23>
    7608	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000edc8 <LBB242_24>
    7609	1d 23 22 00 00 00 00 00	if r3 == r2 goto +0x22 <LBB242_30>
    7610	0f 31 00 00 00 00 00 00	r1 += r3
    7611	71 10 00 00 00 00 00 00	r0 = *(u8 *)(r1 + 0x0)
    7612	bf 02 00 00 00 00 00 00	r2 = r0
    7613	67 02 00 00 38 00 00 00	r2 <<= 0x38
    7614	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    7615	65 02 22 00 ff ff ff ff	if r2 s> -0x1 goto +0x22 <LBB242_27>
    7616	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x1)
    7617	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    7618	bf 04 00 00 00 00 00 00	r4 = r0
    7619	57 04 00 00 1f 00 00 00	r4 &= 0x1f
    7620	bf 46 00 00 00 00 00 00	r6 = r4
    7621	67 06 00 00 06 00 00 00	r6 <<= 0x6
    7622	4f 26 00 00 00 00 00 00	r6 |= r2
    7623	25 00 01 00 df 00 00 00	if r0 > 0xdf goto +0x1 <LBB242_28>
    7624	05 00 4a 00 00 00 00 00	goto +0x4a <LBB242_31>

000000000000ee48 <LBB242_28>
    7625	67 02 00 00 06 00 00 00	r2 <<= 0x6
    7626	71 16 02 00 00 00 00 00	r6 = *(u8 *)(r1 + 0x2)
    7627	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    7628	4f 62 00 00 00 00 00 00	r2 |= r6
    7629	bf 47 00 00 00 00 00 00	r7 = r4
    7630	67 07 00 00 0c 00 00 00	r7 <<= 0xc
    7631	bf 26 00 00 00 00 00 00	r6 = r2
    7632	4f 76 00 00 00 00 00 00	r6 |= r7
    7633	b7 07 00 00 f0 00 00 00	r7 = 0xf0
    7634	2d 07 40 00 00 00 00 00	if r7 > r0 goto +0x40 <LBB242_31>
    7635	67 02 00 00 06 00 00 00	r2 <<= 0x6
    7636	71 11 03 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x3)
    7637	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    7638	4f 12 00 00 00 00 00 00	r2 |= r1
    7639	67 04 00 00 12 00 00 00	r4 <<= 0x12
    7640	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    7641	4f 42 00 00 00 00 00 00	r2 |= r4
    7642	bf 26 00 00 00 00 00 00	r6 = r2
    7643	55 02 37 00 00 00 11 00	if r2 != 0x110000 goto +0x37 <LBB242_31>

000000000000eee0 <LBB242_30>
    7644	18 01 00 00 c5 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ec5 ll
    7646	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    7647	bf 53 00 00 00 00 00 00	r3 = r5
    7648	85 10 00 00 56 fa ff ff	call -0x5aa ; <core::panicking::panic>
    7649	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ef10 <LBB242_27>
    7650	63 0a 6c ff 00 00 00 00	*(u32 *)(r10 - 0x94) = r0
    7651	b7 01 00 00 01 00 00 00	r1 = 0x1

000000000000ef20 <LBB242_35>
    7652	7b 3a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r3
    7653	0f 31 00 00 00 00 00 00	r1 += r3
    7654	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r1
    7655	bf a1 00 00 00 00 00 00	r1 = r10
    7656	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7657	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7658	b7 01 00 00 00 00 00 00	r1 = 0x0
    7659	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7660	b7 01 00 00 05 00 00 00	r1 = 0x5
    7661	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7662	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7663	18 01 00 00 10 40 01 00 00 00 00 00 00 00 00 00	r1 = 0x14010 ll
    7665	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7666	bf a1 00 00 00 00 00 00	r1 = r10
    7667	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7668	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7669	18 01 00 00 80 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10780 ll
    7671	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7672	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7673	bf a1 00 00 00 00 00 00	r1 = r10
    7674	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7675	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7676	18 01 00 00 20 b7 00 00 00 00 00 00 00 00 00 00	r1 = 0xb720 ll
    7678	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7679	bf a1 00 00 00 00 00 00	r1 = r10
    7680	07 01 00 00 70 ff ff ff	r1 += -0x90
    7681	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7682	18 01 00 00 98 e2 00 00 00 00 00 00 00 00 00 00	r1 = 0xe298 ll
    7684	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7685	bf a1 00 00 00 00 00 00	r1 = r10
    7686	07 01 00 00 6c ff ff ff	r1 += -0x94
    7687	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7688	18 01 00 00 98 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10398 ll
    7690	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7691	bf a1 00 00 00 00 00 00	r1 = r10
    7692	07 01 00 00 60 ff ff ff	r1 += -0xa0

000000000000f068 <LBB242_13>
    7693	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7694	bf a1 00 00 00 00 00 00	r1 = r10
    7695	07 01 00 00 80 ff ff ff	r1 += -0x80
    7696	bf 52 00 00 00 00 00 00	r2 = r5
    7697	85 10 00 00 53 fa ff ff	call -0x5ad ; <core::panicking::panic_fmt>
    7698	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f098 <LBB242_31>
    7699	b7 01 00 00 01 00 00 00	r1 = 0x1
    7700	63 6a 6c ff 00 00 00 00	*(u32 *)(r10 - 0x94) = r6
    7701	b7 02 00 00 80 00 00 00	r2 = 0x80
    7702	2d 62 cd ff 00 00 00 00	if r2 > r6 goto -0x33 <LBB242_35>
    7703	b7 01 00 00 02 00 00 00	r1 = 0x2
    7704	b7 02 00 00 00 08 00 00	r2 = 0x800
    7705	2d 62 ca ff 00 00 00 00	if r2 > r6 goto -0x36 <LBB242_35>
    7706	b7 01 00 00 03 00 00 00	r1 = 0x3
    7707	b7 02 00 00 00 00 01 00	r2 = 0x10000
    7708	2d 62 c7 ff 00 00 00 00	if r2 > r6 goto -0x39 <LBB242_35>
    7709	b7 01 00 00 04 00 00 00	r1 = 0x4
    7710	05 00 c5 ff 00 00 00 00	goto -0x3b <LBB242_35>

000000000000f0f8 <core::unicode::printable::check>
    7711	bf 19 00 00 00 00 00 00	r9 = r1
    7712	79 51 10 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0xff0)
    7713	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7714	79 56 08 f0 00 00 00 00	r6 = *(u64 *)(r5 - 0xff8)
    7715	15 03 2a 00 00 00 00 00	if r3 == 0x0 goto +0x2a <LBB261_3>
    7716	67 03 00 00 01 00 00 00	r3 <<= 0x1
    7717	bf 21 00 00 00 00 00 00	r1 = r2
    7718	0f 31 00 00 00 00 00 00	r1 += r3
    7719	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7720	79 58 00 f0 00 00 00 00	r8 = *(u64 *)(r5 - 0x1000)
    7721	bf 93 00 00 00 00 00 00	r3 = r9
    7722	57 03 00 00 00 ff 00 00	r3 &= 0xff00
    7723	77 03 00 00 08 00 00 00	r3 >>= 0x8
    7724	b7 00 00 00 00 00 00 00	r0 = 0x0
    7725	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    7726	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8
    7727	05 00 04 00 00 00 00 00	goto +0x4 <LBB261_2>

000000000000f180 <LBB261_6>
    7728	2d 31 1d 00 00 00 00 00	if r1 > r3 goto +0x1d <LBB261_3>
    7729	bf 50 00 00 00 00 00 00	r0 = r5
    7730	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    7731	1d 12 1a 00 00 00 00 00	if r2 == r1 goto +0x1a <LBB261_3>

000000000000f1a0 <LBB261_2>
    7732	71 27 01 00 00 00 00 00	r7 = *(u8 *)(r2 + 0x1)
    7733	bf 05 00 00 00 00 00 00	r5 = r0
    7734	0f 75 00 00 00 00 00 00	r5 += r7
    7735	71 21 00 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x0)
    7736	07 02 00 00 02 00 00 00	r2 += 0x2
    7737	1d 31 01 00 00 00 00 00	if r1 == r3 goto +0x1 <LBB261_8>
    7738	05 00 f5 ff 00 00 00 00	goto -0xb <LBB261_6>

000000000000f1d8 <LBB261_8>
    7739	2d 50 39 00 00 00 00 00	if r0 > r5 goto +0x39 <LBB261_10>
    7740	2d 85 3e 00 00 00 00 00	if r5 > r8 goto +0x3e <LBB261_11>
    7741	0f 04 00 00 00 00 00 00	r4 += r0

000000000000f1f0 <LBB261_13>
    7742	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB261_16>
    7743	b7 00 00 00 00 00 00 00	r0 = 0x0
    7744	07 07 00 00 ff ff ff ff	r7 += -0x1
    7745	bf 91 00 00 00 00 00 00	r1 = r9
    7746	57 01 00 00 ff 00 00 00	r1 &= 0xff
    7747	71 48 00 00 00 00 00 00	r8 = *(u8 *)(r4 + 0x0)
    7748	07 04 00 00 01 00 00 00	r4 += 0x1
    7749	5d 18 f8 ff 00 00 00 00	if r8 != r1 goto -0x8 <LBB261_13>

000000000000f230 <LBB261_15>
    7750	57 00 00 00 01 00 00 00	r0 &= 0x1
    7751	95 00 00 00 00 00 00 00	exit

000000000000f240 <LBB261_16>
    7752	bf 50 00 00 00 00 00 00	r0 = r5
    7753	79 a4 e0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x20)
    7754	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    7755	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    7756	1d 12 01 00 00 00 00 00	if r2 == r1 goto +0x1 <LBB261_3>
    7757	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB261_2>

000000000000f270 <LBB261_3>
    7758	b7 00 00 00 01 00 00 00	r0 = 0x1
    7759	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    7760	15 01 f5 ff 00 00 00 00	if r1 == 0x0 goto -0xb <LBB261_15>
    7761	bf 62 00 00 00 00 00 00	r2 = r6
    7762	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    7763	0f 12 00 00 00 00 00 00	r2 += r1
    7764	b7 00 00 00 01 00 00 00	r0 = 0x1
    7765	57 09 00 00 ff ff 00 00	r9 &= 0xffff
    7766	b7 03 00 00 00 00 00 00	r3 = 0x0
    7767	05 00 07 00 00 00 00 00	goto +0x7 <LBB261_5>

000000000000f2c0 <LBB261_17>
    7768	bf 56 00 00 00 00 00 00	r6 = r5

000000000000f2c8 <LBB261_21>
    7769	1f 49 00 00 00 00 00 00	r9 -= r4
    7770	67 09 00 00 20 00 00 00	r9 <<= 0x20
    7771	c7 09 00 00 20 00 00 00	r9 s>>= 0x20
    7772	6d 93 e9 ff 00 00 00 00	if r3 s> r9 goto -0x17 <LBB261_15>
    7773	a7 00 00 00 01 00 00 00	r0 ^= 0x1
    7774	1d 26 e7 ff 00 00 00 00	if r6 == r2 goto -0x19 <LBB261_15>

000000000000f2f8 <LBB261_5>
    7775	bf 65 00 00 00 00 00 00	r5 = r6
    7776	07 05 00 00 01 00 00 00	r5 += 0x1
    7777	71 64 00 00 00 00 00 00	r4 = *(u8 *)(r6 + 0x0)
    7778	bf 41 00 00 00 00 00 00	r1 = r4
    7779	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7780	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7781	6d 13 01 00 00 00 00 00	if r3 s> r1 goto +0x1 <LBB261_18>
    7782	05 00 f1 ff 00 00 00 00	goto -0xf <LBB261_17>

000000000000f338 <LBB261_18>
    7783	5d 25 07 00 00 00 00 00	if r5 != r2 goto +0x7 <LBB261_20>
    7784	18 01 00 00 c5 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ec5 ll
    7786	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    7787	18 03 00 00 78 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14078 ll
    7789	85 10 00 00 c9 f9 ff ff	call -0x637 ; <core::panicking::panic>
    7790	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f378 <LBB261_20>
    7791	57 04 00 00 7f 00 00 00	r4 &= 0x7f
    7792	67 04 00 00 08 00 00 00	r4 <<= 0x8
    7793	71 61 01 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x1)
    7794	4f 14 00 00 00 00 00 00	r4 |= r1
    7795	07 06 00 00 02 00 00 00	r6 += 0x2
    7796	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB261_21>

000000000000f3a8 <LBB261_10>
    7797	bf 01 00 00 00 00 00 00	r1 = r0
    7798	bf 52 00 00 00 00 00 00	r2 = r5
    7799	18 03 00 00 60 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14060 ll
    7801	85 10 00 00 9f fe ff ff	call -0x161 ; <core::slice::index::slice_index_order_fail>
    7802	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f3d8 <LBB261_11>
    7803	bf 51 00 00 00 00 00 00	r1 = r5
    7804	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    7805	18 03 00 00 60 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14060 ll
    7807	85 10 00 00 7d fe ff ff	call -0x183 ; <core::slice::index::slice_end_index_len_fail>
    7808	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f408 <core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt>
    7809	b7 03 00 00 00 00 00 00	r3 = 0x0
    7810	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
    7811	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7812	05 00 14 00 00 00 00 00	goto +0x14 <LBB466_1>

000000000000f428 <LBB466_3>
    7813	0f 05 00 00 00 00 00 00	r5 += r0
    7814	bf a0 00 00 00 00 00 00	r0 = r10
    7815	07 00 00 00 80 ff ff ff	r0 += -0x80
    7816	0f 30 00 00 00 00 00 00	r0 += r3
    7817	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7818	07 03 00 00 ff ff ff ff	r3 += -0x1
    7819	bf 45 00 00 00 00 00 00	r5 = r4
    7820	57 05 00 00 ff 00 00 00	r5 &= 0xff
    7821	bf 54 00 00 00 00 00 00	r4 = r5
    7822	77 04 00 00 04 00 00 00	r4 >>= 0x4
    7823	25 05 09 00 0f 00 00 00	if r5 > 0xf goto +0x9 <LBB466_1>
    7824	bf 31 00 00 00 00 00 00	r1 = r3
    7825	07 01 00 00 80 00 00 00	r1 += 0x80
    7826	b7 04 00 00 81 00 00 00	r4 = 0x81
    7827	2d 14 0b 00 00 00 00 00	if r4 > r1 goto +0xb <LBB466_6>
    7828	b7 02 00 00 80 00 00 00	r2 = 0x80
    7829	18 03 00 00 e0 3e 01 00 00 00 00 00 00 00 00 00	r3 = 0x13ee0 ll
    7831	85 10 00 00 49 fe ff ff	call -0x1b7 ; <core::slice::index::slice_start_index_len_fail>
    7832	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f4c8 <LBB466_1>
    7833	bf 40 00 00 00 00 00 00	r0 = r4
    7834	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7835	b7 05 00 00 30 00 00 00	r5 = 0x30
    7836	2d 01 e8 ff 00 00 00 00	if r1 > r0 goto -0x18 <LBB466_3>
    7837	b7 05 00 00 57 00 00 00	r5 = 0x57
    7838	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB466_3>

000000000000f4f8 <LBB466_6>
    7839	bf 31 00 00 00 00 00 00	r1 = r3
    7840	87 01 00 00 00 00 00 00	r1 = -r1
    7841	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    7842	bf a1 00 00 00 00 00 00	r1 = r10
    7843	07 01 00 00 80 ff ff ff	r1 += -0x80
    7844	0f 31 00 00 00 00 00 00	r1 += r3
    7845	07 01 00 00 80 00 00 00	r1 += 0x80
    7846	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    7847	bf a5 00 00 00 00 00 00	r5 = r10
    7848	bf 21 00 00 00 00 00 00	r1 = r2
    7849	b7 02 00 00 01 00 00 00	r2 = 0x1
    7850	18 03 00 00 31 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f31 ll
    7852	b7 04 00 00 02 00 00 00	r4 = 0x2
    7853	85 10 00 00 7d fa ff ff	call -0x583 ; <core::fmt::Formatter::pad_integral>
    7854	95 00 00 00 00 00 00 00	exit

000000000000f578 <core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt>
    7855	b7 03 00 00 00 00 00 00	r3 = 0x0
    7856	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
    7857	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7858	05 00 14 00 00 00 00 00	goto +0x14 <LBB467_1>

000000000000f598 <LBB467_3>
    7859	0f 05 00 00 00 00 00 00	r5 += r0
    7860	bf a0 00 00 00 00 00 00	r0 = r10
    7861	07 00 00 00 80 ff ff ff	r0 += -0x80
    7862	0f 30 00 00 00 00 00 00	r0 += r3
    7863	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7864	07 03 00 00 ff ff ff ff	r3 += -0x1
    7865	bf 45 00 00 00 00 00 00	r5 = r4
    7866	57 05 00 00 ff 00 00 00	r5 &= 0xff
    7867	bf 54 00 00 00 00 00 00	r4 = r5
    7868	77 04 00 00 04 00 00 00	r4 >>= 0x4
    7869	25 05 09 00 0f 00 00 00	if r5 > 0xf goto +0x9 <LBB467_1>
    7870	bf 31 00 00 00 00 00 00	r1 = r3
    7871	07 01 00 00 80 00 00 00	r1 += 0x80
    7872	b7 04 00 00 81 00 00 00	r4 = 0x81
    7873	2d 14 0b 00 00 00 00 00	if r4 > r1 goto +0xb <LBB467_6>
    7874	b7 02 00 00 80 00 00 00	r2 = 0x80
    7875	18 03 00 00 e0 3e 01 00 00 00 00 00 00 00 00 00	r3 = 0x13ee0 ll
    7877	85 10 00 00 1b fe ff ff	call -0x1e5 ; <core::slice::index::slice_start_index_len_fail>
    7878	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f638 <LBB467_1>
    7879	bf 40 00 00 00 00 00 00	r0 = r4
    7880	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7881	b7 05 00 00 30 00 00 00	r5 = 0x30
    7882	2d 01 e8 ff 00 00 00 00	if r1 > r0 goto -0x18 <LBB467_3>
    7883	b7 05 00 00 37 00 00 00	r5 = 0x37
    7884	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB467_3>

000000000000f668 <LBB467_6>
    7885	bf 31 00 00 00 00 00 00	r1 = r3
    7886	87 01 00 00 00 00 00 00	r1 = -r1
    7887	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    7888	bf a1 00 00 00 00 00 00	r1 = r10
    7889	07 01 00 00 80 ff ff ff	r1 += -0x80
    7890	0f 31 00 00 00 00 00 00	r1 += r3
    7891	07 01 00 00 80 00 00 00	r1 += 0x80
    7892	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    7893	bf a5 00 00 00 00 00 00	r5 = r10
    7894	bf 21 00 00 00 00 00 00	r1 = r2
    7895	b7 02 00 00 01 00 00 00	r2 = 0x1
    7896	18 03 00 00 31 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f31 ll
    7898	b7 04 00 00 02 00 00 00	r4 = 0x2
    7899	85 10 00 00 4f fa ff ff	call -0x5b1 ; <core::fmt::Formatter::pad_integral>
    7900	95 00 00 00 00 00 00 00	exit

000000000000f6e8 <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    7901	61 23 30 00 00 00 00 00	r3 = *(u32 *)(r2 + 0x30)
    7902	bf 34 00 00 00 00 00 00	r4 = r3
    7903	57 04 00 00 10 00 00 00	r4 &= 0x10
    7904	55 04 32 00 00 00 00 00	if r4 != 0x0 goto +0x32 <LBB492_2>
    7905	57 03 00 00 20 00 00 00	r3 &= 0x20
    7906	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB492_10>
    7907	05 00 33 00 00 00 00 00	goto +0x33 <LBB492_20>

000000000000f720 <LBB492_10>
    7908	b7 03 00 00 27 00 00 00	r3 = 0x27
    7909	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    7910	b7 04 00 00 10 27 00 00	r4 = 0x2710
    7911	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB492_14>
    7912	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000f748 <LBB492_12>
    7913	bf 14 00 00 00 00 00 00	r4 = r1
    7914	37 01 00 00 10 27 00 00	r1 /= 0x2710
    7915	bf 15 00 00 00 00 00 00	r5 = r1
    7916	27 05 00 00 10 27 00 00	r5 *= 0x2710
    7917	bf 40 00 00 00 00 00 00	r0 = r4
    7918	1f 50 00 00 00 00 00 00	r0 -= r5
    7919	bf 05 00 00 00 00 00 00	r5 = r0
    7920	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    7921	37 05 00 00 64 00 00 00	r5 /= 0x64
    7922	bf 56 00 00 00 00 00 00	r6 = r5
    7923	27 06 00 00 64 00 00 00	r6 *= 0x64
    7924	1f 60 00 00 00 00 00 00	r0 -= r6
    7925	bf a6 00 00 00 00 00 00	r6 = r10
    7926	07 06 00 00 80 ff ff ff	r6 += -0x80
    7927	0f 36 00 00 00 00 00 00	r6 += r3
    7928	67 05 00 00 01 00 00 00	r5 <<= 0x1
    7929	18 07 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r7 = 0x12f33 ll
    7931	0f 57 00 00 00 00 00 00	r7 += r5
    7932	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    7933	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    7934	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    7935	67 00 00 00 01 00 00 00	r0 <<= 0x1
    7936	18 05 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f33 ll
    7938	0f 05 00 00 00 00 00 00	r5 += r0
    7939	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    7940	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    7941	07 03 00 00 fc ff ff ff	r3 += -0x4
    7942	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB492_12>
    7943	07 03 00 00 27 00 00 00	r3 += 0x27

000000000000f840 <LBB492_14>
    7944	65 01 4f 00 63 00 00 00	if r1 s> 0x63 goto +0x4f <LBB492_16>

000000000000f848 <LBB492_15>
    7945	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7946	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB492_18>
    7947	05 00 5f 00 00 00 00 00	goto +0x5f <LBB492_17>

000000000000f860 <LBB492_18>
    7948	07 03 00 00 ff ff ff ff	r3 += -0x1
    7949	bf a4 00 00 00 00 00 00	r4 = r10
    7950	07 04 00 00 80 ff ff ff	r4 += -0x80
    7951	0f 34 00 00 00 00 00 00	r4 += r3
    7952	07 01 00 00 30 00 00 00	r1 += 0x30
    7953	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    7954	05 00 62 00 00 00 00 00	goto +0x62 <LBB492_19>

000000000000f898 <LBB492_2>
    7955	b7 03 00 00 00 00 00 00	r3 = 0x0
    7956	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    7957	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7958	05 00 2b 00 00 00 00 00	goto +0x2b <LBB492_3>

000000000000f8b8 <LBB492_20>
    7959	b7 03 00 00 00 00 00 00	r3 = 0x0
    7960	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    7961	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7962	05 00 0e 00 00 00 00 00	goto +0xe <LBB492_21>

000000000000f8d8 <LBB492_23>
    7963	0f 05 00 00 00 00 00 00	r5 += r0
    7964	bf a0 00 00 00 00 00 00	r0 = r10
    7965	07 00 00 00 80 ff ff ff	r0 += -0x80
    7966	0f 30 00 00 00 00 00 00	r0 += r3
    7967	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7968	07 03 00 00 ff ff ff ff	r3 += -0x1
    7969	bf 45 00 00 00 00 00 00	r5 = r4
    7970	77 05 00 00 04 00 00 00	r5 >>= 0x4
    7971	25 04 05 00 0f 00 00 00	if r4 > 0xf goto +0x5 <LBB492_21>
    7972	bf 31 00 00 00 00 00 00	r1 = r3
    7973	07 01 00 00 80 00 00 00	r1 += 0x80
    7974	b7 04 00 00 81 00 00 00	r4 = 0x81
    7975	2d 14 21 00 00 00 00 00	if r4 > r1 goto +0x21 <LBB492_8>
    7976	05 00 14 00 00 00 00 00	goto +0x14 <LBB492_7>

000000000000f948 <LBB492_21>
    7977	bf 54 00 00 00 00 00 00	r4 = r5
    7978	bf 40 00 00 00 00 00 00	r0 = r4
    7979	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7980	b7 05 00 00 30 00 00 00	r5 = 0x30
    7981	2d 01 ed ff 00 00 00 00	if r1 > r0 goto -0x13 <LBB492_23>
    7982	b7 05 00 00 37 00 00 00	r5 = 0x37
    7983	05 00 eb ff 00 00 00 00	goto -0x15 <LBB492_23>

000000000000f980 <LBB492_5>
    7984	0f 05 00 00 00 00 00 00	r5 += r0
    7985	bf a0 00 00 00 00 00 00	r0 = r10
    7986	07 00 00 00 80 ff ff ff	r0 += -0x80
    7987	0f 30 00 00 00 00 00 00	r0 += r3
    7988	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7989	07 03 00 00 ff ff ff ff	r3 += -0x1
    7990	bf 45 00 00 00 00 00 00	r5 = r4
    7991	77 05 00 00 04 00 00 00	r5 >>= 0x4
    7992	25 04 09 00 0f 00 00 00	if r4 > 0xf goto +0x9 <LBB492_3>
    7993	bf 31 00 00 00 00 00 00	r1 = r3
    7994	07 01 00 00 80 00 00 00	r1 += 0x80
    7995	b7 04 00 00 81 00 00 00	r4 = 0x81
    7996	2d 14 0c 00 00 00 00 00	if r4 > r1 goto +0xc <LBB492_8>

000000000000f9e8 <LBB492_7>
    7997	b7 02 00 00 80 00 00 00	r2 = 0x80
    7998	18 03 00 00 e0 3e 01 00 00 00 00 00 00 00 00 00	r3 = 0x13ee0 ll
    8000	85 10 00 00 a0 fd ff ff	call -0x260 ; <core::slice::index::slice_start_index_len_fail>
    8001	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000fa10 <LBB492_3>
    8002	bf 54 00 00 00 00 00 00	r4 = r5
    8003	bf 40 00 00 00 00 00 00	r0 = r4
    8004	57 00 00 00 0f 00 00 00	r0 &= 0xf
    8005	b7 05 00 00 30 00 00 00	r5 = 0x30
    8006	2d 01 e9 ff 00 00 00 00	if r1 > r0 goto -0x17 <LBB492_5>
    8007	b7 05 00 00 57 00 00 00	r5 = 0x57
    8008	05 00 e7 ff 00 00 00 00	goto -0x19 <LBB492_5>

000000000000fa48 <LBB492_8>
    8009	bf 31 00 00 00 00 00 00	r1 = r3
    8010	87 01 00 00 00 00 00 00	r1 = -r1
    8011	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8012	bf a1 00 00 00 00 00 00	r1 = r10
    8013	07 01 00 00 80 ff ff ff	r1 += -0x80
    8014	0f 31 00 00 00 00 00 00	r1 += r3
    8015	07 01 00 00 80 00 00 00	r1 += 0x80
    8016	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8017	bf a5 00 00 00 00 00 00	r5 = r10
    8018	bf 21 00 00 00 00 00 00	r1 = r2
    8019	b7 02 00 00 01 00 00 00	r2 = 0x1
    8020	18 03 00 00 31 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f31 ll
    8022	b7 04 00 00 02 00 00 00	r4 = 0x2
    8023	05 00 2a 00 00 00 00 00	goto +0x2a <LBB492_9>

000000000000fac0 <LBB492_16>
    8024	bf 14 00 00 00 00 00 00	r4 = r1
    8025	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8026	37 04 00 00 64 00 00 00	r4 /= 0x64
    8027	bf 45 00 00 00 00 00 00	r5 = r4
    8028	27 05 00 00 64 00 00 00	r5 *= 0x64
    8029	1f 51 00 00 00 00 00 00	r1 -= r5
    8030	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8031	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8032	18 05 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f33 ll
    8034	0f 15 00 00 00 00 00 00	r5 += r1
    8035	07 03 00 00 fe ff ff ff	r3 += -0x2
    8036	bf a1 00 00 00 00 00 00	r1 = r10
    8037	07 01 00 00 80 ff ff ff	r1 += -0x80
    8038	0f 31 00 00 00 00 00 00	r1 += r3
    8039	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8040	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8041	bf 41 00 00 00 00 00 00	r1 = r4
    8042	05 00 9e ff 00 00 00 00	goto -0x62 <LBB492_15>

000000000000fb58 <LBB492_17>
    8043	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8044	18 04 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r4 = 0x12f33 ll
    8046	0f 14 00 00 00 00 00 00	r4 += r1
    8047	07 03 00 00 fe ff ff ff	r3 += -0x2
    8048	bf a1 00 00 00 00 00 00	r1 = r10
    8049	07 01 00 00 80 ff ff ff	r1 += -0x80
    8050	0f 31 00 00 00 00 00 00	r1 += r3
    8051	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8052	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

000000000000fba8 <LBB492_19>
    8053	bf a1 00 00 00 00 00 00	r1 = r10
    8054	07 01 00 00 80 ff ff ff	r1 += -0x80
    8055	0f 31 00 00 00 00 00 00	r1 += r3
    8056	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8057	b7 01 00 00 27 00 00 00	r1 = 0x27
    8058	1f 31 00 00 00 00 00 00	r1 -= r3
    8059	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8060	bf a5 00 00 00 00 00 00	r5 = r10
    8061	bf 21 00 00 00 00 00 00	r1 = r2
    8062	b7 02 00 00 01 00 00 00	r2 = 0x1
    8063	18 03 00 00 b8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12eb8 ll
    8065	b7 04 00 00 00 00 00 00	r4 = 0x0

000000000000fc10 <LBB492_9>
    8066	85 10 00 00 a8 f9 ff ff	call -0x658 ; <core::fmt::Formatter::pad_integral>
    8067	95 00 00 00 00 00 00 00	exit

000000000000fc20 <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>
    8068	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    8069	25 01 0b 00 63 00 00 00	if r1 > 0x63 goto +0xb <LBB494_3>
    8070	b7 03 00 00 26 00 00 00	r3 = 0x26
    8071	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8072	2d 14 16 00 00 00 00 00	if r4 > r1 goto +0x16 <LBB494_4>
    8073	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8074	18 03 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f33 ll
    8076	0f 13 00 00 00 00 00 00	r3 += r1
    8077	69 31 00 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x0)
    8078	6b 1a fe ff 00 00 00 00	*(u16 *)(r10 - 0x2) = r1
    8079	b7 03 00 00 25 00 00 00	r3 = 0x25
    8080	05 00 13 00 00 00 00 00	goto +0x13 <LBB494_5>

000000000000fc88 <LBB494_3>
    8081	bf 14 00 00 00 00 00 00	r4 = r1
    8082	37 04 00 00 64 00 00 00	r4 /= 0x64
    8083	bf 43 00 00 00 00 00 00	r3 = r4
    8084	27 03 00 00 64 00 00 00	r3 *= 0x64
    8085	1f 31 00 00 00 00 00 00	r1 -= r3
    8086	57 01 00 00 ff 00 00 00	r1 &= 0xff
    8087	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8088	18 03 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f33 ll
    8090	0f 13 00 00 00 00 00 00	r3 += r1
    8091	69 31 00 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x0)
    8092	6b 1a fe ff 00 00 00 00	*(u16 *)(r10 - 0x2) = r1
    8093	b7 03 00 00 24 00 00 00	r3 = 0x24
    8094	bf 41 00 00 00 00 00 00	r1 = r4

000000000000fcf8 <LBB494_4>
    8095	bf a4 00 00 00 00 00 00	r4 = r10
    8096	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8097	0f 34 00 00 00 00 00 00	r4 += r3
    8098	07 01 00 00 30 00 00 00	r1 += 0x30
    8099	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1

000000000000fd20 <LBB494_5>
    8100	bf a1 00 00 00 00 00 00	r1 = r10
    8101	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8102	0f 31 00 00 00 00 00 00	r1 += r3
    8103	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8104	b7 01 00 00 27 00 00 00	r1 = 0x27
    8105	1f 31 00 00 00 00 00 00	r1 -= r3
    8106	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8107	bf a5 00 00 00 00 00 00	r5 = r10
    8108	bf 21 00 00 00 00 00 00	r1 = r2
    8109	b7 02 00 00 01 00 00 00	r2 = 0x1
    8110	18 03 00 00 b8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12eb8 ll
    8112	b7 04 00 00 00 00 00 00	r4 = 0x0
    8113	85 10 00 00 79 f9 ff ff	call -0x687 ; <core::fmt::Formatter::pad_integral>
    8114	95 00 00 00 00 00 00 00	exit

000000000000fd98 <core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt>
    8115	bf 23 00 00 00 00 00 00	r3 = r2
    8116	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    8117	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8118	bf 12 00 00 00 00 00 00	r2 = r1
    8119	c7 02 00 00 3f 00 00 00	r2 s>>= 0x3f
    8120	c7 01 00 00 20 00 00 00	r1 s>>= 0x20
    8121	bf 14 00 00 00 00 00 00	r4 = r1
    8122	0f 24 00 00 00 00 00 00	r4 += r2
    8123	af 24 00 00 00 00 00 00	r4 ^= r2
    8124	b7 02 00 00 27 00 00 00	r2 = 0x27
    8125	b7 05 00 00 10 27 00 00	r5 = 0x2710
    8126	2d 45 20 00 00 00 00 00	if r5 > r4 goto +0x20 <LBB497_4>
    8127	b7 02 00 00 00 00 00 00	r2 = 0x0

000000000000fe00 <LBB497_2>
    8128	bf 45 00 00 00 00 00 00	r5 = r4
    8129	37 04 00 00 10 27 00 00	r4 /= 0x2710
    8130	bf 40 00 00 00 00 00 00	r0 = r4
    8131	27 00 00 00 10 27 00 00	r0 *= 0x2710
    8132	bf 56 00 00 00 00 00 00	r6 = r5
    8133	1f 06 00 00 00 00 00 00	r6 -= r0
    8134	bf 60 00 00 00 00 00 00	r0 = r6
    8135	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8136	37 00 00 00 64 00 00 00	r0 /= 0x64
    8137	bf 07 00 00 00 00 00 00	r7 = r0
    8138	27 07 00 00 64 00 00 00	r7 *= 0x64
    8139	1f 76 00 00 00 00 00 00	r6 -= r7
    8140	bf a7 00 00 00 00 00 00	r7 = r10
    8141	07 07 00 00 d9 ff ff ff	r7 += -0x27
    8142	0f 27 00 00 00 00 00 00	r7 += r2
    8143	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8144	18 08 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r8 = 0x12f33 ll
    8146	0f 08 00 00 00 00 00 00	r8 += r0
    8147	69 80 00 00 00 00 00 00	r0 = *(u16 *)(r8 + 0x0)
    8148	6b 07 23 00 00 00 00 00	*(u16 *)(r7 + 0x23) = r0
    8149	57 06 00 00 ff ff 00 00	r6 &= 0xffff
    8150	67 06 00 00 01 00 00 00	r6 <<= 0x1
    8151	18 00 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r0 = 0x12f33 ll
    8153	0f 60 00 00 00 00 00 00	r0 += r6
    8154	69 00 00 00 00 00 00 00	r0 = *(u16 *)(r0 + 0x0)
    8155	6b 07 25 00 00 00 00 00	*(u16 *)(r7 + 0x25) = r0
    8156	07 02 00 00 fc ff ff ff	r2 += -0x4
    8157	25 05 e2 ff ff e0 f5 05	if r5 > 0x5f5e0ff goto -0x1e <LBB497_2>
    8158	07 02 00 00 27 00 00 00	r2 += 0x27

000000000000fef8 <LBB497_4>
    8159	25 04 0a 00 63 00 00 00	if r4 > 0x63 goto +0xa <LBB497_6>

000000000000ff00 <LBB497_5>
    8160	b7 05 00 00 0a 00 00 00	r5 = 0xa
    8161	6d 45 01 00 00 00 00 00	if r5 s> r4 goto +0x1 <LBB497_8>
    8162	05 00 1a 00 00 00 00 00	goto +0x1a <LBB497_7>

000000000000ff18 <LBB497_8>
    8163	07 02 00 00 ff ff ff ff	r2 += -0x1
    8164	bf a5 00 00 00 00 00 00	r5 = r10
    8165	07 05 00 00 d9 ff ff ff	r5 += -0x27
    8166	0f 25 00 00 00 00 00 00	r5 += r2
    8167	07 04 00 00 30 00 00 00	r4 += 0x30
    8168	73 45 00 00 00 00 00 00	*(u8 *)(r5 + 0x0) = r4
    8169	05 00 1d 00 00 00 00 00	goto +0x1d <LBB497_9>

000000000000ff50 <LBB497_6>
    8170	bf 45 00 00 00 00 00 00	r5 = r4
    8171	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8172	37 05 00 00 64 00 00 00	r5 /= 0x64
    8173	bf 50 00 00 00 00 00 00	r0 = r5
    8174	27 00 00 00 64 00 00 00	r0 *= 0x64
    8175	1f 04 00 00 00 00 00 00	r4 -= r0
    8176	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8177	67 04 00 00 01 00 00 00	r4 <<= 0x1
    8178	18 00 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r0 = 0x12f33 ll
    8180	0f 40 00 00 00 00 00 00	r0 += r4
    8181	07 02 00 00 fe ff ff ff	r2 += -0x2
    8182	bf a4 00 00 00 00 00 00	r4 = r10
    8183	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8184	0f 24 00 00 00 00 00 00	r4 += r2
    8185	69 00 00 00 00 00 00 00	r0 = *(u16 *)(r0 + 0x0)
    8186	6b 04 00 00 00 00 00 00	*(u16 *)(r4 + 0x0) = r0
    8187	bf 54 00 00 00 00 00 00	r4 = r5
    8188	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB497_5>

000000000000ffe8 <LBB497_7>
    8189	67 04 00 00 01 00 00 00	r4 <<= 0x1
    8190	18 05 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f33 ll
    8192	0f 45 00 00 00 00 00 00	r5 += r4
    8193	07 02 00 00 fe ff ff ff	r2 += -0x2
    8194	bf a4 00 00 00 00 00 00	r4 = r10
    8195	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8196	0f 24 00 00 00 00 00 00	r4 += r2
    8197	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8198	6b 54 00 00 00 00 00 00	*(u16 *)(r4 + 0x0) = r5

0000000000010038 <LBB497_9>
    8199	b7 04 00 00 27 00 00 00	r4 = 0x27
    8200	1f 24 00 00 00 00 00 00	r4 -= r2
    8201	bf a5 00 00 00 00 00 00	r5 = r10
    8202	07 05 00 00 d9 ff ff ff	r5 += -0x27
    8203	0f 25 00 00 00 00 00 00	r5 += r2
    8204	7b 5a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r5
    8205	7b 4a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r4
    8206	b7 02 00 00 01 00 00 00	r2 = 0x1
    8207	65 01 01 00 ff ff ff ff	if r1 s> -0x1 goto +0x1 <LBB497_11>
    8208	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000010088 <LBB497_11>
    8209	bf a5 00 00 00 00 00 00	r5 = r10
    8210	bf 31 00 00 00 00 00 00	r1 = r3
    8211	18 03 00 00 b8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12eb8 ll
    8213	b7 04 00 00 00 00 00 00	r4 = 0x0
    8214	85 10 00 00 14 f9 ff ff	call -0x6ec ; <core::fmt::Formatter::pad_integral>
    8215	95 00 00 00 00 00 00 00	exit

00000000000100c0 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>
    8216	b7 03 00 00 27 00 00 00	r3 = 0x27
    8217	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    8218	b7 04 00 00 10 27 00 00	r4 = 0x2710
    8219	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB498_4>
    8220	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000100e8 <LBB498_2>
    8221	bf 14 00 00 00 00 00 00	r4 = r1
    8222	37 01 00 00 10 27 00 00	r1 /= 0x2710
    8223	bf 15 00 00 00 00 00 00	r5 = r1
    8224	27 05 00 00 10 27 00 00	r5 *= 0x2710
    8225	bf 40 00 00 00 00 00 00	r0 = r4
    8226	1f 50 00 00 00 00 00 00	r0 -= r5
    8227	bf 05 00 00 00 00 00 00	r5 = r0
    8228	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8229	37 05 00 00 64 00 00 00	r5 /= 0x64
    8230	bf 56 00 00 00 00 00 00	r6 = r5
    8231	27 06 00 00 64 00 00 00	r6 *= 0x64
    8232	1f 60 00 00 00 00 00 00	r0 -= r6
    8233	bf a6 00 00 00 00 00 00	r6 = r10
    8234	07 06 00 00 d9 ff ff ff	r6 += -0x27
    8235	0f 36 00 00 00 00 00 00	r6 += r3
    8236	67 05 00 00 01 00 00 00	r5 <<= 0x1
    8237	18 07 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r7 = 0x12f33 ll
    8239	0f 57 00 00 00 00 00 00	r7 += r5
    8240	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    8241	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    8242	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8243	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8244	18 05 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f33 ll
    8246	0f 05 00 00 00 00 00 00	r5 += r0
    8247	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8248	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    8249	07 03 00 00 fc ff ff ff	r3 += -0x4
    8250	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB498_2>
    8251	07 03 00 00 27 00 00 00	r3 += 0x27

00000000000101e0 <LBB498_4>
    8252	25 01 0a 00 63 00 00 00	if r1 > 0x63 goto +0xa <LBB498_6>

00000000000101e8 <LBB498_5>
    8253	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8254	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB498_8>
    8255	05 00 1a 00 00 00 00 00	goto +0x1a <LBB498_7>

0000000000010200 <LBB498_8>
    8256	07 03 00 00 ff ff ff ff	r3 += -0x1
    8257	bf a4 00 00 00 00 00 00	r4 = r10
    8258	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8259	0f 34 00 00 00 00 00 00	r4 += r3
    8260	07 01 00 00 30 00 00 00	r1 += 0x30
    8261	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    8262	05 00 1d 00 00 00 00 00	goto +0x1d <LBB498_9>

0000000000010238 <LBB498_6>
    8263	bf 14 00 00 00 00 00 00	r4 = r1
    8264	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8265	37 04 00 00 64 00 00 00	r4 /= 0x64
    8266	bf 45 00 00 00 00 00 00	r5 = r4
    8267	27 05 00 00 64 00 00 00	r5 *= 0x64
    8268	1f 51 00 00 00 00 00 00	r1 -= r5
    8269	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8270	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8271	18 05 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f33 ll
    8273	0f 15 00 00 00 00 00 00	r5 += r1
    8274	07 03 00 00 fe ff ff ff	r3 += -0x2
    8275	bf a1 00 00 00 00 00 00	r1 = r10
    8276	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8277	0f 31 00 00 00 00 00 00	r1 += r3
    8278	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8279	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8280	bf 41 00 00 00 00 00 00	r1 = r4
    8281	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB498_5>

00000000000102d0 <LBB498_7>
    8282	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8283	18 04 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r4 = 0x12f33 ll
    8285	0f 14 00 00 00 00 00 00	r4 += r1
    8286	07 03 00 00 fe ff ff ff	r3 += -0x2
    8287	bf a1 00 00 00 00 00 00	r1 = r10
    8288	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8289	0f 31 00 00 00 00 00 00	r1 += r3
    8290	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8291	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

0000000000010320 <LBB498_9>
    8292	bf a1 00 00 00 00 00 00	r1 = r10
    8293	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8294	0f 31 00 00 00 00 00 00	r1 += r3
    8295	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8296	b7 01 00 00 27 00 00 00	r1 = 0x27
    8297	1f 31 00 00 00 00 00 00	r1 -= r3
    8298	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8299	bf a5 00 00 00 00 00 00	r5 = r10
    8300	bf 21 00 00 00 00 00 00	r1 = r2
    8301	b7 02 00 00 01 00 00 00	r2 = 0x1
    8302	18 03 00 00 b8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12eb8 ll
    8304	b7 04 00 00 00 00 00 00	r4 = 0x0
    8305	85 10 00 00 b9 f8 ff ff	call -0x747 ; <core::fmt::Formatter::pad_integral>
    8306	95 00 00 00 00 00 00 00	exit

0000000000010398 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt>
    8307	b7 03 00 00 27 00 00 00	r3 = 0x27
    8308	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8309	b7 04 00 00 10 27 00 00	r4 = 0x2710
    8310	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB500_4>
    8311	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000103c0 <LBB500_2>
    8312	bf 14 00 00 00 00 00 00	r4 = r1
    8313	37 01 00 00 10 27 00 00	r1 /= 0x2710
    8314	bf 15 00 00 00 00 00 00	r5 = r1
    8315	27 05 00 00 10 27 00 00	r5 *= 0x2710
    8316	bf 40 00 00 00 00 00 00	r0 = r4
    8317	1f 50 00 00 00 00 00 00	r0 -= r5
    8318	bf 05 00 00 00 00 00 00	r5 = r0
    8319	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8320	37 05 00 00 64 00 00 00	r5 /= 0x64
    8321	bf 56 00 00 00 00 00 00	r6 = r5
    8322	27 06 00 00 64 00 00 00	r6 *= 0x64
    8323	1f 60 00 00 00 00 00 00	r0 -= r6
    8324	bf a6 00 00 00 00 00 00	r6 = r10
    8325	07 06 00 00 d9 ff ff ff	r6 += -0x27
    8326	0f 36 00 00 00 00 00 00	r6 += r3
    8327	67 05 00 00 01 00 00 00	r5 <<= 0x1
    8328	18 07 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r7 = 0x12f33 ll
    8330	0f 57 00 00 00 00 00 00	r7 += r5
    8331	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    8332	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    8333	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8334	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8335	18 05 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f33 ll
    8337	0f 05 00 00 00 00 00 00	r5 += r0
    8338	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8339	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    8340	07 03 00 00 fc ff ff ff	r3 += -0x4
    8341	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB500_2>
    8342	07 03 00 00 27 00 00 00	r3 += 0x27

00000000000104b8 <LBB500_4>
    8343	65 01 0a 00 63 00 00 00	if r1 s> 0x63 goto +0xa <LBB500_6>

00000000000104c0 <LBB500_5>
    8344	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8345	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB500_8>
    8346	05 00 1a 00 00 00 00 00	goto +0x1a <LBB500_7>

00000000000104d8 <LBB500_8>
    8347	07 03 00 00 ff ff ff ff	r3 += -0x1
    8348	bf a4 00 00 00 00 00 00	r4 = r10
    8349	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8350	0f 34 00 00 00 00 00 00	r4 += r3
    8351	07 01 00 00 30 00 00 00	r1 += 0x30
    8352	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    8353	05 00 1d 00 00 00 00 00	goto +0x1d <LBB500_9>

0000000000010510 <LBB500_6>
    8354	bf 14 00 00 00 00 00 00	r4 = r1
    8355	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8356	37 04 00 00 64 00 00 00	r4 /= 0x64
    8357	bf 45 00 00 00 00 00 00	r5 = r4
    8358	27 05 00 00 64 00 00 00	r5 *= 0x64
    8359	1f 51 00 00 00 00 00 00	r1 -= r5
    8360	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8361	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8362	18 05 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f33 ll
    8364	0f 15 00 00 00 00 00 00	r5 += r1
    8365	07 03 00 00 fe ff ff ff	r3 += -0x2
    8366	bf a1 00 00 00 00 00 00	r1 = r10
    8367	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8368	0f 31 00 00 00 00 00 00	r1 += r3
    8369	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8370	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8371	bf 41 00 00 00 00 00 00	r1 = r4
    8372	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB500_5>

00000000000105a8 <LBB500_7>
    8373	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8374	18 04 00 00 33 2f 01 00 00 00 00 00 00 00 00 00	r4 = 0x12f33 ll
    8376	0f 14 00 00 00 00 00 00	r4 += r1
    8377	07 03 00 00 fe ff ff ff	r3 += -0x2
    8378	bf a1 00 00 00 00 00 00	r1 = r10
    8379	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8380	0f 31 00 00 00 00 00 00	r1 += r3
    8381	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8382	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

00000000000105f8 <LBB500_9>
    8383	bf a1 00 00 00 00 00 00	r1 = r10
    8384	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8385	0f 31 00 00 00 00 00 00	r1 += r3
    8386	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8387	b7 01 00 00 27 00 00 00	r1 = 0x27
    8388	1f 31 00 00 00 00 00 00	r1 -= r3
    8389	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8390	bf a5 00 00 00 00 00 00	r5 = r10
    8391	bf 21 00 00 00 00 00 00	r1 = r2
    8392	b7 02 00 00 01 00 00 00	r2 = 0x1
    8393	18 03 00 00 b8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12eb8 ll
    8395	b7 04 00 00 00 00 00 00	r4 = 0x0
    8396	85 10 00 00 5e f8 ff ff	call -0x7a2 ; <core::fmt::Formatter::pad_integral>
    8397	95 00 00 00 00 00 00 00	exit

0000000000010670 <<core::fmt::Error as core::fmt::Debug>::fmt>
    8398	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    8399	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    8400	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    8401	18 02 00 00 a6 36 01 00 00 00 00 00 00 00 00 00	r2 = 0x136a6 ll
    8403	b7 03 00 00 05 00 00 00	r3 = 0x5
    8404	8d 00 00 00 04 00 00 00	callx r4
    8405	95 00 00 00 00 00 00 00	exit

00000000000106b0 <<&T as core::fmt::Debug>::fmt>
    8406	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    8407	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    8408	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    8409	bf 31 00 00 00 00 00 00	r1 = r3
    8410	8d 00 00 00 04 00 00 00	callx r4
    8411	95 00 00 00 00 00 00 00	exit

00000000000106e0 <<&T as core::fmt::Display>::fmt>
    8412	bf 24 00 00 00 00 00 00	r4 = r2
    8413	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8414	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    8415	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8416	bf 41 00 00 00 00 00 00	r1 = r4
    8417	85 10 00 00 46 f9 ff ff	call -0x6ba ; <core::fmt::Formatter::pad>
    8418	95 00 00 00 00 00 00 00	exit

0000000000010718 <<&T as core::fmt::Display>::fmt>
    8419	79 26 28 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x28)
    8420	79 27 20 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x20)
    8421	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8422	bf a8 00 00 00 00 00 00	r8 = r10
    8423	07 08 00 00 d0 ff ff ff	r8 += -0x30
    8424	bf 81 00 00 00 00 00 00	r1 = r8
    8425	b7 03 00 00 30 00 00 00	r3 = 0x30
    8426	85 10 00 00 de 01 00 00	call 0x1de ; <memcpy>
    8427	bf 71 00 00 00 00 00 00	r1 = r7
    8428	bf 62 00 00 00 00 00 00	r2 = r6
    8429	bf 83 00 00 00 00 00 00	r3 = r8
    8430	85 10 00 00 ad f7 ff ff	call -0x853 ; <core::fmt::write>
    8431	95 00 00 00 00 00 00 00	exit

0000000000010780 <<&T as core::fmt::Display>::fmt>
    8432	bf 24 00 00 00 00 00 00	r4 = r2
    8433	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    8434	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8435	bf 41 00 00 00 00 00 00	r1 = r4
    8436	85 10 00 00 33 f9 ff ff	call -0x6cd ; <core::fmt::Formatter::pad>
    8437	95 00 00 00 00 00 00 00	exit

00000000000107b0 <core::unicode::unicode_data::grapheme_extend::lookup>
    8438	b7 02 00 00 00 00 00 00	r2 = 0x0
    8439	b7 03 00 00 20 00 00 00	r3 = 0x20
    8440	bf 14 00 00 00 00 00 00	r4 = r1
    8441	67 04 00 00 0b 00 00 00	r4 <<= 0xb
    8442	b7 05 00 00 20 00 00 00	r5 = 0x20
    8443	05 00 06 00 00 00 00 00	goto +0x6 <LBB646_1>

00000000000107e0 <LBB646_3>
    8444	07 03 00 00 01 00 00 00	r3 += 0x1
    8445	bf 32 00 00 00 00 00 00	r2 = r3
    8446	bf 53 00 00 00 00 00 00	r3 = r5

00000000000107f8 <LBB646_4>
    8447	1f 23 00 00 00 00 00 00	r3 -= r2
    8448	2d 25 01 00 00 00 00 00	if r5 > r2 goto +0x1 <LBB646_1>
    8449	05 00 14 00 00 00 00 00	goto +0x14 <LBB646_6>

0000000000010810 <LBB646_1>
    8450	77 03 00 00 01 00 00 00	r3 >>= 0x1
    8451	0f 23 00 00 00 00 00 00	r3 += r2
    8452	bf 30 00 00 00 00 00 00	r0 = r3
    8453	67 00 00 00 02 00 00 00	r0 <<= 0x2
    8454	18 06 00 00 ac 36 01 00 00 00 00 00 00 00 00 00	r6 = 0x136ac ll
    8456	0f 06 00 00 00 00 00 00	r6 += r0
    8457	61 60 00 00 00 00 00 00	r0 = *(u32 *)(r6 + 0x0)
    8458	67 00 00 00 0b 00 00 00	r0 <<= 0xb
    8459	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8460	bf 46 00 00 00 00 00 00	r6 = r4
    8461	67 06 00 00 20 00 00 00	r6 <<= 0x20
    8462	77 00 00 00 20 00 00 00	r0 >>= 0x20
    8463	77 06 00 00 20 00 00 00	r6 >>= 0x20
    8464	2d 06 eb ff 00 00 00 00	if r6 > r0 goto -0x15 <LBB646_3>
    8465	bf 35 00 00 00 00 00 00	r5 = r3
    8466	1d 60 01 00 00 00 00 00	if r0 == r6 goto +0x1 <LBB646_5>
    8467	05 00 eb ff 00 00 00 00	goto -0x15 <LBB646_4>

00000000000108a0 <LBB646_5>
    8468	07 03 00 00 01 00 00 00	r3 += 0x1
    8469	bf 32 00 00 00 00 00 00	r2 = r3

00000000000108b0 <LBB646_6>
    8470	25 02 45 00 1f 00 00 00	if r2 > 0x1f goto +0x45 <LBB646_8>
    8471	bf 25 00 00 00 00 00 00	r5 = r2
    8472	67 05 00 00 02 00 00 00	r5 <<= 0x2
    8473	18 00 00 00 ac 36 01 00 00 00 00 00 00 00 00 00	r0 = 0x136ac ll
    8475	b7 04 00 00 c3 02 00 00	r4 = 0x2c3
    8476	15 02 04 00 1f 00 00 00	if r2 == 0x1f goto +0x4 <LBB646_10>
    8477	bf 53 00 00 00 00 00 00	r3 = r5
    8478	0f 03 00 00 00 00 00 00	r3 += r0
    8479	61 34 04 00 00 00 00 00	r4 = *(u32 *)(r3 + 0x4)
    8480	77 04 00 00 15 00 00 00	r4 >>= 0x15

0000000000010908 <LBB646_10>
    8481	bf 23 00 00 00 00 00 00	r3 = r2
    8482	07 03 00 00 ff ff ff ff	r3 += -0x1
    8483	b7 06 00 00 00 00 00 00	r6 = 0x0
    8484	b7 07 00 00 01 00 00 00	r7 = 0x1
    8485	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB646_12>
    8486	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000010938 <LBB646_12>
    8487	57 07 00 00 01 00 00 00	r7 &= 0x1
    8488	55 07 0e 00 00 00 00 00	if r7 != 0x0 goto +0xe <LBB646_16>
    8489	b7 02 00 00 20 00 00 00	r2 = 0x20
    8490	2d 32 06 00 00 00 00 00	if r2 > r3 goto +0x6 <LBB646_15>
    8491	bf 31 00 00 00 00 00 00	r1 = r3
    8492	b7 02 00 00 20 00 00 00	r2 = 0x20
    8493	18 03 00 00 c0 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x140c0 ll
    8495	85 10 00 00 19 f7 ff ff	call -0x8e7 ; <core::panicking::panic_bounds_check>
    8496	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010988 <LBB646_15>
    8497	67 03 00 00 02 00 00 00	r3 <<= 0x2
    8498	18 02 00 00 ac 36 01 00 00 00 00 00 00 00 00 00	r2 = 0x136ac ll
    8500	0f 32 00 00 00 00 00 00	r2 += r3
    8501	61 26 00 00 00 00 00 00	r6 = *(u32 *)(r2 + 0x0)
    8502	57 06 00 00 ff ff 1f 00	r6 &= 0x1fffff

00000000000109b8 <LBB646_16>
    8503	0f 50 00 00 00 00 00 00	r0 += r5
    8504	61 00 00 00 00 00 00 00	r0 = *(u32 *)(r0 + 0x0)
    8505	77 00 00 00 15 00 00 00	r0 >>= 0x15
    8506	bf 02 00 00 00 00 00 00	r2 = r0
    8507	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    8508	0f 24 00 00 00 00 00 00	r4 += r2
    8509	15 04 16 00 00 00 00 00	if r4 == 0x0 goto +0x16 <LBB646_23>
    8510	1f 61 00 00 00 00 00 00	r1 -= r6
    8511	18 03 00 00 2c 37 01 00 00 00 00 00 00 00 00 00	r3 = 0x1372c ll
    8513	0f 03 00 00 00 00 00 00	r3 += r0
    8514	b7 05 00 00 00 00 00 00	r5 = 0x0
    8515	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8516	77 01 00 00 20 00 00 00	r1 >>= 0x20
    8517	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000010a30 <LBB646_18>
    8518	bf 02 00 00 00 00 00 00	r2 = r0
    8519	0f 62 00 00 00 00 00 00	r2 += r6
    8520	25 02 0d 00 c2 02 00 00	if r2 > 0x2c2 goto +0xd <LBB646_20>
    8521	bf 32 00 00 00 00 00 00	r2 = r3
    8522	0f 62 00 00 00 00 00 00	r2 += r6
    8523	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    8524	0f 25 00 00 00 00 00 00	r5 += r2
    8525	bf 52 00 00 00 00 00 00	r2 = r5
    8526	67 02 00 00 20 00 00 00	r2 <<= 0x20
    8527	77 02 00 00 20 00 00 00	r2 >>= 0x20
    8528	2d 12 02 00 00 00 00 00	if r2 > r1 goto +0x2 <LBB646_22>
    8529	07 06 00 00 01 00 00 00	r6 += 0x1
    8530	2d 64 f3 ff 00 00 00 00	if r4 > r6 goto -0xd <LBB646_18>

0000000000010a98 <LBB646_22>
    8531	0f 60 00 00 00 00 00 00	r0 += r6

0000000000010aa0 <LBB646_23>
    8532	57 00 00 00 01 00 00 00	r0 &= 0x1
    8533	95 00 00 00 00 00 00 00	exit

0000000000010ab0 <LBB646_20>
    8534	bf 21 00 00 00 00 00 00	r1 = r2
    8535	b7 02 00 00 c3 02 00 00	r2 = 0x2c3
    8536	18 03 00 00 a8 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x140a8 ll
    8538	85 10 00 00 ee f6 ff ff	call -0x912 ; <core::panicking::panic_bounds_check>
    8539	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010ae0 <LBB646_8>
    8540	bf 21 00 00 00 00 00 00	r1 = r2
    8541	b7 02 00 00 20 00 00 00	r2 = 0x20
    8542	18 03 00 00 90 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14090 ll
    8544	85 10 00 00 e8 f6 ff ff	call -0x918 ; <core::panicking::panic_bounds_check>
    8545	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010b10 <__adddf3>
    8546	85 10 00 00 d8 01 00 00	call 0x1d8 ; <compiler_builtins::float::add::__adddf3>
    8547	95 00 00 00 00 00 00 00	exit

0000000000010b20 <__fixunsdfdi>
    8548	b7 00 00 00 00 00 00 00	r0 = 0x0
    8549	bf 12 00 00 00 00 00 00	r2 = r1
    8550	77 02 00 00 34 00 00 00	r2 >>= 0x34
    8551	57 02 00 00 ff 07 00 00	r2 &= 0x7ff
    8552	b7 03 00 00 ff 03 00 00	r3 = 0x3ff
    8553	2d 23 14 00 00 00 00 00	if r3 > r2 goto +0x14 <LBB0_7>
    8554	b7 03 00 00 00 00 00 00	r3 = 0x0
    8555	6d 13 12 00 00 00 00 00	if r3 s> r1 goto +0x12 <LBB0_7>
    8556	b7 00 00 00 ff ff ff ff	r0 = -0x1
    8557	25 02 10 00 3e 04 00 00	if r2 > 0x43e goto +0x10 <LBB0_7>
    8558	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r3 = 0xfffffffffffff ll
    8560	5f 31 00 00 00 00 00 00	r1 &= r3
    8561	18 03 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r3 = 0x10000000000000 ll
    8563	4f 31 00 00 00 00 00 00	r1 |= r3
    8564	b7 03 00 00 33 04 00 00	r3 = 0x433
    8565	2d 23 04 00 00 00 00 00	if r3 > r2 goto +0x4 <LBB0_5>
    8566	07 02 00 00 cd fb ff ff	r2 += -0x433
    8567	57 02 00 00 ff ff 00 00	r2 &= 0xffff
    8568	6f 21 00 00 00 00 00 00	r1 <<= r2
    8569	05 00 03 00 00 00 00 00	goto +0x3 <LBB0_6>

0000000000010bd0 <LBB0_5>
    8570	1f 23 00 00 00 00 00 00	r3 -= r2
    8571	57 03 00 00 ff ff 00 00	r3 &= 0xffff
    8572	7f 31 00 00 00 00 00 00	r1 >>= r3

0000000000010be8 <LBB0_6>
    8573	bf 10 00 00 00 00 00 00	r0 = r1

0000000000010bf0 <LBB0_7>
    8574	95 00 00 00 00 00 00 00	exit

0000000000010bf8 <__gtdf2>
    8575	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8577	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r5 = 0x7fffffffffffffff ll
    8579	bf 13 00 00 00 00 00 00	r3 = r1
    8580	5f 53 00 00 00 00 00 00	r3 &= r5
    8581	18 06 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r6 = 0x7ff0000000000000 ll
    8583	2d 63 18 00 00 00 00 00	if r3 > r6 goto +0x18 <LBB0_9>
    8584	bf 24 00 00 00 00 00 00	r4 = r2
    8585	5f 54 00 00 00 00 00 00	r4 &= r5
    8586	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8588	2d 64 13 00 00 00 00 00	if r4 > r6 goto +0x13 <LBB0_9>
    8589	4f 34 00 00 00 00 00 00	r4 |= r3
    8590	b7 00 00 00 00 00 00 00	r0 = 0x0
    8591	15 04 10 00 00 00 00 00	if r4 == 0x0 goto +0x10 <LBB0_9>
    8592	bf 23 00 00 00 00 00 00	r3 = r2
    8593	5f 13 00 00 00 00 00 00	r3 &= r1
    8594	65 03 06 00 ff ff ff ff	if r3 s> -0x1 goto +0x6 <LBB0_5>
    8595	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8597	6d 21 0a 00 00 00 00 00	if r1 s> r2 goto +0xa <LBB0_9>
    8598	b7 00 00 00 01 00 00 00	r0 = 0x1
    8599	1d 21 07 00 00 00 00 00	if r1 == r2 goto +0x7 <LBB0_8>
    8600	05 00 07 00 00 00 00 00	goto +0x7 <LBB0_9>

0000000000010cc8 <LBB0_5>
    8601	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8603	6d 12 04 00 00 00 00 00	if r2 s> r1 goto +0x4 <LBB0_9>
    8604	b7 00 00 00 01 00 00 00	r0 = 0x1
    8605	1d 21 01 00 00 00 00 00	if r1 == r2 goto +0x1 <LBB0_8>
    8606	05 00 01 00 00 00 00 00	goto +0x1 <LBB0_9>

0000000000010cf8 <LBB0_8>
    8607	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000010d00 <LBB0_9>
    8608	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8609	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    8610	95 00 00 00 00 00 00 00	exit

0000000000010d18 <__gedf2>
    8611	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8613	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r5 = 0x7fffffffffffffff ll
    8615	bf 13 00 00 00 00 00 00	r3 = r1
    8616	5f 53 00 00 00 00 00 00	r3 &= r5
    8617	18 06 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r6 = 0x7ff0000000000000 ll
    8619	2d 63 18 00 00 00 00 00	if r3 > r6 goto +0x18 <LBB0_9>
    8620	bf 24 00 00 00 00 00 00	r4 = r2
    8621	5f 54 00 00 00 00 00 00	r4 &= r5
    8622	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8624	2d 64 13 00 00 00 00 00	if r4 > r6 goto +0x13 <LBB0_9>
    8625	4f 34 00 00 00 00 00 00	r4 |= r3
    8626	b7 00 00 00 00 00 00 00	r0 = 0x0
    8627	15 04 10 00 00 00 00 00	if r4 == 0x0 goto +0x10 <LBB0_9>
    8628	bf 23 00 00 00 00 00 00	r3 = r2
    8629	5f 13 00 00 00 00 00 00	r3 &= r1
    8630	65 03 06 00 ff ff ff ff	if r3 s> -0x1 goto +0x6 <LBB0_5>
    8631	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8633	6d 21 0a 00 00 00 00 00	if r1 s> r2 goto +0xa <LBB0_9>
    8634	b7 00 00 00 01 00 00 00	r0 = 0x1
    8635	1d 21 07 00 00 00 00 00	if r1 == r2 goto +0x7 <LBB0_8>
    8636	05 00 07 00 00 00 00 00	goto +0x7 <LBB0_9>

0000000000010de8 <LBB0_5>
    8637	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8639	6d 12 04 00 00 00 00 00	if r2 s> r1 goto +0x4 <LBB0_9>
    8640	b7 00 00 00 01 00 00 00	r0 = 0x1
    8641	1d 21 01 00 00 00 00 00	if r1 == r2 goto +0x1 <LBB0_8>
    8642	05 00 01 00 00 00 00 00	goto +0x1 <LBB0_9>

0000000000010e18 <LBB0_8>
    8643	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000010e20 <LBB0_9>
    8644	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8645	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    8646	95 00 00 00 00 00 00 00	exit

0000000000010e38 <__muldf3>
    8647	85 10 00 00 01 00 00 00	call 0x1 ; <compiler_builtins::float::mul::__muldf3>
    8648	95 00 00 00 00 00 00 00	exit

0000000000010e48 <compiler_builtins::float::mul::__muldf3>
    8649	bf 26 00 00 00 00 00 00	r6 = r2
    8650	bf 63 00 00 00 00 00 00	r3 = r6
    8651	af 13 00 00 00 00 00 00	r3 ^= r1
    8652	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8654	5f 23 00 00 00 00 00 00	r3 &= r2
    8655	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    8656	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r5 = 0xfffffffffffff ll
    8658	bf 62 00 00 00 00 00 00	r2 = r6
    8659	5f 52 00 00 00 00 00 00	r2 &= r5
    8660	bf 14 00 00 00 00 00 00	r4 = r1
    8661	5f 54 00 00 00 00 00 00	r4 &= r5
    8662	bf 67 00 00 00 00 00 00	r7 = r6
    8663	77 07 00 00 34 00 00 00	r7 >>= 0x34
    8664	57 07 00 00 ff 07 00 00	r7 &= 0x7ff
    8665	bf 18 00 00 00 00 00 00	r8 = r1
    8666	77 08 00 00 34 00 00 00	r8 >>= 0x34
    8667	57 08 00 00 ff 07 00 00	r8 &= 0x7ff
    8668	bf 85 00 00 00 00 00 00	r5 = r8
    8669	07 05 00 00 ff ff ff ff	r5 += -0x1
    8670	25 05 25 00 fd 07 00 00	if r5 > 0x7fd goto +0x25 <LBB1_3>
    8671	b7 09 00 00 00 00 00 00	r9 = 0x0
    8672	bf 75 00 00 00 00 00 00	r5 = r7
    8673	07 05 00 00 ff ff ff ff	r5 += -0x1
    8674	25 05 21 00 fd 07 00 00	if r5 > 0x7fd goto +0x21 <LBB1_3>

0000000000010f18 <LBB1_2>
    8675	67 02 00 00 0b 00 00 00	r2 <<= 0xb
    8676	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r1 = -0x8000000000000000 ll
    8678	4f 12 00 00 00 00 00 00	r2 |= r1
    8679	18 06 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r6 = 0x10000000000000 ll
    8681	4f 64 00 00 00 00 00 00	r4 |= r6
    8682	bf a1 00 00 00 00 00 00	r1 = r10
    8683	07 01 00 00 f0 ff ff ff	r1 += -0x10
    8684	b7 03 00 00 00 00 00 00	r3 = 0x0
    8685	b7 05 00 00 00 00 00 00	r5 = 0x0
    8686	85 10 00 00 99 02 00 00	call 0x299 ; <__multi3>
    8687	0f 87 00 00 00 00 00 00	r7 += r8
    8688	0f 97 00 00 00 00 00 00	r7 += r9
    8689	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    8690	bf 23 00 00 00 00 00 00	r3 = r2
    8691	5f 63 00 00 00 00 00 00	r3 &= r6
    8692	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    8693	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB1_23>
    8694	05 00 1d 00 00 00 00 00	goto +0x1d <LBB1_24>

0000000000010fb8 <LBB1_23>
    8695	67 02 00 00 01 00 00 00	r2 <<= 0x1
    8696	bf 13 00 00 00 00 00 00	r3 = r1
    8697	77 03 00 00 3f 00 00 00	r3 >>= 0x3f
    8698	4f 32 00 00 00 00 00 00	r2 |= r3
    8699	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8700	07 07 00 00 01 fc ff ff	r7 += -0x3ff
    8701	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8702	65 07 01 00 fe 07 00 00	if r7 s> 0x7fe goto +0x1 <LBB1_26>
    8703	05 00 17 00 00 00 00 00	goto +0x17 <LBB1_25>

0000000000011000 <LBB1_26>
    8704	18 01 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r1 = 0x7ff0000000000000 ll
    8706	4f 10 00 00 00 00 00 00	r0 |= r1
    8707	05 00 48 00 00 00 00 00	goto +0x48 <LBB1_35>

0000000000011020 <LBB1_3>
    8708	18 09 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r9 = 0x7fffffffffffffff ll
    8710	bf 15 00 00 00 00 00 00	r5 = r1
    8711	5f 95 00 00 00 00 00 00	r5 &= r9
    8712	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r0 = 0x7ff0000000000000 ll
    8714	2d 05 14 00 00 00 00 00	if r5 > r0 goto +0x14 <LBB1_5>
    8715	bf 63 00 00 00 00 00 00	r3 = r6
    8716	5f 93 00 00 00 00 00 00	r3 &= r9
    8717	2d 03 01 00 00 00 00 00	if r3 > r0 goto +0x1 <LBB1_7>
    8718	05 00 15 00 00 00 00 00	goto +0x15 <LBB1_6>

0000000000011078 <LBB1_7>
    8719	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    8721	4f 16 00 00 00 00 00 00	r6 |= r1
    8722	bf 60 00 00 00 00 00 00	r0 = r6
    8723	05 00 38 00 00 00 00 00	goto +0x38 <LBB1_35>

00000000000110a0 <LBB1_24>
    8724	07 07 00 00 02 fc ff ff	r7 += -0x3fe
    8725	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8726	65 07 e9 ff fe 07 00 00	if r7 s> 0x7fe goto -0x17 <LBB1_26>

00000000000110b8 <LBB1_25>
    8727	b7 03 00 00 01 00 00 00	r3 = 0x1
    8728	6d 73 18 00 00 00 00 00	if r3 s> r7 goto +0x18 <LBB1_28>
    8729	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r3 = 0xfffffffffffff ll
    8731	5f 32 00 00 00 00 00 00	r2 &= r3
    8732	67 07 00 00 34 00 00 00	r7 <<= 0x34
    8733	4f 27 00 00 00 00 00 00	r7 |= r2
    8734	05 00 20 00 00 00 00 00	goto +0x20 <LBB1_30>

00000000000110f8 <LBB1_5>
    8735	18 02 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r2 = 0x8000000000000 ll
    8737	4f 21 00 00 00 00 00 00	r1 |= r2
    8738	bf 10 00 00 00 00 00 00	r0 = r1
    8739	05 00 28 00 00 00 00 00	goto +0x28 <LBB1_35>

0000000000011120 <LBB1_6>
    8740	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r0 = 0x7ff0000000000000 ll
    8742	1d 05 01 00 00 00 00 00	if r5 == r0 goto +0x1 <LBB1_9>
    8743	05 00 25 00 00 00 00 00	goto +0x25 <LBB1_8>

0000000000011140 <LBB1_9>
    8744	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r0 = 0x7ff8000000000000 ll
    8746	15 03 21 00 00 00 00 00	if r3 == 0x0 goto +0x21 <LBB1_35>
    8747	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8749	5f 26 00 00 00 00 00 00	r6 &= r2
    8750	af 16 00 00 00 00 00 00	r6 ^= r1
    8751	bf 60 00 00 00 00 00 00	r0 = r6
    8752	05 00 1b 00 00 00 00 00	goto +0x1b <LBB1_35>

0000000000011188 <LBB1_28>
    8753	1f 73 00 00 00 00 00 00	r3 -= r7
    8754	67 03 00 00 20 00 00 00	r3 <<= 0x20
    8755	77 03 00 00 20 00 00 00	r3 >>= 0x20
    8756	25 03 17 00 3f 00 00 00	if r3 > 0x3f goto +0x17 <LBB1_35>
    8757	07 07 00 00 ff ff ff ff	r7 += -0x1
    8758	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    8759	bf 14 00 00 00 00 00 00	r4 = r1
    8760	4f 24 00 00 00 00 00 00	r4 |= r2
    8761	6f 74 00 00 00 00 00 00	r4 <<= r7
    8762	7f 31 00 00 00 00 00 00	r1 >>= r3
    8763	4f 14 00 00 00 00 00 00	r4 |= r1
    8764	7f 32 00 00 00 00 00 00	r2 >>= r3
    8765	bf 41 00 00 00 00 00 00	r1 = r4
    8766	bf 27 00 00 00 00 00 00	r7 = r2

00000000000111f8 <LBB1_30>
    8767	bf 72 00 00 00 00 00 00	r2 = r7
    8768	4f 02 00 00 00 00 00 00	r2 |= r0
    8769	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x8000000000000000 ll
    8771	2d 31 06 00 00 00 00 00	if r1 > r3 goto +0x6 <LBB1_32>
    8772	bf 20 00 00 00 00 00 00	r0 = r2
    8773	1d 31 01 00 00 00 00 00	if r1 == r3 goto +0x1 <LBB1_33>
    8774	05 00 05 00 00 00 00 00	goto +0x5 <LBB1_35>

0000000000011238 <LBB1_33>
    8775	57 07 00 00 01 00 00 00	r7 &= 0x1
    8776	0f 72 00 00 00 00 00 00	r2 += r7
    8777	05 00 01 00 00 00 00 00	goto +0x1 <LBB1_34>

0000000000011250 <LBB1_32>
    8778	07 02 00 00 01 00 00 00	r2 += 0x1

0000000000011258 <LBB1_34>
    8779	bf 20 00 00 00 00 00 00	r0 = r2

0000000000011260 <LBB1_35>
    8780	95 00 00 00 00 00 00 00	exit

0000000000011268 <LBB1_8>
    8781	1d 03 01 00 00 00 00 00	if r3 == r0 goto +0x1 <LBB1_13>
    8782	05 00 09 00 00 00 00 00	goto +0x9 <LBB1_11>

0000000000011278 <LBB1_13>
    8783	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r0 = 0x7ff8000000000000 ll
    8785	15 05 fa ff 00 00 00 00	if r5 == 0x0 goto -0x6 <LBB1_35>
    8786	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8788	5f 21 00 00 00 00 00 00	r1 &= r2
    8789	af 61 00 00 00 00 00 00	r1 ^= r6
    8790	bf 10 00 00 00 00 00 00	r0 = r1
    8791	05 00 f4 ff 00 00 00 00	goto -0xc <LBB1_35>

00000000000112c0 <LBB1_11>
    8792	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8793	15 05 f2 ff 00 00 00 00	if r5 == 0x0 goto -0xe <LBB1_35>
    8794	15 03 f1 ff 00 00 00 00	if r3 == 0x0 goto -0xf <LBB1_35>
    8795	bf 36 00 00 00 00 00 00	r6 = r3
    8796	b7 09 00 00 00 00 00 00	r9 = 0x0
    8797	18 01 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r1 = 0x10000000000000 ll
    8799	2d 51 02 00 00 00 00 00	if r1 > r5 goto +0x2 <LBB1_17>
    8800	2d 61 35 00 00 00 00 00	if r1 > r6 goto +0x35 <LBB1_20>
    8801	05 00 81 ff 00 00 00 00	goto -0x7f <LBB1_2>

0000000000011310 <LBB1_17>
    8802	b7 00 00 00 40 00 00 00	r0 = 0x40
    8803	15 04 2b 00 00 00 00 00	if r4 == 0x0 goto +0x2b <LBB1_19>
    8804	bf 45 00 00 00 00 00 00	r5 = r4
    8805	77 05 00 00 01 00 00 00	r5 >>= 0x1
    8806	bf 43 00 00 00 00 00 00	r3 = r4
    8807	4f 53 00 00 00 00 00 00	r3 |= r5
    8808	bf 35 00 00 00 00 00 00	r5 = r3
    8809	77 05 00 00 02 00 00 00	r5 >>= 0x2
    8810	4f 53 00 00 00 00 00 00	r3 |= r5
    8811	bf 35 00 00 00 00 00 00	r5 = r3
    8812	77 05 00 00 04 00 00 00	r5 >>= 0x4
    8813	4f 53 00 00 00 00 00 00	r3 |= r5
    8814	bf 35 00 00 00 00 00 00	r5 = r3
    8815	77 05 00 00 08 00 00 00	r5 >>= 0x8
    8816	4f 53 00 00 00 00 00 00	r3 |= r5
    8817	bf 35 00 00 00 00 00 00	r5 = r3
    8818	77 05 00 00 10 00 00 00	r5 >>= 0x10
    8819	4f 53 00 00 00 00 00 00	r3 |= r5
    8820	bf 35 00 00 00 00 00 00	r5 = r3
    8821	77 05 00 00 20 00 00 00	r5 >>= 0x20
    8822	4f 53 00 00 00 00 00 00	r3 |= r5
    8823	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    8824	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    8826	bf 30 00 00 00 00 00 00	r0 = r3
    8827	77 00 00 00 01 00 00 00	r0 >>= 0x1
    8828	5f 50 00 00 00 00 00 00	r0 &= r5
    8829	1f 03 00 00 00 00 00 00	r3 -= r0
    8830	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    8832	bf 30 00 00 00 00 00 00	r0 = r3
    8833	5f 50 00 00 00 00 00 00	r0 &= r5
    8834	77 03 00 00 02 00 00 00	r3 >>= 0x2
    8835	5f 53 00 00 00 00 00 00	r3 &= r5
    8836	0f 30 00 00 00 00 00 00	r0 += r3
    8837	bf 03 00 00 00 00 00 00	r3 = r0
    8838	77 03 00 00 04 00 00 00	r3 >>= 0x4
    8839	0f 30 00 00 00 00 00 00	r0 += r3
    8840	18 03 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r3 = 0xf0f0f0f0f0f0f0f ll
    8842	5f 30 00 00 00 00 00 00	r0 &= r3
    8843	18 03 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r3 = 0x101010101010101 ll
    8845	2f 30 00 00 00 00 00 00	r0 *= r3
    8846	77 00 00 00 38 00 00 00	r0 >>= 0x38

0000000000011478 <LBB1_19>
    8847	b7 09 00 00 0c 00 00 00	r9 = 0xc
    8848	1f 09 00 00 00 00 00 00	r9 -= r0
    8849	07 00 00 00 35 00 00 00	r0 += 0x35
    8850	57 00 00 00 3f 00 00 00	r0 &= 0x3f
    8851	6f 04 00 00 00 00 00 00	r4 <<= r0
    8852	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB1_20>
    8853	05 00 4d ff 00 00 00 00	goto -0xb3 <LBB1_2>

00000000000114b0 <LBB1_20>
    8854	b7 03 00 00 40 00 00 00	r3 = 0x40
    8855	15 02 2b 00 00 00 00 00	if r2 == 0x0 goto +0x2b <LBB1_22>
    8856	bf 23 00 00 00 00 00 00	r3 = r2
    8857	77 03 00 00 01 00 00 00	r3 >>= 0x1
    8858	bf 21 00 00 00 00 00 00	r1 = r2
    8859	4f 31 00 00 00 00 00 00	r1 |= r3
    8860	bf 13 00 00 00 00 00 00	r3 = r1
    8861	77 03 00 00 02 00 00 00	r3 >>= 0x2
    8862	4f 31 00 00 00 00 00 00	r1 |= r3
    8863	bf 13 00 00 00 00 00 00	r3 = r1
    8864	77 03 00 00 04 00 00 00	r3 >>= 0x4
    8865	4f 31 00 00 00 00 00 00	r1 |= r3
    8866	bf 13 00 00 00 00 00 00	r3 = r1
    8867	77 03 00 00 08 00 00 00	r3 >>= 0x8
    8868	4f 31 00 00 00 00 00 00	r1 |= r3
    8869	bf 13 00 00 00 00 00 00	r3 = r1
    8870	77 03 00 00 10 00 00 00	r3 >>= 0x10
    8871	4f 31 00 00 00 00 00 00	r1 |= r3
    8872	bf 13 00 00 00 00 00 00	r3 = r1
    8873	77 03 00 00 20 00 00 00	r3 >>= 0x20
    8874	4f 31 00 00 00 00 00 00	r1 |= r3
    8875	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    8876	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    8878	bf 15 00 00 00 00 00 00	r5 = r1
    8879	77 05 00 00 01 00 00 00	r5 >>= 0x1
    8880	5f 35 00 00 00 00 00 00	r5 &= r3
    8881	1f 51 00 00 00 00 00 00	r1 -= r5
    8882	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    8884	bf 13 00 00 00 00 00 00	r3 = r1
    8885	5f 53 00 00 00 00 00 00	r3 &= r5
    8886	77 01 00 00 02 00 00 00	r1 >>= 0x2
    8887	5f 51 00 00 00 00 00 00	r1 &= r5
    8888	0f 13 00 00 00 00 00 00	r3 += r1
    8889	bf 31 00 00 00 00 00 00	r1 = r3
    8890	77 01 00 00 04 00 00 00	r1 >>= 0x4
    8891	0f 13 00 00 00 00 00 00	r3 += r1
    8892	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    8894	5f 13 00 00 00 00 00 00	r3 &= r1
    8895	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    8897	2f 13 00 00 00 00 00 00	r3 *= r1
    8898	77 03 00 00 38 00 00 00	r3 >>= 0x38

0000000000011618 <LBB1_22>
    8899	1f 39 00 00 00 00 00 00	r9 -= r3
    8900	07 03 00 00 35 00 00 00	r3 += 0x35
    8901	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    8902	6f 32 00 00 00 00 00 00	r2 <<= r3
    8903	07 09 00 00 0c 00 00 00	r9 += 0xc
    8904	05 00 1a ff 00 00 00 00	goto -0xe6 <LBB1_2>

0000000000011648 <memcpy>
    8905	bf 16 00 00 00 00 00 00	r6 = r1
    8906	bf 34 00 00 00 00 00 00	r4 = r3
    8907	77 04 00 00 03 00 00 00	r4 >>= 0x3
    8908	bf 41 00 00 00 00 00 00	r1 = r4
    8909	27 01 00 00 f9 ff ff ff	r1 *= -0x7
    8910	0f 31 00 00 00 00 00 00	r1 += r3
    8911	25 01 18 00 0f 00 00 00	if r1 > 0xf goto +0x18 <LBB0_2>
    8912	b7 01 00 00 00 00 00 00	r1 = 0x0
    8913	b7 05 00 00 08 00 00 00	r5 = 0x8
    8914	2d 35 0b 00 00 00 00 00	if r5 > r3 goto +0xb <LBB0_6>
    8915	b7 01 00 00 00 00 00 00	r1 = 0x0
    8916	b7 05 00 00 00 00 00 00	r5 = 0x0

00000000000116a8 <LBB0_5>
    8917	bf 60 00 00 00 00 00 00	r0 = r6
    8918	0f 10 00 00 00 00 00 00	r0 += r1
    8919	bf 27 00 00 00 00 00 00	r7 = r2
    8920	0f 17 00 00 00 00 00 00	r7 += r1
    8921	79 77 00 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x0)
    8922	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    8923	07 01 00 00 08 00 00 00	r1 += 0x8
    8924	07 05 00 00 01 00 00 00	r5 += 0x1
    8925	2d 54 f7 ff 00 00 00 00	if r4 > r5 goto -0x9 <LBB0_5>

00000000000116f0 <LBB0_6>
    8926	7d 31 0b 00 00 00 00 00	if r1 s>= r3 goto +0xb <LBB0_3>

00000000000116f8 <LBB0_7>
    8927	bf 64 00 00 00 00 00 00	r4 = r6
    8928	0f 14 00 00 00 00 00 00	r4 += r1
    8929	bf 25 00 00 00 00 00 00	r5 = r2
    8930	0f 15 00 00 00 00 00 00	r5 += r1
    8931	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
    8932	73 54 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r5
    8933	07 01 00 00 01 00 00 00	r1 += 0x1
    8934	6d 13 f8 ff 00 00 00 00	if r3 s> r1 goto -0x8 <LBB0_7>
    8935	05 00 02 00 00 00 00 00	goto +0x2 <LBB0_3>

0000000000011740 <LBB0_2>
    8936	bf 61 00 00 00 00 00 00	r1 = r6
    8937	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcpy_

0000000000011750 <LBB0_3>
    8938	bf 60 00 00 00 00 00 00	r0 = r6
    8939	95 00 00 00 00 00 00 00	exit

0000000000011760 <memset>
    8940	bf 16 00 00 00 00 00 00	r6 = r1
    8941	bf 34 00 00 00 00 00 00	r4 = r3
    8942	77 04 00 00 03 00 00 00	r4 >>= 0x3
    8943	bf 41 00 00 00 00 00 00	r1 = r4
    8944	27 01 00 00 f9 ff ff ff	r1 *= -0x7
    8945	0f 31 00 00 00 00 00 00	r1 += r3
    8946	25 01 17 00 0f 00 00 00	if r1 > 0xf goto +0x17 <LBB2_2>
    8947	b7 01 00 00 00 00 00 00	r1 = 0x0
    8948	b7 05 00 00 08 00 00 00	r5 = 0x8
    8949	2d 35 0d 00 00 00 00 00	if r5 > r3 goto +0xd <LBB2_6>
    8950	bf 25 00 00 00 00 00 00	r5 = r2
    8951	57 05 00 00 ff 00 00 00	r5 &= 0xff
    8952	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    8954	2f 15 00 00 00 00 00 00	r5 *= r1
    8955	b7 01 00 00 00 00 00 00	r1 = 0x0
    8956	b7 00 00 00 00 00 00 00	r0 = 0x0

00000000000117e8 <LBB2_5>
    8957	bf 67 00 00 00 00 00 00	r7 = r6
    8958	0f 17 00 00 00 00 00 00	r7 += r1
    8959	7b 57 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r5
    8960	07 01 00 00 08 00 00 00	r1 += 0x8
    8961	07 00 00 00 01 00 00 00	r0 += 0x1
    8962	2d 04 fa ff 00 00 00 00	if r4 > r0 goto -0x6 <LBB2_5>

0000000000011818 <LBB2_6>
    8963	7d 31 09 00 00 00 00 00	if r1 s>= r3 goto +0x9 <LBB2_3>

0000000000011820 <LBB2_7>
    8964	bf 64 00 00 00 00 00 00	r4 = r6
    8965	0f 14 00 00 00 00 00 00	r4 += r1
    8966	73 24 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r2
    8967	07 01 00 00 01 00 00 00	r1 += 0x1
    8968	6d 13 fb ff 00 00 00 00	if r3 s> r1 goto -0x5 <LBB2_7>
    8969	05 00 03 00 00 00 00 00	goto +0x3 <LBB2_3>

0000000000011850 <LBB2_2>
    8970	57 02 00 00 ff 00 00 00	r2 &= 0xff
    8971	bf 61 00 00 00 00 00 00	r1 = r6
    8972	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memset_

0000000000011868 <LBB2_3>
    8973	bf 60 00 00 00 00 00 00	r0 = r6
    8974	95 00 00 00 00 00 00 00	exit

0000000000011878 <memcmp>
    8975	bf 35 00 00 00 00 00 00	r5 = r3
    8976	77 05 00 00 03 00 00 00	r5 >>= 0x3
    8977	bf 54 00 00 00 00 00 00	r4 = r5
    8978	27 04 00 00 f9 ff ff ff	r4 *= -0x7
    8979	0f 34 00 00 00 00 00 00	r4 += r3
    8980	25 04 1d 00 0f 00 00 00	if r4 > 0xf goto +0x1d <LBB3_2>
    8981	b7 00 00 00 00 00 00 00	r0 = 0x0
    8982	b7 06 00 00 08 00 00 00	r6 = 0x8
    8983	b7 04 00 00 00 00 00 00	r4 = 0x0
    8984	2d 36 0b 00 00 00 00 00	if r6 > r3 goto +0xb <LBB3_7>
    8985	b7 04 00 00 00 00 00 00	r4 = 0x0
    8986	bf 16 00 00 00 00 00 00	r6 = r1
    8987	bf 27 00 00 00 00 00 00	r7 = r2

00000000000118e0 <LBB3_4>
    8988	79 78 00 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x0)
    8989	79 69 00 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x0)
    8990	5d 89 04 00 00 00 00 00	if r9 != r8 goto +0x4 <LBB3_6>
    8991	07 06 00 00 08 00 00 00	r6 += 0x8
    8992	07 07 00 00 08 00 00 00	r7 += 0x8
    8993	07 04 00 00 01 00 00 00	r4 += 0x1
    8994	2d 45 f9 ff 00 00 00 00	if r5 > r4 goto -0x7 <LBB3_4>

0000000000011918 <LBB3_6>
    8995	67 04 00 00 03 00 00 00	r4 <<= 0x3

0000000000011920 <LBB3_7>
    8996	7d 34 13 00 00 00 00 00	if r4 s>= r3 goto +0x13 <LBB3_12>
    8997	05 00 02 00 00 00 00 00	goto +0x2 <LBB3_10>

0000000000011930 <LBB3_9>
    8998	07 04 00 00 01 00 00 00	r4 += 0x1
    8999	7d 34 10 00 00 00 00 00	if r4 s>= r3 goto +0x10 <LBB3_12>

0000000000011940 <LBB3_10>
    9000	bf 16 00 00 00 00 00 00	r6 = r1
    9001	0f 46 00 00 00 00 00 00	r6 += r4
    9002	bf 25 00 00 00 00 00 00	r5 = r2
    9003	0f 45 00 00 00 00 00 00	r5 += r4
    9004	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
    9005	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    9006	1d 56 f7 ff 00 00 00 00	if r6 == r5 goto -0x9 <LBB3_9>
    9007	1f 56 00 00 00 00 00 00	r6 -= r5
    9008	bf 60 00 00 00 00 00 00	r0 = r6
    9009	05 00 06 00 00 00 00 00	goto +0x6 <LBB3_12>

0000000000011990 <LBB3_2>
    9010	b7 04 00 00 00 00 00 00	r4 = 0x0
    9011	63 4a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r4
    9012	bf a4 00 00 00 00 00 00	r4 = r10
    9013	07 04 00 00 fc ff ff ff	r4 += -0x4
    9014	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcmp_
    9015	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 0x4)

00000000000119c0 <LBB3_12>
    9016	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9017	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    9018	95 00 00 00 00 00 00 00	exit

00000000000119d8 <compiler_builtins::float::add::__adddf3>
    9019	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    9021	bf 24 00 00 00 00 00 00	r4 = r2
    9022	5f 34 00 00 00 00 00 00	r4 &= r3
    9023	bf 15 00 00 00 00 00 00	r5 = r1
    9024	5f 35 00 00 00 00 00 00	r5 &= r3
    9025	bf 50 00 00 00 00 00 00	r0 = r5
    9026	07 00 00 00 ff ff ff ff	r0 += -0x1
    9027	18 03 00 00 fe ff ff ff 00 00 00 00 ff ff ef 7f	r3 = 0x7feffffffffffffe ll
    9029	2d 30 94 00 00 00 00 00	if r0 > r3 goto +0x94 <LBB1_18>
    9030	bf 40 00 00 00 00 00 00	r0 = r4
    9031	07 00 00 00 ff ff ff ff	r0 += -0x1
    9032	2d 30 91 00 00 00 00 00	if r0 > r3 goto +0x91 <LBB1_18>

0000000000011a48 <LBB1_2>
    9033	bf 23 00 00 00 00 00 00	r3 = r2
    9034	2d 54 01 00 00 00 00 00	if r4 > r5 goto +0x1 <LBB1_4>
    9035	bf 13 00 00 00 00 00 00	r3 = r1

0000000000011a60 <LBB1_4>
    9036	2d 54 01 00 00 00 00 00	if r4 > r5 goto +0x1 <LBB1_6>
    9037	bf 21 00 00 00 00 00 00	r1 = r2

0000000000011a70 <LBB1_6>
    9038	18 06 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r6 = 0xfffffffffffff ll
    9040	bf 34 00 00 00 00 00 00	r4 = r3
    9041	5f 64 00 00 00 00 00 00	r4 &= r6
    9042	bf 10 00 00 00 00 00 00	r0 = r1
    9043	77 00 00 00 34 00 00 00	r0 >>= 0x34
    9044	57 00 00 00 ff 07 00 00	r0 &= 0x7ff
    9045	bf 32 00 00 00 00 00 00	r2 = r3
    9046	77 02 00 00 34 00 00 00	r2 >>= 0x34
    9047	57 02 00 00 ff 07 00 00	r2 &= 0x7ff
    9048	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB1_7>
    9049	05 00 32 00 00 00 00 00	goto +0x32 <LBB1_10>

0000000000011ad0 <LBB1_7>
    9050	b7 05 00 00 40 00 00 00	r5 = 0x40
    9051	15 04 2b 00 00 00 00 00	if r4 == 0x0 goto +0x2b <LBB1_9>
    9052	bf 45 00 00 00 00 00 00	r5 = r4
    9053	77 05 00 00 01 00 00 00	r5 >>= 0x1
    9054	bf 42 00 00 00 00 00 00	r2 = r4
    9055	4f 52 00 00 00 00 00 00	r2 |= r5
    9056	bf 25 00 00 00 00 00 00	r5 = r2
    9057	77 05 00 00 02 00 00 00	r5 >>= 0x2
    9058	4f 52 00 00 00 00 00 00	r2 |= r5
    9059	bf 25 00 00 00 00 00 00	r5 = r2
    9060	77 05 00 00 04 00 00 00	r5 >>= 0x4
    9061	4f 52 00 00 00 00 00 00	r2 |= r5
    9062	bf 25 00 00 00 00 00 00	r5 = r2
    9063	77 05 00 00 08 00 00 00	r5 >>= 0x8
    9064	4f 52 00 00 00 00 00 00	r2 |= r5
    9065	bf 25 00 00 00 00 00 00	r5 = r2
    9066	77 05 00 00 10 00 00 00	r5 >>= 0x10
    9067	4f 52 00 00 00 00 00 00	r2 |= r5
    9068	bf 25 00 00 00 00 00 00	r5 = r2
    9069	77 05 00 00 20 00 00 00	r5 >>= 0x20
    9070	4f 52 00 00 00 00 00 00	r2 |= r5
    9071	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    9072	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    9074	bf 27 00 00 00 00 00 00	r7 = r2
    9075	77 07 00 00 01 00 00 00	r7 >>= 0x1
    9076	5f 57 00 00 00 00 00 00	r7 &= r5
    9077	1f 72 00 00 00 00 00 00	r2 -= r7
    9078	18 07 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r7 = 0x3333333333333333 ll
    9080	bf 25 00 00 00 00 00 00	r5 = r2
    9081	5f 75 00 00 00 00 00 00	r5 &= r7
    9082	77 02 00 00 02 00 00 00	r2 >>= 0x2
    9083	5f 72 00 00 00 00 00 00	r2 &= r7
    9084	0f 25 00 00 00 00 00 00	r5 += r2
    9085	bf 52 00 00 00 00 00 00	r2 = r5
    9086	77 02 00 00 04 00 00 00	r2 >>= 0x4
    9087	0f 25 00 00 00 00 00 00	r5 += r2
    9088	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    9090	5f 25 00 00 00 00 00 00	r5 &= r2
    9091	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    9093	2f 25 00 00 00 00 00 00	r5 *= r2
    9094	77 05 00 00 38 00 00 00	r5 >>= 0x38

0000000000011c38 <LBB1_9>
    9095	b7 02 00 00 0c 00 00 00	r2 = 0xc
    9096	1f 52 00 00 00 00 00 00	r2 -= r5
    9097	07 05 00 00 35 00 00 00	r5 += 0x35
    9098	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    9099	6f 54 00 00 00 00 00 00	r4 <<= r5

0000000000011c60 <LBB1_10>
    9100	bf 15 00 00 00 00 00 00	r5 = r1
    9101	5f 65 00 00 00 00 00 00	r5 &= r6
    9102	55 00 32 00 00 00 00 00	if r0 != 0x0 goto +0x32 <LBB1_14>
    9103	b7 06 00 00 40 00 00 00	r6 = 0x40
    9104	15 05 2b 00 00 00 00 00	if r5 == 0x0 goto +0x2b <LBB1_13>
    9105	bf 56 00 00 00 00 00 00	r6 = r5
    9106	77 06 00 00 01 00 00 00	r6 >>= 0x1
    9107	bf 50 00 00 00 00 00 00	r0 = r5
    9108	4f 60 00 00 00 00 00 00	r0 |= r6
    9109	bf 06 00 00 00 00 00 00	r6 = r0
    9110	77 06 00 00 02 00 00 00	r6 >>= 0x2
    9111	4f 60 00 00 00 00 00 00	r0 |= r6
    9112	bf 06 00 00 00 00 00 00	r6 = r0
    9113	77 06 00 00 04 00 00 00	r6 >>= 0x4
    9114	4f 60 00 00 00 00 00 00	r0 |= r6
    9115	bf 06 00 00 00 00 00 00	r6 = r0
    9116	77 06 00 00 08 00 00 00	r6 >>= 0x8
    9117	4f 60 00 00 00 00 00 00	r0 |= r6
    9118	bf 06 00 00 00 00 00 00	r6 = r0
    9119	77 06 00 00 10 00 00 00	r6 >>= 0x10
    9120	4f 60 00 00 00 00 00 00	r0 |= r6
    9121	bf 06 00 00 00 00 00 00	r6 = r0
    9122	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9123	4f 60 00 00 00 00 00 00	r0 |= r6
    9124	a7 00 00 00 ff ff ff ff	r0 ^= -0x1
    9125	18 06 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r6 = 0x5555555555555555 ll
    9127	bf 07 00 00 00 00 00 00	r7 = r0
    9128	77 07 00 00 01 00 00 00	r7 >>= 0x1
    9129	5f 67 00 00 00 00 00 00	r7 &= r6
    9130	1f 70 00 00 00 00 00 00	r0 -= r7
    9131	18 07 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r7 = 0x3333333333333333 ll
    9133	bf 06 00 00 00 00 00 00	r6 = r0
    9134	5f 76 00 00 00 00 00 00	r6 &= r7
    9135	77 00 00 00 02 00 00 00	r0 >>= 0x2
    9136	5f 70 00 00 00 00 00 00	r0 &= r7
    9137	0f 06 00 00 00 00 00 00	r6 += r0
    9138	bf 60 00 00 00 00 00 00	r0 = r6
    9139	77 00 00 00 04 00 00 00	r0 >>= 0x4
    9140	0f 06 00 00 00 00 00 00	r6 += r0
    9141	18 00 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r0 = 0xf0f0f0f0f0f0f0f ll
    9143	5f 06 00 00 00 00 00 00	r6 &= r0
    9144	18 00 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r0 = 0x101010101010101 ll
    9146	2f 06 00 00 00 00 00 00	r6 *= r0
    9147	77 06 00 00 38 00 00 00	r6 >>= 0x38

0000000000011de0 <LBB1_13>
    9148	b7 00 00 00 0c 00 00 00	r0 = 0xc
    9149	1f 60 00 00 00 00 00 00	r0 -= r6
    9150	07 06 00 00 35 00 00 00	r6 += 0x35
    9151	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    9152	6f 65 00 00 00 00 00 00	r5 <<= r6

0000000000011e08 <LBB1_14>
    9153	af 31 00 00 00 00 00 00	r1 ^= r3
    9154	67 05 00 00 03 00 00 00	r5 <<= 0x3
    9155	18 06 00 00 00 00 00 00 00 00 00 00 00 00 80 00	r6 = 0x80000000000000 ll
    9157	4f 65 00 00 00 00 00 00	r5 |= r6
    9158	67 04 00 00 03 00 00 00	r4 <<= 0x3
    9159	bf 27 00 00 00 00 00 00	r7 = r2
    9160	1f 07 00 00 00 00 00 00	r7 -= r0
    9161	bf 50 00 00 00 00 00 00	r0 = r5
    9162	55 07 19 00 00 00 00 00	if r7 != 0x0 goto +0x19 <LBB1_21>

0000000000011e58 <LBB1_15>
    9163	4f 64 00 00 00 00 00 00	r4 |= r6
    9164	65 01 01 00 ff ff ff ff	if r1 s> -0x1 goto +0x1 <LBB1_16>
    9165	05 00 2d 00 00 00 00 00	goto +0x2d <LBB1_26>

0000000000011e70 <LBB1_16>
    9166	0f 40 00 00 00 00 00 00	r0 += r4
    9167	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01	r1 = 0x100000000000000 ll
    9169	bf 04 00 00 00 00 00 00	r4 = r0
    9170	5f 14 00 00 00 00 00 00	r4 &= r1
    9171	15 04 5e 00 00 00 00 00	if r4 == 0x0 goto +0x5e <LBB1_29>
    9172	bf 01 00 00 00 00 00 00	r1 = r0
    9173	77 01 00 00 01 00 00 00	r1 >>= 0x1
    9174	57 00 00 00 01 00 00 00	r0 &= 0x1
    9175	4f 10 00 00 00 00 00 00	r0 |= r1
    9176	07 02 00 00 01 00 00 00	r2 += 0x1
    9177	05 00 58 00 00 00 00 00	goto +0x58 <LBB1_29>

0000000000011ed0 <LBB1_18>
    9178	18 03 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r3 = 0x7ff0000000000000 ll
    9180	2d 35 1a 00 00 00 00 00	if r5 > r3 goto +0x1a <LBB1_25>
    9181	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB1_20>
    9182	05 00 7e 00 00 00 00 00	goto +0x7e <LBB1_38>

0000000000011ef8 <LBB1_20>
    9183	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    9185	4f 14 00 00 00 00 00 00	r4 |= r1
    9186	bf 45 00 00 00 00 00 00	r5 = r4
    9187	05 00 87 00 00 00 00 00	goto +0x87 <LBB1_42>

0000000000011f20 <LBB1_21>
    9188	b7 00 00 00 01 00 00 00	r0 = 0x1
    9189	bf 78 00 00 00 00 00 00	r8 = r7
    9190	67 08 00 00 20 00 00 00	r8 <<= 0x20
    9191	77 08 00 00 20 00 00 00	r8 >>= 0x20
    9192	25 08 e2 ff 3f 00 00 00	if r8 > 0x3f goto -0x1e <LBB1_15>
    9193	bf 70 00 00 00 00 00 00	r0 = r7
    9194	87 00 00 00 00 00 00 00	r0 = -r0
    9195	57 00 00 00 3f 00 00 00	r0 &= 0x3f
    9196	bf 58 00 00 00 00 00 00	r8 = r5
    9197	6f 08 00 00 00 00 00 00	r8 <<= r0
    9198	b7 00 00 00 01 00 00 00	r0 = 0x1
    9199	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB1_24>
    9200	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000011f88 <LBB1_24>
    9201	67 07 00 00 20 00 00 00	r7 <<= 0x20
    9202	77 07 00 00 20 00 00 00	r7 >>= 0x20
    9203	7f 75 00 00 00 00 00 00	r5 >>= r7
    9204	4f 05 00 00 00 00 00 00	r5 |= r0
    9205	bf 50 00 00 00 00 00 00	r0 = r5
    9206	05 00 d4 ff 00 00 00 00	goto -0x2c <LBB1_15>

0000000000011fb8 <LBB1_25>
    9207	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    9209	4f 15 00 00 00 00 00 00	r5 |= r1
    9210	05 00 70 00 00 00 00 00	goto +0x70 <LBB1_42>

0000000000011fd8 <LBB1_26>
    9211	1f 04 00 00 00 00 00 00	r4 -= r0
    9212	b7 05 00 00 00 00 00 00	r5 = 0x0
    9213	15 04 6d 00 00 00 00 00	if r4 == 0x0 goto +0x6d <LBB1_42>
    9214	18 01 00 00 ff ff ff ff 00 00 00 00 ff ff 7f 00	r1 = 0x7fffffffffffff ll
    9216	bf 40 00 00 00 00 00 00	r0 = r4
    9217	2d 14 30 00 00 00 00 00	if r4 > r1 goto +0x30 <LBB1_29>
    9218	bf 45 00 00 00 00 00 00	r5 = r4
    9219	77 05 00 00 01 00 00 00	r5 >>= 0x1
    9220	bf 41 00 00 00 00 00 00	r1 = r4
    9221	4f 51 00 00 00 00 00 00	r1 |= r5
    9222	bf 15 00 00 00 00 00 00	r5 = r1
    9223	77 05 00 00 02 00 00 00	r5 >>= 0x2
    9224	4f 51 00 00 00 00 00 00	r1 |= r5
    9225	bf 15 00 00 00 00 00 00	r5 = r1
    9226	77 05 00 00 04 00 00 00	r5 >>= 0x4
    9227	4f 51 00 00 00 00 00 00	r1 |= r5
    9228	bf 15 00 00 00 00 00 00	r5 = r1
    9229	77 05 00 00 08 00 00 00	r5 >>= 0x8
    9230	4f 51 00 00 00 00 00 00	r1 |= r5
    9231	bf 15 00 00 00 00 00 00	r5 = r1
    9232	77 05 00 00 10 00 00 00	r5 >>= 0x10
    9233	4f 51 00 00 00 00 00 00	r1 |= r5
    9234	bf 15 00 00 00 00 00 00	r5 = r1
    9235	77 05 00 00 20 00 00 00	r5 >>= 0x20
    9236	4f 51 00 00 00 00 00 00	r1 |= r5
    9237	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    9238	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    9240	bf 10 00 00 00 00 00 00	r0 = r1
    9241	77 00 00 00 01 00 00 00	r0 >>= 0x1
    9242	5f 50 00 00 00 00 00 00	r0 &= r5
    9243	1f 01 00 00 00 00 00 00	r1 -= r0
    9244	18 00 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r0 = 0x3333333333333333 ll
    9246	bf 15 00 00 00 00 00 00	r5 = r1
    9247	5f 05 00 00 00 00 00 00	r5 &= r0
    9248	77 01 00 00 02 00 00 00	r1 >>= 0x2
    9249	5f 01 00 00 00 00 00 00	r1 &= r0
    9250	0f 15 00 00 00 00 00 00	r5 += r1
    9251	bf 51 00 00 00 00 00 00	r1 = r5
    9252	77 01 00 00 04 00 00 00	r1 >>= 0x4
    9253	0f 15 00 00 00 00 00 00	r5 += r1
    9254	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    9256	5f 15 00 00 00 00 00 00	r5 &= r1
    9257	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    9259	2f 15 00 00 00 00 00 00	r5 *= r1
    9260	77 05 00 00 38 00 00 00	r5 >>= 0x38
    9261	07 05 00 00 f8 ff ff ff	r5 += -0x8
    9262	1f 52 00 00 00 00 00 00	r2 -= r5
    9263	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    9264	6f 54 00 00 00 00 00 00	r4 <<= r5
    9265	bf 40 00 00 00 00 00 00	r0 = r4

0000000000012190 <LBB1_29>
    9266	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r1 = -0x8000000000000000 ll
    9268	5f 13 00 00 00 00 00 00	r3 &= r1
    9269	65 02 01 00 fe 07 00 00	if r2 s> 0x7fe goto +0x1 <LBB1_30>
    9270	05 00 05 00 00 00 00 00	goto +0x5 <LBB1_31>

00000000000121b8 <LBB1_30>
    9271	18 01 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r1 = 0x7ff0000000000000 ll
    9273	4f 13 00 00 00 00 00 00	r3 |= r1
    9274	bf 35 00 00 00 00 00 00	r5 = r3
    9275	05 00 2f 00 00 00 00 00	goto +0x2f <LBB1_42>

00000000000121e0 <LBB1_31>
    9276	b7 01 00 00 01 00 00 00	r1 = 0x1
    9277	6d 21 01 00 00 00 00 00	if r1 s> r2 goto +0x1 <LBB1_32>
    9278	05 00 0d 00 00 00 00 00	goto +0xd <LBB1_35>

00000000000121f8 <LBB1_32>
    9279	bf 24 00 00 00 00 00 00	r4 = r2
    9280	07 04 00 00 ff ff ff ff	r4 += -0x1
    9281	57 04 00 00 3f 00 00 00	r4 &= 0x3f
    9282	bf 05 00 00 00 00 00 00	r5 = r0
    9283	6f 45 00 00 00 00 00 00	r5 <<= r4
    9284	b7 04 00 00 01 00 00 00	r4 = 0x1
    9285	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB1_34>
    9286	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000012238 <LBB1_34>
    9287	1f 21 00 00 00 00 00 00	r1 -= r2
    9288	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    9289	7f 10 00 00 00 00 00 00	r0 >>= r1
    9290	4f 40 00 00 00 00 00 00	r0 |= r4
    9291	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000012260 <LBB1_35>
    9292	bf 01 00 00 00 00 00 00	r1 = r0
    9293	77 01 00 00 03 00 00 00	r1 >>= 0x3
    9294	18 04 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r4 = 0xfffffffffffff ll
    9296	bf 15 00 00 00 00 00 00	r5 = r1
    9297	5f 45 00 00 00 00 00 00	r5 &= r4
    9298	67 02 00 00 34 00 00 00	r2 <<= 0x34
    9299	4f 52 00 00 00 00 00 00	r2 |= r5
    9300	4f 32 00 00 00 00 00 00	r2 |= r3
    9301	57 00 00 00 07 00 00 00	r0 &= 0x7
    9302	25 00 12 00 04 00 00 00	if r0 > 0x4 goto +0x12 <LBB1_40>
    9303	bf 25 00 00 00 00 00 00	r5 = r2
    9304	15 00 01 00 04 00 00 00	if r0 == 0x4 goto +0x1 <LBB1_37>
    9305	05 00 11 00 00 00 00 00	goto +0x11 <LBB1_42>

00000000000122d0 <LBB1_37>
    9306	57 01 00 00 01 00 00 00	r1 &= 0x1
    9307	0f 12 00 00 00 00 00 00	r2 += r1
    9308	05 00 0d 00 00 00 00 00	goto +0xd <LBB1_41>

00000000000122e8 <LBB1_38>
    9309	18 03 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r3 = 0x7ff0000000000000 ll
    9311	1d 35 01 00 00 00 00 00	if r5 == r3 goto +0x1 <LBB1_39>
    9312	05 00 0c 00 00 00 00 00	goto +0xc <LBB1_44>

0000000000012308 <LBB1_39>
    9313	af 12 00 00 00 00 00 00	r2 ^= r1
    9314	18 05 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r5 = 0x7ff8000000000000 ll
    9316	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x8000000000000000 ll
    9318	bf 10 00 00 00 00 00 00	r0 = r1
    9319	1d 32 03 00 00 00 00 00	if r2 == r3 goto +0x3 <LBB1_42>
    9320	05 00 03 00 00 00 00 00	goto +0x3 <LBB1_43>

0000000000012348 <LBB1_40>
    9321	07 02 00 00 01 00 00 00	r2 += 0x1

0000000000012350 <LBB1_41>
    9322	bf 25 00 00 00 00 00 00	r5 = r2

0000000000012358 <LBB1_42>
    9323	bf 50 00 00 00 00 00 00	r0 = r5

0000000000012360 <LBB1_43>
    9324	95 00 00 00 00 00 00 00	exit

0000000000012368 <LBB1_44>
    9325	bf 20 00 00 00 00 00 00	r0 = r2
    9326	1d 34 fd ff 00 00 00 00	if r4 == r3 goto -0x3 <LBB1_43>
    9327	15 05 03 00 00 00 00 00	if r5 == 0x0 goto +0x3 <LBB1_47>
    9328	bf 10 00 00 00 00 00 00	r0 = r1
    9329	15 04 fa ff 00 00 00 00	if r4 == 0x0 goto -0x6 <LBB1_43>
    9330	05 00 d6 fe 00 00 00 00	goto -0x12a <LBB1_2>

0000000000012398 <LBB1_47>
    9331	bf 20 00 00 00 00 00 00	r0 = r2
    9332	55 04 f7 ff 00 00 00 00	if r4 != 0x0 goto -0x9 <LBB1_43>
    9333	5f 12 00 00 00 00 00 00	r2 &= r1
    9334	05 00 f3 ff 00 00 00 00	goto -0xd <LBB1_41>

00000000000123b8 <__floatundidf>
    9335	bf 16 00 00 00 00 00 00	r6 = r1
    9336	77 01 00 00 20 00 00 00	r1 >>= 0x20
    9337	18 02 00 00 00 00 00 00 00 00 00 00 00 00 30 45	r2 = 0x4530000000000000 ll
    9339	4f 21 00 00 00 00 00 00	r1 |= r2
    9340	18 02 00 00 00 00 10 00 00 00 00 00 00 00 30 c5	r2 = -0x3acffffffff00000 ll
    9342	85 10 00 00 e3 fc ff ff	call -0x31d ; <__adddf3>
    9343	67 06 00 00 20 00 00 00	r6 <<= 0x20
    9344	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9345	18 01 00 00 00 00 00 00 00 00 00 00 00 00 30 43	r1 = 0x4330000000000000 ll
    9347	4f 16 00 00 00 00 00 00	r6 |= r1
    9348	bf 01 00 00 00 00 00 00	r1 = r0
    9349	bf 62 00 00 00 00 00 00	r2 = r6
    9350	85 10 00 00 db fc ff ff	call -0x325 ; <__adddf3>
    9351	95 00 00 00 00 00 00 00	exit

0000000000012440 <__multi3>
    9352	2f 43 00 00 00 00 00 00	r3 *= r4
    9353	2f 25 00 00 00 00 00 00	r5 *= r2
    9354	0f 35 00 00 00 00 00 00	r5 += r3
    9355	bf 20 00 00 00 00 00 00	r0 = r2
    9356	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9357	bf 43 00 00 00 00 00 00	r3 = r4
    9358	77 03 00 00 20 00 00 00	r3 >>= 0x20
    9359	bf 36 00 00 00 00 00 00	r6 = r3
    9360	2f 06 00 00 00 00 00 00	r6 *= r0
    9361	0f 65 00 00 00 00 00 00	r5 += r6
    9362	67 04 00 00 20 00 00 00	r4 <<= 0x20
    9363	77 04 00 00 20 00 00 00	r4 >>= 0x20
    9364	bf 46 00 00 00 00 00 00	r6 = r4
    9365	2f 06 00 00 00 00 00 00	r6 *= r0
    9366	67 02 00 00 20 00 00 00	r2 <<= 0x20
    9367	77 02 00 00 20 00 00 00	r2 >>= 0x20
    9368	2f 24 00 00 00 00 00 00	r4 *= r2
    9369	bf 40 00 00 00 00 00 00	r0 = r4
    9370	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9371	0f 60 00 00 00 00 00 00	r0 += r6
    9372	bf 06 00 00 00 00 00 00	r6 = r0
    9373	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9374	0f 65 00 00 00 00 00 00	r5 += r6
    9375	2f 23 00 00 00 00 00 00	r3 *= r2
    9376	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9377	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9378	0f 30 00 00 00 00 00 00	r0 += r3
    9379	bf 02 00 00 00 00 00 00	r2 = r0
    9380	77 02 00 00 20 00 00 00	r2 >>= 0x20
    9381	0f 25 00 00 00 00 00 00	r5 += r2
    9382	7b 51 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r5
    9383	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9384	67 04 00 00 20 00 00 00	r4 <<= 0x20
    9385	77 04 00 00 20 00 00 00	r4 >>= 0x20
    9386	4f 40 00 00 00 00 00 00	r0 |= r4
    9387	7b 01 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r0
    9388	95 00 00 00 00 00 00 00	exit
