ELF Header
  Magic   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class                             ELF64
  Data                              2's complement, little endian
  Version                           1 (current)
  OS/ABI                            UNIX - System V
  ABI Version                       0
  Type                              DYN (Shared object file)
  Machine                           EM_BPF
  Version                           0x1
  Entry point address               0x19E8
  Start of program headers          64 (bytes into file)
  Start of section headers          149856 (bytes into file)
  Flags                             0x0
  Size of this header               64 (bytes)
  Size of program headers           56 (bytes)
  Number of program headers         4
  Size of section headers           64 (bytes)
  Number of section headers         12
  Section header string table index 10
There are 12 section headers, starting at offset 0x24960

Section Headers
  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        0000000000000120 000120 012478 00  AX  0   0  8
  [ 2] .rodata           PROGBITS        0000000000012598 012598 001487 00  AM  0   0  8
  [ 3] .data.rel.ro      PROGBITS        0000000000013a20 013a20 0006e8 00  WA  0   0  8
  [ 4] .dynamic          DYNAMIC         0000000000014108 014108 0000b0 10  WA  6   0  8
  [ 5] .dynsym           DYNSYM          00000000000141b8 0141b8 000108 18   A  6   1  8
  [ 6] .dynstr           STRTAB          00000000000142c0 0142c0 000094 00   A  0   0  1
  [ 7] .rel.dyn          REL             0000000000014358 014358 001ca0 10   A  5   0  8
  [ 8] .comment          PROGBITS        0000000000000000 015ff8 00006e 01  MS  0   0  1
  [ 9] .symtab           SYMTAB          0000000000000000 016068 007c50 18     11 1316  8
  [10] .shstrtab         STRTAB          0000000000000000 01dcb8 000061 00      0   0  1
  [11] .strtab           STRTAB          0000000000000000 01dd19 006c41 00      0   0  1
Key to Flags
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  R (retain), p (processor specific)

Elf file type is DYN (Shared object file)
Entry point 0x19e8
There are 4 program headers, starting at offset 64

Program Headers
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  LOAD           0x000120 0x0000000000000120 0x0000000000000120 0x012478 0x012478 R E 0x1000
  LOAD           0x012598 0x0000000000012598 0x0000000000012598 0x001b70 0x001b70 RW  0x1000
  LOAD           0x0141b8 0x00000000000141b8 0x00000000000141b8 0x001e40 0x001e40 R   0x1000
  DYNAMIC        0x014108 0x0000000000014108 0x0000000000014108 0x0000b0 0x0000b0 RW  0x8

 Section to Segment mapping
  Segment Sections...
   00     .text
   01     .rodata .data.rel.ro
   02     .dynsym .dynstr .rel.dyn
   03     .dynamic
   None   .comment .symtab .shstrtab .strtab
Dynamic section at offset 0x14108 contains 11 entries
  Tag                Type       Name/Value
  0x000000000000001e (FLAGS)    TEXTREL
  0x0000000000000011 (REL)      0x14358
  0x0000000000000012 (RELSZ)    7328 (bytes)
  0x0000000000000013 (RELENT)   16 (bytes)
  0x000000006ffffffa (RELCOUNT) 355
  0x0000000000000006 (SYMTAB)   0x141b8
  0x000000000000000b (SYMENT)   24 (bytes)
  0x0000000000000005 (STRTAB)   0x142c0
  0x000000000000000a (STRSZ)    148 (bytes)
  0x0000000000000016 (TEXTREL)  0x0
  0x0000000000000000 (NULL)     0x0

Relocation section '.rel.dyn' at offset 0x14358 contains 458 entries
    Offset             Info             Type               Symbol's Value  Symbol's Name
0000000000000930  0000000000000008 R_BPF_64_RELATIVE
0000000000000960  0000000000000008 R_BPF_64_RELATIVE
0000000000000988  0000000000000008 R_BPF_64_RELATIVE
00000000000009b0  0000000000000008 R_BPF_64_RELATIVE
0000000000000ae8  0000000000000008 R_BPF_64_RELATIVE
0000000000000b00  0000000000000008 R_BPF_64_RELATIVE
0000000000000c58  0000000000000008 R_BPF_64_RELATIVE
0000000000000cf8  0000000000000008 R_BPF_64_RELATIVE
0000000000000e38  0000000000000008 R_BPF_64_RELATIVE
0000000000000e50  0000000000000008 R_BPF_64_RELATIVE
0000000000000fa8  0000000000000008 R_BPF_64_RELATIVE
0000000000001068  0000000000000008 R_BPF_64_RELATIVE
0000000000001208  0000000000000008 R_BPF_64_RELATIVE
0000000000001228  0000000000000008 R_BPF_64_RELATIVE
00000000000014e0  0000000000000008 R_BPF_64_RELATIVE
0000000000001500  0000000000000008 R_BPF_64_RELATIVE
0000000000001848  0000000000000008 R_BPF_64_RELATIVE
0000000000001bd8  0000000000000008 R_BPF_64_RELATIVE
0000000000001c80  0000000000000008 R_BPF_64_RELATIVE
0000000000001cd0  0000000000000008 R_BPF_64_RELATIVE
0000000000001da8  0000000000000008 R_BPF_64_RELATIVE
0000000000001dc0  0000000000000008 R_BPF_64_RELATIVE
0000000000002178  0000000000000008 R_BPF_64_RELATIVE
00000000000021a8  0000000000000008 R_BPF_64_RELATIVE
00000000000021d8  0000000000000008 R_BPF_64_RELATIVE
0000000000002208  0000000000000008 R_BPF_64_RELATIVE
0000000000002238  0000000000000008 R_BPF_64_RELATIVE
0000000000002268  0000000000000008 R_BPF_64_RELATIVE
00000000000022d0  0000000000000008 R_BPF_64_RELATIVE
00000000000022e8  0000000000000008 R_BPF_64_RELATIVE
00000000000024e8  0000000000000008 R_BPF_64_RELATIVE
0000000000002500  0000000000000008 R_BPF_64_RELATIVE
0000000000002690  0000000000000008 R_BPF_64_RELATIVE
0000000000002878  0000000000000008 R_BPF_64_RELATIVE
00000000000028c8  0000000000000008 R_BPF_64_RELATIVE
00000000000028e0  0000000000000008 R_BPF_64_RELATIVE
00000000000028f0  0000000000000008 R_BPF_64_RELATIVE
0000000000002910  0000000000000008 R_BPF_64_RELATIVE
0000000000002930  0000000000000008 R_BPF_64_RELATIVE
0000000000002950  0000000000000008 R_BPF_64_RELATIVE
0000000000002970  0000000000000008 R_BPF_64_RELATIVE
0000000000002990  0000000000000008 R_BPF_64_RELATIVE
00000000000029b0  0000000000000008 R_BPF_64_RELATIVE
00000000000029d0  0000000000000008 R_BPF_64_RELATIVE
00000000000029f0  0000000000000008 R_BPF_64_RELATIVE
0000000000002a10  0000000000000008 R_BPF_64_RELATIVE
0000000000002a30  0000000000000008 R_BPF_64_RELATIVE
0000000000002a50  0000000000000008 R_BPF_64_RELATIVE
0000000000002a70  0000000000000008 R_BPF_64_RELATIVE
0000000000002ec8  0000000000000008 R_BPF_64_RELATIVE
0000000000002ee0  0000000000000008 R_BPF_64_RELATIVE
00000000000030d0  0000000000000008 R_BPF_64_RELATIVE
00000000000031d8  0000000000000008 R_BPF_64_RELATIVE
0000000000003968  0000000000000008 R_BPF_64_RELATIVE
0000000000003a70  0000000000000008 R_BPF_64_RELATIVE
0000000000003a88  0000000000000008 R_BPF_64_RELATIVE
00000000000040b8  0000000000000008 R_BPF_64_RELATIVE
0000000000004130  0000000000000008 R_BPF_64_RELATIVE
0000000000004d38  0000000000000008 R_BPF_64_RELATIVE
0000000000004d50  0000000000000008 R_BPF_64_RELATIVE
0000000000004e30  0000000000000008 R_BPF_64_RELATIVE
0000000000004e70  0000000000000008 R_BPF_64_RELATIVE
0000000000004e98  0000000000000008 R_BPF_64_RELATIVE
0000000000004ed8  0000000000000008 R_BPF_64_RELATIVE
0000000000004ef8  0000000000000008 R_BPF_64_RELATIVE
0000000000004f38  0000000000000008 R_BPF_64_RELATIVE
0000000000004f50  0000000000000008 R_BPF_64_RELATIVE
0000000000004f90  0000000000000008 R_BPF_64_RELATIVE
0000000000004fa8  0000000000000008 R_BPF_64_RELATIVE
0000000000004fe8  0000000000000008 R_BPF_64_RELATIVE
0000000000005000  0000000000000008 R_BPF_64_RELATIVE
0000000000005040  0000000000000008 R_BPF_64_RELATIVE
0000000000005058  0000000000000008 R_BPF_64_RELATIVE
0000000000005098  0000000000000008 R_BPF_64_RELATIVE
0000000000005260  0000000000000008 R_BPF_64_RELATIVE
0000000000005278  0000000000000008 R_BPF_64_RELATIVE
00000000000053d0  0000000000000008 R_BPF_64_RELATIVE
0000000000005468  0000000000000008 R_BPF_64_RELATIVE
0000000000005688  0000000000000008 R_BPF_64_RELATIVE
00000000000056a0  0000000000000008 R_BPF_64_RELATIVE
00000000000057f8  0000000000000008 R_BPF_64_RELATIVE
00000000000058c0  0000000000000008 R_BPF_64_RELATIVE
0000000000005ae0  0000000000000008 R_BPF_64_RELATIVE
0000000000005f08  0000000000000008 R_BPF_64_RELATIVE
0000000000006040  0000000000000008 R_BPF_64_RELATIVE
00000000000062d0  0000000000000008 R_BPF_64_RELATIVE
00000000000062e8  0000000000000008 R_BPF_64_RELATIVE
00000000000062f8  0000000000000008 R_BPF_64_RELATIVE
0000000000006c00  0000000000000008 R_BPF_64_RELATIVE
0000000000008a30  0000000000000008 R_BPF_64_RELATIVE
0000000000009500  0000000000000008 R_BPF_64_RELATIVE
0000000000009518  0000000000000008 R_BPF_64_RELATIVE
00000000000096f0  0000000000000008 R_BPF_64_RELATIVE
0000000000009730  0000000000000008 R_BPF_64_RELATIVE
0000000000009758  0000000000000008 R_BPF_64_RELATIVE
0000000000009f90  0000000000000008 R_BPF_64_RELATIVE
000000000000a168  0000000000000008 R_BPF_64_RELATIVE
000000000000a180  0000000000000008 R_BPF_64_RELATIVE
000000000000a1c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a1f8  0000000000000008 R_BPF_64_RELATIVE
000000000000a230  0000000000000008 R_BPF_64_RELATIVE
000000000000a260  0000000000000008 R_BPF_64_RELATIVE
000000000000a290  0000000000000008 R_BPF_64_RELATIVE
000000000000a2c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a2f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a320  0000000000000008 R_BPF_64_RELATIVE
000000000000a348  0000000000000008 R_BPF_64_RELATIVE
000000000000a370  0000000000000008 R_BPF_64_RELATIVE
000000000000a3a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a3d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a400  0000000000000008 R_BPF_64_RELATIVE
000000000000a430  0000000000000008 R_BPF_64_RELATIVE
000000000000a460  0000000000000008 R_BPF_64_RELATIVE
000000000000a480  0000000000000008 R_BPF_64_RELATIVE
000000000000a4a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a500  0000000000000008 R_BPF_64_RELATIVE
000000000000a518  0000000000000008 R_BPF_64_RELATIVE
000000000000a538  0000000000000008 R_BPF_64_RELATIVE
000000000000a558  0000000000000008 R_BPF_64_RELATIVE
000000000000a578  0000000000000008 R_BPF_64_RELATIVE
000000000000a598  0000000000000008 R_BPF_64_RELATIVE
000000000000a5b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a610  0000000000000008 R_BPF_64_RELATIVE
000000000000a630  0000000000000008 R_BPF_64_RELATIVE
000000000000a650  0000000000000008 R_BPF_64_RELATIVE
000000000000a670  0000000000000008 R_BPF_64_RELATIVE
000000000000a690  0000000000000008 R_BPF_64_RELATIVE
000000000000a6b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a710  0000000000000008 R_BPF_64_RELATIVE
000000000000a730  0000000000000008 R_BPF_64_RELATIVE
000000000000a750  0000000000000008 R_BPF_64_RELATIVE
000000000000a858  0000000000000008 R_BPF_64_RELATIVE
000000000000a8c8  0000000000000008 R_BPF_64_RELATIVE
000000000000aaa0  0000000000000008 R_BPF_64_RELATIVE
000000000000aab8  0000000000000008 R_BPF_64_RELATIVE
000000000000aae8  0000000000000008 R_BPF_64_RELATIVE
000000000000abb0  0000000000000008 R_BPF_64_RELATIVE
000000000000b068  0000000000000008 R_BPF_64_RELATIVE
000000000000b080  0000000000000008 R_BPF_64_RELATIVE
000000000000b2c8  0000000000000008 R_BPF_64_RELATIVE
000000000000b300  0000000000000008 R_BPF_64_RELATIVE
000000000000b318  0000000000000008 R_BPF_64_RELATIVE
000000000000b328  0000000000000008 R_BPF_64_RELATIVE
000000000000b708  0000000000000008 R_BPF_64_RELATIVE
000000000000b790  0000000000000008 R_BPF_64_RELATIVE
000000000000b7c0  0000000000000008 R_BPF_64_RELATIVE
000000000000b898  0000000000000008 R_BPF_64_RELATIVE
000000000000b9c0  0000000000000008 R_BPF_64_RELATIVE
000000000000ba08  0000000000000008 R_BPF_64_RELATIVE
000000000000ba20  0000000000000008 R_BPF_64_RELATIVE
000000000000bc60  0000000000000008 R_BPF_64_RELATIVE
000000000000bca8  0000000000000008 R_BPF_64_RELATIVE
000000000000bcc0  0000000000000008 R_BPF_64_RELATIVE
000000000000bec0  0000000000000008 R_BPF_64_RELATIVE
000000000000bf08  0000000000000008 R_BPF_64_RELATIVE
000000000000bf70  0000000000000008 R_BPF_64_RELATIVE
000000000000c018  0000000000000008 R_BPF_64_RELATIVE
000000000000c080  0000000000000008 R_BPF_64_RELATIVE
000000000000c0f8  0000000000000008 R_BPF_64_RELATIVE
000000000000c130  0000000000000008 R_BPF_64_RELATIVE
000000000000c190  0000000000000008 R_BPF_64_RELATIVE
000000000000c1e8  0000000000000008 R_BPF_64_RELATIVE
000000000000c2c8  0000000000000008 R_BPF_64_RELATIVE
000000000000c2f8  0000000000000008 R_BPF_64_RELATIVE
000000000000c368  0000000000000008 R_BPF_64_RELATIVE
000000000000c380  0000000000000008 R_BPF_64_RELATIVE
000000000000c418  0000000000000008 R_BPF_64_RELATIVE
000000000000c430  0000000000000008 R_BPF_64_RELATIVE
000000000000c460  0000000000000008 R_BPF_64_RELATIVE
000000000000c790  0000000000000008 R_BPF_64_RELATIVE
000000000000c830  0000000000000008 R_BPF_64_RELATIVE
000000000000df48  0000000000000008 R_BPF_64_RELATIVE
000000000000e1f0  0000000000000008 R_BPF_64_RELATIVE
000000000000e788  0000000000000008 R_BPF_64_RELATIVE
000000000000e7b8  0000000000000008 R_BPF_64_RELATIVE
000000000000e868  0000000000000008 R_BPF_64_RELATIVE
000000000000e898  0000000000000008 R_BPF_64_RELATIVE
000000000000e948  0000000000000008 R_BPF_64_RELATIVE
000000000000e978  0000000000000008 R_BPF_64_RELATIVE
000000000000e9e8  0000000000000008 R_BPF_64_RELATIVE
000000000000ea40  0000000000000008 R_BPF_64_RELATIVE
000000000000ead0  0000000000000008 R_BPF_64_RELATIVE
000000000000eb18  0000000000000008 R_BPF_64_RELATIVE
000000000000eb90  0000000000000008 R_BPF_64_RELATIVE
000000000000ebc0  0000000000000008 R_BPF_64_RELATIVE
000000000000ebf8  0000000000000008 R_BPF_64_RELATIVE
000000000000ec68  0000000000000008 R_BPF_64_RELATIVE
000000000000ec98  0000000000000008 R_BPF_64_RELATIVE
000000000000ece8  0000000000000008 R_BPF_64_RELATIVE
000000000000ef10  0000000000000008 R_BPF_64_RELATIVE
000000000000efa8  0000000000000008 R_BPF_64_RELATIVE
000000000000efd8  0000000000000008 R_BPF_64_RELATIVE
000000000000f010  0000000000000008 R_BPF_64_RELATIVE
000000000000f040  0000000000000008 R_BPF_64_RELATIVE
000000000000f070  0000000000000008 R_BPF_64_RELATIVE
000000000000f370  0000000000000008 R_BPF_64_RELATIVE
000000000000f388  0000000000000008 R_BPF_64_RELATIVE
000000000000f3e8  0000000000000008 R_BPF_64_RELATIVE
000000000000f418  0000000000000008 R_BPF_64_RELATIVE
000000000000f4d8  0000000000000008 R_BPF_64_RELATIVE
000000000000f580  0000000000000008 R_BPF_64_RELATIVE
000000000000f648  0000000000000008 R_BPF_64_RELATIVE
000000000000f6f0  0000000000000008 R_BPF_64_RELATIVE
000000000000f7f8  0000000000000008 R_BPF_64_RELATIVE
000000000000f830  0000000000000008 R_BPF_64_RELATIVE
000000000000fa20  0000000000000008 R_BPF_64_RELATIVE
000000000000fad0  0000000000000008 R_BPF_64_RELATIVE
000000000000fb30  0000000000000008 R_BPF_64_RELATIVE
000000000000fb90  0000000000000008 R_BPF_64_RELATIVE
000000000000fc28  0000000000000008 R_BPF_64_RELATIVE
000000000000fc80  0000000000000008 R_BPF_64_RELATIVE
000000000000fcf0  0000000000000008 R_BPF_64_RELATIVE
000000000000fda0  0000000000000008 R_BPF_64_RELATIVE
000000000000feb0  0000000000000008 R_BPF_64_RELATIVE
000000000000fee8  0000000000000008 R_BPF_64_RELATIVE
000000000000ffc0  0000000000000008 R_BPF_64_RELATIVE
0000000000010020  0000000000000008 R_BPF_64_RELATIVE
00000000000100c8  0000000000000008 R_BPF_64_RELATIVE
0000000000010198  0000000000000008 R_BPF_64_RELATIVE
00000000000101d0  0000000000000008 R_BPF_64_RELATIVE
00000000000102a8  0000000000000008 R_BPF_64_RELATIVE
0000000000010308  0000000000000008 R_BPF_64_RELATIVE
00000000000103a0  0000000000000008 R_BPF_64_RELATIVE
0000000000010470  0000000000000008 R_BPF_64_RELATIVE
00000000000104a8  0000000000000008 R_BPF_64_RELATIVE
0000000000010580  0000000000000008 R_BPF_64_RELATIVE
00000000000105e0  0000000000000008 R_BPF_64_RELATIVE
0000000000010678  0000000000000008 R_BPF_64_RELATIVE
00000000000106b8  0000000000000008 R_BPF_64_RELATIVE
0000000000010860  0000000000000008 R_BPF_64_RELATIVE
00000000000108f8  0000000000000008 R_BPF_64_RELATIVE
0000000000010998  0000000000000008 R_BPF_64_RELATIVE
00000000000109c0  0000000000000008 R_BPF_64_RELATIVE
0000000000010a28  0000000000000008 R_BPF_64_RELATIVE
0000000000010af0  0000000000000008 R_BPF_64_RELATIVE
0000000000010b20  0000000000000008 R_BPF_64_RELATIVE
0000000000013a20  0000000000000008 R_BPF_64_RELATIVE
0000000000013a30  0000000000000008 R_BPF_64_RELATIVE
0000000000013a40  0000000000000008 R_BPF_64_RELATIVE
0000000000013a50  0000000000000008 R_BPF_64_RELATIVE
0000000000013a60  0000000000000008 R_BPF_64_RELATIVE
0000000000013a70  0000000000000008 R_BPF_64_RELATIVE
0000000000013a80  0000000000000008 R_BPF_64_RELATIVE
0000000000013a90  0000000000000008 R_BPF_64_RELATIVE
0000000000013aa0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ab0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ac0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ad0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ae0  0000000000000008 R_BPF_64_RELATIVE
0000000000013af0  0000000000000008 R_BPF_64_RELATIVE
0000000000013b00  0000000000000008 R_BPF_64_RELATIVE
0000000000013b10  0000000000000008 R_BPF_64_RELATIVE
0000000000013b20  0000000000000008 R_BPF_64_RELATIVE
0000000000013b30  0000000000000008 R_BPF_64_RELATIVE
0000000000013b40  0000000000000008 R_BPF_64_RELATIVE
0000000000013b50  0000000000000008 R_BPF_64_RELATIVE
0000000000013b60  0000000000000008 R_BPF_64_RELATIVE
0000000000013b70  0000000000000008 R_BPF_64_RELATIVE
0000000000013b88  0000000000000008 R_BPF_64_RELATIVE
0000000000013b90  0000000000000008 R_BPF_64_RELATIVE
0000000000013ba8  0000000000000008 R_BPF_64_RELATIVE
0000000000013bb0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bb8  0000000000000008 R_BPF_64_RELATIVE
0000000000013bc0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bc8  0000000000000008 R_BPF_64_RELATIVE
0000000000013bd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bd8  0000000000000008 R_BPF_64_RELATIVE
0000000000013be0  0000000000000008 R_BPF_64_RELATIVE
0000000000013be8  0000000000000008 R_BPF_64_RELATIVE
0000000000013bf8  0000000000000008 R_BPF_64_RELATIVE
0000000000013c10  0000000000000008 R_BPF_64_RELATIVE
0000000000013c18  0000000000000008 R_BPF_64_RELATIVE
0000000000013c20  0000000000000008 R_BPF_64_RELATIVE
0000000000013c28  0000000000000008 R_BPF_64_RELATIVE
0000000000013c40  0000000000000008 R_BPF_64_RELATIVE
0000000000013c58  0000000000000008 R_BPF_64_RELATIVE
0000000000013c60  0000000000000008 R_BPF_64_RELATIVE
0000000000013c78  0000000000000008 R_BPF_64_RELATIVE
0000000000013c80  0000000000000008 R_BPF_64_RELATIVE
0000000000013c88  0000000000000008 R_BPF_64_RELATIVE
0000000000013c90  0000000000000008 R_BPF_64_RELATIVE
0000000000013ca8  0000000000000008 R_BPF_64_RELATIVE
0000000000013cb8  0000000000000008 R_BPF_64_RELATIVE
0000000000013cd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ce0  0000000000000008 R_BPF_64_RELATIVE
0000000000013cf8  0000000000000008 R_BPF_64_RELATIVE
0000000000013d10  0000000000000008 R_BPF_64_RELATIVE
0000000000013d18  0000000000000008 R_BPF_64_RELATIVE
0000000000013d30  0000000000000008 R_BPF_64_RELATIVE
0000000000013d38  0000000000000008 R_BPF_64_RELATIVE
0000000000013d40  0000000000000008 R_BPF_64_RELATIVE
0000000000013d48  0000000000000008 R_BPF_64_RELATIVE
0000000000013d50  0000000000000008 R_BPF_64_RELATIVE
0000000000013d58  0000000000000008 R_BPF_64_RELATIVE
0000000000013d60  0000000000000008 R_BPF_64_RELATIVE
0000000000013d68  0000000000000008 R_BPF_64_RELATIVE
0000000000013d70  0000000000000008 R_BPF_64_RELATIVE
0000000000013d88  0000000000000008 R_BPF_64_RELATIVE
0000000000013d90  0000000000000008 R_BPF_64_RELATIVE
0000000000013da0  0000000000000008 R_BPF_64_RELATIVE
0000000000013db0  0000000000000008 R_BPF_64_RELATIVE
0000000000013dc0  0000000000000008 R_BPF_64_RELATIVE
0000000000013dd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013de8  0000000000000008 R_BPF_64_RELATIVE
0000000000013e00  0000000000000008 R_BPF_64_RELATIVE
0000000000013e18  0000000000000008 R_BPF_64_RELATIVE
0000000000013e20  0000000000000008 R_BPF_64_RELATIVE
0000000000013e38  0000000000000008 R_BPF_64_RELATIVE
0000000000013e40  0000000000000008 R_BPF_64_RELATIVE
0000000000013e48  0000000000000008 R_BPF_64_RELATIVE
0000000000013e50  0000000000000008 R_BPF_64_RELATIVE
0000000000013e60  0000000000000008 R_BPF_64_RELATIVE
0000000000013e70  0000000000000008 R_BPF_64_RELATIVE
0000000000013e80  0000000000000008 R_BPF_64_RELATIVE
0000000000013e90  0000000000000008 R_BPF_64_RELATIVE
0000000000013ea8  0000000000000008 R_BPF_64_RELATIVE
0000000000013eb0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ec0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ed0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ee0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ef0  0000000000000008 R_BPF_64_RELATIVE
0000000000013f00  0000000000000008 R_BPF_64_RELATIVE
0000000000013f10  0000000000000008 R_BPF_64_RELATIVE
0000000000013f28  0000000000000008 R_BPF_64_RELATIVE
0000000000013f40  0000000000000008 R_BPF_64_RELATIVE
0000000000013f58  0000000000000008 R_BPF_64_RELATIVE
0000000000013f68  0000000000000008 R_BPF_64_RELATIVE
0000000000013f78  0000000000000008 R_BPF_64_RELATIVE
0000000000013f88  0000000000000008 R_BPF_64_RELATIVE
0000000000013f98  0000000000000008 R_BPF_64_RELATIVE
0000000000013fa8  0000000000000008 R_BPF_64_RELATIVE
0000000000013fb8  0000000000000008 R_BPF_64_RELATIVE
0000000000013fd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fe0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ff0  0000000000000008 R_BPF_64_RELATIVE
0000000000014000  0000000000000008 R_BPF_64_RELATIVE
0000000000014010  0000000000000008 R_BPF_64_RELATIVE
0000000000014020  0000000000000008 R_BPF_64_RELATIVE
0000000000014030  0000000000000008 R_BPF_64_RELATIVE
0000000000014040  0000000000000008 R_BPF_64_RELATIVE
0000000000014050  0000000000000008 R_BPF_64_RELATIVE
0000000000014060  0000000000000008 R_BPF_64_RELATIVE
0000000000014070  0000000000000008 R_BPF_64_RELATIVE
0000000000014080  0000000000000008 R_BPF_64_RELATIVE
0000000000014090  0000000000000008 R_BPF_64_RELATIVE
00000000000140a8  0000000000000008 R_BPF_64_RELATIVE
00000000000140c0  0000000000000008 R_BPF_64_RELATIVE
00000000000140d8  0000000000000008 R_BPF_64_RELATIVE
00000000000140f0  0000000000000008 R_BPF_64_RELATIVE
0000000000001e40  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002368  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002580  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002a88  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002c80  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002f48  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
00000000000031f0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000003980  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000003b00  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000004198  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000004dc8  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
000000000000abf0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000000410  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000448  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000570  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000005a8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000a30  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000c10  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000d98  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000f60  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001678  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001800  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001af8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001b90  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000002908  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000003248  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000003250  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005130  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005388  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000055f0  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000057b0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005990  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005a98  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006310  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006590  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000065c8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006760  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006798  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006978  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000069e0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006c18  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006c60  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006c68  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000070f8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000008a28  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009318  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009770  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009918  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009ab0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009c68  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009e10  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009f48  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000a7d8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000a9b8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000aba8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abd8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abe8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ac08  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ac10  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ac18  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ac20  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ac58  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ad88  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000adc0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000aee8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000af20  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b098  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b0a8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b0b8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b0c8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b0d8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b258  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b340  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b738  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b740  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c270  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c350  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c3b0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c4b0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000df60  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e208  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e810  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e8f0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e9d0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000eb30  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ef38  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f0c0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f3a0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f400  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f430  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f4f0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f660  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000fa38  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000109b0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010b08  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010b38  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ac00  000000040000000a R_BPF_64_32            0000000000004cf0 custom_panic
0000000000011890  000000050000000a R_BPF_64_32            0000000000000000 sol_memset_
0000000000009690  000000060000000a R_BPF_64_32            0000000000000000 sol_try_find_program_address
0000000000008d50  000000070000000a R_BPF_64_32            0000000000000000 sol_invoke_signed_rust
000000000000a030  000000080000000a R_BPF_64_32            0000000000000000 sol_get_rent_sysvar
0000000000011778  000000090000000a R_BPF_64_32            0000000000000000 sol_memcpy_
00000000000119e0  0000000a0000000a R_BPF_64_32            0000000000000000 sol_memcmp_

Symbol table '.dynsym' contains 11 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
     2 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
     3 00000000000019e8 12584 FUNC    GLOBAL DEFAULT     1 entrypoint
     4 0000000000004cf0   280 FUNC    GLOBAL DEFAULT     1 custom_panic
     5 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memset_
     6 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_try_find_program_address
     7 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_invoke_signed_rust
     8 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_get_rent_sysvar
     9 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
    10 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcmp_

Symbol table '.symtab' contains 1326 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS tictactoe.f9d98a26-cgu.0
     2 0000000000000120    56 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>
     3 0000000000000150     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
     4 0000000000000158     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&u8>
     5 0000000000000160   400 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>
     6 00000000000001c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_3
     7 0000000000000228     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_6
     8 0000000000000288     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_9
     9 00000000000002e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_12
    10 0000000000013a20    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_1
    11 00000000000002f0   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
    12 0000000000000320     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_2
    13 0000000000000408     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_12
    14 0000000000000358     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_5
    15 0000000000000368     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_7
    16 00000000000003a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_9
    17 00000000000003b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_10
    18 00000000000005b0   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
    19 0000000000000418     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_14
    20 0000000000000438     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_13
    21 0000000000000450   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
    22 0000000000000480     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_2
    23 0000000000000568     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_12
    24 00000000000004b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_5
    25 00000000000004c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_7
    26 0000000000000500     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_9
    27 0000000000000510     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_10
    28 0000000000000578     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_14
    29 0000000000000598     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_13
    30 00000000000005f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_12
    31 00000000000006d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_2
    32 0000000000000668     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_7
    33 0000000000000640     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_6
    34 00000000000006b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_9
    35 0000000000000698     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_11
    36 00000000000006c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_10
    37 0000000000000850     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_7
    38 00000000000007f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_5
    39 00000000000007b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_9
    40 0000000000000870     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_11
    41 00000000000007d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_10
    42 0000000000000860     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_8
    43 00000000000125f5     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_2
    44 0000000000000950     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_3
    45 0000000000000980     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_5
    46 00000000000126d0    18 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_3
    47 00000000000009c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_7
    48 00000000000009a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_6
    49 00000000000126e2    13 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_5
    50 0000000000000a38     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_5
    51 0000000000000b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_3
    52 0000000000000a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_11
    53 0000000000000aa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_7
    54 0000000000000d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_10
    55 0000000000013ae0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_7
    56 0000000000006068   168 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for u8>::fmt
    57 0000000000000ca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_9
    58 0000000000000bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_4
    59 0000000000000c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_6
    60 0000000000013b90    88 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_8
    61 0000000000000da0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_5
    62 0000000000000ed0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_3
    63 0000000000001000     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_13
    64 0000000000000ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_12
    65 0000000000001018     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_9
    66 0000000000000f48     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_4
    67 0000000000000f68     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_10
    68 00000000000010a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_11
    69 00000000000010b0  1152 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize
    70 00000000000010f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_2
    71 0000000000001128     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_4
    72 0000000000001208     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_10
    73 0000000000001198     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_7
    74 00000000000011c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_9
    75 00000000000012a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_12
    76 0000000000013be8    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_21
    77 0000000000001258     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_11
    78 00000000000012d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_14
    79 0000000000001308     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_16
    80 0000000000001350     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_17
    81 0000000000001380     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_19
    82 00000000000013c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_21
    83 0000000000001400     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_23
    84 0000000000001430     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_25
    85 0000000000001448     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_27
    86 00000000000014b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_29
    87 00000000000014e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_31
    88 0000000000001738     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_11
    89 0000000000001680     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_7
    90 0000000000001770     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_5
    91 0000000000001878     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_9
    92 0000000000001748     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_12
    93 0000000000001760     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_13
    94 0000000000001808     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_8
    95 0000000000001b00     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_4
    96 0000000000001cf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_20
    97 0000000000001b18     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_5
    98 0000000000001c00     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_8
    99 0000000000001b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_7
   100 0000000000001c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_9
   101 0000000000001ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_15
   102 0000000000001cb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_16
   103 0000000000002168     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_33
   104 00000000000021c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_39
   105 00000000000027e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_69
   106 00000000000129f1    22 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_22
   107 0000000000002a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_84
   108 0000000000002b48     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_91
   109 0000000000002b10     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_86
   110 0000000000002198     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_36
   111 00000000000021f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_42
   112 0000000000002910     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_72
   113 00000000000128c1    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_23
   114 0000000000002450     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_59
   115 0000000000002288     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_51
   116 0000000000013a80    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_24
   117 0000000000001e78     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_25
   118 00000000000027d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_68
   119 0000000000002408     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_58
   120 0000000000002fa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_108
   121 00000000000020a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_30
   122 0000000000002fe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_110
   123 0000000000003c48     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_162
   124 0000000000004a20     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_251
   125 0000000000002228     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_45
   126 0000000000002930     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_73
   127 0000000000012970    25 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_25
   128 0000000000002258     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_48
   129 0000000000002950     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_74
   130 000000000001284c    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_26
   131 0000000000002970     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_75
   132 0000000000002990     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_76
   133 00000000000129a1    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_27
   134 00000000000029b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_77
   135 00000000000029d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_78
   136 000000000001287f    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_28
   137 00000000000029f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_79
   138 0000000000002a10     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_80
   139 00000000000128f6    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_29
   140 0000000000002a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_81
   141 0000000000002a50     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_82
   142 0000000000012802    21 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_30
   143 0000000000013a60    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_31
   144 00000000000023a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_54
   145 0000000000002cc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_101
   146 0000000000002ce0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_102
   147 0000000000013a40    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_32
   148 00000000000025b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_62
   149 0000000000003038     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_111
   150 0000000000002820     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_70
   151 0000000000002a70     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_83
   152 0000000000013bf8    48 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_33
   153 0000000000002c70     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_98
   154 0000000000012a31    55 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_34
   155 0000000000013c40    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_35
   156 0000000000013c28    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_36
   157 00000000000128db    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_37
   158 0000000000012989    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_38
   159 0000000000012864    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_39
   160 00000000000129d4    29 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_40
   161 00000000000129bb    25 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_41
   162 00000000000128a5    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_42
   163 0000000000012892    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_43
   164 0000000000012951    31 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_44
   165 0000000000012839    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_46
   166 0000000000012817    34 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_47
   167 0000000000012a07    14 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_48
   168 0000000000002a90     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_85
   169 0000000000002b88     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_94
   170 0000000000002b30     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_90
   171 0000000000002c60     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_97
   172 0000000000002bb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_87
   173 0000000000002c20     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_95
   174 0000000000003258     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_117
   175 0000000000002f80     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_107
   176 0000000000002fd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_109
   177 0000000000003380     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_120
   178 00000000000031c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_114
   179 00000000000039e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_151
   180 00000000000031d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_115
   181 0000000000012663    31 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_49
   182 0000000000003548     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_123
   183 0000000000003248     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_116
   184 00000000000033e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_121
   185 00000000000049c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_249
   186 0000000000003500     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_122
   187 0000000000003bb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_161
   188 0000000000003590     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_125
   189 00000000000035b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_127
   190 00000000000035d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_129
   191 0000000000003600     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_131
   192 0000000000003648     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_133
   193 00000000000036b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_135
   194 0000000000003788     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_137
   195 00000000000037a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_139
   196 00000000000037e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_141
   197 00000000000038d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_142
   198 0000000000003c78     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_163
   199 0000000000003928     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_146
   200 0000000000003968     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_149
   201 0000000000012682    41 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_50
   202 0000000000003d48     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_170
   203 0000000000003a18     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_153
   204 0000000000003a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_155
   205 0000000000013aa0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_51
   206 0000000000003b38     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_158
   207 00000000000040a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_190
   208 00000000000041f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_194
   209 0000000000004a18     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_250
   210 0000000000003d10     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_167
   211 0000000000003d30     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_169
   212 0000000000003d90     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_172
   213 0000000000003dc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_174
   214 0000000000003dd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_176
   215 0000000000003e08     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_178
   216 0000000000003e40     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_180
   217 0000000000003e88     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_182
   218 0000000000004008     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_183
   219 0000000000004a50     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_252
   220 0000000000004060     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_187
   221 0000000000013ac0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_52
   222 00000000000041d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_193
   223 0000000000004988     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_248
   224 0000000000004238     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_196
   225 0000000000004268     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_198
   226 0000000000004280     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_200
   227 00000000000042b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_202
   228 00000000000042f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_204
   229 0000000000004368     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_206
   230 0000000000004398     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_208
   231 00000000000043b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_210
   232 00000000000043d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_212
   233 0000000000004418     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_214
   234 00000000000044a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_216
   235 00000000000044e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_218
   236 0000000000004508     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_220
   237 0000000000004528     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_222
   238 0000000000004720     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_225
   239 0000000000004780     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_228
   240 00000000000047e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_231
   241 0000000000004840     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_234
   242 00000000000048a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_237
   243 0000000000004900     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_240
   244 0000000000004940     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_244
   245 0000000000004970     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_247
   246 0000000000004ae8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_256
   247 0000000000004b48     0 NOTYPE  LOCAL  DEFAULT     1 LBB29_2
   248 0000000000004b78     0 NOTYPE  LOCAL  DEFAULT     1 LBB29_4
   249 0000000000004b90     0 NOTYPE  LOCAL  DEFAULT     1 LBB29_6
   250 0000000000004bd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB29_8
   251 0000000000004c28     0 NOTYPE  LOCAL  DEFAULT     1 LBB31_2
   252 0000000000004c58     0 NOTYPE  LOCAL  DEFAULT     1 LBB31_4
   253 0000000000004c70     0 NOTYPE  LOCAL  DEFAULT     1 LBB31_6
   254 0000000000004ce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB31_10
   255 0000000000004cc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB31_9
   256 0000000000013af0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_53
   257 0000000000006110    24 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   258 0000000000004e00     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_3
   259 0000000000004e88     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_4
   260 0000000000004f50     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_9
   261 0000000000004fa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_10
   262 00000000000125d0     0 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_61
   263 0000000000013b40    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_62
   264 00000000000050a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_13
   265 0000000000004ef0     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_7
   266 0000000000005000     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_11
   267 0000000000013b20    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_63
   268 0000000000005058     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_12
   269 0000000000013b00    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_64
   270 0000000000013b60    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_65
   271 0000000000013b50    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_66
   272 0000000000013b30    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_67
   273 0000000000013b10    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_68
   274 0000000000005138     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_5
   275 00000000000052f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_3
   276 00000000000051d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_12
   277 0000000000005518     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_15
   278 0000000000005190     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_13
   279 0000000000005220     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_9
   280 0000000000005208     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_17
   281 00000000000054b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_16
   282 00000000000053f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_18
   283 0000000000005418     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_11
   284 0000000000005370     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_4
   285 0000000000005390     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_8
   286 0000000000005588     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_19
   287 0000000000005590     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_20
   288 00000000000055f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_5
   289 0000000000005720     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_3
   290 0000000000005850     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_13
   291 0000000000005848     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_12
   292 0000000000005870     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_9
   293 0000000000005798     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_4
   294 00000000000057b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_10
   295 0000000000005900     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_11
   296 0000000000005998     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_6
   297 00000000000059b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_7
   298 0000000000005a08     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_4
   299 0000000000005b08     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_9
   300 0000000000005b20     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_10
   301 0000000000005aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_8
   302 0000000000005b30    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::type_id
   303 0000000000005b48    16 FUNC    LOCAL  DEFAULT     1 std::error::Error::backtrace
   304 0000000000005b58    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::cause
   305 0000000000005b70   168 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Write>::write_str
   306 0000000000005bd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_2
   307 0000000000005c18   688 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Write>::write_char
   308 0000000000005ca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_4
   309 0000000000005c78     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_3
   310 0000000000005eb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_12
   311 0000000000005d60     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_6
   312 0000000000005cf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_7
   313 0000000000005da8     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_8
   314 0000000000005e30     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_9
   315 0000000000005e78     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_11
   316 0000000000005ec8   104 FUNC    LOCAL  DEFAULT     1 core::fmt::Write::write_fmt
   317 0000000000013c60    48 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_69
   318 0000000000005f30   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   319 0000000000005f90     0 NOTYPE  LOCAL  DEFAULT     1 LBB48_2
   320 0000000000005fd8    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   321 0000000000005ff8   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   322 00000000000060d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB51_2
   323 00000000000060b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB51_5
   324 00000000000060f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB51_4
   325 0000000000006108     0 NOTYPE  LOCAL  DEFAULT     1 LBB51_3
   326 0000000000012598    14 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_71
   327 00000000000125a6    36 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_72
   328 00000000000125d0    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_75
   329 00000000000125ec     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_76
   330 00000000000125fe    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_77
   331 0000000000012616    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_78
   332 000000000001262e    29 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_79
   333 000000000001264b     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_80
   334 0000000000012654    15 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_81
   335 00000000000126ef    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_82
   336 0000000000012709    37 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_83
   337 000000000001272e    12 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_84
   338 000000000001273a    35 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_85
   339 000000000001275d    34 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_86
   340 000000000001277f    61 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_87
   341 00000000000127bc    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_88
   342 00000000000127d4    46 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_89
   343 0000000000013b70    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_90
   344 0000000000012a15    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_91
   345 0000000000012a68    75 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_92
   346 0000000000000910   200 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::GameState as core::fmt::Debug>::fmt
   347 00000000000006f0   544 FUNC    LOCAL  DEFAULT     1 tictactoe::instructions::PlayerMove::process
   348 00000000000009d8   872 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize
   349 0000000000000d40   880 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize
   350 0000000000001530  1208 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize
   351 00000000000050d8  1216 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize
   352 0000000000004e08   720 FUNC    LOCAL  DEFAULT     1 <tictactoe::error::TictactoeError as core::fmt::Display>::fmt
   353 0000000000004b10   208 FUNC    LOCAL  HIDDEN      1 __rg_alloc
   354 0000000000004be0     8 FUNC    LOCAL  HIDDEN      1 __rg_dealloc
   355 0000000000004be8   264 FUNC    LOCAL  HIDDEN      1 __rg_realloc
   356 0000000000005908   552 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize
   357 0000000000005598   880 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize
   358 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS 1mmfwtw9ogskz7n7
   359 0000000000006128     0 NOTYPE  LOCAL  DEFAULT     1
   360 0000000000006138     0 NOTYPE  LOCAL  DEFAULT     1
   361 0000000000006148     0 NOTYPE  LOCAL  DEFAULT     1
   362 0000000000006158     0 NOTYPE  LOCAL  DEFAULT     1
   363 0000000000006138    16 FUNC    LOCAL  DEFAULT     1 __rust_dealloc
   364 0000000000006128    16 FUNC    LOCAL  DEFAULT     1 __rust_alloc
   365 0000000000006148    16 FUNC    LOCAL  DEFAULT     1 __rust_realloc
   366 0000000000006158    16 FUNC    LOCAL  DEFAULT     1 __rust_alloc_error_handler
   367 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS solana_program.e9ff558d-cgu.0
   368 0000000000006168     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&alloc::vec::Vec<(u64,solana_program::stake_history::StakeHistoryEntry)>>
   369 0000000000006170    56 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>
   370 00000000000061a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_3
   371 00000000000061a8   240 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>
   372 00000000000061f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_3
   373 0000000000006260     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_6
   374 00000000000061d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_9
   375 0000000000006208     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_5
   376 0000000000006280     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_8
   377 0000000000006210     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_12
   378 0000000000006238     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_15
   379 0000000000012b18    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_15
   380 0000000000013d70    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_16
   381 0000000000013c90    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_17
   382 0000000000006318     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_2
   383 00000000000063c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_2
   384 00000000000063d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_3
   385 0000000000006448     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_2
   386 0000000000006460     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_3
   387 00000000000067a0   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   388 0000000000006470   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   389 00000000000064a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_2
   390 0000000000006588     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_12
   391 00000000000064d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_5
   392 00000000000064e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_7
   393 0000000000006520     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_9
   394 0000000000006530     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_10
   395 0000000000006598     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_14
   396 00000000000065b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_13
   397 00000000000065d0   464 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   398 0000000000006600     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_2
   399 0000000000006758     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_16
   400 0000000000006638     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_5
   401 0000000000006648     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_7
   402 00000000000066a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_9
   403 00000000000066b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_11
   404 00000000000066f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_13
   405 0000000000006700     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_14
   406 0000000000006768     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_18
   407 0000000000006788     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_17
   408 00000000000067e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_12
   409 00000000000068c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_2
   410 0000000000006858     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_7
   411 0000000000006830     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_6
   412 00000000000068a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_9
   413 0000000000006888     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_11
   414 00000000000068b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_10
   415 0000000000007120  6416 FUNC    LOCAL  DEFAULT     1 solana_program::instruction::Instruction::new_with_bincode
   416 0000000000013cd0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_63
   417 0000000000013ce0    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_64
   418 0000000000013ca8    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_69
   419 0000000000006958     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_2
   420 0000000000006968     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_4
   421 0000000000006980     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_6
   422 00000000000069e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_9
   423 00000000000069c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_8
   424 00000000000069f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_10
   425 0000000000006b38     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_14
   426 0000000000006bd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_15
   427 0000000000006a58     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_12
   428 0000000000006b08     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_13
   429 0000000000006dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_30
   430 0000000000006c20     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_18
   431 0000000000013cb8    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_70
   432 0000000000006c70     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_20
   433 0000000000006c60     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_19
   434 0000000000006cc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_22
   435 0000000000006cf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_24
   436 0000000000006d18     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_26
   437 0000000000006d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_28
   438 0000000000006e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_32
   439 00000000000070e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_43
   440 0000000000006ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_34
   441 0000000000006f18     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_36
   442 0000000000006f40     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_38
   443 0000000000006f60     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_40
   444 0000000000007048     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_42
   445 0000000000007190     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_5
   446 00000000000071d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_12
   447 0000000000007280     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_25
   448 00000000000071e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_18
   449 0000000000007180     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_4
   450 00000000000071b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_9
   451 00000000000071f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_16
   452 0000000000007210     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_19
   453 0000000000007228     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_21
   454 0000000000007220     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_20
   455 0000000000007200     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_17
   456 0000000000007240     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_23
   457 0000000000007258     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_24
   458 00000000000072b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_27
   459 0000000000008a10     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_147
   460 0000000000007388     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_33
   461 00000000000075c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_48
   462 00000000000076d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_56
   463 00000000000078a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_65
   464 0000000000007330     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_32
   465 0000000000008810     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_140
   466 0000000000007668     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_52
   467 0000000000007430     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_38
   468 0000000000007458     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_39
   469 00000000000079c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_71
   470 0000000000007ad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_77
   471 00000000000073e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_37
   472 00000000000080c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_109
   473 0000000000007698     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_53
   474 0000000000007bf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_83
   475 0000000000007490     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_42
   476 0000000000008850     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_142
   477 0000000000007568     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_46
   478 00000000000074c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_43
   479 0000000000007d88     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_91
   480 0000000000007eb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_97
   481 0000000000008058     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_105
   482 0000000000007628     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_51
   483 0000000000008190     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_111
   484 00000000000076b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_55
   485 0000000000008890     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_144
   486 00000000000080b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_108
   487 0000000000007720     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_58
   488 00000000000088d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_145
   489 0000000000007768     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_59
   490 00000000000077d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_61
   491 0000000000007850     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_63
   492 0000000000007818     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_62
   493 00000000000080c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_110
   494 00000000000078f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_67
   495 0000000000007968     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_69
   496 0000000000007930     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_68
   497 0000000000007a10     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_73
   498 0000000000007a80     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_75
   499 0000000000007a48     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_74
   500 0000000000007b28     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_79
   501 0000000000007b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_81
   502 0000000000007b60     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_80
   503 0000000000007c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_85
   504 0000000000007d28     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_89
   505 0000000000007c78     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_86
   506 0000000000008408     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_122
   507 0000000000007dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_93
   508 0000000000008900     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_92
   509 0000000000007e58     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_95
   510 0000000000007e20     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_94
   511 0000000000007f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_99
   512 0000000000007ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_103
   513 0000000000007f48     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_100
   514 00000000000085d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_130
   515 00000000000080a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_107
   516 00000000000081d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_113
   517 0000000000008938     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_146
   518 0000000000008228     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_114
   519 00000000000082a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_116
   520 0000000000008318     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_118
   521 00000000000083a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_120
   522 0000000000008368     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_119
   523 0000000000008458     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_124
   524 0000000000008970     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_123
   525 00000000000084f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_126
   526 0000000000008570     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_128
   527 0000000000008538     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_127
   528 0000000000008620     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_132
   529 00000000000089c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_131
   530 00000000000086c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_134
   531 0000000000008738     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_136
   532 00000000000087b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_138
   533 0000000000008778     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_137
   534 0000000000008d28     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_4
   535 0000000000008d00     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_2
   536 0000000000008b28     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_3
   537 0000000000008b38     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_7
   538 0000000000008cf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_14
   539 0000000000008c50     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_10
   540 0000000000008bc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_16
   541 0000000000008e10     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_17
   542 0000000000008c10     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_18
   543 0000000000008e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_19
   544 0000000000008da0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_12
   545 0000000000008cb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_13
   546 0000000000008dd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_15
   547 0000000000008d80     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_6
   548 0000000000008e90     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_21
   549 0000000000008e78     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_20
   550 0000000000008ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_14
   551 0000000000008f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_8
   552 0000000000008f58     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_5
   553 0000000000008ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_27
   554 0000000000009128     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_39
   555 0000000000008f30     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_21
   556 0000000000008f80     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_18
   557 0000000000009028     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_33
   558 0000000000008fa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_11
   559 0000000000009040     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_30
   560 0000000000008fd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_24
   561 0000000000009058     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_36
   562 0000000000009070     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_28
   563 0000000000009088     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_29
   564 00000000000090a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_34
   565 00000000000090b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_35
   566 00000000000090d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_31
   567 00000000000090e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_32
   568 0000000000009100     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_37
   569 0000000000009118     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_38
   570 0000000000009160     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_43
   571 00000000000091f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_14
   572 0000000000009228     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_8
   573 0000000000009288     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_5
   574 0000000000009380     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_28
   575 0000000000009498     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_49
   576 0000000000009368     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_27
   577 0000000000009258     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_21
   578 00000000000092b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_18
   579 0000000000009398     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_37
   580 0000000000009218     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_38
   581 0000000000009320     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_11
   582 00000000000093a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_32
   583 0000000000009248     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_33
   584 0000000000009350     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_24
   585 00000000000093b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_44
   586 0000000000009278     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_45
   587 00000000000093c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_29
   588 00000000000093d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_30
   589 00000000000092a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_31
   590 00000000000093e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_39
   591 00000000000093f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_40
   592 00000000000092d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_41
   593 0000000000009458     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_43
   594 0000000000009408     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_34
   595 0000000000009418     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_35
   596 0000000000009340     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_36
   597 0000000000009428     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_46
   598 0000000000009438     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_47
   599 0000000000009448     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_48
   600 0000000000009608     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_4
   601 00000000000095e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_3
   602 00000000000096e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_2
   603 0000000000009778     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_4
   604 0000000000009868     0 NOTYPE  LOCAL  DEFAULT     1 LBB230_2
   605 00000000000098b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB230_4
   606 0000000000013d18    88 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_209
   607 0000000000009920     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_2
   608 0000000000009ab8     0 NOTYPE  LOCAL  DEFAULT     1 LBB334_2
   609 0000000000009c70     0 NOTYPE  LOCAL  DEFAULT     1 LBB336_2
   610 0000000000009d78    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::type_id
   611 0000000000009d90    16 FUNC    LOCAL  DEFAULT     1 std::error::Error::backtrace
   612 0000000000009da0    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::cause
   613 0000000000009e18     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_5
   614 0000000000009eb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_3
   615 0000000000009fd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_7
   616 0000000000009f50     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_6
   617 000000000000a090     0 NOTYPE  LOCAL  DEFAULT     1 LBB623_2
   618 000000000000a0a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB623_3
   619 0000000000012ab3    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_794
   620 0000000000012ac6    17 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_822
   621 0000000000012ad7    13 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_845
   622 0000000000012ae4    49 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_851
   623 0000000000013cf8    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_866
   624 0000000000007100    32 FUNC    LOCAL  DEFAULT     1 <solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref
   625 0000000000009610   440 FUNC    LOCAL  DEFAULT     1 solana_program::pubkey::Pubkey::find_program_address
   626 0000000000009db8   552 FUNC    LOCAL  DEFAULT     1 <solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize
   627 00000000000068e0  2080 FUNC    LOCAL  DEFAULT     1 solana_program::entrypoint::deserialize
   628 00000000000094a8   360 FUNC    LOCAL  DEFAULT     1 <solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from
   629 0000000000006350   152 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::try_borrow_data
   630 00000000000063e8   136 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::try_borrow_mut_data
   631 0000000000008e98   728 FUNC    LOCAL  DEFAULT     1 solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from
   632 0000000000009fe0   216 FUNC    LOCAL  DEFAULT     1 solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get
   633 00000000000097c8   248 FUNC    LOCAL  DEFAULT     1 solana_program::rent::Rent::minimum_balance
   634 0000000000006298   184 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::lamports
   635 0000000000009c10   360 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::allocate
   636 0000000000008a70  1064 FUNC    LOCAL  DEFAULT     1 solana_program::program::invoke_signed
   637 00000000000098c0   408 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::assign
   638 0000000000009a58   440 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::transfer
   639 0000000000008a30    64 FUNC    LOCAL  DEFAULT     1 solana_program::program::invoke
   640 0000000000012b18     0 OBJECT  LOCAL  DEFAULT     2 solana_program::message::legacy::BUILTIN_PROGRAMS_KEYS
   641 0000000000007100    32 FUNC    LOCAL  DEFAULT     1 <solana_program::hash::Hash as core::convert::AsRef<[u8]>>::as_ref
   642 0000000000009170   824 FUNC    LOCAL  DEFAULT     1 <solana_program::program_error::ProgramError as core::convert::From<u64>>::from
   643 0000000000009db8   552 FUNC    LOCAL  DEFAULT     1 <solana_program::hash::Hash as borsh::de::BorshDeserialize>::deserialize
   644 0000000000007100    32 FUNC    LOCAL  DEFAULT     1 <solana_program::blake3::Hash as core::convert::AsRef<[u8]>>::as_ref
   645 0000000000007100    32 FUNC    LOCAL  DEFAULT     1 <solana_program::keccak::Hash as core::convert::AsRef<[u8]>>::as_ref
   646 0000000000009db8   552 FUNC    LOCAL  DEFAULT     1 <solana_program::blake3::Hash as borsh::de::BorshDeserialize>::deserialize
   647 0000000000009db8   552 FUNC    LOCAL  DEFAULT     1 <solana_program::keccak::Hash as borsh::de::BorshDeserialize>::deserialize
   648 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS blake3.b6ab9703-cgu.0
   649 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS solana_frozen_abi.c0b6b15a-cgu.0
   650 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS bs58.9c04cdba-cgu.0
   651 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS keccak.d4752f62-cgu.0
   652 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS bincode.adfda9c8-cgu.0
   653 000000000000a0b8     8 FUNC    LOCAL  DEFAULT     1 bincode::config::DefaultOptions::new
   654 000000000000a0b8     8 FUNC    LOCAL  DEFAULT     1 <bincode::config::DefaultOptions as core::default::Default>::default
   655 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS sha2.46e18164-cgu.0
   656 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS log.abad14e7-cgu.0
   657 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS borsh.c965a638-cgu.0
   658 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS std.76e7c9c4-cgu.0
   659 0000000000012b30     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.0
   660 0000000000013d90    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.894d23c69aaefe319b308348099da530.113
   661 000000000000ac28    40 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   662 000000000000a138  1608 FUNC    LOCAL  DEFAULT     1 std::io::error::ErrorKind::as_str
   663 000000000000a1a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_28
   664 000000000000a218     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_15
   665 000000000000a280     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_9
   666 000000000000a310     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_6
   667 000000000000a768     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_82
   668 0000000000012e25    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.161
   669 000000000000a1e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_42
   670 000000000000a2b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_36
   671 000000000000a338     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_33
   672 000000000000a480     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_68
   673 0000000000012cb3    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.141
   674 000000000000a248     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_49
   675 000000000000a360     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_46
   676 000000000000a4a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_74
   677 0000000000012c26    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.131
   678 000000000000a2e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_22
   679 000000000000a390     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_19
   680 000000000000a4c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_62
   681 0000000000012da7    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.151
   682 000000000000a6a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_81
   683 000000000000a3c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_53
   684 000000000000a4e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_77
   685 000000000000a500     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_78
   686 0000000000012bbb    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.125
   687 000000000000a3f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_12
   688 000000000000a518     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_58
   689 0000000000012dee    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.156
   690 000000000000a420     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_39
   691 000000000000a538     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_71
   692 0000000000012c70    25 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.136
   693 000000000000a450     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_25
   694 000000000000a558     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_65
   695 0000000000012d4d    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.146
   696 000000000000a578     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_56
   697 000000000000a598     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_57
   698 000000000000a5b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_69
   699 000000000000a5d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_70
   700 000000000000a5f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_75
   701 000000000000a610     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_76
   702 0000000000012bf1    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.128
   703 000000000000a630     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_63
   704 000000000000a650     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_64
   705 0000000000012d6e    15 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.148
   706 000000000000a670     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_79
   707 000000000000a690     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_80
   708 0000000000012b90    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.122
   709 000000000000a6b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_60
   710 000000000000a6d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_61
   711 0000000000012dbe    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.153
   712 000000000000a6f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_72
   713 000000000000a710     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_73
   714 0000000000012c41    20 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.133
   715 000000000000a730     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_66
   716 000000000000a750     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_67
   717 0000000000012cd6    25 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.143
   718 0000000000012cbf    23 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.142
   719 0000000000012db2    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.152
   720 0000000000012bdc    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.127
   721 0000000000012bd1    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.126
   722 0000000000012e00    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.157
   723 0000000000012c89    23 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.137
   724 0000000000012d60    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.147
   725 0000000000012e13    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.160
   726 0000000000012caa     9 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.140
   727 0000000000012ca0    10 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.139
   728 0000000000012c18    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.130
   729 0000000000012c07    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.129
   730 0000000000012d92    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.150
   731 0000000000012d7d    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.149
   732 0000000000012bae    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.124
   733 0000000000012ba3    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.123
   734 0000000000012de1    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.155
   735 0000000000012dd3    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.154
   736 0000000000012c62    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.135
   737 0000000000012c55    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.134
   738 0000000000012d27    38 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.145
   739 0000000000012cef    56 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.144
   740 000000000000a7e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_2
   741 000000000000a928     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_3
   742 000000000000a968     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_5
   743 000000000000a9e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_11
   744 000000000000a9c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_10
   745 000000000000aa00     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_7
   746 000000000000a9f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_12
   747 0000000000013da0    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.894d23c69aaefe319b308348099da530.175
   748 000000000000ab78    40 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Display>::fmt
   749 0000000000012e42    46 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.353
   750 000000000000abf0    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::sol_log
   751 0000000000012e36    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.173
   752 0000000000012e41     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.174
   753 000000000000a780   152 FUNC    LOCAL  DEFAULT     1 std::io::error::Error::_new
   754 000000000000a0e8    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Display>::fmt
   755 000000000000a110    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Debug>::fmt
   756 000000000000a0c0    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as std::error::Error>::description
   757 000000000000a818   864 FUNC    LOCAL  DEFAULT     1 <std::io::error::Error as core::fmt::Display>::fmt
   758 000000000000ac00    24 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::panic
   759 000000000000aba0    16 FUNC    LOCAL  DEFAULT     1 std::process::abort
   760 000000000000ac18    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::abort_internal
   761 000000000000abb0    48 FUNC    LOCAL  DEFAULT     1 rust_oom
   762 000000000000abe0    16 FUNC    LOCAL  DEFAULT     1 rust_begin_unwind
   763 000000000000a0c0    40 FUNC    LOCAL  DEFAULT     1 <std::sys_common::wtf8::Wtf8Buf as core::ops::deref::Deref>::deref
   764 000000000000a0c0    40 FUNC    LOCAL  DEFAULT     1 <std::sys_common::wtf8::Wtf8Buf as core::ops::deref::DerefMut>::deref_mut
   765 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS panic_abort.848a2d84-cgu.0
   766 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS hashbrown.a672f3dc-cgu.0
   767 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS alloc.55e0798c-cgu.0
   768 000000000000ac50    16 FUNC    LOCAL  DEFAULT     1 core::ops::function::FnOnce::call_once
   769 000000000000ac60     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&u8>
   770 000000000000ac68   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   771 000000000000ac98     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
   772 000000000000ad80     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_12
   773 000000000000acd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_5
   774 000000000000ace0     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_7
   775 000000000000ad18     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_9
   776 000000000000ad28     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_10
   777 000000000000af28   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   778 000000000000ad90     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_14
   779 000000000000adb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_13
   780 000000000000adc8   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   781 000000000000adf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_2
   782 000000000000aee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_12
   783 000000000000ae30     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_5
   784 000000000000ae40     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_7
   785 000000000000ae78     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_9
   786 000000000000ae88     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_10
   787 000000000000aef0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_14
   788 000000000000af10     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_13
   789 000000000000af68     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_12
   790 000000000000b050     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_2
   791 000000000000afe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_7
   792 000000000000afb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_6
   793 000000000000b030     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_9
   794 000000000000b010     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_11
   795 000000000000b040     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_10
   796 0000000000012e8c    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.1
   797 0000000000013dd0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.2
   798 000000000000b0d0    16 FUNC    LOCAL  DEFAULT     1 core::intrinsics::const_eval_select
   799 000000000000b170     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_3
   800 000000000000b140     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_2
   801 000000000000b200     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_10
   802 000000000000b1b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_7
   803 000000000000b260     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_13
   804 000000000000b1e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_9
   805 0000000000013e20    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.60
   806 000000000000b348     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_15
   807 0000000000012e9d    51 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.14
   808 0000000000013e00    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.58
   809 0000000000013de8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.16
   810 000000000000b350   680 FUNC    LOCAL  DEFAULT     1 alloc::string::String::push
   811 000000000000b3e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_4
   812 000000000000b3b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_3
   813 000000000000b5f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_12
   814 000000000000b498     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_6
   815 000000000000b430     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_7
   816 000000000000b4e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_8
   817 000000000000b568     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_9
   818 000000000000b5b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_11
   819 000000000000b5f8   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   820 000000000000b658     0 NOTYPE  LOCAL  DEFAULT     1 LBB60_2
   821 000000000000b6a0    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   822 000000000000b6c0   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   823 0000000000012e70    28 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.0
   824 0000000000012ed0    24 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.15
   825 000000000000b0e0   624 FUNC    LOCAL  DEFAULT     1 alloc::fmt::format
   826 000000000000b068    56 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::capacity_overflow
   827 000000000000b0a0    16 FUNC    LOCAL  DEFAULT     1 alloc::alloc::handle_alloc_error
   828 000000000000b0c0    16 FUNC    LOCAL  HIDDEN      1 __rg_oom
   829 000000000000b0b0    16 FUNC    LOCAL  DEFAULT     1 alloc::alloc::handle_alloc_error::rt_error
   830 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS core.817fea1d-cgu.0
   831 000000000000b730    24 FUNC    LOCAL  DEFAULT     1 core::ops::function::FnOnce::call_once
   832 000000000000b748     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>
   833 0000000000012ee8     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.100
   834 0000000000013e50    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.130
   835 000000000000b750   280 FUNC    LOCAL  DEFAULT     1 <core::ops::range::Range<Idx> as core::fmt::Debug>::fmt
   836 000000000000f718  1336 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for usize>::fmt
   837 000000000000b818     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_2
   838 000000000000b820     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_3
   839 000000000000b868    24 FUNC    LOCAL  DEFAULT     1 <T as core::any::Any>::type_id
   840 0000000000012eea    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.137
   841 000000000000b8c0  1496 FUNC    LOCAL  DEFAULT     1 core::char::methods::<impl char>::escape_debug_ext
   842 000000000000b940     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_4
   843 000000000000be70     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_14
   844 000000000000b930     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_10
   845 000000000000b920     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_8
   846 000000000000b958     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_7
   847 000000000000bc28     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_12
   848 000000000000be50     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_13
   849 000000000000bc50     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_11
   850 000000000000b980     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_16
   851 000000000000ba50     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_28
   852 000000000000bc60     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_18
   853 000000000000b9c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_27
   854 000000000000bcf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_19
   855 00000000000134f8   438 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.355
   856 00000000000133e4    84 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.353
   857 0000000000013438   192 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.354
   858 000000000000f128   784 FUNC    LOCAL  DEFAULT     1 core::unicode::printable::check
   859 00000000000132b5   303 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.352
   860 0000000000013145    80 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.350
   861 0000000000013195   288 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.351
   862 00000000000107b0    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   863 0000000000013e60    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.167
   864 0000000000012f21    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.169
   865 000000000000c1d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_6
   866 000000000000bfd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_3
   867 0000000000010748   104 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   868 0000000000013eb0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.172
   869 000000000000c0d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_5
   870 0000000000010710    56 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   871 0000000000013ed0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.176
   872 0000000000013e90    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.168
   873 00000000000106e0    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Debug>::fmt
   874 0000000000013ef0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.191
   875 0000000000012f44     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.190
   876 0000000000012f63   200 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.228
   877 000000000000c668     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_4
   878 000000000000c8e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_22
   879 000000000000c5c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_3
   880 000000000000c5d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_26
   881 000000000000c608     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_25
   882 000000000000c978     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_28
   883 000000000000c6a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_6
   884 000000000000c728     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_20
   885 000000000000c6b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_7
   886 000000000000c760     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_10
   887 000000000000c770     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_11
   888 000000000000c7c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_13
   889 000000000000c800     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_16
   890 000000000000c810     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_17
   891 000000000000c860     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_19
   892 000000000000c920     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_24
   893 000000000000c930     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_29
   894 000000000000c968     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_30
   895 000000000000c980     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_31
   896 000000000000c9e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_2
   897 000000000000ca08     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_4
   898 000000000000c9f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_3
   899 000000000000ca38     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_12
   900 000000000000ca88     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_6
   901 000000000000cb50     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_14
   902 000000000000d0b0   192 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral::write_prefix
   903 000000000000cc70     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_51
   904 000000000000cc38     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_17
   905 000000000000caf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_11
   906 000000000000cb18     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_8
   907 000000000000cad0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_10
   908 000000000000cc10     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_16
   909 000000000000cb80     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_18
   910 000000000000cc88     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_27
   911 000000000000cbb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_20
   912 000000000000cd80     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_23
   913 000000000000cd68     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_52
   914 000000000000cd08     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_30
   915 000000000000cf38     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_33
   916 000000000000cf20     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_53
   917 000000000000cdc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_24
   918 000000000000ce00     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_26
   919 000000000000ceb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_46
   920 000000000000cf00     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_49
   921 000000000000cf10     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_50
   922 000000000000cf70     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_34
   923 000000000000cfb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_36
   924 000000000000d028     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_39
   925 000000000000d080     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_42
   926 000000000000d120     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_2
   927 000000000000d130     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_3
   928 000000000000d138     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_4
   929 000000000000d198     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_2
   930 000000000000d1a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_5
   931 000000000000d4c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_3
   932 000000000000d3e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_27
   933 000000000000d330     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_13
   934 000000000000d208     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_7
   935 000000000000d3c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_16
   936 000000000000d310     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_12
   937 000000000000d560     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_17
   938 000000000000d440     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_32
   939 000000000000d488     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_29
   940 000000000000d420     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_31
   941 000000000000d508     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_35
   942 000000000000d4f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_4
   943 000000000000d5c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_38
   944 000000000000d5a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_49
   945 000000000000d758     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_21
   946 000000000000d710     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_20
   947 000000000000d768     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_22
   948 000000000000d5f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_39
   949 000000000000d638     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_41
   950 000000000000d698     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_44
   951 000000000000d6f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_47
   952 000000000000d778     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_24
   953 000000000000d790     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_26
   954 000000000000e288     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_61
   955 000000000000e210     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_12
   956 000000000000d938     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_3
   957 000000000000dac0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_13
   958 000000000000d9c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_5
   959 000000000000dad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_14
   960 000000000000da78     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_7
   961 000000000000e1a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_10
   962 000000000000e1d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_11
   963 000000000000db70     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_17
   964 000000000000dc18     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_29
   965 000000000000db30     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_16
   966 000000000000dbb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_22
   967 000000000000dc00     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_28
   968 000000000000dbd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_25
   969 000000000000dbe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_26
   970 000000000000dbf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_27
   971 000000000000df28     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_38
   972 000000000000dc88     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_34
   973 000000000000dc50     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_33
   974 000000000000dca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_39
   975 000000000000def8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_37
   976 000000000000dfa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_60
   977 000000000000dfb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_42
   978 000000000000dd20     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_41
   979 000000000000dd50     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_64
   980 000000000000ddc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_62
   981 000000000000dde8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_84
   982 000000000000de10     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_69
   983 000000000000de30     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_72
   984 000000000000dff0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_44
   985 000000000000ddd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_77
   986 000000000000dde0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_83
   987 000000000000deb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_82
   988 000000000000ded0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_75
   989 000000000000de80     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_74
   990 0000000000013f28    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.239
   991 000000000000df68     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_53
   992 000000000000df78     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_58
   993 000000000000df80     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_59
   994 000000000000e030     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_45
   995 000000000000e188     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_81
   996 000000000000e150     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_78
   997 000000000000e080     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_49
   998 000000000000e0a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_54
   999 000000000000e128     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_52
  1000 000000000000e0f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_56
  1001 0000000000013f40    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.240
  1002 000000000000e5c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_23
  1003 000000000000e390     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_4
  1004 000000000000e410     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_3
  1005 000000000000e5d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_5
  1006 000000000000e3a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_24
  1007 000000000000e3d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_39
  1008 000000000000e3a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_25
  1009 000000000000e3e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_41
  1010 000000000000e3f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_42
  1011 000000000000e440     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_26
  1012 000000000000e4b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_31
  1013 000000000000e4d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_34
  1014 000000000000e558     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_40
  1015 000000000000e570     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_37
  1016 000000000000e520     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_36
  1017 000000000000e590     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_16
  1018 000000000000e5a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_21
  1019 000000000000e5a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_22
  1020 000000000000e620     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_8
  1021 000000000000e670     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_12
  1022 000000000000e690     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_17
  1023 000000000000e718     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_15
  1024 000000000000e6e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_19
  1025 0000000000013f10    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.224
  1026 0000000000012f61     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.227
  1027 0000000000013f58    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.251
  1028 0000000000013f78    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.253
  1029 0000000000013f98    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.256
  1030 000000000000ea60     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_7
  1031 000000000000eaa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_2
  1032 000000000000ea40     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_6
  1033 00000000000130c0     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.313
  1034 000000000000eb38     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_10
  1035 000000000000ec28     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_37
  1036 000000000000ed20     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_14
  1037 0000000000013fb8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.292
  1038 000000000000eb48     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_12
  1039 0000000000013fd0    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.316
  1040 000000000000f098     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_13
  1041 0000000000014000    64 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.320
  1042 000000000000ed78     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_18
  1043 000000000000ed40     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_17
  1044 000000000000ed80     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_19
  1045 000000000000edf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_23
  1046 000000000000ed90     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_20
  1047 000000000000eda8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_22
  1048 000000000000ef10     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_30
  1049 000000000000edd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_36
  1050 000000000000edf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_24
  1051 000000000000ef40     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_27
  1052 000000000000ee78     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_28
  1053 000000000000f0c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_31
  1054 0000000000012ef5    43 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.165
  1055 000000000000ef50     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_35
  1056 0000000000014040    80 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.324
  1057 000000000000f2a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_3
  1058 000000000000f1d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_2
  1059 000000000000f1b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_6
  1060 000000000000f208     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_8
  1061 000000000000f3d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_10
  1062 000000000000f408     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_11
  1063 000000000000f220     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_13
  1064 000000000000f270     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_16
  1065 000000000000f260     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_15
  1066 000000000000f328     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_5
  1067 000000000000f2f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_17
  1068 000000000000f2f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_21
  1069 000000000000f368     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_18
  1070 000000000000f3a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_20
  1071 00000000000140a8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.349
  1072 0000000000014090    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.348
  1073 000000000000f4f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_1
  1074 000000000000f458     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_3
  1075 000000000000f528     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_6
  1076 000000000000f668     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_1
  1077 000000000000f5c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_3
  1078 000000000000f698     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_6
  1079 000000000000f8c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_2
  1080 000000000000f750     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_10
  1081 000000000000f8e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_20
  1082 000000000000f870     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_14
  1083 000000000000f778     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_12
  1084 000000000000faf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_16
  1085 000000000000f878     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_15
  1086 000000000000f890     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_18
  1087 000000000000fb88     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_17
  1088 000000000000fbd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_19
  1089 000000000000fa40     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_3
  1090 000000000000f978     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_21
  1091 000000000000f908     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_23
  1092 000000000000fa78     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_8
  1093 000000000000fa18     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_7
  1094 000000000000f9b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_5
  1095 000000000000fc40     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_9
  1096 000000000000fcb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_3
  1097 000000000000fd28     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_4
  1098 000000000000fd50     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_5
  1099 000000000000ff28     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_4
  1100 000000000000fe30     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_2
  1101 000000000000ff80     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_6
  1102 000000000000ff30     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_5
  1103 000000000000ff48     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_8
  1104 0000000000010018     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_7
  1105 0000000000010068     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_9
  1106 00000000000100b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_11
  1107 0000000000010210     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_4
  1108 0000000000010118     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_2
  1109 0000000000010268     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_6
  1110 0000000000010218     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_5
  1111 0000000000010230     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_8
  1112 0000000000010300     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_7
  1113 0000000000010350     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_9
  1114 00000000000104e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_4
  1115 00000000000103f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_2
  1116 0000000000010540     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_6
  1117 00000000000104f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_5
  1118 0000000000010508     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_8
  1119 00000000000105d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_7
  1120 0000000000010628     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_9
  1121 00000000000136d6     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.540
  1122 00000000000140f0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.362
  1123 00000000000140d8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.361
  1124 00000000000140c0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.360
  1125 0000000000010840     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_1
  1126 0000000000010810     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_3
  1127 0000000000010828     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_4
  1128 00000000000108e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_6
  1129 00000000000136dc   128 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS
  1130 00000000000108d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_5
  1131 0000000000010b10     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_8
  1132 0000000000010938     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_10
  1133 0000000000010968     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_12
  1134 00000000000109e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_16
  1135 00000000000109b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_15
  1136 0000000000010ad0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_23
  1137 000000000001375c   707 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::OFFSETS
  1138 0000000000010a60     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_18
  1139 0000000000010ae0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_20
  1140 0000000000010ac8     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_22
  1141 0000000000012ee8     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.129
  1142 0000000000012f20     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.166
  1143 0000000000012f2d     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.170
  1144 0000000000012f2e     3 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.171
  1145 0000000000012f31    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.175
  1146 0000000000012f43     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.188
  1147 0000000000012f46    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.223
  1148 000000000001302b    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.232
  1149 0000000000013046    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.249
  1150 0000000000013058    34 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.250
  1151 000000000001307a    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.254
  1152 0000000000013090    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.255
  1153 000000000001309d    35 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.290
  1154 00000000000130c5    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.314
  1155 00000000000130d0    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.315
  1156 00000000000130e6    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.317
  1157 00000000000130f4    38 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.321
  1158 000000000001311a     6 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.323
  1159 0000000000013120    37 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.347
  1160 00000000000136ae    40 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.356
  1161 000000000000d7a0    48 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::write_str
  1162 00000000000103c8   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt
  1163 000000000000c4b8    88 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::new
  1164 000000000000c3b8   256 FUNC    LOCAL  DEFAULT     1 core::result::unwrap_failed
  1165 00000000000103c8   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt
  1166 000000000000d7d0    96 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::write_fmt
  1167 000000000000c510  1144 FUNC    LOCAL  DEFAULT     1 core::fmt::write
  1168 000000000000d830    32 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_lower_hex
  1169 000000000000d850    32 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_upper_hex
  1170 000000000000f5a8   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt
  1171 000000000000f438   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt
  1172 000000000000fc50   376 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt
  1173 000000000000be98   848 FUNC    LOCAL  DEFAULT     1 <core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt
  1174 00000000000106a0    64 FUNC    LOCAL  DEFAULT     1 <core::fmt::Error as core::fmt::Debug>::fmt
  1175 000000000000c1e8   144 FUNC    LOCAL  DEFAULT     1 core::panicking::panic
  1176 00000000000100f0   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt
  1177 000000000000e818   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_end_index_len_fail
  1178 000000000000c278   224 FUNC    LOCAL  DEFAULT     1 core::panicking::panic_bounds_check
  1179 000000000000c358    96 FUNC    LOCAL  DEFAULT     1 core::panicking::panic_fmt
  1180 000000000000e298    48 FUNC    LOCAL  DEFAULT     1 <str as core::fmt::Display>::fmt
  1181 000000000000fdc8   808 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt
  1182 000000000000e8f8   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_index_order_fail
  1183 000000000000e738   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_start_index_len_fail
  1184 000000000000d870  2600 FUNC    LOCAL  DEFAULT     1 <str as core::fmt::Debug>::fmt
  1185 000000000000b880    64 FUNC    LOCAL  DEFAULT     1 <core::cell::BorrowError as core::fmt::Debug>::fmt
  1186 000000000000e2c8  1136 FUNC    LOCAL  DEFAULT     1 <char as core::fmt::Debug>::fmt
  1187 000000000000d170  1584 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad
  1188 00000000000107e0   864 FUNC    LOCAL  DEFAULT     1 core::unicode::unicode_data::grapheme_extend::lookup
  1189 000000000000e9d8  1872 FUNC    LOCAL  DEFAULT     1 core::str::slice_error_fail
  1190 000000000000c988  1832 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral
  1191 000000000000f438   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::LowerHex for i8>::fmt
  1192 000000000000f5a8   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::UpperHex for i8>::fmt
  1193 000000000000d7a0    48 FUNC    LOCAL  DEFAULT     1 <core::fmt::Formatter as core::fmt::Write>::write_str
  1194 000000000000d7d0    96 FUNC    LOCAL  DEFAULT     1 <core::fmt::Formatter as core::fmt::Write>::write_fmt
  1195 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.103
  1196 0000000000010b40    16 FUNC    LOCAL  HIDDEN      1 __adddf3
  1197 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.130
  1198 0000000000010c20     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_7
  1199 0000000000010c00     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1200 0000000000010c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
  1201 0000000000010b50   216 FUNC    LOCAL  HIDDEN      1 __fixunsdfdi
  1202 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.14
  1203 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.165
  1204 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.167
  1205 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.181
  1206 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.200
  1207 0000000000010d30     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_9
  1208 0000000000010cf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1209 0000000000010d28     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_8
  1210 0000000000010c28   288 FUNC    LOCAL  HIDDEN      1 __gtdf2
  1211 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.27
  1212 0000000000010e50     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_9
  1213 0000000000010e18     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1214 0000000000010e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_8
  1215 0000000000010d48   288 FUNC    LOCAL  HIDDEN      1 __gedf2
  1216 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.3
  1217 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.39
  1218 0000000000010e68    16 FUNC    LOCAL  HIDDEN      1 __muldf3
  1219 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.164
  1220 0000000000011050     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_3
  1221 0000000000010f48     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_2
  1222 0000000000010fe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_23
  1223 00000000000110d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_24
  1224 0000000000011030     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_26
  1225 00000000000110e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_25
  1226 0000000000011290     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_35
  1227 0000000000011128     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_5
  1228 00000000000110a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_7
  1229 0000000000011150     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_6
  1230 00000000000111b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_28
  1231 0000000000011228     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_30
  1232 0000000000011170     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_9
  1233 0000000000011298     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_8
  1234 0000000000011280     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_32
  1235 0000000000011268     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_33
  1236 0000000000011288     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_34
  1237 00000000000112a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_13
  1238 00000000000112f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_11
  1239 0000000000011340     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_17
  1240 00000000000114e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_20
  1241 00000000000114a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_19
  1242 0000000000011648     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_22
  1243 0000000000010e78  2048 FUNC    LOCAL  HIDDEN      1 compiler_builtins::float::mul::__muldf3
  1244 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.55
  1245 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.58
  1246 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.71
  1247 0000000000011770     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_2
  1248 0000000000011720     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
  1249 00000000000116d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1250 0000000000011780     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
  1251 0000000000011728     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_7
  1252 0000000000011880     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
  1253 0000000000011848     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_6
  1254 0000000000011818     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_5
  1255 0000000000011898     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_3
  1256 0000000000011850     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_7
  1257 00000000000119c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_2
  1258 0000000000011950     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_7
  1259 0000000000011910     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_4
  1260 0000000000011948     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_6
  1261 00000000000119f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_12
  1262 0000000000011970     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_10
  1263 0000000000011960     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_9
  1264 0000000000011790   280 FUNC    LOCAL  HIDDEN      1 memset
  1265 00000000000118a8   352 FUNC    LOCAL  HIDDEN      1 memcmp
  1266 0000000000011678   280 FUNC    LOCAL  HIDDEN      1 memcpy
  1267 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.8
  1268 0000000000011f00     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_18
  1269 0000000000011a78     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_2
  1270 0000000000011a90     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_4
  1271 0000000000011aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_6
  1272 0000000000011b00     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_7
  1273 0000000000011c90     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_10
  1274 0000000000011c68     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_9
  1275 0000000000011e38     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_14
  1276 0000000000011e10     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_13
  1277 0000000000011f50     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_21
  1278 0000000000011e88     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_15
  1279 0000000000011ea0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_16
  1280 0000000000012008     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_26
  1281 00000000000121c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_29
  1282 0000000000011fe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_25
  1283 0000000000011f28     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_20
  1284 0000000000012318     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_38
  1285 0000000000012388     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_42
  1286 0000000000011fb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_24
  1287 00000000000121e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_30
  1288 0000000000012210     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_31
  1289 0000000000012228     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_32
  1290 0000000000012290     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_35
  1291 0000000000012268     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_34
  1292 0000000000012378     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_40
  1293 0000000000012300     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_37
  1294 0000000000012380     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_41
  1295 0000000000012338     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_39
  1296 0000000000012398     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_44
  1297 0000000000012390     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_43
  1298 00000000000123c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_47
  1299 0000000000011a08  2528 FUNC    LOCAL  HIDDEN      1 compiler_builtins::float::add::__adddf3
  1300 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.81
  1301 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.87
  1302 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.95
  1303 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS divdi3.c
  1304 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS floatundidf.c
  1305 00000000000123e8   136 FUNC    LOCAL  HIDDEN      1 __floatundidf
  1306 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS floatundisf.c
  1307 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS lshrti3.c
  1308 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS muloti4.c
  1309 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS multi3.c
  1310 0000000000012470   296 FUNC    LOCAL  HIDDEN      1 __multi3
  1311 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivmoddi4.c
  1312 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivti3.c
  1313 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivmodti4.c
  1314 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS umodti3.c
  1315 0000000000014108     0 NOTYPE  LOCAL  HIDDEN      4 _DYNAMIC
  1316 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
  1317 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
  1318 00000000000019e8 12584 FUNC    GLOBAL DEFAULT     1 entrypoint
  1319 0000000000004cf0   280 FUNC    GLOBAL DEFAULT     1 custom_panic
  1320 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memset_
  1321 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_try_find_program_address
  1322 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_invoke_signed_rust
  1323 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_get_rent_sysvar
  1324 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
  1325 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcmp_
There are no section groups in this file.

/Volumes/d/dev/mp/projects/breakpoint/tictactoe/program/target/bpfel-unknown-unknown/release/tictactoe.so	file format elf64-bpf

Disassembly of section .text

0000000000000120 <core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>>
      36	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      37	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB0_3>
      38	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
      39	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB0_3>
      40	b7 03 00 00 01 00 00 00	r3 = 0x1
      41	85 10 00 00 fd 0b 00 00	call 0xbfd ; <__rust_dealloc>

0000000000000150 <LBB0_3>
      42	95 00 00 00 00 00 00 00	exit

0000000000000158 <core::ptr::drop_in_place<&u8>>
      43	95 00 00 00 00 00 00 00	exit

0000000000000160 <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
      44	bf 16 00 00 00 00 00 00	r6 = r1
      45	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
      46	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      47	07 02 00 00 ff ff ff ff	r2 += -0x1
      48	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      49	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_3>
      50	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      51	07 02 00 00 ff ff ff ff	r2 += -0x1
      52	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      53	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_3>
      54	b7 02 00 00 20 00 00 00	r2 = 0x20
      55	b7 03 00 00 08 00 00 00	r3 = 0x8
      56	85 10 00 00 ee 0b 00 00	call 0xbee ; <__rust_dealloc>

00000000000001c8 <LBB2_3>
      57	79 61 10 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x10)
      58	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      59	07 02 00 00 ff ff ff ff	r2 += -0x1
      60	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      61	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_6>
      62	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      63	07 02 00 00 ff ff ff ff	r2 += -0x1
      64	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      65	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_6>
      66	b7 02 00 00 28 00 00 00	r2 = 0x28
      67	b7 03 00 00 08 00 00 00	r3 = 0x8
      68	85 10 00 00 e2 0b 00 00	call 0xbe2 ; <__rust_dealloc>

0000000000000228 <LBB2_6>
      69	79 61 38 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x38)
      70	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      71	07 02 00 00 ff ff ff ff	r2 += -0x1
      72	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      73	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_9>
      74	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      75	07 02 00 00 ff ff ff ff	r2 += -0x1
      76	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      77	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_9>
      78	b7 02 00 00 20 00 00 00	r2 = 0x20
      79	b7 03 00 00 08 00 00 00	r3 = 0x8
      80	85 10 00 00 d6 0b 00 00	call 0xbd6 ; <__rust_dealloc>

0000000000000288 <LBB2_9>
      81	79 61 40 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x40)
      82	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      83	07 02 00 00 ff ff ff ff	r2 += -0x1
      84	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      85	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_12>
      86	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      87	07 02 00 00 ff ff ff ff	r2 += -0x1
      88	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      89	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_12>
      90	b7 02 00 00 28 00 00 00	r2 = 0x28
      91	b7 03 00 00 08 00 00 00	r3 = 0x8
      92	85 10 00 00 ca 0b 00 00	call 0xbca ; <__rust_dealloc>

00000000000002e8 <LBB2_12>
      93	95 00 00 00 00 00 00 00	exit

00000000000002f0 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
      94	bf 16 00 00 00 00 00 00	r6 = r1
      95	bf 24 00 00 00 00 00 00	r4 = r2
      96	0f 34 00 00 00 00 00 00	r4 += r3
      97	b7 01 00 00 01 00 00 00	r1 = 0x1
      98	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB10_2>
      99	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000320 <LBB10_2>
     100	57 01 00 00 01 00 00 00	r1 &= 0x1
     101	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB10_12>
     102	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
     103	bf 17 00 00 00 00 00 00	r7 = r1
     104	67 07 00 00 01 00 00 00	r7 <<= 0x1
     105	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB10_5>
     106	bf 47 00 00 00 00 00 00	r7 = r4

0000000000000358 <LBB10_5>
     107	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB10_7>
     108	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000000368 <LBB10_7>
     109	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB10_9>
     110	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
     111	b7 03 00 00 01 00 00 00	r3 = 0x1
     112	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
     113	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     114	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
     115	05 00 02 00 00 00 00 00	goto +0x2 <LBB10_10>

00000000000003a0 <LBB10_9>
     116	b7 01 00 00 00 00 00 00	r1 = 0x0
     117	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

00000000000003b0 <LBB10_10>
     118	bf a1 00 00 00 00 00 00	r1 = r10
     119	07 01 00 00 d0 ff ff ff	r1 += -0x30
     120	bf a4 00 00 00 00 00 00	r4 = r10
     121	07 04 00 00 e8 ff ff ff	r4 += -0x18
     122	bf 72 00 00 00 00 00 00	r2 = r7
     123	b7 03 00 00 01 00 00 00	r3 = 0x1
     124	85 10 00 00 39 00 00 00	call 0x39 ; <alloc::raw_vec::finish_grow>
     125	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     126	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB10_14>
     127	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     128	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB10_13>

0000000000000408 <LBB10_12>
     129	85 10 00 00 8b 15 00 00	call 0x158b ; <alloc::raw_vec::capacity_overflow>
     130	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000418 <LBB10_14>
     131	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     132	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     133	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     134	95 00 00 00 00 00 00 00	exit

0000000000000438 <LBB10_13>
     135	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     136	85 10 00 00 8b 15 00 00	call 0x158b ; <alloc::alloc::handle_alloc_error>
     137	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000450 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
     138	bf 16 00 00 00 00 00 00	r6 = r1
     139	bf 23 00 00 00 00 00 00	r3 = r2
     140	07 03 00 00 01 00 00 00	r3 += 0x1
     141	b7 01 00 00 01 00 00 00	r1 = 0x1
     142	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB11_2>
     143	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000480 <LBB11_2>
     144	57 01 00 00 01 00 00 00	r1 &= 0x1
     145	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB11_12>
     146	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
     147	bf 17 00 00 00 00 00 00	r7 = r1
     148	67 07 00 00 01 00 00 00	r7 <<= 0x1
     149	2d 37 01 00 00 00 00 00	if r7 > r3 goto +0x1 <LBB11_5>
     150	bf 37 00 00 00 00 00 00	r7 = r3

00000000000004b8 <LBB11_5>
     151	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB11_7>
     152	b7 07 00 00 08 00 00 00	r7 = 0x8

00000000000004c8 <LBB11_7>
     153	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB11_9>
     154	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
     155	b7 03 00 00 01 00 00 00	r3 = 0x1
     156	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
     157	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     158	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
     159	05 00 02 00 00 00 00 00	goto +0x2 <LBB11_10>

0000000000000500 <LBB11_9>
     160	b7 01 00 00 00 00 00 00	r1 = 0x0
     161	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

0000000000000510 <LBB11_10>
     162	bf a1 00 00 00 00 00 00	r1 = r10
     163	07 01 00 00 d0 ff ff ff	r1 += -0x30
     164	bf a4 00 00 00 00 00 00	r4 = r10
     165	07 04 00 00 e8 ff ff ff	r4 += -0x18
     166	bf 72 00 00 00 00 00 00	r2 = r7
     167	b7 03 00 00 01 00 00 00	r3 = 0x1
     168	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
     169	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     170	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB11_14>
     171	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     172	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB11_13>

0000000000000568 <LBB11_12>
     173	85 10 00 00 5f 15 00 00	call 0x155f ; <alloc::raw_vec::capacity_overflow>
     174	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000578 <LBB11_14>
     175	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     176	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     177	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     178	95 00 00 00 00 00 00 00	exit

0000000000000598 <LBB11_13>
     179	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     180	85 10 00 00 5f 15 00 00	call 0x155f ; <alloc::alloc::handle_alloc_error>
     181	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000005b0 <alloc::raw_vec::finish_grow>
     182	bf 38 00 00 00 00 00 00	r8 = r3
     183	bf 27 00 00 00 00 00 00	r7 = r2
     184	bf 16 00 00 00 00 00 00	r6 = r1
     185	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB13_12>
     186	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     187	b7 01 00 00 01 00 00 00	r1 = 0x1
     188	b7 07 00 00 00 00 00 00	r7 = 0x0
     189	05 00 1d 00 00 00 00 00	goto +0x1d <LBB13_2>

00000000000005f0 <LBB13_12>
     190	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
     191	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB13_7>
     192	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
     193	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB13_6>
     194	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB13_9>
     195	bf 71 00 00 00 00 00 00	r1 = r7
     196	bf 82 00 00 00 00 00 00	r2 = r8
     197	85 10 00 00 5f 0b 00 00	call 0xb5f ; <__rust_alloc>
     198	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB13_11>
     199	05 00 11 00 00 00 00 00	goto +0x11 <LBB13_10>

0000000000000640 <LBB13_6>
     200	bf 83 00 00 00 00 00 00	r3 = r8
     201	bf 74 00 00 00 00 00 00	r4 = r7
     202	85 10 00 00 5e 0b 00 00	call 0xb5e ; <__rust_realloc>
     203	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB13_11>
     204	05 00 0c 00 00 00 00 00	goto +0xc <LBB13_10>

0000000000000668 <LBB13_7>
     205	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB13_9>
     206	bf 71 00 00 00 00 00 00	r1 = r7
     207	bf 82 00 00 00 00 00 00	r2 = r8
     208	85 10 00 00 54 0b 00 00	call 0xb54 ; <__rust_alloc>
     209	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB13_11>
     210	05 00 06 00 00 00 00 00	goto +0x6 <LBB13_10>

0000000000000698 <LBB13_11>
     211	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     212	b7 01 00 00 01 00 00 00	r1 = 0x1
     213	bf 87 00 00 00 00 00 00	r7 = r8
     214	05 00 04 00 00 00 00 00	goto +0x4 <LBB13_2>

00000000000006b8 <LBB13_9>
     215	b7 07 00 00 00 00 00 00	r7 = 0x0
     216	bf 80 00 00 00 00 00 00	r0 = r8

00000000000006c8 <LBB13_10>
     217	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
     218	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000006d8 <LBB13_2>
     219	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     220	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
     221	95 00 00 00 00 00 00 00	exit

00000000000006f0 <tictactoe::instructions::PlayerMove::process>
     222	bf 47 00 00 00 00 00 00	r7 = r4
     223	bf 16 00 00 00 00 00 00	r6 = r1
     224	b7 01 00 00 b1 c7 71 00	r1 = 0x71c7b1
     225	71 24 01 00 00 00 00 00	r4 = *(u8 *)(r2 + 0x1)
     226	25 04 27 00 08 00 00 00	if r4 > 0x8 goto +0x27 <LBB14_7>
     227	bf 78 00 00 00 00 00 00	r8 = r7
     228	0f 48 00 00 00 00 00 00	r8 += r4
     229	71 84 40 00 00 00 00 00	r4 = *(u8 *)(r8 + 0x40)
     230	55 04 23 00 00 00 00 00	if r4 != 0x0 goto +0x23 <LBB14_7>
     231	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
     232	71 29 00 00 00 00 00 00	r9 = *(u8 *)(r2 + 0x0)
     233	bf 92 00 00 00 00 00 00	r2 = r9
     234	55 02 14 00 01 00 00 00	if r2 != 0x1 goto +0x14 <LBB14_5>
     235	bf 72 00 00 00 00 00 00	r2 = r7
     236	b7 03 00 00 20 00 00 00	r3 = 0x20
     237	85 10 00 00 27 22 00 00	call 0x2227 ; <memcmp>
     238	b7 01 00 00 ac c7 71 00	r1 = 0x71c7ac
     239	67 00 00 00 20 00 00 00	r0 <<= 0x20
     240	77 00 00 00 20 00 00 00	r0 >>= 0x20
     241	55 00 18 00 00 00 00 00	if r0 != 0x0 goto +0x18 <LBB14_7>
     242	b7 01 00 00 b2 c7 71 00	r1 = 0x71c7b2
     243	71 72 4a 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x4a)
     244	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB14_9>
     245	05 00 14 00 00 00 00 00	goto +0x14 <LBB14_7>

00000000000007b0 <LBB14_9>
     246	07 08 00 00 40 00 00 00	r8 += 0x40
     247	73 98 00 00 00 00 00 00	*(u8 *)(r8 + 0x0) = r9
     248	71 71 40 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x40)
     249	55 01 14 00 00 00 00 00	if r1 != 0x0 goto +0x14 <LBB14_11>

00000000000007d0 <LBB14_10>
     250	71 71 4a 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x4a)
     251	a7 01 00 00 01 00 00 00	r1 ^= 0x1
     252	73 17 4a 00 00 00 00 00	*(u8 *)(r7 + 0x4a) = r1
     253	b7 01 00 00 14 00 00 00	r1 = 0x14
     254	05 00 0d 00 00 00 00 00	goto +0xd <LBB14_8>

00000000000007f8 <LBB14_5>
     255	bf 72 00 00 00 00 00 00	r2 = r7
     256	07 02 00 00 20 00 00 00	r2 += 0x20
     257	b7 03 00 00 20 00 00 00	r3 = 0x20
     258	85 10 00 00 12 22 00 00	call 0x2212 ; <memcmp>
     259	b7 01 00 00 ac c7 71 00	r1 = 0x71c7ac
     260	67 00 00 00 20 00 00 00	r0 <<= 0x20
     261	77 00 00 00 20 00 00 00	r0 >>= 0x20
     262	55 00 03 00 00 00 00 00	if r0 != 0x0 goto +0x3 <LBB14_7>
     263	b7 01 00 00 b2 c7 71 00	r1 = 0x71c7b2
     264	71 72 4a 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x4a)
     265	15 02 ec ff 01 00 00 00	if r2 == 0x1 goto -0x14 <LBB14_9>

0000000000000850 <LBB14_7>
     266	63 16 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r1
     267	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000860 <LBB14_8>
     268	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
     269	95 00 00 00 00 00 00 00	exit

0000000000000870 <LBB14_11>
     270	71 71 41 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x41)
     271	15 01 ea ff 00 00 00 00	if r1 == 0x0 goto -0x16 <LBB14_10>
     272	71 71 42 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x42)
     273	15 01 e8 ff 00 00 00 00	if r1 == 0x0 goto -0x18 <LBB14_10>
     274	71 71 43 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x43)
     275	15 01 e6 ff 00 00 00 00	if r1 == 0x0 goto -0x1a <LBB14_10>
     276	71 71 44 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x44)
     277	15 01 e4 ff 00 00 00 00	if r1 == 0x0 goto -0x1c <LBB14_10>
     278	71 71 45 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x45)
     279	15 01 e2 ff 00 00 00 00	if r1 == 0x0 goto -0x1e <LBB14_10>
     280	71 71 46 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x46)
     281	15 01 e0 ff 00 00 00 00	if r1 == 0x0 goto -0x20 <LBB14_10>
     282	71 71 47 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x47)
     283	15 01 de ff 00 00 00 00	if r1 == 0x0 goto -0x22 <LBB14_10>
     284	71 71 48 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x48)
     285	15 01 dc ff 00 00 00 00	if r1 == 0x0 goto -0x24 <LBB14_10>
     286	b7 01 00 00 03 00 00 00	r1 = 0x3
     287	73 17 49 00 00 00 00 00	*(u8 *)(r7 + 0x49) = r1
     288	b7 01 00 00 14 00 00 00	r1 = 0x14
     289	05 00 ea ff 00 00 00 00	goto -0x16 <LBB14_8>

0000000000000910 <<tictactoe::accounts::GameState as core::fmt::Debug>::fmt>
     290	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
     291	65 01 06 00 01 00 00 00	if r1 s> 0x1 goto +0x6 <LBB18_3>
     292	15 01 0b 00 00 00 00 00	if r1 == 0x0 goto +0xb <LBB18_5>
     293	bf 21 00 00 00 00 00 00	r1 = r2
     294	18 02 00 00 d0 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x126d0 ll
     296	b7 03 00 00 12 00 00 00	r3 = 0x12
     297	05 00 0f 00 00 00 00 00	goto +0xf <LBB18_7>

0000000000000950 <LBB18_3>
     298	15 01 0a 00 02 00 00 00	if r1 == 0x2 goto +0xa <LBB18_6>
     299	bf 21 00 00 00 00 00 00	r1 = r2
     300	18 02 00 00 b8 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x126b8 ll
     302	b7 03 00 00 08 00 00 00	r3 = 0x8
     303	05 00 09 00 00 00 00 00	goto +0x9 <LBB18_7>

0000000000000980 <LBB18_5>
     304	bf 21 00 00 00 00 00 00	r1 = r2
     305	18 02 00 00 e2 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x126e2 ll
     307	b7 03 00 00 0d 00 00 00	r3 = 0xd
     308	05 00 04 00 00 00 00 00	goto +0x4 <LBB18_7>

00000000000009a8 <LBB18_6>
     309	bf 21 00 00 00 00 00 00	r1 = r2
     310	18 02 00 00 cc 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x126cc ll
     312	b7 03 00 00 04 00 00 00	r3 = 0x4

00000000000009c8 <LBB18_7>
     313	85 10 00 00 ba 19 00 00	call 0x19ba ; <<core::fmt::Formatter as core::fmt::Write>::write_str>
     314	95 00 00 00 00 00 00 00	exit

00000000000009d8 <<tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize>
     315	bf 16 00 00 00 00 00 00	r6 = r1
     316	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
     317	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB19_5>
     318	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     319	b7 02 00 00 01 00 00 00	r2 = 0x1
     320	85 10 00 00 e4 0a 00 00	call 0xae4 ; <__rust_alloc>
     321	bf 07 00 00 00 00 00 00	r7 = r0
     322	55 07 2d 00 00 00 00 00	if r7 != 0x0 goto +0x2d <LBB19_3>
     323	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     324	b7 02 00 00 01 00 00 00	r2 = 0x1
     325	85 10 00 00 ce 14 00 00	call 0x14ce ; <alloc::alloc::handle_alloc_error>
     326	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000a38 <LBB19_5>
     327	07 03 00 00 ff ff ff ff	r3 += -0x1
     328	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
     329	71 41 00 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x0)
     330	7b 32 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r3
     331	07 04 00 00 01 00 00 00	r4 += 0x1
     332	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
     333	73 1a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r1
     334	b7 02 00 00 04 00 00 00	r2 = 0x4
     335	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB19_11>
     336	05 00 04 00 00 00 00 00	goto +0x4 <LBB19_7>

0000000000000a88 <LBB19_11>
     337	b7 02 00 00 00 00 00 00	r2 = 0x0
     338	73 26 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r2
     339	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
     340	05 00 52 00 00 00 00 00	goto +0x52 <LBB19_10>

0000000000000aa8 <LBB19_7>
     341	bf a1 00 00 00 00 00 00	r1 = r10
     342	07 01 00 00 f0 ff ff ff	r1 += -0x10
     343	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     344	b7 01 00 00 00 00 00 00	r1 = 0x0
     345	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     346	b7 07 00 00 01 00 00 00	r7 = 0x1
     347	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
     348	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
     349	18 01 00 00 e0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ae0 ll
     351	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     352	18 01 00 00 68 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6068 ll
     354	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     355	bf a1 00 00 00 00 00 00	r1 = r10
     356	07 01 00 00 a7 ff ff ff	r1 += -0x59
     357	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     358	bf a1 00 00 00 00 00 00	r1 = r10
     359	07 01 00 00 a8 ff ff ff	r1 += -0x58
     360	bf a2 00 00 00 00 00 00	r2 = r10
     361	07 02 00 00 c0 ff ff ff	r2 += -0x40
     362	85 10 00 00 b1 14 00 00	call 0x14b1 ; <alloc::fmt::format>
     363	b7 01 00 00 18 00 00 00	r1 = 0x18
     364	b7 02 00 00 08 00 00 00	r2 = 0x8
     365	85 10 00 00 b7 0a 00 00	call 0xab7 ; <__rust_alloc>
     366	55 00 26 00 00 00 00 00	if r0 != 0x0 goto +0x26 <LBB19_9>
     367	05 00 0f 00 00 00 00 00	goto +0xf <LBB19_4>

0000000000000b80 <LBB19_3>
     368	b7 01 00 00 75 74 00 00	r1 = 0x7475
     369	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     370	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     372	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     373	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     375	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     376	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     378	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     379	b7 01 00 00 18 00 00 00	r1 = 0x18
     380	b7 02 00 00 08 00 00 00	r2 = 0x8
     381	85 10 00 00 a7 0a 00 00	call 0xaa7 ; <__rust_alloc>
     382	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB19_6>

0000000000000bf8 <LBB19_4>
     383	b7 01 00 00 18 00 00 00	r1 = 0x18
     384	b7 02 00 00 08 00 00 00	r2 = 0x8
     385	85 10 00 00 92 14 00 00	call 0x1492 ; <alloc::alloc::handle_alloc_error>
     386	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000c18 <LBB19_6>
     387	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     388	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     389	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     390	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     391	bf a1 00 00 00 00 00 00	r1 = r10
     392	07 01 00 00 80 ff ff ff	r1 += -0x80
     393	b7 02 00 00 14 00 00 00	r2 = 0x14
     394	bf 03 00 00 00 00 00 00	r3 = r0
     395	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
     397	85 10 00 00 62 13 00 00	call 0x1362 ; <std::io::error::Error::_new>
     398	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     399	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
     400	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     401	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     402	b7 01 00 00 01 00 00 00	r1 = 0x1
     403	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     404	05 00 12 00 00 00 00 00	goto +0x12 <LBB19_10>

0000000000000ca8 <LBB19_9>
     405	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     406	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     407	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     408	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     409	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     410	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
     411	bf a1 00 00 00 00 00 00	r1 = r10
     412	07 01 00 00 90 ff ff ff	r1 += -0x70
     413	b7 02 00 00 14 00 00 00	r2 = 0x14
     414	bf 03 00 00 00 00 00 00	r3 = r0
     415	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
     417	85 10 00 00 4e 13 00 00	call 0x134e ; <std::io::error::Error::_new>
     418	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
     419	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
     420	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     421	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     422	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

0000000000000d38 <LBB19_10>
     423	95 00 00 00 00 00 00 00	exit

0000000000000d40 <<tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize>
     424	bf 16 00 00 00 00 00 00	r6 = r1
     425	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
     426	55 01 09 00 00 00 00 00	if r1 != 0x0 goto +0x9 <LBB21_5>
     427	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     428	b7 02 00 00 01 00 00 00	r2 = 0x1
     429	85 10 00 00 77 0a 00 00	call 0xa77 ; <__rust_alloc>
     430	bf 07 00 00 00 00 00 00	r7 = r0
     431	55 07 2a 00 00 00 00 00	if r7 != 0x0 goto +0x2a <LBB21_3>
     432	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     433	b7 02 00 00 01 00 00 00	r2 = 0x1
     434	85 10 00 00 61 14 00 00	call 0x1461 ; <alloc::alloc::handle_alloc_error>
     435	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000da0 <LBB21_5>
     436	07 01 00 00 ff ff ff ff	r1 += -0x1
     437	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
     438	71 43 00 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x0)
     439	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
     440	07 04 00 00 01 00 00 00	r4 += 0x1
     441	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
     442	b7 01 00 00 00 00 00 00	r1 = 0x0
     443	73 3a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r3
     444	b7 02 00 00 00 00 00 00	r2 = 0x0
     445	15 03 42 00 00 00 00 00	if r3 == 0x0 goto +0x42 <LBB21_13>
     446	15 03 40 00 01 00 00 00	if r3 == 0x1 goto +0x40 <LBB21_12>
     447	bf a1 00 00 00 00 00 00	r1 = r10
     448	07 01 00 00 f0 ff ff ff	r1 += -0x10
     449	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     450	b7 01 00 00 00 00 00 00	r1 = 0x0
     451	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     452	b7 07 00 00 01 00 00 00	r7 = 0x1
     453	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
     454	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
     455	18 01 00 00 e0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ae0 ll
     457	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     458	18 01 00 00 68 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6068 ll
     460	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     461	bf a1 00 00 00 00 00 00	r1 = r10
     462	07 01 00 00 a7 ff ff ff	r1 += -0x59
     463	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     464	bf a1 00 00 00 00 00 00	r1 = r10
     465	07 01 00 00 a8 ff ff ff	r1 += -0x58
     466	bf a2 00 00 00 00 00 00	r2 = r10
     467	07 02 00 00 c0 ff ff ff	r2 += -0x40
     468	85 10 00 00 47 14 00 00	call 0x1447 ; <alloc::fmt::format>
     469	b7 01 00 00 18 00 00 00	r1 = 0x18
     470	b7 02 00 00 08 00 00 00	r2 = 0x8
     471	85 10 00 00 4d 0a 00 00	call 0xa4d ; <__rust_alloc>
     472	55 00 2a 00 00 00 00 00	if r0 != 0x0 goto +0x2a <LBB21_9>
     473	05 00 0f 00 00 00 00 00	goto +0xf <LBB21_4>

0000000000000ed0 <LBB21_3>
     474	b7 01 00 00 75 74 00 00	r1 = 0x7475
     475	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     476	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     478	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     479	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     481	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     482	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     484	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     485	b7 01 00 00 18 00 00 00	r1 = 0x18
     486	b7 02 00 00 08 00 00 00	r2 = 0x8
     487	85 10 00 00 3d 0a 00 00	call 0xa3d ; <__rust_alloc>
     488	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB21_10>

0000000000000f48 <LBB21_4>
     489	b7 01 00 00 18 00 00 00	r1 = 0x18
     490	b7 02 00 00 08 00 00 00	r2 = 0x8
     491	85 10 00 00 28 14 00 00	call 0x1428 ; <alloc::alloc::handle_alloc_error>
     492	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000f68 <LBB21_10>
     493	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     494	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     495	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     496	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     497	bf a1 00 00 00 00 00 00	r1 = r10
     498	07 01 00 00 80 ff ff ff	r1 += -0x80
     499	b7 02 00 00 14 00 00 00	r2 = 0x14
     500	bf 03 00 00 00 00 00 00	r3 = r0
     501	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
     503	85 10 00 00 f8 12 00 00	call 0x12f8 ; <std::io::error::Error::_new>
     504	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     505	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
     506	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     507	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     508	b7 01 00 00 01 00 00 00	r1 = 0x1
     509	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     510	05 00 16 00 00 00 00 00	goto +0x16 <LBB21_11>

0000000000000ff8 <LBB21_12>
     511	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000001000 <LBB21_13>
     512	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     513	73 26 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r2
     514	05 00 12 00 00 00 00 00	goto +0x12 <LBB21_11>

0000000000001018 <LBB21_9>
     515	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     516	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     517	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     518	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     519	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     520	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
     521	bf a1 00 00 00 00 00 00	r1 = r10
     522	07 01 00 00 90 ff ff ff	r1 += -0x70
     523	b7 02 00 00 14 00 00 00	r2 = 0x14
     524	bf 03 00 00 00 00 00 00	r3 = r0
     525	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
     527	85 10 00 00 e0 12 00 00	call 0x12e0 ; <std::io::error::Error::_new>
     528	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
     529	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
     530	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     531	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     532	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

00000000000010a8 <LBB21_11>
     533	95 00 00 00 00 00 00 00	exit

00000000000010b0 <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
     534	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
     535	79 38 00 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x0)
     536	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
     537	79 39 08 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x8)
     538	b7 07 00 00 20 00 00 00	r7 = 0x20
     539	bf 96 00 00 00 00 00 00	r6 = r9
     540	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_2>
     541	b7 06 00 00 20 00 00 00	r6 = 0x20

00000000000010f0 <LBB23_2>
     542	bf 81 00 00 00 00 00 00	r1 = r8
     543	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
     544	bf 63 00 00 00 00 00 00	r3 = r6
     545	85 10 00 00 ad 20 00 00	call 0x20ad ; <memcpy>
     546	b7 01 00 00 02 17 00 00	r1 = 0x1702
     547	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_4>
     548	b7 01 00 00 04 17 00 00	r1 = 0x1704

0000000000001128 <LBB23_4>
     549	0f 68 00 00 00 00 00 00	r8 += r6
     550	1f 69 00 00 00 00 00 00	r9 -= r6
     551	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
     552	7b 92 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r9
     553	7b 82 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r8
     554	bf 12 00 00 00 00 00 00	r2 = r1
     555	57 02 00 00 06 00 00 00	r2 &= 0x6
     556	55 02 14 00 04 00 00 00	if r2 != 0x4 goto +0x14 <LBB23_10>
     557	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     558	07 02 00 00 20 00 00 00	r2 += 0x20
     559	b7 07 00 00 20 00 00 00	r7 = 0x20
     560	bf 96 00 00 00 00 00 00	r6 = r9
     561	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_7>
     562	b7 06 00 00 20 00 00 00	r6 = 0x20

0000000000001198 <LBB23_7>
     563	bf 81 00 00 00 00 00 00	r1 = r8
     564	bf 63 00 00 00 00 00 00	r3 = r6
     565	85 10 00 00 99 20 00 00	call 0x2099 ; <memcpy>
     566	b7 01 00 00 02 17 00 00	r1 = 0x1702
     567	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_9>
     568	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000011c8 <LBB23_9>
     569	0f 68 00 00 00 00 00 00	r8 += r6
     570	1f 69 00 00 00 00 00 00	r9 -= r6
     571	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
     572	7b 92 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r9
     573	7b 82 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r8
     574	bf 12 00 00 00 00 00 00	r2 = r1
     575	57 02 00 00 06 00 00 00	r2 &= 0x6
     576	15 02 14 00 04 00 00 00	if r2 == 0x4 goto +0x14 <LBB23_12>

0000000000001208 <LBB23_10>
     577	18 02 00 00 e8 3b 01 00 00 00 00 00 00 00 00 00	r2 = 0x13be8 ll
     579	bf 13 00 00 00 00 00 00	r3 = r1
     580	77 03 00 00 08 00 00 00	r3 >>= 0x8
     581	18 04 00 00 e8 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13be8 ll
     583	67 04 00 00 38 00 00 00	r4 <<= 0x38
     584	4f 43 00 00 00 00 00 00	r3 |= r4
     585	77 02 00 00 08 00 00 00	r2 >>= 0x8
     586	79 a5 e8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x18)

0000000000001258 <LBB23_11>
     587	57 01 00 00 ff 00 00 00	r1 &= 0xff
     588	bf 34 00 00 00 00 00 00	r4 = r3
     589	67 04 00 00 08 00 00 00	r4 <<= 0x8
     590	4f 14 00 00 00 00 00 00	r4 |= r1
     591	7b 45 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r4
     592	77 03 00 00 38 00 00 00	r3 >>= 0x38
     593	67 02 00 00 08 00 00 00	r2 <<= 0x8
     594	4f 32 00 00 00 00 00 00	r2 |= r3
     595	7b 25 08 00 00 00 00 00	*(u64 *)(r5 + 0x8) = r2
     596	95 00 00 00 00 00 00 00	exit

00000000000012a8 <LBB23_12>
     597	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     598	07 02 00 00 40 00 00 00	r2 += 0x40
     599	b7 07 00 00 09 00 00 00	r7 = 0x9
     600	bf 96 00 00 00 00 00 00	r6 = r9
     601	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_14>
     602	b7 06 00 00 09 00 00 00	r6 = 0x9

00000000000012d8 <LBB23_14>
     603	bf 81 00 00 00 00 00 00	r1 = r8
     604	bf 63 00 00 00 00 00 00	r3 = r6
     605	85 10 00 00 71 20 00 00	call 0x2071 ; <memcpy>
     606	b7 01 00 00 02 17 00 00	r1 = 0x1702
     607	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_16>
     608	b7 01 00 00 04 17 00 00	r1 = 0x1704

0000000000001308 <LBB23_16>
     609	0f 68 00 00 00 00 00 00	r8 += r6
     610	1f 69 00 00 00 00 00 00	r9 -= r6
     611	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)
     612	7b 97 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r9
     613	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     614	bf 12 00 00 00 00 00 00	r2 = r1
     615	57 02 00 00 06 00 00 00	r2 &= 0x6
     616	15 02 01 00 04 00 00 00	if r2 == 0x4 goto +0x1 <LBB23_17>
     617	05 00 d7 ff 00 00 00 00	goto -0x29 <LBB23_10>

0000000000001350 <LBB23_17>
     618	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     619	71 11 49 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x49)
     620	73 1a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r1
     621	b7 06 00 00 01 00 00 00	r6 = 0x1
     622	55 09 01 00 00 00 00 00	if r9 != 0x0 goto +0x1 <LBB23_19>
     623	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000001380 <LBB23_19>
     624	bf a2 00 00 00 00 00 00	r2 = r10
     625	07 02 00 00 fe ff ff ff	r2 += -0x2
     626	bf 81 00 00 00 00 00 00	r1 = r8
     627	bf 63 00 00 00 00 00 00	r3 = r6
     628	85 10 00 00 5a 20 00 00	call 0x205a ; <memcpy>
     629	b7 01 00 00 02 17 00 00	r1 = 0x1702
     630	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB23_21>
     631	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000013c0 <LBB23_21>
     632	0f 68 00 00 00 00 00 00	r8 += r6
     633	1f 69 00 00 00 00 00 00	r9 -= r6
     634	7b 97 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r9
     635	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     636	bf 12 00 00 00 00 00 00	r2 = r1
     637	57 02 00 00 06 00 00 00	r2 &= 0x6
     638	15 02 01 00 04 00 00 00	if r2 == 0x4 goto +0x1 <LBB23_23>
     639	05 00 c1 ff 00 00 00 00	goto -0x3f <LBB23_10>

0000000000001400 <LBB23_23>
     640	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     641	71 12 4a 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x4a)
     642	b7 06 00 00 01 00 00 00	r6 = 0x1
     643	b7 01 00 00 01 00 00 00	r1 = 0x1
     644	15 02 01 00 01 00 00 00	if r2 == 0x1 goto +0x1 <LBB23_25>
     645	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000001430 <LBB23_25>
     646	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r1
     647	55 09 01 00 00 00 00 00	if r9 != 0x0 goto +0x1 <LBB23_27>
     648	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000001448 <LBB23_27>
     649	bf a2 00 00 00 00 00 00	r2 = r10
     650	07 02 00 00 ff ff ff ff	r2 += -0x1
     651	bf 81 00 00 00 00 00 00	r1 = r8
     652	bf 63 00 00 00 00 00 00	r3 = r6
     653	85 10 00 00 41 20 00 00	call 0x2041 ; <memcpy>
     654	0f 68 00 00 00 00 00 00	r8 += r6
     655	bf 91 00 00 00 00 00 00	r1 = r9
     656	1f 61 00 00 00 00 00 00	r1 -= r6
     657	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     658	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     659	b7 01 00 00 02 17 00 00	r1 = 0x1702
     660	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB23_29>
     661	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000014b0 <LBB23_29>
     662	bf 12 00 00 00 00 00 00	r2 = r1
     663	57 02 00 00 06 00 00 00	r2 &= 0x6
     664	79 a5 e8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x18)
     665	55 02 02 00 04 00 00 00	if r2 != 0x4 goto +0x2 <LBB23_31>
     666	b7 01 00 00 04 00 00 00	r1 = 0x4
     667	05 00 af ff 00 00 00 00	goto -0x51 <LBB23_11>

00000000000014e0 <LBB23_31>
     668	18 02 00 00 e8 3b 01 00 00 00 00 00 00 00 00 00	r2 = 0x13be8 ll
     670	bf 13 00 00 00 00 00 00	r3 = r1
     671	77 03 00 00 08 00 00 00	r3 >>= 0x8
     672	18 04 00 00 e8 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13be8 ll
     674	67 04 00 00 38 00 00 00	r4 <<= 0x38
     675	4f 43 00 00 00 00 00 00	r3 |= r4
     676	77 02 00 00 08 00 00 00	r2 >>= 0x8
     677	05 00 a5 ff 00 00 00 00	goto -0x5b <LBB23_11>

0000000000001530 <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
     678	bf 27 00 00 00 00 00 00	r7 = r2
     679	bf 16 00 00 00 00 00 00	r6 = r1
     680	bf a1 00 00 00 00 00 00	r1 = r10
     681	07 01 00 00 d0 ff ff ff	r1 += -0x30
     682	85 10 00 00 0c 11 00 00	call 0x110c ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
     683	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     684	15 01 3a 00 01 00 00 00	if r1 == 0x1 goto +0x3a <LBB24_11>
     685	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2c)
     686	63 1a b3 ff 00 00 00 00	*(u32 *)(r10 - 0x4d) = r1
     687	61 a1 d1 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2f)
     688	63 1a b0 ff 00 00 00 00	*(u32 *)(r10 - 0x50) = r1
     689	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     690	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
     691	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x10)
     692	73 1a a8 ff 00 00 00 00	*(u8 *)(r10 - 0x58) = r1
     693	79 a9 e0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x20)
     694	79 a8 d8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x28)
     695	bf a1 00 00 00 00 00 00	r1 = r10
     696	07 01 00 00 d0 ff ff ff	r1 += -0x30
     697	bf 72 00 00 00 00 00 00	r2 = r7
     698	85 10 00 00 fc 10 00 00	call 0x10fc ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
     699	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     700	15 01 2a 00 01 00 00 00	if r1 == 0x1 goto +0x2a <LBB24_11>
     701	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2c)
     702	63 1a cb ff 00 00 00 00	*(u32 *)(r10 - 0x35) = r1
     703	61 a1 d1 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2f)
     704	63 1a c8 ff 00 00 00 00	*(u32 *)(r10 - 0x38) = r1
     705	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     706	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
     707	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x10)
     708	73 1a c0 ff 00 00 00 00	*(u8 *)(r10 - 0x40) = r1
     709	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
     710	25 01 09 00 08 00 00 00	if r1 > 0x8 goto +0x9 <LBB24_7>
     711	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     712	b7 02 00 00 01 00 00 00	r2 = 0x1
     713	85 10 00 00 5b 09 00 00	call 0x95b ; <__rust_alloc>
     714	bf 07 00 00 00 00 00 00	r7 = r0
     715	55 07 22 00 00 00 00 00	if r7 != 0x0 goto +0x22 <LBB24_5>
     716	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     717	b7 02 00 00 01 00 00 00	r2 = 0x1
     718	85 10 00 00 45 13 00 00	call 0x1345 ; <alloc::alloc::handle_alloc_error>
     719	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001680 <LBB24_7>
     720	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     721	7b 2a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r2
     722	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
     723	7b 2a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r2
     724	07 01 00 00 f7 ff ff ff	r1 += -0x9
     725	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     726	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
     727	bf 12 00 00 00 00 00 00	r2 = r1
     728	07 02 00 00 09 00 00 00	r2 += 0x9
     729	7b 27 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r2
     730	69 12 07 00 00 00 00 00	r2 = *(u16 *)(r1 + 0x7)
     731	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
     732	61 12 03 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x3)
     733	63 2a fb ff 00 00 00 00	*(u32 *)(r10 - 0x5) = r2
     734	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
     735	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 0x8) = r1
     736	bf a1 00 00 00 00 00 00	r1 = r10
     737	07 01 00 00 d0 ff ff ff	r1 += -0x30
     738	bf 72 00 00 00 00 00 00	r2 = r7
     739	85 10 00 00 57 fe ff ff	call -0x1a9 ; <<tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize>
     740	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     741	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB24_11>
     742	05 00 28 00 00 00 00 00	goto +0x28 <LBB24_9>

0000000000001738 <LBB24_11>
     743	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     744	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)

0000000000001748 <LBB24_12>
     745	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     746	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     747	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000001760 <LBB24_13>
     748	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     749	95 00 00 00 00 00 00 00	exit

0000000000001770 <LBB24_5>
     750	b7 01 00 00 75 74 00 00	r1 = 0x7475
     751	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     752	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     754	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     755	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     757	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     758	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     760	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     761	b7 01 00 00 18 00 00 00	r1 = 0x18
     762	b7 02 00 00 08 00 00 00	r2 = 0x8
     763	85 10 00 00 29 09 00 00	call 0x929 ; <__rust_alloc>
     764	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB24_8>
     765	b7 01 00 00 18 00 00 00	r1 = 0x18
     766	b7 02 00 00 08 00 00 00	r2 = 0x8
     767	85 10 00 00 14 13 00 00	call 0x1314 ; <alloc::alloc::handle_alloc_error>
     768	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001808 <LBB24_8>
     769	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     770	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     771	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     772	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     773	bf a1 00 00 00 00 00 00	r1 = r10
     774	07 01 00 00 88 ff ff ff	r1 += -0x78
     775	b7 02 00 00 14 00 00 00	r2 = 0x14
     776	bf 03 00 00 00 00 00 00	r3 = r0
     777	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
     779	85 10 00 00 e4 11 00 00	call 0x11e4 ; <std::io::error::Error::_new>
     780	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
     781	79 a2 90 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x70)
     782	05 00 da ff 00 00 00 00	goto -0x26 <LBB24_12>

0000000000001878 <LBB24_9>
     783	71 a1 d1 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x2f)
     784	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
     785	bf a1 00 00 00 00 00 00	r1 = r10
     786	07 01 00 00 d0 ff ff ff	r1 += -0x30
     787	bf 72 00 00 00 00 00 00	r2 = r7
     788	85 10 00 00 93 fe ff ff	call -0x16d ; <<tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize>
     789	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     790	15 01 d0 ff 01 00 00 00	if r1 == 0x1 goto -0x30 <LBB24_11>
     791	71 a1 d1 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x2f)
     792	71 a2 a8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x58)
     793	73 26 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r2
     794	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
     795	7b 26 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r2
     796	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
     797	7b 26 38 00 00 00 00 00	*(u64 *)(r6 + 0x38) = r2
     798	71 a2 c0 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x40)
     799	73 26 40 00 00 00 00 00	*(u8 *)(r6 + 0x40) = r2
     800	61 a2 f8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x8)
     801	63 2a 98 ff 00 00 00 00	*(u32 *)(r10 - 0x68) = r2
     802	61 a2 fb ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x5)
     803	63 2a 9b ff 00 00 00 00	*(u32 *)(r10 - 0x65) = r2
     804	61 a2 b0 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x50)
     805	61 a3 b3 ff 00 00 00 00	r3 = *(u32 *)(r10 - 0x4d)
     806	7b 96 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r9
     807	7b 86 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r8
     808	63 36 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r3
     809	63 26 01 00 00 00 00 00	*(u32 *)(r6 + 0x1) = r2
     810	61 a2 cb ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x35)
     811	61 a3 c8 ff 00 00 00 00	r3 = *(u32 *)(r10 - 0x38)
     812	79 a4 70 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x90)
     813	7b 46 30 00 00 00 00 00	*(u64 *)(r6 + 0x30) = r4
     814	79 a4 78 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x88)
     815	7b 46 28 00 00 00 00 00	*(u64 *)(r6 + 0x28) = r4
     816	63 36 21 00 00 00 00 00	*(u32 *)(r6 + 0x21) = r3
     817	63 26 24 00 00 00 00 00	*(u32 *)(r6 + 0x24) = r2
     818	61 a2 98 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x68)
     819	63 26 41 00 00 00 00 00	*(u32 *)(r6 + 0x41) = r2
     820	61 a2 9b ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x65)
     821	63 26 44 00 00 00 00 00	*(u32 *)(r6 + 0x44) = r2
     822	73 16 4b 00 00 00 00 00	*(u8 *)(r6 + 0x4b) = r1
     823	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
     824	73 16 4a 00 00 00 00 00	*(u8 *)(r6 + 0x4a) = r1
     825	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     826	6b 16 48 00 00 00 00 00	*(u16 *)(r6 + 0x48) = r1
     827	b7 01 00 00 00 00 00 00	r1 = 0x0
     828	05 00 af ff 00 00 00 00	goto -0x51 <LBB24_13>

00000000000019e8 <entrypoint>
     829	bf 12 00 00 00 00 00 00	r2 = r1
     830	bf a1 00 00 00 00 00 00	r1 = r10
     831	07 01 00 00 00 ff ff ff	r1 += -0x100
     832	85 10 00 00 db 09 00 00	call 0x9db ; <solana_program::entrypoint::deserialize>
     833	79 a9 18 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xe8)
     834	79 a6 10 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xf0)
     835	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
     836	7b 1a 68 fd 00 00 00 00	*(u64 *)(r10 - 0x298) = r1
     837	79 a8 00 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x100)
     838	79 a1 20 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe0)
     839	79 a2 28 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xd8)
     840	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
     841	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     842	bf a1 00 00 00 00 00 00	r1 = r10
     843	07 01 00 00 00 ff ff ff	r1 += -0x100
     844	bf a2 00 00 00 00 00 00	r2 = r10
     845	07 02 00 00 c8 ff ff ff	r2 += -0x38
     846	85 10 00 00 cc 06 00 00	call 0x6cc ; <<tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize>
     847	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
     848	15 01 0f 00 01 00 00 00	if r1 == 0x1 goto +0xf <LBB28_4>
     849	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
     850	7b 1a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r1
     851	69 a1 20 ff 00 00 00 00	r1 = *(u16 *)(r10 - 0xe0)
     852	6b 1a 38 fe 00 00 00 00	*(u16 *)(r10 - 0x1c8) = r1
     853	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     854	15 01 47 00 00 00 00 00	if r1 == 0x0 goto +0x47 <LBB28_20>
     855	b7 01 00 00 12 00 00 00	r1 = 0x12
     856	b7 02 00 00 01 00 00 00	r2 = 0x1
     857	85 10 00 00 cb 08 00 00	call 0x8cb ; <__rust_alloc>
     858	bf 08 00 00 00 00 00 00	r8 = r0
     859	55 08 07 00 00 00 00 00	if r8 != 0x0 goto +0x7 <LBB28_5>
     860	b7 01 00 00 12 00 00 00	r1 = 0x12
     861	b7 02 00 00 01 00 00 00	r2 = 0x1
     862	85 10 00 00 b5 12 00 00	call 0x12b5 ; <alloc::alloc::handle_alloc_error>
     863	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001b00 <LBB28_4>
     864	79 a3 10 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xf0)
     865	79 a2 08 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf8)
     866	05 00 1d 00 00 00 00 00	goto +0x1d <LBB28_8>

0000000000001b18 <LBB28_5>
     867	b7 01 00 00 61 64 00 00	r1 = 0x6461
     868	6b 18 10 00 00 00 00 00	*(u16 *)(r8 + 0x10) = r1
     869	18 01 00 00 62 79 74 65 00 00 00 00 73 20 72 65	r1 = 0x6572207365747962 ll
     871	7b 18 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r1
     872	18 01 00 00 4e 6f 74 20 00 00 00 00 61 6c 6c 20	r1 = 0x206c6c6120746f4e ll
     874	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
     875	b7 01 00 00 18 00 00 00	r1 = 0x18
     876	b7 02 00 00 08 00 00 00	r2 = 0x8
     877	85 10 00 00 b7 08 00 00	call 0x8b7 ; <__rust_alloc>
     878	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB28_7>
     879	b7 01 00 00 18 00 00 00	r1 = 0x18
     880	b7 02 00 00 08 00 00 00	r2 = 0x8
     881	85 10 00 00 a2 12 00 00	call 0x12a2 ; <alloc::alloc::handle_alloc_error>
     882	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001b98 <LBB28_7>
     883	b7 01 00 00 12 00 00 00	r1 = 0x12
     884	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     885	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     886	7b 80 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r8
     887	bf a1 00 00 00 00 00 00	r1 = r10
     888	07 01 00 00 d0 fd ff ff	r1 += -0x230
     889	b7 02 00 00 15 00 00 00	r2 = 0x15
     890	bf 03 00 00 00 00 00 00	r3 = r0
     891	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
     893	85 10 00 00 72 11 00 00	call 0x1172 ; <std::io::error::Error::_new>
     894	79 a3 d8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x228)
     895	79 a2 d0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x230)

0000000000001c00 <LBB28_8>
     896	bf a1 00 00 00 00 00 00	r1 = r10
     897	07 01 00 00 e0 fd ff ff	r1 += -0x220
     898	85 10 00 00 12 0f 00 00	call 0xf12 ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>

0000000000001c18 <LBB28_9>
     899	61 a8 e0 fd 00 00 00 00	r8 = *(u32 *)(r10 - 0x220)
     900	15 08 0f 00 14 00 00 00	if r8 == 0x14 goto +0xf <LBB28_15>
     901	79 a1 e8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x218)
     902	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     903	79 a1 f0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x210)
     904	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     905	79 a1 f8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x208)
     906	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
     907	61 a7 e4 fd 00 00 00 00	r7 = *(u32 *)(r10 - 0x21c)
     908	65 08 0a 00 09 00 00 00	if r8 s> 0x9 goto +0xa <LBB28_16>
     909	65 08 9f 00 04 00 00 00	if r8 s> 0x4 goto +0x9f <LBB28_33>
     910	65 08 aa 00 01 00 00 00	if r8 s> 0x1 goto +0xaa <LBB28_39>
     911	15 08 6d 01 00 00 00 00	if r8 == 0x0 goto +0x16d <LBB28_69>
     912	18 01 00 00 f1 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129f1 ll
     914	b7 02 00 00 16 00 00 00	r2 = 0x16
     915	05 00 bd 01 00 00 00 00	goto +0x1bd <LBB28_84>

0000000000001ca0 <LBB28_15>
     916	b7 08 00 00 00 00 00 00	r8 = 0x0
     917	15 09 d3 01 00 00 00 00	if r9 == 0x0 goto +0x1d3 <LBB28_91>
     918	05 00 cb 01 00 00 00 00	goto +0x1cb <LBB28_86>

0000000000001cb8 <LBB28_16>
     919	65 08 9b 00 0e 00 00 00	if r8 s> 0xe goto +0x9b <LBB28_36>
     920	65 08 a6 00 0b 00 00 00	if r8 s> 0xb goto +0xa6 <LBB28_42>
     921	15 08 88 01 0a 00 00 00	if r8 == 0xa goto +0x188 <LBB28_72>
     922	18 01 00 00 c1 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128c1 ll
     924	b7 02 00 00 1a 00 00 00	r2 = 0x1a
     925	05 00 b3 01 00 00 00 00	goto +0x1b3 <LBB28_84>

0000000000001cf0 <LBB28_20>
     926	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
     927	79 a5 08 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0xf8)
     928	61 a4 04 ff 00 00 00 00	r4 = *(u32 *)(r10 - 0xfc)
     929	71 a3 03 ff 00 00 00 00	r3 = *(u8 *)(r10 - 0xfd)
     930	71 a2 02 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0xfe)
     931	71 a0 01 ff 00 00 00 00	r0 = *(u8 *)(r10 - 0xff)
     932	79 a7 30 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x1d0)
     933	7b 7a 00 fe 00 00 00 00	*(u64 *)(r10 - 0x200) = r7
     934	69 a7 38 fe 00 00 00 00	r7 = *(u16 *)(r10 - 0x1c8)
     935	6b 7a 08 fe 00 00 00 00	*(u16 *)(r10 - 0x1f8) = r7
     936	15 00 e1 00 00 00 00 00	if r0 == 0x0 goto +0xe1 <LBB28_59>
     937	15 00 a7 00 01 00 00 00	if r0 == 0x1 goto +0xa7 <LBB28_51>
     938	73 3a 11 fe 00 00 00 00	*(u8 *)(r10 - 0x1ef) = r3
     939	73 2a 10 fe 00 00 00 00	*(u8 *)(r10 - 0x1f0) = r2
     940	b7 01 00 00 01 00 00 00	r1 = 0x1
     941	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
     942	bf a1 00 00 00 00 00 00	r1 = r10
     943	07 01 00 00 c8 ff ff ff	r1 += -0x38
     944	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
     945	b7 01 00 00 00 00 00 00	r1 = 0x0
     946	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
     947	b7 01 00 00 02 00 00 00	r1 = 0x2
     948	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
     949	18 01 00 00 80 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a80 ll
     951	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
     952	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
     954	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     955	bf a1 00 00 00 00 00 00	r1 = r10
     956	07 01 00 00 90 ff ff ff	r1 += -0x70
     957	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     958	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
     959	bf a1 00 00 00 00 00 00	r1 = r10
     960	07 01 00 00 b0 fe ff ff	r1 += -0x150
     961	bf a2 00 00 00 00 00 00	r2 = r10
     962	07 02 00 00 00 ff ff ff	r2 += -0x100
     963	85 10 00 00 58 12 00 00	call 0x1258 ; <alloc::fmt::format>
     964	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
     965	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
     966	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
     967	bf 71 00 00 00 00 00 00	r1 = r7
     968	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
     969	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB28_25>
     970	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB28_25>
     971	bf 71 00 00 00 00 00 00	r1 = r7
     972	bf 82 00 00 00 00 00 00	r2 = r8
     973	b7 03 00 00 01 00 00 00	r3 = 0x1
     974	85 10 00 00 58 08 00 00	call 0x858 ; <__rust_dealloc>

0000000000001e78 <LBB28_25>
     975	15 09 2a 01 00 00 00 00	if r9 == 0x0 goto +0x12a <LBB28_68>
     976	15 09 29 01 01 00 00 00	if r9 == 0x1 goto +0x129 <LBB28_68>
     977	79 a8 68 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x298)
     978	07 08 00 00 30 00 00 00	r8 += 0x30
     979	bf a1 00 00 00 00 00 00	r1 = r10
     980	07 01 00 00 00 ff ff ff	r1 += -0x100
     981	bf 82 00 00 00 00 00 00	r2 = r8
     982	85 10 00 00 93 08 00 00	call 0x893 ; <solana_program::account_info::AccountInfo::try_borrow_data>
     983	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
     984	15 01 a8 00 01 00 00 00	if r1 == 0x1 goto +0xa8 <LBB28_58>
     985	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
     986	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
     987	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
     988	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
     989	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
     990	7b 2a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r2
     991	bf a1 00 00 00 00 00 00	r1 = r10
     992	07 01 00 00 00 ff ff ff	r1 += -0x100
     993	bf a2 00 00 00 00 00 00	r2 = r10
     994	07 02 00 00 30 fe ff ff	r2 += -0x1d0
     995	85 10 00 00 c2 fe ff ff	call -0x13e ; <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
     996	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
     997	15 01 0e 02 01 00 00 00	if r1 == 0x1 goto +0x20e <LBB28_108>
     998	61 a1 04 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xfc)
     999	63 1a b3 fe 00 00 00 00	*(u32 *)(r10 - 0x14d) = r1
    1000	61 a1 01 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xff)
    1001	63 1a b0 fe 00 00 00 00	*(u32 *)(r10 - 0x150) = r1
    1002	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1003	7b 1a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r1
    1004	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1005	7b 1a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r1
    1006	bf a1 00 00 00 00 00 00	r1 = r10
    1007	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1008	7b 1a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r1
    1009	bf a2 00 00 00 00 00 00	r2 = r10
    1010	07 02 00 00 18 ff ff ff	r2 += -0xe8
    1011	b7 03 00 00 34 00 00 00	r3 = 0x34
    1012	85 10 00 00 da 1e 00 00	call 0x1eda ; <memcpy>
    1013	7b 7a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r7
    1014	bf a7 00 00 00 00 00 00	r7 = r10
    1015	07 07 00 00 90 ff ff ff	r7 += -0x70
    1016	bf 71 00 00 00 00 00 00	r1 = r7
    1017	79 a2 48 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b8)
    1018	b7 03 00 00 34 00 00 00	r3 = 0x34
    1019	85 10 00 00 d3 1e 00 00	call 0x1ed3 ; <memcpy>
    1020	bf a1 00 00 00 00 00 00	r1 = r10
    1021	07 01 00 00 c7 fe ff ff	r1 += -0x139
    1022	bf 72 00 00 00 00 00 00	r2 = r7
    1023	b7 03 00 00 34 00 00 00	r3 = 0x34
    1024	85 10 00 00 ce 1e 00 00	call 0x1ece ; <memcpy>
    1025	79 a1 58 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a8)
    1026	7b 1a bf fe 00 00 00 00	*(u64 *)(r10 - 0x141) = r1
    1027	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    1028	7b 1a b7 fe 00 00 00 00	*(u64 *)(r10 - 0x149) = r1
    1029	79 a2 50 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b0)
    1030	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    1031	07 01 00 00 ff ff ff ff	r1 += -0x1
    1032	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    1033	bf a1 00 00 00 00 00 00	r1 = r10
    1034	07 01 00 00 00 ff ff ff	r1 += -0x100
    1035	bf a2 00 00 00 00 00 00	r2 = r10
    1036	07 02 00 00 10 fe ff ff	r2 += -0x1f0
    1037	bf a4 00 00 00 00 00 00	r4 = r10
    1038	07 04 00 00 b0 fe ff ff	r4 += -0x150
    1039	79 a3 68 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x298)
    1040	85 10 00 00 cd fc ff ff	call -0x333 ; <tictactoe::instructions::PlayerMove::process>
    1041	61 a1 00 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x100)
    1042	15 01 01 00 14 00 00 00	if r1 == 0x14 goto +0x1 <LBB28_30>
    1043	05 00 e9 01 00 00 00 00	goto +0x1e9 <LBB28_110>

00000000000020a0 <LBB28_30>
    1044	bf a1 00 00 00 00 00 00	r1 = r10
    1045	07 01 00 00 00 ff ff ff	r1 += -0x100
    1046	bf 82 00 00 00 00 00 00	r2 = r8
    1047	85 10 00 00 65 08 00 00	call 0x865 ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1048	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1049	15 01 67 00 01 00 00 00	if r1 == 0x1 goto +0x67 <LBB28_58>
    1050	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1051	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1052	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1053	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1054	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1055	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    1056	bf a1 00 00 00 00 00 00	r1 = r10
    1057	07 01 00 00 c0 fd ff ff	r1 += -0x240
    1058	bf a2 00 00 00 00 00 00	r2 = r10
    1059	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1060	bf a3 00 00 00 00 00 00	r3 = r10
    1061	07 03 00 00 c8 ff ff ff	r3 += -0x38
    1062	85 10 00 00 ef fd ff ff	call -0x211 ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1063	79 a2 c0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x240)
    1064	bf 21 00 00 00 00 00 00	r1 = r2
    1065	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1066	15 01 5e 03 04 00 00 00	if r1 == 0x4 goto +0x35e <LBB28_162>
    1067	79 a3 c8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x238)
    1068	05 00 17 05 00 00 00 00	goto +0x517 <LBB28_251>

0000000000002168 <LBB28_33>
    1069	65 08 17 00 06 00 00 00	if r8 s> 0x6 goto +0x17 <LBB28_45>
    1070	15 08 f7 00 05 00 00 00	if r8 == 0x5 goto +0xf7 <LBB28_73>
    1071	18 01 00 00 70 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12970 ll
    1073	b7 02 00 00 19 00 00 00	r2 = 0x19
    1074	05 00 1e 01 00 00 00 00	goto +0x11e <LBB28_84>

0000000000002198 <LBB28_36>
    1075	65 08 17 00 10 00 00 00	if r8 s> 0x10 goto +0x17 <LBB28_48>
    1076	15 08 f5 00 0f 00 00 00	if r8 == 0xf goto +0xf5 <LBB28_74>
    1077	18 01 00 00 4c 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x1284c ll
    1079	b7 02 00 00 18 00 00 00	r2 = 0x18
    1080	05 00 18 01 00 00 00 00	goto +0x118 <LBB28_84>

00000000000021c8 <LBB28_39>
    1081	15 08 f4 00 02 00 00 00	if r8 == 0x2 goto +0xf4 <LBB28_75>
    1082	15 08 f7 00 03 00 00 00	if r8 == 0x3 goto +0xf7 <LBB28_76>
    1083	18 01 00 00 a1 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129a1 ll
    1085	b7 02 00 00 1a 00 00 00	r2 = 0x1a
    1086	05 00 12 01 00 00 00 00	goto +0x112 <LBB28_84>

00000000000021f8 <LBB28_42>
    1087	15 08 f6 00 0c 00 00 00	if r8 == 0xc goto +0xf6 <LBB28_77>
    1088	15 08 f9 00 0d 00 00 00	if r8 == 0xd goto +0xf9 <LBB28_78>
    1089	18 01 00 00 7f 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x1287f ll
    1091	b7 02 00 00 13 00 00 00	r2 = 0x13
    1092	05 00 0c 01 00 00 00 00	goto +0x10c <LBB28_84>

0000000000002228 <LBB28_45>
    1093	15 08 f8 00 07 00 00 00	if r8 == 0x7 goto +0xf8 <LBB28_79>
    1094	15 08 fb 00 08 00 00 00	if r8 == 0x8 goto +0xfb <LBB28_80>
    1095	18 01 00 00 f6 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128f6 ll
    1097	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1098	05 00 06 01 00 00 00 00	goto +0x106 <LBB28_84>

0000000000002258 <LBB28_48>
    1099	15 08 fa 00 11 00 00 00	if r8 == 0x11 goto +0xfa <LBB28_81>
    1100	15 08 fd 00 12 00 00 00	if r8 == 0x12 goto +0xfd <LBB28_82>
    1101	18 01 00 00 02 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12802 ll
    1103	b7 02 00 00 15 00 00 00	r2 = 0x15
    1104	05 00 00 01 00 00 00 00	goto +0x100 <LBB28_84>

0000000000002288 <LBB28_51>
    1105	b7 01 00 00 01 00 00 00	r1 = 0x1
    1106	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1107	bf a1 00 00 00 00 00 00	r1 = r10
    1108	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1109	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1110	b7 01 00 00 00 00 00 00	r1 = 0x0
    1111	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1112	b7 01 00 00 02 00 00 00	r1 = 0x2
    1113	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1114	18 01 00 00 60 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a60 ll
    1116	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1117	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    1119	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1120	bf a1 00 00 00 00 00 00	r1 = r10
    1121	07 01 00 00 90 ff ff ff	r1 += -0x70
    1122	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1123	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
    1124	bf a1 00 00 00 00 00 00	r1 = r10
    1125	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1126	bf a2 00 00 00 00 00 00	r2 = r10
    1127	07 02 00 00 00 ff ff ff	r2 += -0x100
    1128	85 10 00 00 b3 11 00 00	call 0x11b3 ; <alloc::fmt::format>
    1129	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1130	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1131	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1132	bf 71 00 00 00 00 00 00	r1 = r7
    1133	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1134	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB28_54>
    1135	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB28_54>
    1136	bf 71 00 00 00 00 00 00	r1 = r7
    1137	bf 82 00 00 00 00 00 00	r2 = r8
    1138	b7 03 00 00 01 00 00 00	r3 = 0x1
    1139	85 10 00 00 b3 07 00 00	call 0x7b3 ; <__rust_dealloc>

00000000000023a0 <LBB28_54>
    1140	15 09 85 00 00 00 00 00	if r9 == 0x0 goto +0x85 <LBB28_68>
    1141	15 09 84 00 01 00 00 00	if r9 == 0x1 goto +0x84 <LBB28_68>
    1142	79 a8 68 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x298)
    1143	71 81 28 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x28)
    1144	15 01 1f 01 00 00 00 00	if r1 == 0x0 goto +0x11f <LBB28_101>
    1145	07 08 00 00 30 00 00 00	r8 += 0x30
    1146	bf a1 00 00 00 00 00 00	r1 = r10
    1147	07 01 00 00 00 ff ff ff	r1 += -0x100
    1148	bf 82 00 00 00 00 00 00	r2 = r8
    1149	85 10 00 00 ec 07 00 00	call 0x7ec ; <solana_program::account_info::AccountInfo::try_borrow_data>
    1150	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1151	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB28_58>
    1152	05 00 1b 01 00 00 00 00	goto +0x11b <LBB28_102>

0000000000002408 <LBB28_58>
    1153	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    1154	7b 1a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r1
    1155	79 a1 20 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe0)
    1156	7b 1a f8 fd 00 00 00 00	*(u64 *)(r10 - 0x208) = r1
    1157	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1158	7b 1a e8 fd 00 00 00 00	*(u64 *)(r10 - 0x218) = r1
    1159	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1160	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1161	05 00 f9 fe 00 00 00 00	goto -0x107 <LBB28_9>

0000000000002450 <LBB28_59>
    1162	7b 8a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r8
    1163	7b 5a 16 fe 00 00 00 00	*(u64 *)(r10 - 0x1ea) = r5
    1164	63 4a 12 fe 00 00 00 00	*(u32 *)(r10 - 0x1ee) = r4
    1165	73 3a 11 fe 00 00 00 00	*(u8 *)(r10 - 0x1ef) = r3
    1166	73 2a 10 fe 00 00 00 00	*(u8 *)(r10 - 0x1f0) = r2
    1167	79 a2 00 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x200)
    1168	7b 2a 26 fe 00 00 00 00	*(u64 *)(r10 - 0x1da) = r2
    1169	69 a2 08 fe 00 00 00 00	r2 = *(u16 *)(r10 - 0x1f8)
    1170	6b 2a 2e fe 00 00 00 00	*(u16 *)(r10 - 0x1d2) = r2
    1171	7b 1a 1e fe 00 00 00 00	*(u64 *)(r10 - 0x1e2) = r1
    1172	b7 01 00 00 01 00 00 00	r1 = 0x1
    1173	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1174	bf a1 00 00 00 00 00 00	r1 = r10
    1175	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1176	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1177	b7 01 00 00 00 00 00 00	r1 = 0x0
    1178	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1179	b7 01 00 00 02 00 00 00	r1 = 0x2
    1180	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1181	18 01 00 00 40 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a40 ll
    1183	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1184	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    1186	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1187	bf a1 00 00 00 00 00 00	r1 = r10
    1188	07 01 00 00 90 ff ff ff	r1 += -0x70
    1189	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1190	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
    1191	bf a1 00 00 00 00 00 00	r1 = r10
    1192	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1193	bf a2 00 00 00 00 00 00	r2 = r10
    1194	07 02 00 00 00 ff ff ff	r2 += -0x100
    1195	85 10 00 00 70 11 00 00	call 0x1170 ; <alloc::fmt::format>
    1196	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1197	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1198	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1199	bf 71 00 00 00 00 00 00	r1 = r7
    1200	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1201	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB28_62>
    1202	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB28_62>
    1203	bf 71 00 00 00 00 00 00	r1 = r7
    1204	bf 82 00 00 00 00 00 00	r2 = r8
    1205	b7 03 00 00 01 00 00 00	r3 = 0x1
    1206	85 10 00 00 70 07 00 00	call 0x770 ; <__rust_dealloc>

00000000000025b8 <LBB28_62>
    1207	15 09 42 00 00 00 00 00	if r9 == 0x0 goto +0x42 <LBB28_68>
    1208	15 09 41 00 01 00 00 00	if r9 == 0x1 goto +0x41 <LBB28_68>
    1209	15 09 40 00 02 00 00 00	if r9 == 0x2 goto +0x40 <LBB28_68>
    1210	79 a2 68 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x298)
    1211	71 21 28 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x28)
    1212	15 01 db 00 00 00 00 00	if r1 == 0x0 goto +0xdb <LBB28_101>
    1213	bf 27 00 00 00 00 00 00	r7 = r2
    1214	07 07 00 00 30 00 00 00	r7 += 0x30
    1215	18 01 00 00 bd 81 54 33 00 00 00 00 5c 4a 83 27	r1 = 0x27834a5c335481bd ll
    1217	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1218	18 01 00 00 35 47 77 69 00 00 00 00 da 47 43 0c	r1 = 0xc4347da69774735 ll
    1220	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1221	18 01 00 00 76 13 de 53 00 00 00 00 0b 69 2a 87	r1 = -0x78d596f4ac21ec8a ll
    1223	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1224	18 01 00 00 da 07 5c b2 00 00 00 00 ff 5e c6 81	r1 = -0x7e39a1004da3f826 ll
    1226	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1227	bf a1 00 00 00 00 00 00	r1 = r10
    1228	07 01 00 00 a0 fd ff ff	r1 += -0x260
    1229	bf a2 00 00 00 00 00 00	r2 = r10
    1230	07 02 00 00 10 fe ff ff	r2 += -0x1f0
    1231	85 10 00 00 50 09 00 00	call 0x950 ; <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    1232	b7 01 00 00 09 00 00 00	r1 = 0x9
    1233	7b 1a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r1
    1234	18 01 00 00 f5 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125f5 ll
    1236	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    1237	79 a1 a8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x258)
    1238	7b 1a c8 fe 00 00 00 00	*(u64 *)(r10 - 0x138) = r1
    1239	79 a1 a0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x260)
    1240	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1241	bf a1 00 00 00 00 00 00	r1 = r10
    1242	07 01 00 00 00 ff ff ff	r1 += -0x100
    1243	bf a2 00 00 00 00 00 00	r2 = r10
    1244	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1245	bf a4 00 00 00 00 00 00	r4 = r10
    1246	07 04 00 00 c8 ff ff ff	r4 += -0x38
    1247	b7 03 00 00 02 00 00 00	r3 = 0x2
    1248	85 10 00 00 e1 0d 00 00	call 0xde1 ; <solana_program::pubkey::Pubkey::find_program_address>
    1249	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    1250	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    1251	79 a2 10 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf0)
    1252	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    1253	79 a3 08 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xf8)
    1254	7b 3a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r3
    1255	79 a4 00 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x100)
    1256	7b 4a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r4
    1257	71 a8 20 ff 00 00 00 00	r8 = *(u8 *)(r10 - 0xe0)
    1258	7b 1a 48 fe 00 00 00 00	*(u64 *)(r10 - 0x1b8) = r1
    1259	7b 2a 40 fe 00 00 00 00	*(u64 *)(r10 - 0x1c0) = r2
    1260	7b 3a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r3
    1261	7b 4a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r4
    1262	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    1263	bf a1 00 00 00 00 00 00	r1 = r10
    1264	07 01 00 00 30 fe ff ff	r1 += -0x1d0
    1265	b7 03 00 00 20 00 00 00	r3 = 0x20
    1266	85 10 00 00 22 1e 00 00	call 0x1e22 ; <memcmp>
    1267	67 00 00 00 20 00 00 00	r0 <<= 0x20
    1268	77 00 00 00 20 00 00 00	r0 >>= 0x20
    1269	15 00 11 01 00 00 00 00	if r0 == 0x0 goto +0x111 <LBB28_111>
    1270	18 01 00 00 00 00 00 00 00 00 00 00 af c7 71 00	r1 = 0x71c7af00000000 ll
    1272	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1273	05 00 89 fe 00 00 00 00	goto -0x177 <LBB28_9>

00000000000027d0 <LBB28_68>
    1274	b7 01 00 00 0a 00 00 00	r1 = 0xa
    1275	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1276	05 00 86 fe 00 00 00 00	goto -0x17a <LBB28_9>

00000000000027e8 <LBB28_69>
    1277	bf 71 00 00 00 00 00 00	r1 = r7
    1278	07 01 00 00 54 38 8e ff	r1 += -0x71c7ac
    1279	67 01 00 00 20 00 00 00	r1 <<= 0x20
    1280	77 01 00 00 20 00 00 00	r1 >>= 0x20
    1281	b7 02 00 00 07 00 00 00	r2 = 0x7
    1282	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB28_70>
    1283	05 00 4a 00 00 00 00 00	goto +0x4a <LBB28_83>

0000000000002820 <LBB28_70>
    1284	63 7a 90 ff 00 00 00 00	*(u32 *)(r10 - 0x70) = r7
    1285	b7 01 00 00 00 00 00 00	r1 = 0x0
    1286	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1287	7b 1a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r1
    1288	b7 01 00 00 01 00 00 00	r1 = 0x1
    1289	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    1290	bf a1 00 00 00 00 00 00	r1 = r10
    1291	07 01 00 00 00 ff ff ff	r1 += -0x100
    1292	7b 1a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r1
    1293	bf a2 00 00 00 00 00 00	r2 = r10
    1294	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1295	18 03 00 00 f8 3b 01 00 00 00 00 00 00 00 00 00	r3 = 0x13bf8 ll
    1297	85 10 00 00 85 13 00 00	call 0x1385 ; <core::fmt::Formatter::new>
    1298	bf a1 00 00 00 00 00 00	r1 = r10
    1299	07 01 00 00 90 ff ff ff	r1 += -0x70
    1300	79 a2 60 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a0)
    1301	85 10 00 00 ab 04 00 00	call 0x4ab ; <<tictactoe::error::TictactoeError as core::fmt::Display>::fmt>
    1302	15 00 77 00 00 00 00 00	if r0 == 0x0 goto +0x77 <LBB28_98>
    1303	bf a3 00 00 00 00 00 00	r3 = r10
    1304	07 03 00 00 30 fe ff ff	r3 += -0x1d0
    1305	18 01 00 00 31 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12a31 ll
    1307	b7 02 00 00 37 00 00 00	r2 = 0x37
    1308	18 04 00 00 40 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c40 ll
    1310	18 05 00 00 28 3c 01 00 00 00 00 00 00 00 00 00	r5 = 0x13c28 ll
    1312	85 10 00 00 56 13 00 00	call 0x1356 ; <core::result::unwrap_failed>
    1313	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000002910 <LBB28_72>
    1314	18 01 00 00 db 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128db ll
    1316	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1317	05 00 2b 00 00 00 00 00	goto +0x2b <LBB28_84>

0000000000002930 <LBB28_73>
    1318	18 01 00 00 89 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12989 ll
    1320	b7 02 00 00 18 00 00 00	r2 = 0x18
    1321	05 00 27 00 00 00 00 00	goto +0x27 <LBB28_84>

0000000000002950 <LBB28_74>
    1322	18 01 00 00 64 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12864 ll
    1324	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1325	05 00 23 00 00 00 00 00	goto +0x23 <LBB28_84>

0000000000002970 <LBB28_75>
    1326	18 01 00 00 d4 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129d4 ll
    1328	b7 02 00 00 1d 00 00 00	r2 = 0x1d
    1329	05 00 1f 00 00 00 00 00	goto +0x1f <LBB28_84>

0000000000002990 <LBB28_76>
    1330	18 01 00 00 bb 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129bb ll
    1332	b7 02 00 00 19 00 00 00	r2 = 0x19
    1333	05 00 1b 00 00 00 00 00	goto +0x1b <LBB28_84>

00000000000029b0 <LBB28_77>
    1334	18 01 00 00 a5 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128a5 ll
    1336	b7 02 00 00 1c 00 00 00	r2 = 0x1c
    1337	05 00 17 00 00 00 00 00	goto +0x17 <LBB28_84>

00000000000029d0 <LBB28_78>
    1338	18 01 00 00 92 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12892 ll
    1340	b7 02 00 00 13 00 00 00	r2 = 0x13
    1341	05 00 13 00 00 00 00 00	goto +0x13 <LBB28_84>

00000000000029f0 <LBB28_79>
    1342	18 01 00 00 51 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12951 ll
    1344	b7 02 00 00 1f 00 00 00	r2 = 0x1f
    1345	05 00 0f 00 00 00 00 00	goto +0xf <LBB28_84>

0000000000002a10 <LBB28_80>
    1346	18 01 00 00 11 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12911 ll
    1348	b7 02 00 00 20 00 00 00	r2 = 0x20
    1349	05 00 0b 00 00 00 00 00	goto +0xb <LBB28_84>

0000000000002a30 <LBB28_81>
    1350	18 01 00 00 39 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12839 ll
    1352	b7 02 00 00 13 00 00 00	r2 = 0x13
    1353	05 00 07 00 00 00 00 00	goto +0x7 <LBB28_84>

0000000000002a50 <LBB28_82>
    1354	18 01 00 00 17 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12817 ll
    1356	b7 02 00 00 22 00 00 00	r2 = 0x22
    1357	05 00 03 00 00 00 00 00	goto +0x3 <LBB28_84>

0000000000002a70 <LBB28_83>
    1358	18 01 00 00 07 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12a07 ll
    1360	b7 02 00 00 0e 00 00 00	r2 = 0xe

0000000000002a88 <LBB28_84>
    1361	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_

0000000000002a90 <LBB28_85>
    1362	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    1363	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1364	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    1365	7b 2a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r2
    1366	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    1367	7b 3a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r3
    1368	63 7a 04 ff 00 00 00 00	*(u32 *)(r10 - 0xfc) = r7
    1369	63 8a 00 ff 00 00 00 00	*(u32 *)(r10 - 0x100) = r8
    1370	7b 3a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r3
    1371	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1372	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    1373	bf a1 00 00 00 00 00 00	r1 = r10
    1374	07 01 00 00 00 ff ff ff	r1 += -0x100
    1375	85 10 00 00 73 0c 00 00	call 0xc73 ; <solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from>
    1376	bf 08 00 00 00 00 00 00	r8 = r0
    1377	15 09 07 00 00 00 00 00	if r9 == 0x0 goto +0x7 <LBB28_91>

0000000000002b10 <LBB28_86>
    1378	27 09 00 00 30 00 00 00	r9 *= 0x30
    1379	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1380	07 07 00 00 10 00 00 00	r7 += 0x10
    1381	05 00 0b 00 00 00 00 00	goto +0xb <LBB28_94>

0000000000002b30 <LBB28_90>
    1382	07 07 00 00 30 00 00 00	r7 += 0x30
    1383	07 09 00 00 d0 ff ff ff	r9 += -0x30
    1384	55 09 08 00 00 00 00 00	if r9 != 0x0 goto +0x8 <LBB28_94>

0000000000002b48 <LBB28_91>
    1385	15 06 22 00 00 00 00 00	if r6 == 0x0 goto +0x22 <LBB28_97>
    1386	27 06 00 00 30 00 00 00	r6 *= 0x30
    1387	15 06 20 00 00 00 00 00	if r6 == 0x0 goto +0x20 <LBB28_97>
    1388	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1389	bf 62 00 00 00 00 00 00	r2 = r6
    1390	b7 03 00 00 08 00 00 00	r3 = 0x8
    1391	85 10 00 00 b7 06 00 00	call 0x6b7 ; <__rust_dealloc>
    1392	05 00 1b 00 00 00 00 00	goto +0x1b <LBB28_97>

0000000000002b88 <LBB28_94>
    1393	79 71 f8 ff 00 00 00 00	r1 = *(u64 *)(r7 - 0x8)
    1394	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1395	07 02 00 00 ff ff ff ff	r2 += -0x1
    1396	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    1397	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_87>
    1398	05 00 0d 00 00 00 00 00	goto +0xd <LBB28_95>

0000000000002bb8 <LBB28_87>
    1399	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1400	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1401	07 02 00 00 ff ff ff ff	r2 += -0x1
    1402	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    1403	55 02 ea ff 00 00 00 00	if r2 != 0x0 goto -0x16 <LBB28_90>
    1404	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1405	07 02 00 00 ff ff ff ff	r2 += -0x1
    1406	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    1407	55 02 e6 ff 00 00 00 00	if r2 != 0x0 goto -0x1a <LBB28_90>
    1408	b7 02 00 00 28 00 00 00	r2 = 0x28
    1409	b7 03 00 00 08 00 00 00	r3 = 0x8
    1410	85 10 00 00 a4 06 00 00	call 0x6a4 ; <__rust_dealloc>
    1411	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB28_90>

0000000000002c20 <LBB28_95>
    1412	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1413	07 02 00 00 ff ff ff ff	r2 += -0x1
    1414	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    1415	55 02 ef ff 00 00 00 00	if r2 != 0x0 goto -0x11 <LBB28_87>
    1416	b7 02 00 00 20 00 00 00	r2 = 0x20
    1417	b7 03 00 00 08 00 00 00	r3 = 0x8
    1418	85 10 00 00 9c 06 00 00	call 0x69c ; <__rust_dealloc>
    1419	05 00 eb ff 00 00 00 00	goto -0x15 <LBB28_87>

0000000000002c60 <LBB28_97>
    1420	bf 80 00 00 00 00 00 00	r0 = r8
    1421	95 00 00 00 00 00 00 00	exit

0000000000002c70 <LBB28_98>
    1422	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1423	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1424	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1425	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1426	15 02 bf ff 00 00 00 00	if r2 == 0x0 goto -0x41 <LBB28_85>
    1427	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1428	15 01 bd ff 00 00 00 00	if r1 == 0x0 goto -0x43 <LBB28_85>
    1429	b7 03 00 00 01 00 00 00	r3 = 0x1
    1430	85 10 00 00 90 06 00 00	call 0x690 ; <__rust_dealloc>
    1431	05 00 ba ff 00 00 00 00	goto -0x46 <LBB28_85>

0000000000002cc0 <LBB28_101>
    1432	18 01 00 00 00 00 00 00 00 00 00 00 ad c7 71 00	r1 = 0x71c7ad00000000 ll
    1434	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1435	05 00 e7 fd 00 00 00 00	goto -0x219 <LBB28_9>

0000000000002ce0 <LBB28_102>
    1436	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1437	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1438	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1439	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1440	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
    1441	7b 2a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r2
    1442	bf a1 00 00 00 00 00 00	r1 = r10
    1443	07 01 00 00 00 ff ff ff	r1 += -0x100
    1444	bf a2 00 00 00 00 00 00	r2 = r10
    1445	07 02 00 00 30 fe ff ff	r2 += -0x1d0
    1446	85 10 00 00 ff fc ff ff	call -0x301 ; <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
    1447	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
    1448	15 01 4b 00 01 00 00 00	if r1 == 0x1 goto +0x4b <LBB28_108>
    1449	61 a1 04 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xfc)
    1450	63 1a b3 fe 00 00 00 00	*(u32 *)(r10 - 0x14d) = r1
    1451	61 a1 01 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xff)
    1452	63 1a b0 fe 00 00 00 00	*(u32 *)(r10 - 0x150) = r1
    1453	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1454	7b 1a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r1
    1455	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1456	7b 1a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r1
    1457	bf a1 00 00 00 00 00 00	r1 = r10
    1458	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1459	7b 1a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r1
    1460	bf a2 00 00 00 00 00 00	r2 = r10
    1461	07 02 00 00 18 ff ff ff	r2 += -0xe8
    1462	b7 03 00 00 34 00 00 00	r3 = 0x34
    1463	85 10 00 00 17 1d 00 00	call 0x1d17 ; <memcpy>
    1464	7b 7a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r7
    1465	bf a7 00 00 00 00 00 00	r7 = r10
    1466	07 07 00 00 90 ff ff ff	r7 += -0x70
    1467	bf 71 00 00 00 00 00 00	r1 = r7
    1468	79 a2 48 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b8)
    1469	b7 03 00 00 34 00 00 00	r3 = 0x34
    1470	85 10 00 00 10 1d 00 00	call 0x1d10 ; <memcpy>
    1471	bf a1 00 00 00 00 00 00	r1 = r10
    1472	07 01 00 00 c7 fe ff ff	r1 += -0x139
    1473	bf 72 00 00 00 00 00 00	r2 = r7
    1474	b7 03 00 00 34 00 00 00	r3 = 0x34
    1475	85 10 00 00 0b 1d 00 00	call 0x1d0b ; <memcpy>
    1476	79 a1 58 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a8)
    1477	7b 1a bf fe 00 00 00 00	*(u64 *)(r10 - 0x141) = r1
    1478	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    1479	7b 1a b7 fe 00 00 00 00	*(u64 *)(r10 - 0x149) = r1
    1480	79 a2 50 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b0)
    1481	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    1482	07 01 00 00 ff ff ff ff	r1 += -0x1
    1483	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    1484	71 a1 f9 fe 00 00 00 00	r1 = *(u8 *)(r10 - 0x107)
    1485	15 01 7d 00 01 00 00 00	if r1 == 0x1 goto +0x7d <LBB28_117>
    1486	bf a1 00 00 00 00 00 00	r1 = r10
    1487	07 01 00 00 f9 fe ff ff	r1 += -0x107
    1488	b7 02 00 00 01 00 00 00	r2 = 0x1
    1489	7b 2a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r2
    1490	bf a2 00 00 00 00 00 00	r2 = r10
    1491	07 02 00 00 90 ff ff ff	r2 += -0x70
    1492	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1493	b7 02 00 00 00 00 00 00	r2 = 0x0
    1494	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1495	b7 02 00 00 02 00 00 00	r2 = 0x2
    1496	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1497	18 02 00 00 20 3a 01 00 00 00 00 00 00 00 00 00	r2 = 0x13a20 ll
    1499	7b 2a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r2
    1500	18 02 00 00 10 09 00 00 00 00 00 00 00 00 00 00	r2 = 0x910 ll
    1502	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    1503	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    1504	bf a1 00 00 00 00 00 00	r1 = r10
    1505	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1506	bf a2 00 00 00 00 00 00	r2 = r10
    1507	07 02 00 00 00 ff ff ff	r2 += -0x100
    1508	85 10 00 00 37 10 00 00	call 0x1037 ; <alloc::fmt::format>
    1509	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    1510	79 a7 c8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x38)
    1511	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    1512	bf 71 00 00 00 00 00 00	r1 = r7
    1513	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1514	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB28_107>
    1515	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB28_107>
    1516	bf 71 00 00 00 00 00 00	r1 = r7
    1517	bf 82 00 00 00 00 00 00	r2 = r8
    1518	b7 03 00 00 01 00 00 00	r3 = 0x1
    1519	85 10 00 00 37 06 00 00	call 0x637 ; <__rust_dealloc>

0000000000002f80 <LBB28_107>
    1520	18 01 00 00 00 00 00 00 00 00 00 00 b0 c7 71 00	r1 = 0x71c7b000000000 ll
    1522	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1523	05 00 8f fd 00 00 00 00	goto -0x271 <LBB28_9>

0000000000002fa0 <LBB28_108>
    1524	79 a3 10 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xf0)
    1525	79 a2 08 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf8)
    1526	bf a1 00 00 00 00 00 00	r1 = r10
    1527	07 01 00 00 e0 fd ff ff	r1 += -0x220
    1528	85 10 00 00 9c 0c 00 00	call 0xc9c ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    1529	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1530	07 01 00 00 ff ff ff ff	r1 += -0x1

0000000000002fd8 <LBB28_109>
    1531	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    1532	05 00 86 fd 00 00 00 00	goto -0x27a <LBB28_9>

0000000000002fe8 <LBB28_110>
    1533	61 a2 1c ff 00 00 00 00	r2 = *(u32 *)(r10 - 0xe4)
    1534	63 2a fc fd 00 00 00 00	*(u32 *)(r10 - 0x204) = r2
    1535	79 a2 14 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xec)
    1536	7b 2a f4 fd 00 00 00 00	*(u64 *)(r10 - 0x20c) = r2
    1537	79 a2 0c ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf4)
    1538	7b 2a ec fd 00 00 00 00	*(u64 *)(r10 - 0x214) = r2
    1539	79 a2 04 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xfc)
    1540	7b 2a e4 fd 00 00 00 00	*(u64 *)(r10 - 0x21c) = r2
    1541	63 1a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r1
    1542	05 00 7c fd 00 00 00 00	goto -0x284 <LBB28_9>

0000000000003038 <LBB28_111>
    1543	7b 7a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r7
    1544	bf a1 00 00 00 00 00 00	r1 = r10
    1545	07 01 00 00 90 fd ff ff	r1 += -0x270
    1546	bf a7 00 00 00 00 00 00	r7 = r10
    1547	07 07 00 00 10 fe ff ff	r7 += -0x1f0
    1548	bf 72 00 00 00 00 00 00	r2 = r7
    1549	85 10 00 00 12 08 00 00	call 0x812 ; <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    1550	73 8a 57 fe 00 00 00 00	*(u8 *)(r10 - 0x1a9) = r8
    1551	bf a1 00 00 00 00 00 00	r1 = r10
    1552	07 01 00 00 80 fd ff ff	r1 += -0x280
    1553	bf 72 00 00 00 00 00 00	r2 = r7
    1554	85 10 00 00 0d 08 00 00	call 0x80d ; <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    1555	b7 01 00 00 01 00 00 00	r1 = 0x1
    1556	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1557	bf a1 00 00 00 00 00 00	r1 = r10
    1558	07 01 00 00 57 fe ff ff	r1 += -0x1a9
    1559	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1560	b7 01 00 00 09 00 00 00	r1 = 0x9
    1561	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1562	18 01 00 00 f5 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125f5 ll
    1564	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1565	79 a1 88 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x278)
    1566	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1567	79 a1 80 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x280)
    1568	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1569	bf a1 00 00 00 00 00 00	r1 = r10
    1570	07 01 00 00 00 ff ff ff	r1 += -0x100
    1571	85 10 00 00 d8 0d 00 00	call 0xdd8 ; <solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get>
    1572	bf a1 00 00 00 00 00 00	r1 = r10
    1573	07 01 00 00 0c ff ff ff	r1 += -0xf4
    1574	61 a8 08 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0xf8)
    1575	79 a2 00 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x100)
    1576	15 02 47 00 01 00 00 00	if r2 == 0x1 goto +0x47 <LBB28_120>
    1577	61 12 10 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x10)
    1578	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    1579	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1580	63 8a 78 fe 00 00 00 00	*(u32 *)(r10 - 0x188) = r8
    1581	7b 1a 7c fe 00 00 00 00	*(u64 *)(r10 - 0x184) = r1
    1582	7b 3a 84 fe 00 00 00 00	*(u64 *)(r10 - 0x17c) = r3
    1583	63 2a c0 fe 00 00 00 00	*(u32 *)(r10 - 0x140) = r2
    1584	63 2a 8c fe 00 00 00 00	*(u32 *)(r10 - 0x174) = r2
    1585	bf a1 00 00 00 00 00 00	r1 = r10
    1586	07 01 00 00 78 fe ff ff	r1 += -0x188
    1587	b7 02 00 00 4b 00 00 00	r2 = 0x4b
    1588	85 10 00 00 c4 0c 00 00	call 0xcc4 ; <solana_program::rent::Rent::minimum_balance>
    1589	bf 08 00 00 00 00 00 00	r8 = r0
    1590	79 a1 58 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a8)
    1591	25 08 01 00 01 00 00 00	if r8 > 0x1 goto +0x1 <LBB28_114>
    1592	b7 08 00 00 01 00 00 00	r8 = 0x1

00000000000031c8 <LBB28_114>
    1593	85 10 00 00 19 06 00 00	call 0x619 ; <solana_program::account_info::AccountInfo::lamports>
    1594	2d 08 01 01 00 00 00 00	if r8 > r0 goto +0x101 <LBB28_151>

00000000000031d8 <LBB28_115>
    1595	18 01 00 00 63 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12663 ll
    1597	b7 02 00 00 1f 00 00 00	r2 = 0x1f
    1598	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1599	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1600	79 72 30 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x30)
    1601	bf a1 00 00 00 00 00 00	r1 = r10
    1602	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1603	b7 03 00 00 4b 00 00 00	r3 = 0x4b
    1604	85 10 00 00 3d 0d 00 00	call 0xd3d ; <solana_program::system_instruction::allocate>
    1605	79 71 38 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x38)
    1606	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    1607	07 03 00 00 01 00 00 00	r3 += 0x1
    1608	25 03 60 00 01 00 00 00	if r3 > 0x1 goto +0x60 <LBB28_123>

0000000000003248 <LBB28_116>
    1609	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    1610	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003258 <LBB28_117>
    1611	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1612	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1613	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1614	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    1615	79 14 10 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x10)
    1616	79 11 18 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x18)
    1617	7b 1a e8 fe 00 00 00 00	*(u64 *)(r10 - 0x118) = r1
    1618	7b 4a e0 fe 00 00 00 00	*(u64 *)(r10 - 0x120) = r4
    1619	7b 3a d8 fe 00 00 00 00	*(u64 *)(r10 - 0x128) = r3
    1620	7b 2a d0 fe 00 00 00 00	*(u64 *)(r10 - 0x130) = r2
    1621	b7 01 00 00 02 00 00 00	r1 = 0x2
    1622	73 1a f9 fe 00 00 00 00	*(u8 *)(r10 - 0x107) = r1
    1623	bf a1 00 00 00 00 00 00	r1 = r10
    1624	07 01 00 00 00 ff ff ff	r1 += -0x100
    1625	bf 82 00 00 00 00 00 00	r2 = r8
    1626	85 10 00 00 22 06 00 00	call 0x622 ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1627	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1628	15 01 24 fe 01 00 00 00	if r1 == 0x1 goto -0x1dc <LBB28_58>
    1629	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1630	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1631	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1632	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1633	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1634	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    1635	bf a1 00 00 00 00 00 00	r1 = r10
    1636	07 01 00 00 b0 fd ff ff	r1 += -0x250
    1637	bf a2 00 00 00 00 00 00	r2 = r10
    1638	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1639	bf a3 00 00 00 00 00 00	r3 = r10
    1640	07 03 00 00 c8 ff ff ff	r3 += -0x38
    1641	85 10 00 00 ac fb ff ff	call -0x454 ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1642	79 a2 b0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x250)
    1643	bf 21 00 00 00 00 00 00	r1 = r2
    1644	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1645	15 01 1b 01 04 00 00 00	if r1 == 0x4 goto +0x11b <LBB28_162>
    1646	79 a3 b8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x248)
    1647	05 00 d4 02 00 00 00 00	goto +0x2d4 <LBB28_251>

0000000000003380 <LBB28_120>
    1648	61 12 18 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x18)
    1649	79 13 10 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x10)
    1650	79 14 08 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x8)
    1651	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1652	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    1653	7b 4a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r4
    1654	7b 3a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r3
    1655	63 2a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r2
    1656	bf 81 00 00 00 00 00 00	r1 = r8
    1657	79 a7 58 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2a8)
    1658	15 01 01 00 14 00 00 00	if r1 == 0x14 goto +0x1 <LBB28_121>
    1659	05 00 bd 02 00 00 00 00	goto +0x2bd <LBB28_249>

00000000000033e0 <LBB28_121>
    1660	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1661	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1662	79 12 18 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x18)
    1663	7b 2a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r2
    1664	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    1665	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1666	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1667	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1668	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1669	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1670	bf a1 00 00 00 00 00 00	r1 = r10
    1671	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1672	b7 02 00 00 00 00 00 00	r2 = 0x0
    1673	b7 03 00 00 4a 00 00 00	r3 = 0x4a
    1674	85 10 00 00 67 1c 00 00	call 0x1c67 ; <memset>
    1675	b7 01 00 00 01 00 00 00	r1 = 0x1
    1676	6b 1a 49 ff 00 00 00 00	*(u16 *)(r10 - 0xb7) = r1
    1677	79 a1 d0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x130)
    1678	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1679	79 a1 d8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x128)
    1680	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1681	79 a1 e0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x120)
    1682	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    1683	79 a1 e8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x118)
    1684	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    1685	79 a1 f0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x110)
    1686	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    1687	71 a1 f8 fe 00 00 00 00	r1 = *(u8 *)(r10 - 0x108)
    1688	73 1a 48 ff 00 00 00 00	*(u8 *)(r10 - 0xb8) = r1
    1689	bf a1 00 00 00 00 00 00	r1 = r10
    1690	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1691	bf 72 00 00 00 00 00 00	r2 = r7
    1692	85 10 00 00 e0 05 00 00	call 0x5e0 ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1693	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1694	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB28_122>
    1695	05 00 d7 00 00 00 00 00	goto +0xd7 <LBB28_161>

0000000000003500 <LBB28_122>
    1696	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1697	7b 1a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r1
    1698	79 a1 d0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x130)
    1699	7b 1a f8 fd 00 00 00 00	*(u64 *)(r10 - 0x208) = r1
    1700	79 a1 c0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x140)
    1701	7b 1a e8 fd 00 00 00 00	*(u64 *)(r10 - 0x218) = r1
    1702	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    1703	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1704	05 00 da fc 00 00 00 00	goto -0x326 <LBB28_9>

0000000000003548 <LBB28_123>
    1705	71 74 59 00 00 00 00 00	r4 = *(u8 *)(r7 + 0x59)
    1706	71 72 58 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x58)
    1707	79 70 30 00 00 00 00 00	r0 = *(u64 *)(r7 + 0x30)
    1708	7b 31 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r3
    1709	79 73 40 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x40)
    1710	79 35 00 00 00 00 00 00	r5 = *(u64 *)(r3 + 0x0)
    1711	07 05 00 00 01 00 00 00	r5 += 0x1
    1712	25 05 01 00 01 00 00 00	if r5 > 0x1 goto +0x1 <LBB28_125>
    1713	05 00 97 ff 00 00 00 00	goto -0x69 <LBB28_116>

0000000000003590 <LBB28_125>
    1714	7b 53 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r5
    1715	b7 07 00 00 01 00 00 00	r7 = 0x1
    1716	b7 05 00 00 01 00 00 00	r5 = 0x1
    1717	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB28_127>
    1718	b7 05 00 00 00 00 00 00	r5 = 0x0

00000000000035b8 <LBB28_127>
    1719	b7 04 00 00 01 00 00 00	r4 = 0x1
    1720	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_129>
    1721	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000035d0 <LBB28_129>
    1722	7b 4a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r4
    1723	7b 5a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r5
    1724	79 a2 68 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x298)
    1725	71 22 5a 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x5a)
    1726	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_131>
    1727	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000003600 <LBB28_131>
    1728	7b 7a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r7
    1729	7b 0a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r0
    1730	7b 1a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r1
    1731	79 a5 68 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x298)
    1732	79 58 68 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x68)
    1733	79 84 00 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x0)
    1734	07 04 00 00 01 00 00 00	r4 += 0x1
    1735	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB28_133>
    1736	05 00 80 ff 00 00 00 00	goto -0x80 <LBB28_116>

0000000000003648 <LBB28_133>
    1737	71 51 89 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x89)
    1738	7b 1a 18 fd 00 00 00 00	*(u64 *)(r10 - 0x2e8) = r1
    1739	71 51 88 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x88)
    1740	7b 1a 10 fd 00 00 00 00	*(u64 *)(r10 - 0x2f0) = r1
    1741	79 51 60 00 00 00 00 00	r1 = *(u64 *)(r5 + 0x60)
    1742	79 52 50 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x50)
    1743	79 57 48 00 00 00 00 00	r7 = *(u64 *)(r5 + 0x48)
    1744	7b 48 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r4
    1745	79 50 70 00 00 00 00 00	r0 = *(u64 *)(r5 + 0x70)
    1746	79 04 00 00 00 00 00 00	r4 = *(u64 *)(r0 + 0x0)
    1747	07 04 00 00 01 00 00 00	r4 += 0x1
    1748	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB28_135>
    1749	05 00 73 ff 00 00 00 00	goto -0x8d <LBB28_116>

00000000000036b0 <LBB28_135>
    1750	7b 40 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r4
    1751	79 54 78 00 00 00 00 00	r4 = *(u64 *)(r5 + 0x78)
    1752	7b 4a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r4
    1753	79 54 80 00 00 00 00 00	r4 = *(u64 *)(r5 + 0x80)
    1754	7b 4a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r4
    1755	71 54 8a 00 00 00 00 00	r4 = *(u8 *)(r5 + 0x8a)
    1756	7b 0a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r0
    1757	7b 8a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r8
    1758	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    1759	79 a5 28 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2d8)
    1760	73 5a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r5
    1761	79 a5 30 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2d0)
    1762	73 5a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r5
    1763	79 a5 20 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2e0)
    1764	73 5a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r5
    1765	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1766	7b 7a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r7
    1767	7b 3a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r3
    1768	79 a2 40 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2c0)
    1769	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1770	79 a2 38 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2c8)
    1771	7b 2a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r2
    1772	79 a2 10 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2f0)
    1773	b7 03 00 00 01 00 00 00	r3 = 0x1
    1774	b7 07 00 00 01 00 00 00	r7 = 0x1
    1775	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB28_137>
    1776	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000003788 <LBB28_137>
    1777	b7 04 00 00 01 00 00 00	r4 = 0x1
    1778	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_139>
    1779	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000037a0 <LBB28_139>
    1780	7b 0a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r0
    1781	7b 1a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r1
    1782	7b 8a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r8
    1783	79 a1 18 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2e8)
    1784	bf 12 00 00 00 00 00 00	r2 = r1
    1785	b7 01 00 00 01 00 00 00	r1 = 0x1
    1786	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_141>
    1787	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000037e0 <LBB28_141>
    1788	7b 1a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r1
    1789	73 1a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r1
    1790	7b 4a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r4
    1791	73 4a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r4
    1792	79 a1 48 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b8)
    1793	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r1
    1794	79 a1 50 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b0)
    1795	7b 1a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r1
    1796	73 7a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r7
    1797	b7 02 00 00 03 00 00 00	r2 = 0x3
    1798	7b 2a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r2
    1799	bf a2 00 00 00 00 00 00	r2 = r10
    1800	07 02 00 00 c8 ff ff ff	r2 += -0x38
    1801	7b 2a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r2
    1802	bf a2 00 00 00 00 00 00	r2 = r10
    1803	07 02 00 00 98 fe ff ff	r2 += -0x168
    1804	7b 2a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r2
    1805	7b 3a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r3
    1806	bf a1 00 00 00 00 00 00	r1 = r10
    1807	07 01 00 00 90 ff ff ff	r1 += -0x70
    1808	bf a2 00 00 00 00 00 00	r2 = r10
    1809	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1810	bf a3 00 00 00 00 00 00	r3 = r10
    1811	07 03 00 00 00 ff ff ff	r3 += -0x100
    1812	bf a5 00 00 00 00 00 00	r5 = r10
    1813	b7 04 00 00 02 00 00 00	r4 = 0x2
    1814	85 10 00 00 37 0a 00 00	call 0xa37 ; <solana_program::program::invoke_signed>
    1815	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    1816	15 08 01 00 14 00 00 00	if r8 == 0x14 goto +0x1 <LBB28_142>
    1817	05 00 75 00 00 00 00 00	goto +0x75 <LBB28_163>

00000000000038d0 <LBB28_142>
    1818	bf a1 00 00 00 00 00 00	r1 = r10
    1819	07 01 00 00 00 ff ff ff	r1 += -0x100
    1820	85 10 00 00 0f f9 ff ff	call -0x6f1 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    1821	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1822	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB28_146>
    1823	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1824	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB28_146>
    1825	27 02 00 00 22 00 00 00	r2 *= 0x22
    1826	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB28_146>
    1827	b7 03 00 00 01 00 00 00	r3 = 0x1
    1828	85 10 00 00 02 05 00 00	call 0x502 ; <__rust_dealloc>

0000000000003928 <LBB28_146>
    1829	7b 7a 18 fd 00 00 00 00	*(u64 *)(r10 - 0x2e8) = r7
    1830	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    1831	79 a8 60 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x2a0)
    1832	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB28_149>
    1833	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1834	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB28_149>
    1835	b7 03 00 00 01 00 00 00	r3 = 0x1
    1836	85 10 00 00 fa 04 00 00	call 0x4fa ; <__rust_dealloc>

0000000000003968 <LBB28_149>
    1837	18 01 00 00 82 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12682 ll
    1839	b7 02 00 00 29 00 00 00	r2 = 0x29
    1840	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1841	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1842	79 72 30 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x30)
    1843	bf a1 00 00 00 00 00 00	r1 = r10
    1844	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1845	bf 83 00 00 00 00 00 00	r3 = r8
    1846	85 10 00 00 e1 0b 00 00	call 0xbe1 ; <solana_program::system_instruction::assign>
    1847	79 71 38 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x38)
    1848	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    1849	07 03 00 00 01 00 00 00	r3 += 0x1
    1850	25 03 6e 00 01 00 00 00	if r3 > 0x1 goto +0x6e <LBB28_170>
    1851	05 00 0d ff 00 00 00 00	goto -0xf3 <LBB28_116>

00000000000039e0 <LBB28_151>
    1852	bf 83 00 00 00 00 00 00	r3 = r8
    1853	1f 03 00 00 00 00 00 00	r3 -= r0
    1854	b7 01 00 00 00 00 00 00	r1 = 0x0
    1855	b7 02 00 00 01 00 00 00	r2 = 0x1
    1856	b7 04 00 00 01 00 00 00	r4 = 0x1
    1857	2d 83 01 00 00 00 00 00	if r3 > r8 goto +0x1 <LBB28_153>
    1858	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003a18 <LBB28_153>
    1859	b7 05 00 00 00 00 00 00	r5 = 0x0
    1860	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB28_155>
    1861	bf 35 00 00 00 00 00 00	r5 = r3

0000000000003a30 <LBB28_155>
    1862	7b 5a 90 fe 00 00 00 00	*(u64 *)(r10 - 0x170) = r5
    1863	7b 2a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r2
    1864	bf a2 00 00 00 00 00 00	r2 = r10
    1865	07 02 00 00 98 fe ff ff	r2 += -0x168
    1866	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1867	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1868	b7 01 00 00 02 00 00 00	r1 = 0x2
    1869	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1870	18 01 00 00 a0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13aa0 ll
    1872	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1873	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    1875	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    1876	bf a1 00 00 00 00 00 00	r1 = r10
    1877	07 01 00 00 90 fe ff ff	r1 += -0x170
    1878	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    1879	bf a1 00 00 00 00 00 00	r1 = r10
    1880	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1881	bf a2 00 00 00 00 00 00	r2 = r10
    1882	07 02 00 00 00 ff ff ff	r2 += -0x100
    1883	85 10 00 00 c0 0e 00 00	call 0xec0 ; <alloc::fmt::format>
    1884	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1885	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1886	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1887	bf 71 00 00 00 00 00 00	r1 = r7
    1888	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1889	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB28_158>
    1890	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB28_158>
    1891	bf 71 00 00 00 00 00 00	r1 = r7
    1892	bf 82 00 00 00 00 00 00	r2 = r8
    1893	b7 03 00 00 01 00 00 00	r3 = 0x1
    1894	85 10 00 00 c0 04 00 00	call 0x4c0 ; <__rust_dealloc>

0000000000003b38 <LBB28_158>
    1895	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1896	bf 71 00 00 00 00 00 00	r1 = r7
    1897	85 10 00 00 e9 04 00 00	call 0x4e9 ; <solana_program::account_info::AccountInfo::lamports>
    1898	79 a4 90 fe 00 00 00 00	r4 = *(u64 *)(r10 - 0x170)
    1899	2d 04 a8 00 00 00 00 00	if r4 > r0 goto +0xa8 <LBB28_190>
    1900	79 78 30 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x30)
    1901	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    1902	bf a1 00 00 00 00 00 00	r1 = r10
    1903	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1904	bf 83 00 00 00 00 00 00	r3 = r8
    1905	85 10 00 00 d9 0b 00 00	call 0xbd9 ; <solana_program::system_instruction::transfer>
    1906	79 75 08 00 00 00 00 00	r5 = *(u64 *)(r7 + 0x8)
    1907	79 53 00 00 00 00 00 00	r3 = *(u64 *)(r5 + 0x0)
    1908	07 03 00 00 01 00 00 00	r3 += 0x1
    1909	25 03 c8 00 01 00 00 00	if r3 > 0x1 goto +0xc8 <LBB28_194>
    1910	05 00 d2 fe 00 00 00 00	goto -0x12e <LBB28_116>

0000000000003bb8 <LBB28_161>
    1911	79 a7 c0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x140)
    1912	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    1913	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1914	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1915	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    1916	7b 2a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r2
    1917	bf a1 00 00 00 00 00 00	r1 = r10
    1918	07 01 00 00 70 fd ff ff	r1 += -0x290
    1919	bf a2 00 00 00 00 00 00	r2 = r10
    1920	07 02 00 00 00 ff ff ff	r2 += -0x100
    1921	bf a3 00 00 00 00 00 00	r3 = r10
    1922	07 03 00 00 90 ff ff ff	r3 += -0x70
    1923	85 10 00 00 92 fa ff ff	call -0x56e ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1924	79 a2 70 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x290)
    1925	bf 21 00 00 00 00 00 00	r1 = r2
    1926	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1927	15 01 01 00 04 00 00 00	if r1 == 0x4 goto +0x1 <LBB28_162>
    1928	05 00 ba 01 00 00 00 00	goto +0x1ba <LBB28_250>

0000000000003c48 <LBB28_162>
    1929	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1930	07 01 00 00 01 00 00 00	r1 += 0x1
    1931	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    1932	b7 01 00 00 14 00 00 00	r1 = 0x14
    1933	63 1a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r1
    1934	05 00 f4 fb 00 00 00 00	goto -0x40c <LBB28_9>

0000000000003c78 <LBB28_163>
    1935	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    1936	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    1937	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    1938	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    1939	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    1940	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    1941	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    1942	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    1943	bf a1 00 00 00 00 00 00	r1 = r10
    1944	07 01 00 00 00 ff ff ff	r1 += -0x100
    1945	85 10 00 00 92 f8 ff ff	call -0x76e ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    1946	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1947	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB28_167>
    1948	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1949	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB28_167>
    1950	27 02 00 00 22 00 00 00	r2 *= 0x22
    1951	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB28_167>
    1952	b7 03 00 00 01 00 00 00	r3 = 0x1
    1953	85 10 00 00 85 04 00 00	call 0x485 ; <__rust_dealloc>

0000000000003d10 <LBB28_167>
    1954	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    1955	15 02 95 01 00 00 00 00	if r2 == 0x0 goto +0x195 <LBB28_249>
    1956	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1957	15 01 93 01 00 00 00 00	if r1 == 0x0 goto +0x193 <LBB28_249>

0000000000003d30 <LBB28_169>
    1958	b7 03 00 00 01 00 00 00	r3 = 0x1
    1959	85 10 00 00 7f 04 00 00	call 0x47f ; <__rust_dealloc>
    1960	05 00 90 01 00 00 00 00	goto +0x190 <LBB28_249>

0000000000003d48 <LBB28_170>
    1961	71 74 59 00 00 00 00 00	r4 = *(u8 *)(r7 + 0x59)
    1962	71 72 58 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x58)
    1963	79 78 30 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x30)
    1964	7b 31 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r3
    1965	79 73 40 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x40)
    1966	79 35 00 00 00 00 00 00	r5 = *(u64 *)(r3 + 0x0)
    1967	07 05 00 00 01 00 00 00	r5 += 0x1
    1968	25 05 01 00 01 00 00 00	if r5 > 0x1 goto +0x1 <LBB28_172>
    1969	05 00 97 fe 00 00 00 00	goto -0x169 <LBB28_116>

0000000000003d90 <LBB28_172>
    1970	7b 53 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r5
    1971	bf 40 00 00 00 00 00 00	r0 = r4
    1972	b7 05 00 00 01 00 00 00	r5 = 0x1
    1973	b7 04 00 00 01 00 00 00	r4 = 0x1
    1974	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB28_174>
    1975	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003dc0 <LBB28_174>
    1976	b7 00 00 00 01 00 00 00	r0 = 0x1
    1977	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_176>
    1978	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000003dd8 <LBB28_176>
    1979	7b 0a 08 fd 00 00 00 00	*(u64 *)(r10 - 0x2f8) = r0
    1980	7b 4a 10 fd 00 00 00 00	*(u64 *)(r10 - 0x2f0) = r4
    1981	79 a2 68 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x298)
    1982	71 22 5a 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x5a)
    1983	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_178>
    1984	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000003e08 <LBB28_178>
    1985	bf 50 00 00 00 00 00 00	r0 = r5
    1986	7b 8a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r8
    1987	79 a4 40 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2c0)
    1988	79 47 00 00 00 00 00 00	r7 = *(u64 *)(r4 + 0x0)
    1989	07 07 00 00 01 00 00 00	r7 += 0x1
    1990	25 07 01 00 01 00 00 00	if r7 > 0x1 goto +0x1 <LBB28_180>
    1991	05 00 81 fe 00 00 00 00	goto -0x17f <LBB28_116>

0000000000003e40 <LBB28_180>
    1992	79 a8 68 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x298)
    1993	79 82 50 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x50)
    1994	79 88 48 00 00 00 00 00	r8 = *(u64 *)(r8 + 0x48)
    1995	7b 74 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r7
    1996	79 a5 38 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2c8)
    1997	79 57 00 00 00 00 00 00	r7 = *(u64 *)(r5 + 0x0)
    1998	07 07 00 00 01 00 00 00	r7 += 0x1
    1999	25 07 01 00 01 00 00 00	if r7 > 0x1 goto +0x1 <LBB28_182>
    2000	05 00 78 fe 00 00 00 00	goto -0x188 <LBB28_116>

0000000000003e88 <LBB28_182>
    2001	7b 75 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r7
    2002	79 a7 18 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2e8)
    2003	73 7a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r7
    2004	79 a7 20 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2e0)
    2005	73 7a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r7
    2006	79 a7 28 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2d8)
    2007	73 7a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r7
    2008	79 a7 48 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2b8)
    2009	7b 7a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r7
    2010	79 a7 50 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2b0)
    2011	7b 7a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r7
    2012	7b 5a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r5
    2013	7b 4a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r4
    2014	79 a4 30 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2d0)
    2015	7b 4a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r4
    2016	73 0a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r0
    2017	79 a4 10 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2f0)
    2018	73 4a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r4
    2019	79 a4 08 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2f8)
    2020	73 4a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r4
    2021	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    2022	7b 8a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r8
    2023	7b 3a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r3
    2024	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2025	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    2026	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2027	b7 01 00 00 03 00 00 00	r1 = 0x3
    2028	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    2029	bf a1 00 00 00 00 00 00	r1 = r10
    2030	07 01 00 00 c8 ff ff ff	r1 += -0x38
    2031	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    2032	bf a1 00 00 00 00 00 00	r1 = r10
    2033	07 01 00 00 98 fe ff ff	r1 += -0x168
    2034	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    2035	b7 01 00 00 01 00 00 00	r1 = 0x1
    2036	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    2037	bf a1 00 00 00 00 00 00	r1 = r10
    2038	07 01 00 00 90 ff ff ff	r1 += -0x70
    2039	bf a2 00 00 00 00 00 00	r2 = r10
    2040	07 02 00 00 b0 fe ff ff	r2 += -0x150
    2041	bf a3 00 00 00 00 00 00	r3 = r10
    2042	07 03 00 00 00 ff ff ff	r3 += -0x100
    2043	bf a5 00 00 00 00 00 00	r5 = r10
    2044	b7 04 00 00 02 00 00 00	r4 = 0x2
    2045	85 10 00 00 50 09 00 00	call 0x950 ; <solana_program::program::invoke_signed>
    2046	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    2047	15 08 01 00 14 00 00 00	if r8 == 0x14 goto +0x1 <LBB28_183>
    2048	05 00 49 01 00 00 00 00	goto +0x149 <LBB28_252>

0000000000004008 <LBB28_183>
    2049	bf a1 00 00 00 00 00 00	r1 = r10
    2050	07 01 00 00 00 ff ff ff	r1 += -0x100
    2051	85 10 00 00 28 f8 ff ff	call -0x7d8 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    2052	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2053	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB28_187>
    2054	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2055	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB28_187>
    2056	27 02 00 00 22 00 00 00	r2 *= 0x22
    2057	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB28_187>
    2058	b7 03 00 00 01 00 00 00	r3 = 0x1
    2059	85 10 00 00 1b 04 00 00	call 0x41b ; <__rust_dealloc>

0000000000004060 <LBB28_187>
    2060	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2061	79 a7 58 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2a8)
    2062	15 02 6d fe 00 00 00 00	if r2 == 0x0 goto -0x193 <LBB28_121>
    2063	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2064	15 01 6b fe 00 00 00 00	if r1 == 0x0 goto -0x195 <LBB28_121>
    2065	b7 03 00 00 01 00 00 00	r3 = 0x1
    2066	85 10 00 00 14 04 00 00	call 0x414 ; <__rust_dealloc>
    2067	05 00 68 fe 00 00 00 00	goto -0x198 <LBB28_121>

00000000000040a0 <LBB28_190>
    2068	bf 71 00 00 00 00 00 00	r1 = r7
    2069	85 10 00 00 3d 04 00 00	call 0x43d ; <solana_program::account_info::AccountInfo::lamports>
    2070	7b 0a a8 fe 00 00 00 00	*(u64 *)(r10 - 0x158) = r0
    2071	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    2073	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    2074	bf a1 00 00 00 00 00 00	r1 = r10
    2075	07 01 00 00 a8 fe ff ff	r1 += -0x158
    2076	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    2077	b7 01 00 00 01 00 00 00	r1 = 0x1
    2078	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    2079	bf a1 00 00 00 00 00 00	r1 = r10
    2080	07 01 00 00 98 fe ff ff	r1 += -0x168
    2081	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    2082	b7 08 00 00 00 00 00 00	r8 = 0x0
    2083	7b 8a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r8
    2084	b7 01 00 00 02 00 00 00	r1 = 0x2
    2085	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2086	18 01 00 00 c0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ac0 ll
    2088	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2089	bf a1 00 00 00 00 00 00	r1 = r10
    2090	07 01 00 00 b0 fe ff ff	r1 += -0x150
    2091	bf a2 00 00 00 00 00 00	r2 = r10
    2092	07 02 00 00 00 ff ff ff	r2 += -0x100
    2093	85 10 00 00 ee 0d 00 00	call 0xdee ; <alloc::fmt::format>
    2094	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    2095	7b 1a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r1
    2096	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    2097	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    2098	bf 71 00 00 00 00 00 00	r1 = r7
    2099	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    2100	79 a2 60 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a0)
    2101	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB28_193>
    2102	15 07 03 00 00 00 00 00	if r7 == 0x0 goto +0x3 <LBB28_193>
    2103	bf 71 00 00 00 00 00 00	r1 = r7
    2104	b7 03 00 00 01 00 00 00	r3 = 0x1
    2105	85 10 00 00 ed 03 00 00	call 0x3ed ; <__rust_dealloc>

00000000000041d0 <LBB28_193>
    2106	18 01 00 00 00 00 00 00 00 00 00 00 ae c7 71 00	r1 = 0x71c7ae00000000 ll
    2108	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    2109	05 00 f3 00 00 00 00 00	goto +0xf3 <LBB28_248>

00000000000041f0 <LBB28_194>
    2110	71 72 29 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x29)
    2111	71 71 28 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x28)
    2112	79 70 00 00 00 00 00 00	r0 = *(u64 *)(r7 + 0x0)
    2113	7b 35 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r3
    2114	79 74 10 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x10)
    2115	79 43 00 00 00 00 00 00	r3 = *(u64 *)(r4 + 0x0)
    2116	07 03 00 00 01 00 00 00	r3 += 0x1
    2117	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB28_196>
    2118	05 00 02 fe 00 00 00 00	goto -0x1fe <LBB28_116>

0000000000004238 <LBB28_196>
    2119	7b 4a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r4
    2120	7b 34 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r3
    2121	b7 04 00 00 01 00 00 00	r4 = 0x1
    2122	b7 03 00 00 01 00 00 00	r3 = 0x1
    2123	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_198>
    2124	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000004268 <LBB28_198>
    2125	b7 02 00 00 01 00 00 00	r2 = 0x1
    2126	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB28_200>
    2127	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000004280 <LBB28_200>
    2128	7b 0a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r0
    2129	7b 2a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r2
    2130	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    2131	71 11 2a 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x2a)
    2132	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB28_202>
    2133	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000042b0 <LBB28_202>
    2134	bf 87 00 00 00 00 00 00	r7 = r8
    2135	7b 4a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r4
    2136	7b 3a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r3
    2137	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    2138	79 10 38 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x38)
    2139	79 02 00 00 00 00 00 00	r2 = *(u64 *)(r0 + 0x0)
    2140	07 02 00 00 01 00 00 00	r2 += 0x1
    2141	25 02 01 00 01 00 00 00	if r2 > 0x1 goto +0x1 <LBB28_204>
    2142	05 00 ea fd 00 00 00 00	goto -0x216 <LBB28_116>

00000000000042f8 <LBB28_204>
    2143	71 13 59 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x59)
    2144	bf 14 00 00 00 00 00 00	r4 = r1
    2145	71 41 58 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x58)
    2146	79 48 20 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x20)
    2147	7b 8a 18 fd 00 00 00 00	*(u64 *)(r10 - 0x2e8) = r8
    2148	79 48 18 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x18)
    2149	7b 8a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r8
    2150	7b 0a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r0
    2151	7b 20 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r2
    2152	79 42 40 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x40)
    2153	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2154	07 04 00 00 01 00 00 00	r4 += 0x1
    2155	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB28_206>
    2156	05 00 dc fd 00 00 00 00	goto -0x224 <LBB28_116>

0000000000004368 <LBB28_206>
    2157	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2158	b7 00 00 00 01 00 00 00	r0 = 0x1
    2159	b7 08 00 00 01 00 00 00	r8 = 0x1
    2160	bf 74 00 00 00 00 00 00	r4 = r7
    2161	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB28_208>
    2162	b7 08 00 00 00 00 00 00	r8 = 0x0

0000000000004398 <LBB28_208>
    2163	b7 07 00 00 01 00 00 00	r7 = 0x1
    2164	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB28_210>
    2165	b7 07 00 00 00 00 00 00	r7 = 0x0

00000000000043b0 <LBB28_210>
    2166	79 a1 50 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b0)
    2167	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    2168	71 11 5a 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x5a)
    2169	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB28_212>
    2170	b7 00 00 00 00 00 00 00	r0 = 0x0

00000000000043d8 <LBB28_212>
    2171	7b 0a 08 fd 00 00 00 00	*(u64 *)(r10 - 0x2f8) = r0
    2172	7b 5a 10 fd 00 00 00 00	*(u64 *)(r10 - 0x2f0) = r5
    2173	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    2174	79 10 68 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x68)
    2175	79 03 00 00 00 00 00 00	r3 = *(u64 *)(r0 + 0x0)
    2176	07 03 00 00 01 00 00 00	r3 += 0x1
    2177	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB28_214>
    2178	05 00 c6 fd 00 00 00 00	goto -0x23a <LBB28_116>

0000000000004418 <LBB28_214>
    2179	7b 8a f8 fc 00 00 00 00	*(u64 *)(r10 - 0x308) = r8
    2180	7b 4a 00 fd 00 00 00 00	*(u64 *)(r10 - 0x300) = r4
    2181	71 14 89 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x89)
    2182	bf 15 00 00 00 00 00 00	r5 = r1
    2183	71 51 88 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x88)
    2184	79 58 60 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x60)
    2185	7b 8a e0 fc 00 00 00 00	*(u64 *)(r10 - 0x320) = r8
    2186	79 58 50 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x50)
    2187	7b 8a e8 fc 00 00 00 00	*(u64 *)(r10 - 0x318) = r8
    2188	79 58 48 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x48)
    2189	7b 8a f0 fc 00 00 00 00	*(u64 *)(r10 - 0x310) = r8
    2190	7b 30 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r3
    2191	79 55 70 00 00 00 00 00	r5 = *(u64 *)(r5 + 0x70)
    2192	79 53 00 00 00 00 00 00	r3 = *(u64 *)(r5 + 0x0)
    2193	07 03 00 00 01 00 00 00	r3 += 0x1
    2194	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB28_216>
    2195	05 00 b5 fd 00 00 00 00	goto -0x24b <LBB28_116>

00000000000044a0 <LBB28_216>
    2196	7b 2a d8 fc 00 00 00 00	*(u64 *)(r10 - 0x328) = r2
    2197	7b 35 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r3
    2198	bf 48 00 00 00 00 00 00	r8 = r4
    2199	bf 13 00 00 00 00 00 00	r3 = r1
    2200	b7 04 00 00 01 00 00 00	r4 = 0x1
    2201	b7 01 00 00 01 00 00 00	r1 = 0x1
    2202	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB28_218>
    2203	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000044e0 <LBB28_218>
    2204	bf 72 00 00 00 00 00 00	r2 = r7
    2205	79 a3 48 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x2b8)
    2206	b7 03 00 00 01 00 00 00	r3 = 0x1
    2207	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB28_220>
    2208	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000004508 <LBB28_220>
    2209	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    2210	71 78 8a 00 00 00 00 00	r8 = *(u8 *)(r7 + 0x8a)
    2211	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB28_222>
    2212	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000004528 <LBB28_222>
    2213	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    2214	79 78 78 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x78)
    2215	79 77 80 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x80)
    2216	73 3a 89 ff 00 00 00 00	*(u8 *)(r10 - 0x77) = r3
    2217	73 1a 88 ff 00 00 00 00	*(u8 *)(r10 - 0x78) = r1
    2218	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    2219	7b 8a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r8
    2220	7b 5a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r5
    2221	7b 0a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r0
    2222	79 a1 e0 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x320)
    2223	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    2224	79 a1 08 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2f8)
    2225	73 1a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r1
    2226	79 a1 f8 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x308)
    2227	73 1a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r1
    2228	73 2a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r2
    2229	79 a1 e8 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x318)
    2230	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r1
    2231	79 a1 f0 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x310)
    2232	7b 1a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r1
    2233	79 a1 d8 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x328)
    2234	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    2235	79 a1 28 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2d8)
    2236	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    2237	79 a1 00 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x300)
    2238	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    2239	79 a1 38 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2c8)
    2240	73 1a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r1
    2241	79 a1 40 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2c0)
    2242	73 1a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r1
    2243	79 a1 30 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2d0)
    2244	73 1a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r1
    2245	79 a1 18 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2e8)
    2246	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    2247	79 a1 20 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2e0)
    2248	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    2249	79 a1 48 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b8)
    2250	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    2251	79 a1 10 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2f0)
    2252	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2253	79 a1 50 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b0)
    2254	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2255	73 4a 8a ff 00 00 00 00	*(u8 *)(r10 - 0x76) = r4
    2256	bf a1 00 00 00 00 00 00	r1 = r10
    2257	07 01 00 00 90 ff ff ff	r1 += -0x70
    2258	bf a2 00 00 00 00 00 00	r2 = r10
    2259	07 02 00 00 b0 fe ff ff	r2 += -0x150
    2260	bf a3 00 00 00 00 00 00	r3 = r10
    2261	07 03 00 00 00 ff ff ff	r3 += -0x100
    2262	b7 04 00 00 03 00 00 00	r4 = 0x3
    2263	85 10 00 00 6e 08 00 00	call 0x86e ; <solana_program::program::invoke>
    2264	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    2265	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2266	07 02 00 00 ff ff ff ff	r2 += -0x1
    2267	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2268	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_225>
    2269	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2270	07 02 00 00 ff ff ff ff	r2 += -0x1
    2271	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2272	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_225>
    2273	b7 02 00 00 20 00 00 00	r2 = 0x20
    2274	b7 03 00 00 08 00 00 00	r3 = 0x8
    2275	85 10 00 00 43 03 00 00	call 0x343 ; <__rust_dealloc>

0000000000004720 <LBB28_225>
    2276	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    2277	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2278	07 02 00 00 ff ff ff ff	r2 += -0x1
    2279	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2280	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_228>
    2281	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2282	07 02 00 00 ff ff ff ff	r2 += -0x1
    2283	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2284	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_228>
    2285	b7 02 00 00 28 00 00 00	r2 = 0x28
    2286	b7 03 00 00 08 00 00 00	r3 = 0x8
    2287	85 10 00 00 37 03 00 00	call 0x337 ; <__rust_dealloc>

0000000000004780 <LBB28_228>
    2288	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc8)
    2289	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2290	07 02 00 00 ff ff ff ff	r2 += -0x1
    2291	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2292	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_231>
    2293	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2294	07 02 00 00 ff ff ff ff	r2 += -0x1
    2295	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2296	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_231>
    2297	b7 02 00 00 20 00 00 00	r2 = 0x20
    2298	b7 03 00 00 08 00 00 00	r3 = 0x8
    2299	85 10 00 00 2b 03 00 00	call 0x32b ; <__rust_dealloc>

00000000000047e0 <LBB28_231>
    2300	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
    2301	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2302	07 02 00 00 ff ff ff ff	r2 += -0x1
    2303	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2304	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_234>
    2305	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2306	07 02 00 00 ff ff ff ff	r2 += -0x1
    2307	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2308	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_234>
    2309	b7 02 00 00 28 00 00 00	r2 = 0x28
    2310	b7 03 00 00 08 00 00 00	r3 = 0x8
    2311	85 10 00 00 1f 03 00 00	call 0x31f ; <__rust_dealloc>

0000000000004840 <LBB28_234>
    2312	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    2313	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2314	07 02 00 00 ff ff ff ff	r2 += -0x1
    2315	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2316	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_237>
    2317	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2318	07 02 00 00 ff ff ff ff	r2 += -0x1
    2319	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2320	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_237>
    2321	b7 02 00 00 20 00 00 00	r2 = 0x20
    2322	b7 03 00 00 08 00 00 00	r3 = 0x8
    2323	85 10 00 00 13 03 00 00	call 0x313 ; <__rust_dealloc>

00000000000048a0 <LBB28_237>
    2324	79 a1 70 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x90)
    2325	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2326	07 02 00 00 ff ff ff ff	r2 += -0x1
    2327	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2328	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_240>
    2329	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2330	07 02 00 00 ff ff ff ff	r2 += -0x1
    2331	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2332	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_240>
    2333	b7 02 00 00 28 00 00 00	r2 = 0x28
    2334	b7 03 00 00 08 00 00 00	r3 = 0x8
    2335	85 10 00 00 07 03 00 00	call 0x307 ; <__rust_dealloc>

0000000000004900 <LBB28_240>
    2336	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2337	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB28_244>
    2338	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2339	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB28_244>
    2340	27 02 00 00 22 00 00 00	r2 *= 0x22
    2341	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB28_244>
    2342	b7 03 00 00 01 00 00 00	r3 = 0x1
    2343	85 10 00 00 ff 02 00 00	call 0x2ff ; <__rust_dealloc>

0000000000004940 <LBB28_244>
    2344	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2345	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB28_247>
    2346	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2347	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB28_247>
    2348	b7 03 00 00 01 00 00 00	r3 = 0x1
    2349	85 10 00 00 f9 02 00 00	call 0x2f9 ; <__rust_dealloc>

0000000000004970 <LBB28_247>
    2350	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    2351	55 08 01 00 14 00 00 00	if r8 != 0x14 goto +0x1 <LBB28_248>
    2352	05 00 0a fd 00 00 00 00	goto -0x2f6 <LBB28_115>

0000000000004988 <LBB28_248>
    2353	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    2354	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    2355	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    2356	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    2357	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    2358	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    2359	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    2360	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1

00000000000049c8 <LBB28_249>
    2361	61 a1 70 fe 00 00 00 00	r1 = *(u32 *)(r10 - 0x190)
    2362	63 1a fc fd 00 00 00 00	*(u32 *)(r10 - 0x204) = r1
    2363	79 a1 68 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x198)
    2364	7b 1a f4 fd 00 00 00 00	*(u64 *)(r10 - 0x20c) = r1
    2365	79 a1 60 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1a0)
    2366	7b 1a ec fd 00 00 00 00	*(u64 *)(r10 - 0x214) = r1
    2367	79 a1 58 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1a8)
    2368	7b 1a e4 fd 00 00 00 00	*(u64 *)(r10 - 0x21c) = r1
    2369	63 8a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r8
    2370	05 00 40 fa 00 00 00 00	goto -0x5c0 <LBB28_9>

0000000000004a18 <LBB28_250>
    2371	79 a3 78 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x288)

0000000000004a20 <LBB28_251>
    2372	bf a1 00 00 00 00 00 00	r1 = r10
    2373	07 01 00 00 e0 fd ff ff	r1 += -0x220
    2374	85 10 00 00 4e 09 00 00	call 0x94e ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    2375	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2376	07 01 00 00 01 00 00 00	r1 += 0x1
    2377	05 00 b1 fc 00 00 00 00	goto -0x34f <LBB28_109>

0000000000004a50 <LBB28_252>
    2378	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    2379	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    2380	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    2381	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    2382	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    2383	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    2384	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    2385	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    2386	bf a1 00 00 00 00 00 00	r1 = r10
    2387	07 01 00 00 00 ff ff ff	r1 += -0x100
    2388	85 10 00 00 d7 f6 ff ff	call -0x929 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    2389	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2390	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB28_256>
    2391	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2392	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB28_256>
    2393	27 02 00 00 22 00 00 00	r2 *= 0x22
    2394	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB28_256>
    2395	b7 03 00 00 01 00 00 00	r3 = 0x1
    2396	85 10 00 00 ca 02 00 00	call 0x2ca ; <__rust_dealloc>

0000000000004ae8 <LBB28_256>
    2397	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2398	15 02 da ff 00 00 00 00	if r2 == 0x0 goto -0x26 <LBB28_249>
    2399	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2400	15 01 d8 ff 00 00 00 00	if r1 == 0x0 goto -0x28 <LBB28_249>
    2401	05 00 44 fe 00 00 00 00	goto -0x1bc <LBB28_169>

0000000000004b10 <__rg_alloc>
    2402	18 03 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r3 = 0x300000000 ll
    2404	79 33 00 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x0)
    2405	18 04 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r4 = 0x300008000 ll
    2407	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB29_2>
    2408	bf 34 00 00 00 00 00 00	r4 = r3

0000000000004b48 <LBB29_2>
    2409	bf 43 00 00 00 00 00 00	r3 = r4
    2410	1f 13 00 00 00 00 00 00	r3 -= r1
    2411	b7 00 00 00 00 00 00 00	r0 = 0x0
    2412	b7 05 00 00 01 00 00 00	r5 = 0x1
    2413	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB29_4>
    2414	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000004b78 <LBB29_4>
    2415	b7 01 00 00 00 00 00 00	r1 = 0x0
    2416	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB29_6>
    2417	bf 31 00 00 00 00 00 00	r1 = r3

0000000000004b90 <LBB29_6>
    2418	87 02 00 00 00 00 00 00	r2 = -r2
    2419	5f 21 00 00 00 00 00 00	r1 &= r2
    2420	18 02 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000008 ll
    2422	2d 12 04 00 00 00 00 00	if r2 > r1 goto +0x4 <LBB29_8>
    2423	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
    2425	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    2426	bf 10 00 00 00 00 00 00	r0 = r1

0000000000004bd8 <LBB29_8>
    2427	95 00 00 00 00 00 00 00	exit

0000000000004be0 <__rg_dealloc>
    2428	95 00 00 00 00 00 00 00	exit

0000000000004be8 <__rg_realloc>
    2429	bf 15 00 00 00 00 00 00	r5 = r1
    2430	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2432	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2433	18 06 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r6 = 0x300008000 ll
    2435	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB31_2>
    2436	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004c28 <LBB31_2>
    2437	bf 61 00 00 00 00 00 00	r1 = r6
    2438	1f 41 00 00 00 00 00 00	r1 -= r4
    2439	b7 00 00 00 00 00 00 00	r0 = 0x0
    2440	b7 07 00 00 01 00 00 00	r7 = 0x1
    2441	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB31_4>
    2442	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000004c58 <LBB31_4>
    2443	b7 06 00 00 00 00 00 00	r6 = 0x0
    2444	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB31_6>
    2445	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004c70 <LBB31_6>
    2446	87 03 00 00 00 00 00 00	r3 = -r3
    2447	5f 36 00 00 00 00 00 00	r6 &= r3
    2448	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
    2450	2d 61 0a 00 00 00 00 00	if r1 > r6 goto +0xa <LBB31_10>
    2451	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2453	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    2454	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB31_9>
    2455	bf 24 00 00 00 00 00 00	r4 = r2

0000000000004cc0 <LBB31_9>
    2456	bf 61 00 00 00 00 00 00	r1 = r6
    2457	bf 52 00 00 00 00 00 00	r2 = r5
    2458	bf 43 00 00 00 00 00 00	r3 = r4
    2459	85 10 00 00 33 19 00 00	call 0x1933 ; <memcpy>
    2460	bf 60 00 00 00 00 00 00	r0 = r6

0000000000004ce8 <LBB31_10>
    2461	95 00 00 00 00 00 00 00	exit

0000000000004cf0 <custom_panic>
    2462	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    2463	bf a1 00 00 00 00 00 00	r1 = r10
    2464	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2465	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2466	b7 01 00 00 00 00 00 00	r1 = 0x0
    2467	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2468	b7 01 00 00 01 00 00 00	r1 = 0x1
    2469	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    2470	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    2471	18 01 00 00 f0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13af0 ll
    2473	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2474	18 01 00 00 10 61 00 00 00 00 00 00 00 00 00 00	r1 = 0x6110 ll
    2476	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2477	bf a1 00 00 00 00 00 00	r1 = r10
    2478	07 01 00 00 a0 ff ff ff	r1 += -0x60
    2479	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2480	bf a1 00 00 00 00 00 00	r1 = r10
    2481	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2482	bf a2 00 00 00 00 00 00	r2 = r10
    2483	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2484	85 10 00 00 67 0c 00 00	call 0xc67 ; <alloc::fmt::format>
    2485	79 a6 b0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x50)
    2486	79 a7 a8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x58)
    2487	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    2488	bf 71 00 00 00 00 00 00	r1 = r7
    2489	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    2490	15 06 05 00 00 00 00 00	if r6 == 0x0 goto +0x5 <LBB33_3>
    2491	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB33_3>
    2492	bf 71 00 00 00 00 00 00	r1 = r7
    2493	bf 62 00 00 00 00 00 00	r2 = r6
    2494	b7 03 00 00 01 00 00 00	r3 = 0x1
    2495	85 10 00 00 67 02 00 00	call 0x267 ; <__rust_dealloc>

0000000000004e00 <LBB33_3>
    2496	95 00 00 00 00 00 00 00	exit

0000000000004e08 <<tictactoe::error::TictactoeError as core::fmt::Display>::fmt>
    2497	bf 23 00 00 00 00 00 00	r3 = r2
    2498	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    2499	65 01 0d 00 ae c7 71 00	if r1 s> 0x71c7ae goto +0xd <LBB35_4>
    2500	15 01 25 00 ac c7 71 00	if r1 == 0x71c7ac goto +0x25 <LBB35_9>
    2501	15 01 2f 00 ad c7 71 00	if r1 == 0x71c7ad goto +0x2f <LBB35_10>
    2502	18 01 00 00 d0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125d0 ll
    2504	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2505	b7 01 00 00 00 00 00 00	r1 = 0x0
    2506	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2507	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2508	b7 01 00 00 01 00 00 00	r1 = 0x1
    2509	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2510	18 01 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b40 ll
    2512	05 00 44 00 00 00 00 00	goto +0x44 <LBB35_13>

0000000000004e88 <LBB35_4>
    2513	65 01 0c 00 b0 c7 71 00	if r1 s> 0x71c7b0 goto +0xc <LBB35_7>
    2514	15 01 2d 00 af c7 71 00	if r1 == 0x71c7af goto +0x2d <LBB35_11>
    2515	18 01 00 00 d0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125d0 ll
    2517	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2518	b7 01 00 00 00 00 00 00	r1 = 0x0
    2519	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2520	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2521	b7 01 00 00 01 00 00 00	r1 = 0x1
    2522	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2523	18 01 00 00 20 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b20 ll
    2525	05 00 37 00 00 00 00 00	goto +0x37 <LBB35_13>

0000000000004ef0 <LBB35_7>
    2526	15 01 2c 00 b1 c7 71 00	if r1 == 0x71c7b1 goto +0x2c <LBB35_12>
    2527	18 01 00 00 d0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125d0 ll
    2529	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2530	b7 01 00 00 00 00 00 00	r1 = 0x0
    2531	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2532	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2533	b7 01 00 00 01 00 00 00	r1 = 0x1
    2534	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2535	18 01 00 00 00 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b00 ll
    2537	05 00 2b 00 00 00 00 00	goto +0x2b <LBB35_13>

0000000000004f50 <LBB35_9>
    2538	18 01 00 00 d0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125d0 ll
    2540	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2541	b7 01 00 00 00 00 00 00	r1 = 0x0
    2542	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2543	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2544	b7 01 00 00 01 00 00 00	r1 = 0x1
    2545	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2546	18 01 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b60 ll
    2548	05 00 20 00 00 00 00 00	goto +0x20 <LBB35_13>

0000000000004fa8 <LBB35_10>
    2549	18 01 00 00 d0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125d0 ll
    2551	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2552	b7 01 00 00 00 00 00 00	r1 = 0x0
    2553	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2554	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2555	b7 01 00 00 01 00 00 00	r1 = 0x1
    2556	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2557	18 01 00 00 50 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b50 ll
    2559	05 00 15 00 00 00 00 00	goto +0x15 <LBB35_13>

0000000000005000 <LBB35_11>
    2560	18 01 00 00 d0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125d0 ll
    2562	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2563	b7 01 00 00 00 00 00 00	r1 = 0x0
    2564	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2565	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2566	b7 01 00 00 01 00 00 00	r1 = 0x1
    2567	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2568	18 01 00 00 30 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b30 ll
    2570	05 00 0a 00 00 00 00 00	goto +0xa <LBB35_13>

0000000000005058 <LBB35_12>
    2571	18 01 00 00 d0 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x125d0 ll
    2573	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2574	b7 01 00 00 00 00 00 00	r1 = 0x0
    2575	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2576	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2577	b7 01 00 00 01 00 00 00	r1 = 0x1
    2578	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2579	18 01 00 00 10 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b10 ll

00000000000050a8 <LBB35_13>
    2581	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2582	bf a2 00 00 00 00 00 00	r2 = r10
    2583	07 02 00 00 d0 ff ff ff	r2 += -0x30
    2584	bf 31 00 00 00 00 00 00	r1 = r3
    2585	85 10 00 00 e0 10 00 00	call 0x10e0 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    2586	95 00 00 00 00 00 00 00	exit

00000000000050d8 <<tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize>
    2587	bf 16 00 00 00 00 00 00	r6 = r1
    2588	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
    2589	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB36_5>
    2590	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2591	b7 02 00 00 01 00 00 00	r2 = 0x1
    2592	85 10 00 00 04 02 00 00	call 0x204 ; <__rust_alloc>
    2593	bf 07 00 00 00 00 00 00	r7 = r0
    2594	55 07 3c 00 00 00 00 00	if r7 != 0x0 goto +0x3c <LBB36_3>
    2595	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2596	b7 02 00 00 01 00 00 00	r2 = 0x1
    2597	85 10 00 00 ee 0b 00 00	call 0xbee ; <alloc::alloc::handle_alloc_error>
    2598	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005138 <LBB36_5>
    2599	07 03 00 00 ff ff ff ff	r3 += -0x1
    2600	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2601	71 41 00 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x0)
    2602	7b 32 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r3
    2603	07 04 00 00 01 00 00 00	r4 += 0x1
    2604	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2605	73 1a 8f ff 00 00 00 00	*(u8 *)(r10 - 0x71) = r1
    2606	15 01 0c 00 00 00 00 00	if r1 == 0x0 goto +0xc <LBB36_12>
    2607	15 01 73 00 01 00 00 00	if r1 == 0x1 goto +0x73 <LBB36_15>
    2608	15 01 01 00 02 00 00 00	if r1 == 0x2 goto +0x1 <LBB36_13>
    2609	05 00 12 00 00 00 00 00	goto +0x12 <LBB36_9>

0000000000005190 <LBB36_13>
    2610	bf a1 00 00 00 00 00 00	r1 = r10
    2611	07 01 00 00 c0 ff ff ff	r1 += -0x40
    2612	85 10 00 00 ec 00 00 00	call 0xec ; <<tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize>
    2613	71 a1 c0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x40)
    2614	15 01 0a 00 01 00 00 00	if r1 == 0x1 goto +0xa <LBB36_17>
    2615	b7 01 00 00 02 00 00 00	r1 = 0x2
    2616	71 a5 c2 ff 00 00 00 00	r5 = *(u8 *)(r10 - 0x3e)
    2617	71 a4 c1 ff 00 00 00 00	r4 = *(u8 *)(r10 - 0x3f)
    2618	05 00 68 00 00 00 00 00	goto +0x68 <LBB36_15>

00000000000051d8 <LBB36_12>
    2619	bf a1 00 00 00 00 00 00	r1 = r10
    2620	07 01 00 00 c0 ff ff ff	r1 += -0x40
    2621	85 10 00 00 79 09 00 00	call 0x979 ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
    2622	71 a1 c0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x40)
    2623	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB36_17>
    2624	05 00 55 00 00 00 00 00	goto +0x55 <LBB36_16>

0000000000005208 <LBB36_17>
    2625	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    2626	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    2627	05 00 3b 00 00 00 00 00	goto +0x3b <LBB36_18>

0000000000005220 <LBB36_9>
    2628	bf a1 00 00 00 00 00 00	r1 = r10
    2629	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2630	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2631	b7 01 00 00 00 00 00 00	r1 = 0x0
    2632	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2633	b7 07 00 00 01 00 00 00	r7 = 0x1
    2634	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
    2635	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    2636	18 01 00 00 e0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ae0 ll
    2638	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2639	18 01 00 00 68 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6068 ll
    2641	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2642	bf a1 00 00 00 00 00 00	r1 = r10
    2643	07 01 00 00 8f ff ff ff	r1 += -0x71
    2644	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2645	bf a1 00 00 00 00 00 00	r1 = r10
    2646	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2647	bf a2 00 00 00 00 00 00	r2 = r10
    2648	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2649	85 10 00 00 c2 0b 00 00	call 0xbc2 ; <alloc::fmt::format>
    2650	b7 01 00 00 18 00 00 00	r1 = 0x18
    2651	b7 02 00 00 08 00 00 00	r2 = 0x8
    2652	85 10 00 00 c8 01 00 00	call 0x1c8 ; <__rust_alloc>
    2653	55 00 25 00 00 00 00 00	if r0 != 0x0 goto +0x25 <LBB36_11>
    2654	05 00 0f 00 00 00 00 00	goto +0xf <LBB36_4>

00000000000052f8 <LBB36_3>
    2655	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2656	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2657	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2659	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2660	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2662	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2663	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2665	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2666	b7 01 00 00 18 00 00 00	r1 = 0x18
    2667	b7 02 00 00 08 00 00 00	r2 = 0x8
    2668	85 10 00 00 b8 01 00 00	call 0x1b8 ; <__rust_alloc>
    2669	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB36_8>

0000000000005370 <LBB36_4>
    2670	b7 01 00 00 18 00 00 00	r1 = 0x18
    2671	b7 02 00 00 08 00 00 00	r2 = 0x8
    2672	85 10 00 00 a3 0b 00 00	call 0xba3 ; <alloc::alloc::handle_alloc_error>
    2673	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005390 <LBB36_8>
    2674	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2675	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2676	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2677	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2678	bf a1 00 00 00 00 00 00	r1 = r10
    2679	07 01 00 00 68 ff ff ff	r1 += -0x98
    2680	b7 02 00 00 14 00 00 00	r2 = 0x14
    2681	bf 03 00 00 00 00 00 00	r3 = r0
    2682	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
    2684	85 10 00 00 73 0a 00 00	call 0xa73 ; <std::io::error::Error::_new>
    2685	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    2686	79 a2 70 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x90)

00000000000053f8 <LBB36_18>
    2687	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2688	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2689	b7 01 00 00 01 00 00 00	r1 = 0x1
    2690	05 00 2e 00 00 00 00 00	goto +0x2e <LBB36_19>

0000000000005418 <LBB36_11>
    2691	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2692	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2693	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    2694	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2695	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    2696	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    2697	bf a1 00 00 00 00 00 00	r1 = r10
    2698	07 01 00 00 78 ff ff ff	r1 += -0x88
    2699	b7 02 00 00 14 00 00 00	r2 = 0x14
    2700	bf 03 00 00 00 00 00 00	r3 = r0
    2701	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
    2703	85 10 00 00 60 0a 00 00	call 0xa60 ; <std::io::error::Error::_new>
    2704	79 a1 78 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x88)
    2705	79 a2 80 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x80)
    2706	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2707	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2708	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7
    2709	05 00 1c 00 00 00 00 00	goto +0x1c <LBB36_20>

00000000000054b0 <LBB36_16>
    2710	61 a1 c3 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x3d)
    2711	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 0x60) = r1
    2712	71 a1 c7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x39)
    2713	73 1a a4 ff 00 00 00 00	*(u8 *)(r10 - 0x5c) = r1
    2714	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    2715	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    2716	71 a1 e0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x20)
    2717	73 1a 98 ff 00 00 00 00	*(u8 *)(r10 - 0x68) = r1
    2718	79 a0 d0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x30)
    2719	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    2720	b7 01 00 00 00 00 00 00	r1 = 0x0
    2721	71 a5 c2 ff 00 00 00 00	r5 = *(u8 *)(r10 - 0x3e)
    2722	71 a4 c1 ff 00 00 00 00	r4 = *(u8 *)(r10 - 0x3f)

0000000000005518 <LBB36_15>
    2723	71 a2 a4 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x5c)
    2724	73 26 08 00 00 00 00 00	*(u8 *)(r6 + 0x8) = r2
    2725	61 a2 a0 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x60)
    2726	63 26 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r2
    2727	71 a2 98 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x68)
    2728	79 a7 90 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x70)
    2729	7b 06 11 00 00 00 00 00	*(u64 *)(r6 + 0x11) = r0
    2730	7b 36 09 00 00 00 00 00	*(u64 *)(r6 + 0x9) = r3
    2731	7b 76 19 00 00 00 00 00	*(u64 *)(r6 + 0x19) = r7
    2732	73 26 21 00 00 00 00 00	*(u8 *)(r6 + 0x21) = r2
    2733	73 56 03 00 00 00 00 00	*(u8 *)(r6 + 0x3) = r5
    2734	73 46 02 00 00 00 00 00	*(u8 *)(r6 + 0x2) = r4
    2735	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
    2736	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000005588 <LBB36_19>
    2737	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1

0000000000005590 <LBB36_20>
    2738	95 00 00 00 00 00 00 00	exit

0000000000005598 <<tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize>
    2739	bf 16 00 00 00 00 00 00	r6 = r1
    2740	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    2741	55 01 09 00 00 00 00 00	if r1 != 0x0 goto +0x9 <LBB38_5>
    2742	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2743	b7 02 00 00 01 00 00 00	r2 = 0x1
    2744	85 10 00 00 6c 01 00 00	call 0x16c ; <__rust_alloc>
    2745	bf 07 00 00 00 00 00 00	r7 = r0
    2746	55 07 29 00 00 00 00 00	if r7 != 0x0 goto +0x29 <LBB38_3>
    2747	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2748	b7 02 00 00 01 00 00 00	r2 = 0x1
    2749	85 10 00 00 56 0b 00 00	call 0xb56 ; <alloc::alloc::handle_alloc_error>
    2750	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000055f8 <LBB38_5>
    2751	07 01 00 00 ff ff ff ff	r1 += -0x1
    2752	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2753	71 43 00 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x0)
    2754	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    2755	07 04 00 00 01 00 00 00	r4 += 0x1
    2756	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2757	b7 01 00 00 01 00 00 00	r1 = 0x1
    2758	73 3a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r3
    2759	15 03 42 00 00 00 00 00	if r3 == 0x0 goto +0x42 <LBB38_13>
    2760	15 03 40 00 01 00 00 00	if r3 == 0x1 goto +0x40 <LBB38_12>
    2761	bf a1 00 00 00 00 00 00	r1 = r10
    2762	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2763	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2764	b7 01 00 00 00 00 00 00	r1 = 0x0
    2765	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2766	b7 07 00 00 01 00 00 00	r7 = 0x1
    2767	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
    2768	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    2769	18 01 00 00 e0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ae0 ll
    2771	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2772	18 01 00 00 68 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6068 ll
    2774	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2775	bf a1 00 00 00 00 00 00	r1 = r10
    2776	07 01 00 00 a7 ff ff ff	r1 += -0x59
    2777	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2778	bf a1 00 00 00 00 00 00	r1 = r10
    2779	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2780	bf a2 00 00 00 00 00 00	r2 = r10
    2781	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2782	85 10 00 00 3d 0b 00 00	call 0xb3d ; <alloc::fmt::format>
    2783	b7 01 00 00 18 00 00 00	r1 = 0x18
    2784	b7 02 00 00 08 00 00 00	r2 = 0x8
    2785	85 10 00 00 43 01 00 00	call 0x143 ; <__rust_alloc>
    2786	55 00 2b 00 00 00 00 00	if r0 != 0x0 goto +0x2b <LBB38_9>
    2787	05 00 0f 00 00 00 00 00	goto +0xf <LBB38_4>

0000000000005720 <LBB38_3>
    2788	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2789	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2790	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2792	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2793	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2795	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2796	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2798	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2799	b7 01 00 00 18 00 00 00	r1 = 0x18
    2800	b7 02 00 00 08 00 00 00	r2 = 0x8
    2801	85 10 00 00 33 01 00 00	call 0x133 ; <__rust_alloc>
    2802	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB38_10>

0000000000005798 <LBB38_4>
    2803	b7 01 00 00 18 00 00 00	r1 = 0x18
    2804	b7 02 00 00 08 00 00 00	r2 = 0x8
    2805	85 10 00 00 1e 0b 00 00	call 0xb1e ; <alloc::alloc::handle_alloc_error>
    2806	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000057b8 <LBB38_10>
    2807	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2808	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2809	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2810	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2811	bf a1 00 00 00 00 00 00	r1 = r10
    2812	07 01 00 00 80 ff ff ff	r1 += -0x80
    2813	b7 02 00 00 14 00 00 00	r2 = 0x14
    2814	bf 03 00 00 00 00 00 00	r3 = r0
    2815	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
    2817	85 10 00 00 ee 09 00 00	call 0x9ee ; <std::io::error::Error::_new>
    2818	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    2819	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
    2820	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2821	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2822	b7 01 00 00 01 00 00 00	r1 = 0x1
    2823	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    2824	05 00 17 00 00 00 00 00	goto +0x17 <LBB38_11>

0000000000005848 <LBB38_12>
    2825	b7 01 00 00 02 00 00 00	r1 = 0x2

0000000000005850 <LBB38_13>
    2826	b7 02 00 00 00 00 00 00	r2 = 0x0
    2827	73 26 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r2
    2828	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
    2829	05 00 12 00 00 00 00 00	goto +0x12 <LBB38_11>

0000000000005870 <LBB38_9>
    2830	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2831	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2832	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    2833	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2834	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    2835	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    2836	bf a1 00 00 00 00 00 00	r1 = r10
    2837	07 01 00 00 90 ff ff ff	r1 += -0x70
    2838	b7 02 00 00 14 00 00 00	r2 = 0x14
    2839	bf 03 00 00 00 00 00 00	r3 = r0
    2840	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
    2842	85 10 00 00 d5 09 00 00	call 0x9d5 ; <std::io::error::Error::_new>
    2843	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    2844	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
    2845	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2846	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2847	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

0000000000005900 <LBB38_11>
    2848	95 00 00 00 00 00 00 00	exit

0000000000005908 <<tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize>
    2849	bf 27 00 00 00 00 00 00	r7 = r2
    2850	bf 16 00 00 00 00 00 00	r6 = r1
    2851	bf a1 00 00 00 00 00 00	r1 = r10
    2852	07 01 00 00 e8 ff ff ff	r1 += -0x18
    2853	85 10 00 00 8d ff ff ff	call -0x73 ; <<tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize>
    2854	71 a1 e8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x18)
    2855	15 01 0b 00 01 00 00 00	if r1 == 0x1 goto +0xb <LBB39_6>
    2856	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    2857	55 01 0c 00 00 00 00 00	if r1 != 0x0 goto +0xc <LBB39_7>
    2858	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2859	b7 02 00 00 01 00 00 00	r2 = 0x1
    2860	85 10 00 00 f8 00 00 00	call 0xf8 ; <__rust_alloc>
    2861	bf 07 00 00 00 00 00 00	r7 = r0
    2862	55 07 12 00 00 00 00 00	if r7 != 0x0 goto +0x12 <LBB39_4>
    2863	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2864	b7 02 00 00 01 00 00 00	r2 = 0x1
    2865	85 10 00 00 e2 0a 00 00	call 0xae2 ; <alloc::alloc::handle_alloc_error>
    2866	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005998 <LBB39_6>
    2867	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    2868	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    2869	05 00 2b 00 00 00 00 00	goto +0x2b <LBB39_9>

00000000000059b0 <LBB39_7>
    2870	71 a2 e9 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x17)
    2871	07 01 00 00 ff ff ff ff	r1 += -0x1
    2872	79 73 00 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x0)
    2873	71 34 00 00 00 00 00 00	r4 = *(u8 *)(r3 + 0x0)
    2874	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2875	07 03 00 00 01 00 00 00	r3 += 0x1
    2876	7b 37 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r3
    2877	73 46 02 00 00 00 00 00	*(u8 *)(r6 + 0x2) = r4
    2878	73 26 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r2
    2879	b7 01 00 00 00 00 00 00	r1 = 0x0
    2880	05 00 23 00 00 00 00 00	goto +0x23 <LBB39_10>

0000000000005a08 <LBB39_4>
    2881	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2882	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2883	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2885	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2886	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2888	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2889	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2891	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2892	b7 01 00 00 18 00 00 00	r1 = 0x18
    2893	b7 02 00 00 08 00 00 00	r2 = 0x8
    2894	85 10 00 00 d6 00 00 00	call 0xd6 ; <__rust_alloc>
    2895	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB39_8>
    2896	b7 01 00 00 18 00 00 00	r1 = 0x18
    2897	b7 02 00 00 08 00 00 00	r2 = 0x8
    2898	85 10 00 00 c1 0a 00 00	call 0xac1 ; <alloc::alloc::handle_alloc_error>
    2899	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005aa0 <LBB39_8>
    2900	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2901	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2902	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2903	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2904	bf a1 00 00 00 00 00 00	r1 = r10
    2905	07 01 00 00 d8 ff ff ff	r1 += -0x28
    2906	b7 02 00 00 14 00 00 00	r2 = 0x14
    2907	bf 03 00 00 00 00 00 00	r3 = r0
    2908	18 04 00 00 90 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b90 ll
    2910	85 10 00 00 91 09 00 00	call 0x991 ; <std::io::error::Error::_new>
    2911	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    2912	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)

0000000000005b08 <LBB39_9>
    2913	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2914	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2915	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000005b20 <LBB39_10>
    2916	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    2917	95 00 00 00 00 00 00 00	exit

0000000000005b30 <std::error::Error::type_id>
    2918	18 00 00 00 ed d3 f7 ec 00 00 00 00 03 94 b8 10	r0 = 0x10b89403ecf7d3ed ll
    2920	95 00 00 00 00 00 00 00	exit

0000000000005b48 <std::error::Error::backtrace>
    2921	b7 00 00 00 00 00 00 00	r0 = 0x0
    2922	95 00 00 00 00 00 00 00	exit

0000000000005b58 <std::error::Error::cause>
    2923	b7 02 00 00 00 00 00 00	r2 = 0x0
    2924	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2925	95 00 00 00 00 00 00 00	exit

0000000000005b70 <<alloc::string::String as core::fmt::Write>::write_str>
    2926	bf 36 00 00 00 00 00 00	r6 = r3
    2927	bf 28 00 00 00 00 00 00	r8 = r2
    2928	bf 17 00 00 00 00 00 00	r7 = r1
    2929	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    2930	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    2931	1f 91 00 00 00 00 00 00	r1 -= r9
    2932	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB45_2>
    2933	bf 71 00 00 00 00 00 00	r1 = r7
    2934	bf 92 00 00 00 00 00 00	r2 = r9
    2935	bf 63 00 00 00 00 00 00	r3 = r6
    2936	85 10 00 00 e5 f4 ff ff	call -0xb1b ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    2937	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000005bd0 <LBB45_2>
    2938	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2939	0f 91 00 00 00 00 00 00	r1 += r9
    2940	bf 82 00 00 00 00 00 00	r2 = r8
    2941	bf 63 00 00 00 00 00 00	r3 = r6
    2942	85 10 00 00 50 17 00 00	call 0x1750 ; <memcpy>
    2943	0f 69 00 00 00 00 00 00	r9 += r6
    2944	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    2945	b7 00 00 00 00 00 00 00	r0 = 0x0
    2946	95 00 00 00 00 00 00 00	exit

0000000000005c18 <<alloc::string::String as core::fmt::Write>::write_char>
    2947	bf 27 00 00 00 00 00 00	r7 = r2
    2948	bf 16 00 00 00 00 00 00	r6 = r1
    2949	bf 71 00 00 00 00 00 00	r1 = r7
    2950	67 01 00 00 20 00 00 00	r1 <<= 0x20
    2951	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2952	25 01 0c 00 7f 00 00 00	if r1 > 0x7f goto +0xc <LBB46_4>
    2953	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    2954	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    2955	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB46_3>
    2956	bf 61 00 00 00 00 00 00	r1 = r6
    2957	85 10 00 00 fc f4 ff ff	call -0xb04 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    2958	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

0000000000005c78 <LBB46_3>
    2959	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    2960	0f 21 00 00 00 00 00 00	r1 += r2
    2961	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    2962	07 02 00 00 01 00 00 00	r2 += 0x1
    2963	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2964	05 00 42 00 00 00 00 00	goto +0x42 <LBB46_12>

0000000000005ca8 <LBB46_4>
    2965	b7 02 00 00 00 00 00 00	r2 = 0x0
    2966	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    2967	b7 02 00 00 00 08 00 00	r2 = 0x800
    2968	2d 12 13 00 00 00 00 00	if r2 > r1 goto +0x13 <LBB46_6>
    2969	bf 71 00 00 00 00 00 00	r1 = r7
    2970	67 01 00 00 20 00 00 00	r1 <<= 0x20
    2971	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2972	b7 02 00 00 00 00 01 00	r2 = 0x10000
    2973	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB46_7>
    2974	05 00 16 00 00 00 00 00	goto +0x16 <LBB46_8>

0000000000005cf8 <LBB46_7>
    2975	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    2976	47 07 00 00 80 00 00 00	r7 |= 0x80
    2977	73 7a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r7
    2978	bf 12 00 00 00 00 00 00	r2 = r1
    2979	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    2980	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    2981	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2982	77 01 00 00 06 00 00 00	r1 >>= 0x6
    2983	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    2984	47 01 00 00 80 00 00 00	r1 |= 0x80
    2985	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    2986	b7 07 00 00 03 00 00 00	r7 = 0x3
    2987	05 00 1a 00 00 00 00 00	goto +0x1a <LBB46_9>

0000000000005d60 <LBB46_6>
    2988	bf 71 00 00 00 00 00 00	r1 = r7
    2989	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    2990	47 01 00 00 80 00 00 00	r1 |= 0x80
    2991	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    2992	77 07 00 00 06 00 00 00	r7 >>= 0x6
    2993	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    2994	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    2995	b7 07 00 00 02 00 00 00	r7 = 0x2
    2996	05 00 11 00 00 00 00 00	goto +0x11 <LBB46_9>

0000000000005da8 <LBB46_8>
    2997	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    2998	47 07 00 00 80 00 00 00	r7 |= 0x80
    2999	73 7a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r7
    3000	bf 12 00 00 00 00 00 00	r2 = r1
    3001	77 02 00 00 12 00 00 00	r2 >>= 0x12
    3002	47 02 00 00 f0 00 00 00	r2 |= 0xf0
    3003	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    3004	bf 12 00 00 00 00 00 00	r2 = r1
    3005	77 02 00 00 06 00 00 00	r2 >>= 0x6
    3006	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    3007	47 02 00 00 80 00 00 00	r2 |= 0x80
    3008	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    3009	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    3010	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    3011	47 01 00 00 80 00 00 00	r1 |= 0x80
    3012	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    3013	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000005e30 <LBB46_9>
    3014	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    3015	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    3016	1f 81 00 00 00 00 00 00	r1 -= r8
    3017	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB46_11>
    3018	bf 61 00 00 00 00 00 00	r1 = r6
    3019	bf 82 00 00 00 00 00 00	r2 = r8
    3020	bf 73 00 00 00 00 00 00	r3 = r7
    3021	85 10 00 00 90 f4 ff ff	call -0xb70 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3022	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

0000000000005e78 <LBB46_11>
    3023	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    3024	0f 81 00 00 00 00 00 00	r1 += r8
    3025	bf a2 00 00 00 00 00 00	r2 = r10
    3026	07 02 00 00 fc ff ff ff	r2 += -0x4
    3027	bf 73 00 00 00 00 00 00	r3 = r7
    3028	85 10 00 00 fa 16 00 00	call 0x16fa ; <memcpy>
    3029	0f 78 00 00 00 00 00 00	r8 += r7
    3030	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

0000000000005eb8 <LBB46_12>
    3031	b7 00 00 00 00 00 00 00	r0 = 0x0
    3032	95 00 00 00 00 00 00 00	exit

0000000000005ec8 <core::fmt::Write::write_fmt>
    3033	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3034	bf a6 00 00 00 00 00 00	r6 = r10
    3035	07 06 00 00 d0 ff ff ff	r6 += -0x30
    3036	bf 61 00 00 00 00 00 00	r1 = r6
    3037	b7 03 00 00 30 00 00 00	r3 = 0x30
    3038	85 10 00 00 f0 16 00 00	call 0x16f0 ; <memcpy>
    3039	bf a1 00 00 00 00 00 00	r1 = r10
    3040	07 01 00 00 c8 ff ff ff	r1 += -0x38
    3041	18 02 00 00 60 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13c60 ll
    3043	bf 63 00 00 00 00 00 00	r3 = r6
    3044	85 10 00 00 bd 0c 00 00	call 0xcbd ; <core::fmt::write>
    3045	95 00 00 00 00 00 00 00	exit

0000000000005f30 <<&mut W as core::fmt::Write>::write_str>
    3046	bf 36 00 00 00 00 00 00	r6 = r3
    3047	bf 28 00 00 00 00 00 00	r8 = r2
    3048	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    3049	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    3050	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    3051	1f 91 00 00 00 00 00 00	r1 -= r9
    3052	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB48_2>
    3053	bf 71 00 00 00 00 00 00	r1 = r7
    3054	bf 92 00 00 00 00 00 00	r2 = r9
    3055	bf 63 00 00 00 00 00 00	r3 = r6
    3056	85 10 00 00 6d f4 ff ff	call -0xb93 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3057	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000005f90 <LBB48_2>
    3058	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    3059	0f 91 00 00 00 00 00 00	r1 += r9
    3060	bf 82 00 00 00 00 00 00	r2 = r8
    3061	bf 63 00 00 00 00 00 00	r3 = r6
    3062	85 10 00 00 d8 16 00 00	call 0x16d8 ; <memcpy>
    3063	0f 69 00 00 00 00 00 00	r9 += r6
    3064	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    3065	b7 00 00 00 00 00 00 00	r0 = 0x0
    3066	95 00 00 00 00 00 00 00	exit

0000000000005fd8 <<&mut W as core::fmt::Write>::write_char>
    3067	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3068	85 10 00 00 86 ff ff ff	call -0x7a ; <<alloc::string::String as core::fmt::Write>::write_char>
    3069	b7 00 00 00 00 00 00 00	r0 = 0x0
    3070	95 00 00 00 00 00 00 00	exit

0000000000005ff8 <<&mut W as core::fmt::Write>::write_fmt>
    3071	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3072	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3073	bf a6 00 00 00 00 00 00	r6 = r10
    3074	07 06 00 00 d0 ff ff ff	r6 += -0x30
    3075	bf 61 00 00 00 00 00 00	r1 = r6
    3076	b7 03 00 00 30 00 00 00	r3 = 0x30
    3077	85 10 00 00 c9 16 00 00	call 0x16c9 ; <memcpy>
    3078	bf a1 00 00 00 00 00 00	r1 = r10
    3079	07 01 00 00 c8 ff ff ff	r1 += -0x38
    3080	18 02 00 00 60 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13c60 ll
    3082	bf 63 00 00 00 00 00 00	r3 = r6
    3083	85 10 00 00 96 0c 00 00	call 0xc96 ; <core::fmt::write>
    3084	95 00 00 00 00 00 00 00	exit

0000000000006068 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt>
    3085	bf 26 00 00 00 00 00 00	r6 = r2
    3086	bf 17 00 00 00 00 00 00	r7 = r1
    3087	bf 61 00 00 00 00 00 00	r1 = r6
    3088	85 10 00 00 f5 0e 00 00	call 0xef5 ; <core::fmt::Formatter::debug_lower_hex>
    3089	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB51_2>
    3090	bf 61 00 00 00 00 00 00	r1 = r6
    3091	85 10 00 00 f6 0e 00 00	call 0xef6 ; <core::fmt::Formatter::debug_upper_hex>
    3092	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB51_5>
    3093	05 00 08 00 00 00 00 00	goto +0x8 <LBB51_4>

00000000000060b0 <LBB51_5>
    3094	bf 71 00 00 00 00 00 00	r1 = r7
    3095	bf 62 00 00 00 00 00 00	r2 = r6
    3096	85 10 00 00 9c 12 00 00	call 0x129c ; <core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt>
    3097	05 00 07 00 00 00 00 00	goto +0x7 <LBB51_3>

00000000000060d0 <LBB51_2>
    3098	bf 71 00 00 00 00 00 00	r1 = r7
    3099	bf 62 00 00 00 00 00 00	r2 = r6
    3100	85 10 00 00 6a 12 00 00	call 0x126a ; <core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt>
    3101	05 00 03 00 00 00 00 00	goto +0x3 <LBB51_3>

00000000000060f0 <LBB51_4>
    3102	bf 71 00 00 00 00 00 00	r1 = r7
    3103	bf 62 00 00 00 00 00 00	r2 = r6
    3104	85 10 00 00 69 13 00 00	call 0x1369 ; <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>

0000000000006108 <LBB51_3>
    3105	95 00 00 00 00 00 00 00	exit

0000000000006110 <<&T as core::fmt::Display>::fmt>
    3106	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3107	85 10 00 00 af 0b 00 00	call 0xbaf ; <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt>
    3108	95 00 00 00 00 00 00 00	exit

0000000000006128 <__rust_alloc>
    3109	85 10 00 00 3c fd ff ff	call -0x2c4 ; <__rg_alloc>
    3110	95 00 00 00 00 00 00 00	exit

0000000000006138 <__rust_dealloc>
    3111	85 10 00 00 54 fd ff ff	call -0x2ac ; <__rg_dealloc>
    3112	95 00 00 00 00 00 00 00	exit

0000000000006148 <__rust_realloc>
    3113	85 10 00 00 53 fd ff ff	call -0x2ad ; <__rg_realloc>
    3114	95 00 00 00 00 00 00 00	exit

0000000000006158 <__rust_alloc_error_handler>
    3115	85 10 00 00 ec 09 00 00	call 0x9ec ; <__rg_oom>
    3116	95 00 00 00 00 00 00 00	exit

0000000000006168 <core::ptr::drop_in_place<&alloc::vec::Vec<(u64,solana_program::stake_history::StakeHistoryEntry)>>>
    3117	95 00 00 00 00 00 00 00	exit

0000000000006170 <core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>>
    3118	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    3119	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB6_3>
    3120	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3121	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB6_3>
    3122	b7 03 00 00 01 00 00 00	r3 = 0x1
    3123	85 10 00 00 f3 ff ff ff	call -0xd ; <__rust_dealloc>

00000000000061a0 <LBB6_3>
    3124	95 00 00 00 00 00 00 00	exit

00000000000061a8 <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    3125	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    3126	65 02 08 00 09 00 00 00	if r2 s> 0x9 goto +0x8 <LBB10_3>
    3127	15 02 14 00 03 00 00 00	if r2 == 0x3 goto +0x14 <LBB10_6>
    3128	15 02 01 00 09 00 00 00	if r2 == 0x9 goto +0x1 <LBB10_9>
    3129	05 00 07 00 00 00 00 00	goto +0x7 <LBB10_5>

00000000000061d0 <LBB10_9>
    3130	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3131	15 02 05 00 00 00 00 00	if r2 == 0x0 goto +0x5 <LBB10_5>
    3132	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3133	15 01 03 00 00 00 00 00	if r1 == 0x0 goto +0x3 <LBB10_5>
    3134	05 00 11 00 00 00 00 00	goto +0x11 <LBB10_8>

00000000000061f8 <LBB10_3>
    3135	15 02 02 00 0a 00 00 00	if r2 == 0xa goto +0x2 <LBB10_12>
    3136	15 02 06 00 0b 00 00 00	if r2 == 0xb goto +0x6 <LBB10_15>

0000000000006208 <LBB10_5>
    3137	95 00 00 00 00 00 00 00	exit

0000000000006210 <LBB10_12>
    3138	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3139	15 02 fd ff 00 00 00 00	if r2 == 0x0 goto -0x3 <LBB10_5>
    3140	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3141	15 01 fb ff 00 00 00 00	if r1 == 0x0 goto -0x5 <LBB10_5>
    3142	05 00 09 00 00 00 00 00	goto +0x9 <LBB10_8>

0000000000006238 <LBB10_15>
    3143	79 12 38 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x38)
    3144	15 02 f8 ff 00 00 00 00	if r2 == 0x0 goto -0x8 <LBB10_5>
    3145	79 11 30 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x30)
    3146	15 01 f6 ff 00 00 00 00	if r1 == 0x0 goto -0xa <LBB10_5>
    3147	05 00 04 00 00 00 00 00	goto +0x4 <LBB10_8>

0000000000006260 <LBB10_6>
    3148	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3149	15 02 f3 ff 00 00 00 00	if r2 == 0x0 goto -0xd <LBB10_5>
    3150	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3151	15 01 f1 ff 00 00 00 00	if r1 == 0x0 goto -0xf <LBB10_5>

0000000000006280 <LBB10_8>
    3152	b7 03 00 00 01 00 00 00	r3 = 0x1
    3153	85 10 00 00 d5 ff ff ff	call -0x2b ; <__rust_dealloc>
    3154	05 00 ee ff 00 00 00 00	goto -0x12 <LBB10_5>

0000000000006298 <solana_program::account_info::AccountInfo::lamports>
    3155	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    3156	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    3157	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    3159	2d 23 0b 00 00 00 00 00	if r3 > r2 goto +0xb <LBB14_2>
    3160	bf a3 00 00 00 00 00 00	r3 = r10
    3161	07 03 00 00 f8 ff ff ff	r3 += -0x8
    3162	18 01 00 00 18 2b 01 00 00 00 00 00 00 00 00 00	r1 = 0x12b18 ll
    3164	b7 02 00 00 18 00 00 00	r2 = 0x18
    3165	18 04 00 00 70 3d 01 00 00 00 00 00 00 00 00 00	r4 = 0x13d70 ll
    3167	18 05 00 00 90 3c 01 00 00 00 00 00 00 00 00 00	r5 = 0x13c90 ll
    3169	85 10 00 00 15 0c 00 00	call 0xc15 ; <core::result::unwrap_failed>
    3170	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006318 <LBB14_2>
    3171	bf 23 00 00 00 00 00 00	r3 = r2
    3172	07 03 00 00 01 00 00 00	r3 += 0x1
    3173	7b 31 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r3
    3174	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    3175	79 30 00 00 00 00 00 00	r0 = *(u64 *)(r3 + 0x0)
    3176	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    3177	95 00 00 00 00 00 00 00	exit

0000000000006350 <solana_program::account_info::AccountInfo::try_borrow_data>
    3178	79 22 10 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x10)
    3179	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    3180	18 04 00 00 fe ff ff ff 00 00 00 00 ff ff ff 7f	r4 = 0x7ffffffffffffffe ll
    3182	2d 43 09 00 00 00 00 00	if r3 > r4 goto +0x9 <LBB23_2>
    3183	bf 24 00 00 00 00 00 00	r4 = r2
    3184	07 04 00 00 10 00 00 00	r4 += 0x10
    3185	07 03 00 00 01 00 00 00	r3 += 0x1
    3186	7b 32 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r3
    3187	7b 41 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r4
    3188	07 02 00 00 18 00 00 00	r2 += 0x18
    3189	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    3190	b7 02 00 00 00 00 00 00	r2 = 0x0
    3191	05 00 03 00 00 00 00 00	goto +0x3 <LBB23_3>

00000000000063c0 <LBB23_2>
    3192	b7 02 00 00 0b 00 00 00	r2 = 0xb
    3193	63 21 08 00 00 00 00 00	*(u32 *)(r1 + 0x8) = r2
    3194	b7 02 00 00 01 00 00 00	r2 = 0x1

00000000000063d8 <LBB23_3>
    3195	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3196	95 00 00 00 00 00 00 00	exit

00000000000063e8 <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    3197	79 22 10 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x10)
    3198	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    3199	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB27_2>
    3200	bf 23 00 00 00 00 00 00	r3 = r2
    3201	07 03 00 00 10 00 00 00	r3 += 0x10
    3202	b7 04 00 00 ff ff ff ff	r4 = -0x1
    3203	7b 42 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r4
    3204	7b 31 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r3
    3205	07 02 00 00 18 00 00 00	r2 += 0x18
    3206	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    3207	b7 02 00 00 00 00 00 00	r2 = 0x0
    3208	05 00 03 00 00 00 00 00	goto +0x3 <LBB27_3>

0000000000006448 <LBB27_2>
    3209	b7 02 00 00 0b 00 00 00	r2 = 0xb
    3210	63 21 08 00 00 00 00 00	*(u32 *)(r1 + 0x8) = r2
    3211	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000006460 <LBB27_3>
    3212	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3213	95 00 00 00 00 00 00 00	exit

0000000000006470 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3214	bf 16 00 00 00 00 00 00	r6 = r1
    3215	bf 24 00 00 00 00 00 00	r4 = r2
    3216	0f 34 00 00 00 00 00 00	r4 += r3
    3217	b7 01 00 00 01 00 00 00	r1 = 0x1
    3218	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB32_2>
    3219	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000064a0 <LBB32_2>
    3220	57 01 00 00 01 00 00 00	r1 &= 0x1
    3221	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB32_12>
    3222	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    3223	bf 17 00 00 00 00 00 00	r7 = r1
    3224	67 07 00 00 01 00 00 00	r7 <<= 0x1
    3225	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB32_5>
    3226	bf 47 00 00 00 00 00 00	r7 = r4

00000000000064d8 <LBB32_5>
    3227	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB32_7>
    3228	b7 07 00 00 08 00 00 00	r7 = 0x8

00000000000064e8 <LBB32_7>
    3229	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB32_9>
    3230	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    3231	b7 03 00 00 01 00 00 00	r3 = 0x1
    3232	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3233	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3234	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    3235	05 00 02 00 00 00 00 00	goto +0x2 <LBB32_10>

0000000000006520 <LBB32_9>
    3236	b7 01 00 00 00 00 00 00	r1 = 0x0
    3237	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

0000000000006530 <LBB32_10>
    3238	bf a1 00 00 00 00 00 00	r1 = r10
    3239	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3240	bf a4 00 00 00 00 00 00	r4 = r10
    3241	07 04 00 00 e8 ff ff ff	r4 += -0x18
    3242	bf 72 00 00 00 00 00 00	r2 = r7
    3243	b7 03 00 00 01 00 00 00	r3 = 0x1
    3244	85 10 00 00 47 00 00 00	call 0x47 ; <alloc::raw_vec::finish_grow>
    3245	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    3246	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB32_14>
    3247	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3248	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB32_13>

0000000000006588 <LBB32_12>
    3249	85 10 00 00 5b 09 00 00	call 0x95b ; <alloc::raw_vec::capacity_overflow>
    3250	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006598 <LBB32_14>
    3251	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3252	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3253	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3254	95 00 00 00 00 00 00 00	exit

00000000000065b8 <LBB32_13>
    3255	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3256	85 10 00 00 5b 09 00 00	call 0x95b ; <alloc::alloc::handle_alloc_error>
    3257	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000065d0 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3258	bf 16 00 00 00 00 00 00	r6 = r1
    3259	bf 21 00 00 00 00 00 00	r1 = r2
    3260	07 01 00 00 01 00 00 00	r1 += 0x1
    3261	b7 03 00 00 01 00 00 00	r3 = 0x1
    3262	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB42_2>
    3263	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000006600 <LBB42_2>
    3264	57 03 00 00 01 00 00 00	r3 &= 0x1
    3265	55 03 29 00 00 00 00 00	if r3 != 0x0 goto +0x29 <LBB42_16>
    3266	79 69 08 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x8)
    3267	bf 97 00 00 00 00 00 00	r7 = r9
    3268	67 07 00 00 01 00 00 00	r7 <<= 0x1
    3269	2d 17 01 00 00 00 00 00	if r7 > r1 goto +0x1 <LBB42_5>
    3270	bf 17 00 00 00 00 00 00	r7 = r1

0000000000006638 <LBB42_5>
    3271	25 07 01 00 04 00 00 00	if r7 > 0x4 goto +0x1 <LBB42_7>
    3272	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000006648 <LBB42_7>
    3273	bf a1 00 00 00 00 00 00	r1 = r10
    3274	07 01 00 00 c0 ff ff ff	r1 += -0x40
    3275	b7 08 00 00 00 00 00 00	r8 = 0x0
    3276	bf 72 00 00 00 00 00 00	r2 = r7
    3277	b7 03 00 00 00 00 00 00	r3 = 0x0
    3278	b7 04 00 00 30 00 00 00	r4 = 0x30
    3279	b7 05 00 00 00 00 00 00	r5 = 0x0
    3280	85 10 00 00 bd 17 00 00	call 0x17bd ; <__multi3>
    3281	b7 01 00 00 01 00 00 00	r1 = 0x1
    3282	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
    3283	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB42_9>
    3284	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000066a8 <LBB42_9>
    3285	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB42_11>
    3286	b7 08 00 00 08 00 00 00	r8 = 0x8

00000000000066b8 <LBB42_11>
    3287	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    3288	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB42_13>
    3289	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    3290	b7 03 00 00 08 00 00 00	r3 = 0x8
    3291	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3292	27 09 00 00 30 00 00 00	r9 *= 0x30
    3293	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    3294	05 00 01 00 00 00 00 00	goto +0x1 <LBB42_14>

00000000000066f8 <LBB42_13>
    3295	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006700 <LBB42_14>
    3296	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3297	bf a1 00 00 00 00 00 00	r1 = r10
    3298	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3299	bf a4 00 00 00 00 00 00	r4 = r10
    3300	07 04 00 00 e8 ff ff ff	r4 += -0x18
    3301	bf 83 00 00 00 00 00 00	r3 = r8
    3302	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
    3303	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    3304	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB42_18>
    3305	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3306	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB42_17>

0000000000006758 <LBB42_16>
    3307	85 10 00 00 21 09 00 00	call 0x921 ; <alloc::raw_vec::capacity_overflow>
    3308	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006768 <LBB42_18>
    3309	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3310	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3311	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3312	95 00 00 00 00 00 00 00	exit

0000000000006788 <LBB42_17>
    3313	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3314	85 10 00 00 21 09 00 00	call 0x921 ; <alloc::alloc::handle_alloc_error>
    3315	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000067a0 <alloc::raw_vec::finish_grow>
    3316	bf 38 00 00 00 00 00 00	r8 = r3
    3317	bf 27 00 00 00 00 00 00	r7 = r2
    3318	bf 16 00 00 00 00 00 00	r6 = r1
    3319	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB45_12>
    3320	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3321	b7 01 00 00 01 00 00 00	r1 = 0x1
    3322	b7 07 00 00 00 00 00 00	r7 = 0x0
    3323	05 00 1d 00 00 00 00 00	goto +0x1d <LBB45_2>

00000000000067e0 <LBB45_12>
    3324	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    3325	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB45_7>
    3326	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    3327	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB45_6>
    3328	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB45_9>
    3329	bf 71 00 00 00 00 00 00	r1 = r7
    3330	bf 82 00 00 00 00 00 00	r2 = r8
    3331	85 10 00 00 21 ff ff ff	call -0xdf ; <__rust_alloc>
    3332	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB45_11>
    3333	05 00 11 00 00 00 00 00	goto +0x11 <LBB45_10>

0000000000006830 <LBB45_6>
    3334	bf 83 00 00 00 00 00 00	r3 = r8
    3335	bf 74 00 00 00 00 00 00	r4 = r7
    3336	85 10 00 00 20 ff ff ff	call -0xe0 ; <__rust_realloc>
    3337	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB45_11>
    3338	05 00 0c 00 00 00 00 00	goto +0xc <LBB45_10>

0000000000006858 <LBB45_7>
    3339	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB45_9>
    3340	bf 71 00 00 00 00 00 00	r1 = r7
    3341	bf 82 00 00 00 00 00 00	r2 = r8
    3342	85 10 00 00 16 ff ff ff	call -0xea ; <__rust_alloc>
    3343	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB45_11>
    3344	05 00 06 00 00 00 00 00	goto +0x6 <LBB45_10>

0000000000006888 <LBB45_11>
    3345	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3346	b7 01 00 00 01 00 00 00	r1 = 0x1
    3347	bf 87 00 00 00 00 00 00	r7 = r8
    3348	05 00 04 00 00 00 00 00	goto +0x4 <LBB45_2>

00000000000068a8 <LBB45_9>
    3349	b7 07 00 00 00 00 00 00	r7 = 0x0
    3350	bf 80 00 00 00 00 00 00	r0 = r8

00000000000068b8 <LBB45_10>
    3351	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    3352	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000068c8 <LBB45_2>
    3353	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3354	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    3355	95 00 00 00 00 00 00 00	exit

00000000000068e0 <solana_program::entrypoint::deserialize>
    3356	bf 16 00 00 00 00 00 00	r6 = r1
    3357	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    3358	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
    3359	bf a1 00 00 00 00 00 00	r1 = r10
    3360	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3361	b7 07 00 00 00 00 00 00	r7 = 0x0
    3362	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    3363	b7 03 00 00 00 00 00 00	r3 = 0x0
    3364	b7 04 00 00 30 00 00 00	r4 = 0x30
    3365	b7 05 00 00 00 00 00 00	r5 = 0x0
    3366	85 10 00 00 67 17 00 00	call 0x1767 ; <__multi3>
    3367	b7 01 00 00 01 00 00 00	r1 = 0x1
    3368	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    3369	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB91_2>
    3370	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006958 <LBB91_2>
    3371	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB91_4>
    3372	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000006968 <LBB91_4>
    3373	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB91_6>
    3374	85 10 00 00 de 08 00 00	call 0x8de ; <alloc::raw_vec::capacity_overflow>
    3375	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006980 <LBB91_6>
    3376	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    3377	7b 6a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r6
    3378	15 08 0a 00 00 00 00 00	if r8 == 0x0 goto +0xa <LBB91_9>
    3379	bf 81 00 00 00 00 00 00	r1 = r8
    3380	bf 72 00 00 00 00 00 00	r2 = r7
    3381	85 10 00 00 ef fe ff ff	call -0x111 ; <__rust_alloc>
    3382	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3383	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB91_8>
    3384	05 00 06 00 00 00 00 00	goto +0x6 <LBB91_10>

00000000000069c8 <LBB91_8>
    3385	bf 81 00 00 00 00 00 00	r1 = r8
    3386	bf 72 00 00 00 00 00 00	r2 = r7
    3387	85 10 00 00 d8 08 00 00	call 0x8d8 ; <alloc::alloc::handle_alloc_error>
    3388	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000069e8 <LBB91_9>
    3389	bf 70 00 00 00 00 00 00	r0 = r7
    3390	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)

00000000000069f8 <LBB91_10>
    3391	b7 01 00 00 00 00 00 00	r1 = 0x0
    3392	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3393	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r0
    3394	b7 09 00 00 08 00 00 00	r9 = 0x8
    3395	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    3396	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3397	15 01 21 00 00 00 00 00	if r1 == 0x0 goto +0x21 <LBB91_14>
    3398	b7 09 00 00 08 00 00 00	r9 = 0x8
    3399	bf 07 00 00 00 00 00 00	r7 = r0
    3400	b7 02 00 00 00 00 00 00	r2 = 0x0
    3401	b7 04 00 00 00 00 00 00	r4 = 0x0
    3402	05 00 2f 00 00 00 00 00	goto +0x2f <LBB91_15>

0000000000006a58 <LBB91_12>
    3403	bf 21 00 00 00 00 00 00	r1 = r2
    3404	27 01 00 00 30 00 00 00	r1 *= 0x30
    3405	bf 03 00 00 00 00 00 00	r3 = r0
    3406	0f 13 00 00 00 00 00 00	r3 += r1
    3407	73 53 2a 00 00 00 00 00	*(u8 *)(r3 + 0x2a) = r5
    3408	73 63 29 00 00 00 00 00	*(u8 *)(r3 + 0x29) = r6
    3409	73 43 28 00 00 00 00 00	*(u8 *)(r3 + 0x28) = r4
    3410	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3411	7b 13 20 00 00 00 00 00	*(u64 *)(r3 + 0x20) = r1
    3412	7b 73 18 00 00 00 00 00	*(u64 *)(r3 + 0x18) = r7
    3413	7b 83 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r8
    3414	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    3415	7b 13 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r1
    3416	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    3417	7b 13 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r1
    3418	61 a1 fb ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x5)
    3419	63 13 2b 00 00 00 00 00	*(u32 *)(r3 + 0x2b) = r1
    3420	71 a1 ff ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x1)
    3421	73 13 2f 00 00 00 00 00	*(u8 *)(r3 + 0x2f) = r1
    3422	07 02 00 00 01 00 00 00	r2 += 0x1
    3423	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    3424	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)

0000000000006b08 <LBB91_13>
    3425	79 a4 c8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x38)
    3426	07 04 00 00 01 00 00 00	r4 += 0x1
    3427	07 09 00 00 08 00 00 00	r9 += 0x8
    3428	bf 07 00 00 00 00 00 00	r7 = r0
    3429	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    3430	2d 41 13 00 00 00 00 00	if r1 > r4 goto +0x13 <LBB91_15>

0000000000006b38 <LBB91_14>
    3431	bf 31 00 00 00 00 00 00	r1 = r3
    3432	0f 91 00 00 00 00 00 00	r1 += r9
    3433	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3434	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3435	79 a4 80 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x80)
    3436	7b 24 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r2
    3437	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    3438	7b 24 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r2
    3439	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3440	7b 24 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r2
    3441	07 09 00 00 08 00 00 00	r9 += 0x8
    3442	bf 32 00 00 00 00 00 00	r2 = r3
    3443	0f 92 00 00 00 00 00 00	r2 += r9
    3444	7b 24 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r2
    3445	7b 14 28 00 00 00 00 00	*(u64 *)(r4 + 0x28) = r1
    3446	0f 91 00 00 00 00 00 00	r1 += r9
    3447	0f 13 00 00 00 00 00 00	r3 += r1
    3448	7b 34 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r3
    3449	95 00 00 00 00 00 00 00	exit

0000000000006bd0 <LBB91_15>
    3450	bf 31 00 00 00 00 00 00	r1 = r3
    3451	0f 91 00 00 00 00 00 00	r1 += r9
    3452	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    3453	7b 4a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r4
    3454	15 01 3b 00 ff 00 00 00	if r1 == 0xff goto +0x3b <LBB91_30>
    3455	2d 12 04 00 00 00 00 00	if r2 > r1 goto +0x4 <LBB91_18>
    3456	18 03 00 00 b8 3c 01 00 00 00 00 00 00 00 00 00	r3 = 0x13cb8 ll
    3458	85 10 00 00 cc 0a 00 00	call 0xacc ; <core::panicking::panic_bounds_check>
    3459	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006c20 <LBB91_18>
    3460	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r9
    3461	27 01 00 00 30 00 00 00	r1 *= 0x30
    3462	bf 74 00 00 00 00 00 00	r4 = r7
    3463	0f 14 00 00 00 00 00 00	r4 += r1
    3464	79 46 08 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x8)
    3465	79 68 00 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x0)
    3466	07 08 00 00 01 00 00 00	r8 += 0x1
    3467	25 08 02 00 01 00 00 00	if r8 > 0x1 goto +0x2 <LBB91_20>

0000000000006c60 <LBB91_19>
    3468	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    3469	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006c70 <LBB91_20>
    3470	71 45 29 00 00 00 00 00	r5 = *(u8 *)(r4 + 0x29)
    3471	71 43 28 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x28)
    3472	79 49 00 00 00 00 00 00	r9 = *(u64 *)(r4 + 0x0)
    3473	7b 9a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r9
    3474	7b 86 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r8
    3475	79 48 10 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x10)
    3476	79 84 00 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x0)
    3477	07 04 00 00 01 00 00 00	r4 += 0x1
    3478	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB91_22>
    3479	05 00 f4 ff 00 00 00 00	goto -0xc <LBB91_19>

0000000000006cc0 <LBB91_22>
    3480	7b 6a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r6
    3481	7b 48 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r4
    3482	bf 54 00 00 00 00 00 00	r4 = r5
    3483	b7 05 00 00 01 00 00 00	r5 = 0x1
    3484	b7 06 00 00 01 00 00 00	r6 = 0x1
    3485	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB91_24>
    3486	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000006cf8 <LBB91_24>
    3487	b7 04 00 00 01 00 00 00	r4 = 0x1
    3488	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x48)
    3489	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_26>
    3490	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000006d18 <LBB91_26>
    3491	0f 17 00 00 00 00 00 00	r7 += r1
    3492	71 71 2a 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x2a)
    3493	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB91_28>
    3494	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000006d38 <LBB91_28>
    3495	79 71 20 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x20)
    3496	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3497	79 77 18 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x18)
    3498	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3499	5d 12 9f ff 00 00 00 00	if r2 != r1 goto -0x61 <LBB91_12>
    3500	bf a1 00 00 00 00 00 00	r1 = r10
    3501	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3502	7b 7a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r7
    3503	bf 57 00 00 00 00 00 00	r7 = r5
    3504	7b 6a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r6
    3505	bf 46 00 00 00 00 00 00	r6 = r4
    3506	85 10 00 00 07 ff ff ff	call -0xf9 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3507	bf 64 00 00 00 00 00 00	r4 = r6
    3508	79 a6 90 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x70)
    3509	bf 75 00 00 00 00 00 00	r5 = r7
    3510	79 a7 88 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x78)
    3511	79 a0 e0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x20)
    3512	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3513	05 00 91 ff 00 00 00 00	goto -0x6f <LBB91_12>

0000000000006dd0 <LBB91_30>
    3514	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    3515	bf 96 00 00 00 00 00 00	r6 = r9
    3516	0f 36 00 00 00 00 00 00	r6 += r3
    3517	71 61 03 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x3)
    3518	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3519	71 61 02 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x2)
    3520	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    3521	71 61 01 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x1)
    3522	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    3523	b7 01 00 00 20 00 00 00	r1 = 0x20
    3524	b7 02 00 00 08 00 00 00	r2 = 0x8
    3525	85 10 00 00 5f fe ff ff	call -0x1a1 ; <__rust_alloc>
    3526	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB91_32>
    3527	b7 01 00 00 20 00 00 00	r1 = 0x20
    3528	05 00 54 00 00 00 00 00	goto +0x54 <LBB91_43>

0000000000006e48 <LBB91_32>
    3529	b7 01 00 00 00 00 00 00	r1 = 0x0
    3530	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    3531	b7 01 00 00 01 00 00 00	r1 = 0x1
    3532	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    3533	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    3534	bf 61 00 00 00 00 00 00	r1 = r6
    3535	07 01 00 00 48 00 00 00	r1 += 0x48
    3536	7b 0a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r0
    3537	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    3538	79 67 50 00 00 00 00 00	r7 = *(u64 *)(r6 + 0x50)
    3539	63 76 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r7
    3540	b7 01 00 00 28 00 00 00	r1 = 0x28
    3541	b7 02 00 00 08 00 00 00	r2 = 0x8
    3542	85 10 00 00 4e fe ff ff	call -0x1b2 ; <__rust_alloc>
    3543	bf 08 00 00 00 00 00 00	r8 = r0
    3544	55 08 02 00 00 00 00 00	if r8 != 0x0 goto +0x2 <LBB91_34>
    3545	b7 01 00 00 28 00 00 00	r1 = 0x28
    3546	05 00 42 00 00 00 00 00	goto +0x42 <LBB91_43>

0000000000006ed8 <LBB91_34>
    3547	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3548	bf 13 00 00 00 00 00 00	r3 = r1
    3549	b7 04 00 00 00 00 00 00	r4 = 0x0
    3550	b7 01 00 00 01 00 00 00	r1 = 0x1
    3551	b7 05 00 00 01 00 00 00	r5 = 0x1
    3552	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    3553	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_36>
    3554	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000006f18 <LBB91_36>
    3555	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x58)
    3556	7b 48 10 00 00 00 00 00	*(u64 *)(r8 + 0x10) = r4
    3557	b7 04 00 00 01 00 00 00	r4 = 0x1
    3558	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_38>
    3559	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000006f40 <LBB91_38>
    3560	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    3561	b7 00 00 00 01 00 00 00	r0 = 0x1
    3562	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_40>
    3563	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000006f60 <LBB91_40>
    3564	7b 0a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r0
    3565	7b 4a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r4
    3566	bf 63 00 00 00 00 00 00	r3 = r6
    3567	07 03 00 00 28 00 00 00	r3 += 0x28
    3568	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    3569	07 06 00 00 08 00 00 00	r6 += 0x8
    3570	7b 18 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r1
    3571	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    3572	bf 91 00 00 00 00 00 00	r1 = r9
    3573	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3574	0f 31 00 00 00 00 00 00	r1 += r3
    3575	07 01 00 00 58 00 00 00	r1 += 0x58
    3576	7b 18 18 00 00 00 00 00	*(u64 *)(r8 + 0x18) = r1
    3577	7b 78 20 00 00 00 00 00	*(u64 *)(r8 + 0x20) = r7
    3578	0f 79 00 00 00 00 00 00	r9 += r7
    3579	07 09 00 00 5f 28 00 00	r9 += 0x285f
    3580	57 09 00 00 f8 ff ff ff	r9 &= -0x8
    3581	bf 31 00 00 00 00 00 00	r1 = r3
    3582	0f 91 00 00 00 00 00 00	r1 += r9
    3583	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    3584	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3585	5d 12 07 00 00 00 00 00	if r2 != r1 goto +0x7 <LBB91_42>
    3586	bf a1 00 00 00 00 00 00	r1 = r10
    3587	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3588	7b 5a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r5
    3589	85 10 00 00 b4 fe ff ff	call -0x14c ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3590	79 a5 b8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x48)
    3591	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3592	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)

0000000000007048 <LBB91_42>
    3593	bf 21 00 00 00 00 00 00	r1 = r2
    3594	27 01 00 00 30 00 00 00	r1 *= 0x30
    3595	79 a0 e0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x20)
    3596	bf 04 00 00 00 00 00 00	r4 = r0
    3597	0f 14 00 00 00 00 00 00	r4 += r1
    3598	73 54 2a 00 00 00 00 00	*(u8 *)(r4 + 0x2a) = r5
    3599	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    3600	73 14 29 00 00 00 00 00	*(u8 *)(r4 + 0x29) = r1
    3601	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    3602	73 14 28 00 00 00 00 00	*(u8 *)(r4 + 0x28) = r1
    3603	7b 74 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r7
    3604	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3605	7b 14 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r1
    3606	7b 84 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r8
    3607	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    3608	7b 14 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r1
    3609	7b 64 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r6
    3610	07 02 00 00 01 00 00 00	r2 += 0x1
    3611	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    3612	05 00 44 ff 00 00 00 00	goto -0xbc <LBB91_13>

00000000000070e8 <LBB91_43>
    3613	b7 02 00 00 08 00 00 00	r2 = 0x8
    3614	85 10 00 00 f5 07 00 00	call 0x7f5 ; <alloc::alloc::handle_alloc_error>
    3615	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000007100 <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    3616	b7 03 00 00 20 00 00 00	r3 = 0x20
    3617	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    3618	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3619	95 00 00 00 00 00 00 00	exit

0000000000007120 <solana_program::instruction::Instruction::new_with_bincode>
    3620	bf 47 00 00 00 00 00 00	r7 = r4
    3621	bf 39 00 00 00 00 00 00	r9 = r3
    3622	bf 26 00 00 00 00 00 00	r6 = r2
    3623	bf 18 00 00 00 00 00 00	r8 = r1
    3624	85 10 00 00 ee 05 00 00	call 0x5ee ; <bincode::config::DefaultOptions::new>
    3625	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    3626	7b 6a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r6
    3627	65 02 06 00 05 00 00 00	if r2 s> 0x5 goto +0x6 <LBB131_5>
    3628	65 02 0d 00 02 00 00 00	if r2 s> 0x2 goto +0xd <LBB131_12>
    3629	b7 06 00 00 34 00 00 00	r6 = 0x34
    3630	15 02 21 00 00 00 00 00	if r2 == 0x0 goto +0x21 <LBB131_25>
    3631	15 02 0d 00 01 00 00 00	if r2 == 0x1 goto +0xd <LBB131_18>

0000000000007180 <LBB131_4>
    3632	b7 06 00 00 0c 00 00 00	r6 = 0xc
    3633	05 00 1e 00 00 00 00 00	goto +0x1e <LBB131_25>

0000000000007190 <LBB131_5>
    3634	65 02 03 00 08 00 00 00	if r2 s> 0x8 goto +0x3 <LBB131_9>
    3635	15 02 09 00 06 00 00 00	if r2 == 0x6 goto +0x9 <LBB131_18>
    3636	15 02 08 00 07 00 00 00	if r2 == 0x7 goto +0x8 <LBB131_18>
    3637	05 00 fa ff 00 00 00 00	goto -0x6 <LBB131_4>

00000000000071b0 <LBB131_9>
    3638	65 02 08 00 0a 00 00 00	if r2 s> 0xa goto +0x8 <LBB131_16>
    3639	15 02 0a 00 09 00 00 00	if r2 == 0x9 goto +0xa <LBB131_19>
    3640	b7 01 00 00 4c 00 00 00	r1 = 0x4c
    3641	05 00 0b 00 00 00 00 00	goto +0xb <LBB131_21>

00000000000071d0 <LBB131_12>
    3642	15 02 09 00 03 00 00 00	if r2 == 0x3 goto +0x9 <LBB131_20>
    3643	15 02 04 00 04 00 00 00	if r2 == 0x4 goto +0x4 <LBB131_17>
    3644	05 00 f3 ff 00 00 00 00	goto -0xd <LBB131_4>

00000000000071e8 <LBB131_18>
    3645	b7 06 00 00 24 00 00 00	r6 = 0x24
    3646	05 00 11 00 00 00 00 00	goto +0x11 <LBB131_25>

00000000000071f8 <LBB131_16>
    3647	15 02 08 00 0b 00 00 00	if r2 == 0xb goto +0x8 <LBB131_23>

0000000000007200 <LBB131_17>
    3648	b7 06 00 00 04 00 00 00	r6 = 0x4
    3649	05 00 0e 00 00 00 00 00	goto +0xe <LBB131_25>

0000000000007210 <LBB131_19>
    3650	b7 01 00 00 54 00 00 00	r1 = 0x54
    3651	05 00 01 00 00 00 00 00	goto +0x1 <LBB131_21>

0000000000007220 <LBB131_20>
    3652	b7 01 00 00 5c 00 00 00	r1 = 0x5c

0000000000007228 <LBB131_21>
    3653	bf 93 00 00 00 00 00 00	r3 = r9
    3654	07 03 00 00 58 00 00 00	r3 += 0x58
    3655	05 00 03 00 00 00 00 00	goto +0x3 <LBB131_24>

0000000000007240 <LBB131_23>
    3656	b7 01 00 00 34 00 00 00	r1 = 0x34
    3657	bf 93 00 00 00 00 00 00	r3 = r9
    3658	07 03 00 00 40 00 00 00	r3 += 0x40

0000000000007258 <LBB131_24>
    3659	79 36 00 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x0)
    3660	0f 16 00 00 00 00 00 00	r6 += r1
    3661	b7 00 00 00 01 00 00 00	r0 = 0x1
    3662	b7 01 00 00 00 00 00 00	r1 = 0x0
    3663	15 06 06 00 00 00 00 00	if r6 == 0x0 goto +0x6 <LBB131_27>

0000000000007280 <LBB131_25>
    3664	bf 61 00 00 00 00 00 00	r1 = r6
    3665	b7 02 00 00 01 00 00 00	r2 = 0x1
    3666	85 10 00 00 d2 fd ff ff	call -0x22e ; <__rust_alloc>
    3667	15 00 ee 02 00 00 00 00	if r0 == 0x0 goto +0x2ee <LBB131_147>
    3668	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    3669	bf 61 00 00 00 00 00 00	r1 = r6

00000000000072b0 <LBB131_27>
    3670	b7 03 00 00 00 00 00 00	r3 = 0x0
    3671	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3672	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3673	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    3674	bf a3 00 00 00 00 00 00	r3 = r10
    3675	07 03 00 00 f0 ff ff ff	r3 += -0x10
    3676	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    3677	7b 8a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r8
    3678	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    3679	65 02 11 00 05 00 00 00	if r2 s> 0x5 goto +0x11 <LBB131_33>
    3680	65 02 58 00 02 00 00 00	if r2 s> 0x2 goto +0x58 <LBB131_48>
    3681	15 02 78 00 00 00 00 00	if r2 == 0x0 goto +0x78 <LBB131_56>
    3682	15 02 b2 00 01 00 00 00	if r2 == 0x1 goto +0xb2 <LBB131_65>
    3683	b7 02 00 00 00 00 00 00	r2 = 0x0
    3684	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_32>
    3685	05 00 9c 02 00 00 00 00	goto +0x29c <LBB131_140>

0000000000007330 <LBB131_32>
    3686	0f 20 00 00 00 00 00 00	r0 += r2
    3687	b7 01 00 00 02 00 00 00	r1 = 0x2
    3688	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3689	07 02 00 00 04 00 00 00	r2 += 0x4
    3690	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3691	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3692	1f 21 00 00 00 00 00 00	r1 -= r2
    3693	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3694	b7 03 00 00 08 00 00 00	r3 = 0x8
    3695	2d 13 5d 00 00 00 00 00	if r3 > r1 goto +0x5d <LBB131_52>
    3696	05 00 15 00 00 00 00 00	goto +0x15 <LBB131_38>

0000000000007388 <LBB131_33>
    3697	65 02 19 00 08 00 00 00	if r2 s> 0x8 goto +0x19 <LBB131_39>
    3698	15 02 c5 00 06 00 00 00	if r2 == 0x6 goto +0xc5 <LBB131_71>
    3699	15 02 e7 00 07 00 00 00	if r2 == 0x7 goto +0xe7 <LBB131_77>
    3700	b7 02 00 00 00 00 00 00	r2 = 0x0
    3701	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_37>
    3702	bf a1 00 00 00 00 00 00	r1 = r10
    3703	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3704	b7 02 00 00 00 00 00 00	r2 = 0x0
    3705	b7 03 00 00 04 00 00 00	r3 = 0x4
    3706	85 10 00 00 13 fe ff ff	call -0x1ed ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3707	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3708	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000073e8 <LBB131_37>
    3709	0f 20 00 00 00 00 00 00	r0 += r2
    3710	b7 01 00 00 08 00 00 00	r1 = 0x8
    3711	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3712	07 02 00 00 04 00 00 00	r2 += 0x4
    3713	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3714	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    3715	1f 23 00 00 00 00 00 00	r3 -= r2
    3716	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3717	2d 31 47 00 00 00 00 00	if r1 > r3 goto +0x47 <LBB131_52>

0000000000007430 <LBB131_38>
    3718	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3719	0f 21 00 00 00 00 00 00	r1 += r2
    3720	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3721	07 02 00 00 08 00 00 00	r2 += 0x8
    3722	05 00 8d 01 00 00 00 00	goto +0x18d <LBB131_109>

0000000000007458 <LBB131_39>
    3723	65 02 47 00 0a 00 00 00	if r2 s> 0xa goto +0x47 <LBB131_53>
    3724	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r9
    3725	15 02 f0 00 09 00 00 00	if r2 == 0x9 goto +0xf0 <LBB131_83>
    3726	b7 08 00 00 00 00 00 00	r8 = 0x0
    3727	b7 06 00 00 00 00 00 00	r6 = 0x0
    3728	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_42>
    3729	05 00 78 02 00 00 00 00	goto +0x278 <LBB131_142>

0000000000007490 <LBB131_42>
    3730	0f 60 00 00 00 00 00 00	r0 += r6
    3731	b7 01 00 00 0a 00 00 00	r1 = 0xa
    3732	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3733	07 09 00 00 01 00 00 00	r9 += 0x1
    3734	07 06 00 00 04 00 00 00	r6 += 0x4
    3735	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3736	05 00 14 00 00 00 00 00	goto +0x14 <LBB131_46>

00000000000074c8 <LBB131_43>
    3737	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3738	0f 61 00 00 00 00 00 00	r1 += r6
    3739	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3740	07 06 00 00 01 00 00 00	r6 += 0x1
    3741	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3742	07 08 00 00 01 00 00 00	r8 += 0x1
    3743	55 08 0d 00 20 00 00 00	if r8 != 0x20 goto +0xd <LBB131_46>
    3744	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3745	1f 61 00 00 00 00 00 00	r1 -= r6
    3746	79 a9 c0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x40)
    3747	79 98 58 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x58)
    3748	79 97 48 00 00 00 00 00	r7 = *(u64 *)(r9 + 0x48)
    3749	25 01 0b 01 07 00 00 00	if r1 > 0x7 goto +0x10b <LBB131_91>
    3750	bf a1 00 00 00 00 00 00	r1 = r10
    3751	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3752	bf 62 00 00 00 00 00 00	r2 = r6
    3753	b7 03 00 00 08 00 00 00	r3 = 0x8
    3754	85 10 00 00 e3 fd ff ff	call -0x21d ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3755	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    3756	05 00 04 01 00 00 00 00	goto +0x104 <LBB131_91>

0000000000007568 <LBB131_46>
    3757	bf 91 00 00 00 00 00 00	r1 = r9
    3758	0f 81 00 00 00 00 00 00	r1 += r8
    3759	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3760	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3761	5d 61 e7 ff 00 00 00 00	if r1 != r6 goto -0x19 <LBB131_43>
    3762	bf a1 00 00 00 00 00 00	r1 = r10
    3763	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3764	bf 62 00 00 00 00 00 00	r2 = r6
    3765	b7 03 00 00 01 00 00 00	r3 = 0x1
    3766	85 10 00 00 d7 fd ff ff	call -0x229 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3767	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    3768	05 00 e0 ff 00 00 00 00	goto -0x20 <LBB131_43>

00000000000075c8 <LBB131_48>
    3769	15 02 1d 01 03 00 00 00	if r2 == 0x3 goto +0x11d <LBB131_97>
    3770	15 02 50 01 04 00 00 00	if r2 == 0x4 goto +0x150 <LBB131_105>
    3771	b7 02 00 00 00 00 00 00	r2 = 0x0
    3772	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3773	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_51>
    3774	bf a1 00 00 00 00 00 00	r1 = r10
    3775	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3776	b7 02 00 00 00 00 00 00	r2 = 0x0
    3777	b7 03 00 00 04 00 00 00	r3 = 0x4
    3778	85 10 00 00 cb fd ff ff	call -0x235 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3779	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3780	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007628 <LBB131_51>
    3781	0f 20 00 00 00 00 00 00	r0 += r2
    3782	b7 01 00 00 05 00 00 00	r1 = 0x5
    3783	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3784	07 02 00 00 04 00 00 00	r2 += 0x4
    3785	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3786	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3787	1f 21 00 00 00 00 00 00	r1 -= r2
    3788	25 01 b9 ff 07 00 00 00	if r1 > 0x7 goto -0x47 <LBB131_38>

0000000000007668 <LBB131_52>
    3789	bf a1 00 00 00 00 00 00	r1 = r10
    3790	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3791	b7 03 00 00 08 00 00 00	r3 = 0x8
    3792	85 10 00 00 bd fd ff ff	call -0x243 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3793	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3794	05 00 b3 ff 00 00 00 00	goto -0x4d <LBB131_38>

0000000000007698 <LBB131_53>
    3795	15 02 5e 01 0b 00 00 00	if r2 == 0xb goto +0x15e <LBB131_111>
    3796	b7 02 00 00 00 00 00 00	r2 = 0x0
    3797	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_55>
    3798	05 00 3b 02 00 00 00 00	goto +0x23b <LBB131_144>

00000000000076b8 <LBB131_55>
    3799	0f 20 00 00 00 00 00 00	r0 += r2
    3800	b7 01 00 00 0c 00 00 00	r1 = 0xc
    3801	05 00 3c 01 00 00 00 00	goto +0x13c <LBB131_108>

00000000000076d0 <LBB131_56>
    3802	b7 06 00 00 00 00 00 00	r6 = 0x0
    3803	b7 02 00 00 00 00 00 00	r2 = 0x0
    3804	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_58>
    3805	bf a1 00 00 00 00 00 00	r1 = r10
    3806	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3807	b7 02 00 00 00 00 00 00	r2 = 0x0
    3808	b7 03 00 00 04 00 00 00	r3 = 0x4
    3809	85 10 00 00 ac fd ff ff	call -0x254 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3810	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3811	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007720 <LBB131_58>
    3812	0f 20 00 00 00 00 00 00	r0 += r2
    3813	63 60 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r6
    3814	07 02 00 00 04 00 00 00	r2 += 0x4
    3815	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3816	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3817	1f 21 00 00 00 00 00 00	r1 -= r2
    3818	79 96 28 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x28)
    3819	b7 03 00 00 08 00 00 00	r3 = 0x8
    3820	2d 13 2d 02 00 00 00 00	if r3 > r1 goto +0x22d <LBB131_145>

0000000000007768 <LBB131_59>
    3821	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3822	0f 21 00 00 00 00 00 00	r1 += r2
    3823	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3824	07 02 00 00 08 00 00 00	r2 += 0x8
    3825	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3826	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3827	1f 21 00 00 00 00 00 00	r1 -= r2
    3828	79 96 30 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x30)
    3829	25 01 05 00 07 00 00 00	if r1 > 0x7 goto +0x5 <LBB131_61>
    3830	bf a1 00 00 00 00 00 00	r1 = r10
    3831	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3832	b7 03 00 00 08 00 00 00	r3 = 0x8
    3833	85 10 00 00 94 fd ff ff	call -0x26c ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3834	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000077d8 <LBB131_61>
    3835	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3836	0f 21 00 00 00 00 00 00	r1 += r2
    3837	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3838	b7 06 00 00 00 00 00 00	r6 = 0x0
    3839	07 09 00 00 01 00 00 00	r9 += 0x1
    3840	07 02 00 00 08 00 00 00	r2 += 0x8
    3841	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3842	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_63>

0000000000007818 <LBB131_62>
    3843	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3844	0f 21 00 00 00 00 00 00	r1 += r2
    3845	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3846	07 02 00 00 01 00 00 00	r2 += 0x1
    3847	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3848	07 06 00 00 01 00 00 00	r6 += 0x1
    3849	15 06 0f 01 20 00 00 00	if r6 == 0x20 goto +0x10f <LBB131_110>

0000000000007850 <LBB131_63>
    3850	bf 91 00 00 00 00 00 00	r1 = r9
    3851	0f 61 00 00 00 00 00 00	r1 += r6
    3852	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3853	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3854	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_62>
    3855	bf a1 00 00 00 00 00 00	r1 = r10
    3856	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3857	b7 03 00 00 01 00 00 00	r3 = 0x1
    3858	85 10 00 00 7b fd ff ff	call -0x285 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3859	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3860	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_62>

00000000000078a8 <LBB131_65>
    3861	b7 06 00 00 00 00 00 00	r6 = 0x0
    3862	b7 02 00 00 00 00 00 00	r2 = 0x0
    3863	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_67>
    3864	bf a1 00 00 00 00 00 00	r1 = r10
    3865	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3866	b7 02 00 00 00 00 00 00	r2 = 0x0
    3867	b7 03 00 00 04 00 00 00	r3 = 0x4
    3868	85 10 00 00 71 fd ff ff	call -0x28f ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3869	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3870	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000078f8 <LBB131_67>
    3871	0f 20 00 00 00 00 00 00	r0 += r2
    3872	b7 01 00 00 01 00 00 00	r1 = 0x1
    3873	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3874	07 09 00 00 01 00 00 00	r9 += 0x1
    3875	07 02 00 00 04 00 00 00	r2 += 0x4
    3876	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3877	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_69>

0000000000007930 <LBB131_68>
    3878	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3879	0f 21 00 00 00 00 00 00	r1 += r2
    3880	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3881	07 02 00 00 01 00 00 00	r2 += 0x1
    3882	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3883	07 06 00 00 01 00 00 00	r6 += 0x1
    3884	15 06 ec 00 20 00 00 00	if r6 == 0x20 goto +0xec <LBB131_110>

0000000000007968 <LBB131_69>
    3885	bf 91 00 00 00 00 00 00	r1 = r9
    3886	0f 61 00 00 00 00 00 00	r1 += r6
    3887	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3888	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3889	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_68>
    3890	bf a1 00 00 00 00 00 00	r1 = r10
    3891	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3892	b7 03 00 00 01 00 00 00	r3 = 0x1
    3893	85 10 00 00 58 fd ff ff	call -0x2a8 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3894	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3895	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_68>

00000000000079c0 <LBB131_71>
    3896	b7 06 00 00 00 00 00 00	r6 = 0x0
    3897	b7 02 00 00 00 00 00 00	r2 = 0x0
    3898	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_73>
    3899	bf a1 00 00 00 00 00 00	r1 = r10
    3900	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3901	b7 02 00 00 00 00 00 00	r2 = 0x0
    3902	b7 03 00 00 04 00 00 00	r3 = 0x4
    3903	85 10 00 00 4e fd ff ff	call -0x2b2 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3904	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3905	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007a10 <LBB131_73>
    3906	0f 20 00 00 00 00 00 00	r0 += r2
    3907	b7 01 00 00 06 00 00 00	r1 = 0x6
    3908	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3909	07 09 00 00 01 00 00 00	r9 += 0x1
    3910	07 02 00 00 04 00 00 00	r2 += 0x4
    3911	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3912	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_75>

0000000000007a48 <LBB131_74>
    3913	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3914	0f 21 00 00 00 00 00 00	r1 += r2
    3915	73 81 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r8
    3916	07 02 00 00 01 00 00 00	r2 += 0x1
    3917	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3918	07 06 00 00 01 00 00 00	r6 += 0x1
    3919	15 06 c9 00 20 00 00 00	if r6 == 0x20 goto +0xc9 <LBB131_110>

0000000000007a80 <LBB131_75>
    3920	bf 91 00 00 00 00 00 00	r1 = r9
    3921	0f 61 00 00 00 00 00 00	r1 += r6
    3922	71 18 00 00 00 00 00 00	r8 = *(u8 *)(r1 + 0x0)
    3923	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3924	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_74>
    3925	bf a1 00 00 00 00 00 00	r1 = r10
    3926	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3927	b7 03 00 00 01 00 00 00	r3 = 0x1
    3928	85 10 00 00 35 fd ff ff	call -0x2cb ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3929	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3930	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_74>

0000000000007ad8 <LBB131_77>
    3931	b7 06 00 00 00 00 00 00	r6 = 0x0
    3932	b7 02 00 00 00 00 00 00	r2 = 0x0
    3933	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_79>
    3934	bf a1 00 00 00 00 00 00	r1 = r10
    3935	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3936	b7 02 00 00 00 00 00 00	r2 = 0x0
    3937	b7 03 00 00 04 00 00 00	r3 = 0x4
    3938	85 10 00 00 2b fd ff ff	call -0x2d5 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3939	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3940	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007b28 <LBB131_79>
    3941	0f 20 00 00 00 00 00 00	r0 += r2
    3942	b7 01 00 00 07 00 00 00	r1 = 0x7
    3943	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3944	07 09 00 00 01 00 00 00	r9 += 0x1
    3945	07 02 00 00 04 00 00 00	r2 += 0x4
    3946	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3947	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_81>

0000000000007b60 <LBB131_80>
    3948	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3949	0f 21 00 00 00 00 00 00	r1 += r2
    3950	73 81 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r8
    3951	07 02 00 00 01 00 00 00	r2 += 0x1
    3952	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3953	07 06 00 00 01 00 00 00	r6 += 0x1
    3954	15 06 a6 00 20 00 00 00	if r6 == 0x20 goto +0xa6 <LBB131_110>

0000000000007b98 <LBB131_81>
    3955	bf 91 00 00 00 00 00 00	r1 = r9
    3956	0f 61 00 00 00 00 00 00	r1 += r6
    3957	71 18 00 00 00 00 00 00	r8 = *(u8 *)(r1 + 0x0)
    3958	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3959	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_80>
    3960	bf a1 00 00 00 00 00 00	r1 = r10
    3961	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3962	b7 03 00 00 01 00 00 00	r3 = 0x1
    3963	85 10 00 00 12 fd ff ff	call -0x2ee ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3964	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3965	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_80>

0000000000007bf0 <LBB131_83>
    3966	b7 08 00 00 00 00 00 00	r8 = 0x0
    3967	b7 06 00 00 00 00 00 00	r6 = 0x0
    3968	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_85>
    3969	bf a1 00 00 00 00 00 00	r1 = r10
    3970	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3971	b7 02 00 00 00 00 00 00	r2 = 0x0
    3972	b7 03 00 00 04 00 00 00	r3 = 0x4
    3973	85 10 00 00 08 fd ff ff	call -0x2f8 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3974	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3975	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000007c40 <LBB131_85>
    3976	0f 60 00 00 00 00 00 00	r0 += r6
    3977	b7 01 00 00 09 00 00 00	r1 = 0x9
    3978	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3979	07 09 00 00 01 00 00 00	r9 += 0x1
    3980	07 06 00 00 04 00 00 00	r6 += 0x4
    3981	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3982	05 00 16 00 00 00 00 00	goto +0x16 <LBB131_89>

0000000000007c78 <LBB131_86>
    3983	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3984	0f 61 00 00 00 00 00 00	r1 += r6
    3985	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3986	07 06 00 00 01 00 00 00	r6 += 0x1
    3987	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3988	07 08 00 00 01 00 00 00	r8 += 0x1
    3989	55 08 0f 00 20 00 00 00	if r8 != 0x20 goto +0xf <LBB131_89>
    3990	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3991	1f 61 00 00 00 00 00 00	r1 -= r6
    3992	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    3993	79 27 58 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x58)
    3994	79 22 48 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x48)
    3995	25 01 e5 00 07 00 00 00	if r1 > 0x7 goto +0xe5 <LBB131_122>
    3996	bf a1 00 00 00 00 00 00	r1 = r10
    3997	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3998	bf 28 00 00 00 00 00 00	r8 = r2
    3999	bf 62 00 00 00 00 00 00	r2 = r6
    4000	b7 03 00 00 08 00 00 00	r3 = 0x8
    4001	85 10 00 00 ec fc ff ff	call -0x314 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4002	bf 82 00 00 00 00 00 00	r2 = r8
    4003	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4004	05 00 dc 00 00 00 00 00	goto +0xdc <LBB131_122>

0000000000007d28 <LBB131_89>
    4005	bf 91 00 00 00 00 00 00	r1 = r9
    4006	0f 81 00 00 00 00 00 00	r1 += r8
    4007	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4008	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4009	5d 61 e5 ff 00 00 00 00	if r1 != r6 goto -0x1b <LBB131_86>
    4010	bf a1 00 00 00 00 00 00	r1 = r10
    4011	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4012	bf 62 00 00 00 00 00 00	r2 = r6
    4013	b7 03 00 00 01 00 00 00	r3 = 0x1
    4014	85 10 00 00 df fc ff ff	call -0x321 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4015	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4016	05 00 de ff 00 00 00 00	goto -0x22 <LBB131_86>

0000000000007d88 <LBB131_91>
    4017	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4018	0f 61 00 00 00 00 00 00	r1 += r6
    4019	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4020	07 06 00 00 08 00 00 00	r6 += 0x8
    4021	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4022	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4023	1f 61 00 00 00 00 00 00	r1 -= r6
    4024	3d 81 01 00 00 00 00 00	if r1 >= r8 goto +0x1 <LBB131_93>
    4025	05 00 66 01 00 00 00 00	goto +0x166 <LBB131_92>

0000000000007dd0 <LBB131_93>
    4026	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4027	0f 61 00 00 00 00 00 00	r1 += r6
    4028	bf 72 00 00 00 00 00 00	r2 = r7
    4029	bf 83 00 00 00 00 00 00	r3 = r8
    4030	85 10 00 00 10 13 00 00	call 0x1310 ; <memcpy>
    4031	0f 86 00 00 00 00 00 00	r6 += r8
    4032	b7 08 00 00 00 00 00 00	r8 = 0x0
    4033	07 09 00 00 21 00 00 00	r9 += 0x21
    4034	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4035	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_95>

0000000000007e20 <LBB131_94>
    4036	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4037	0f 61 00 00 00 00 00 00	r1 += r6
    4038	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4039	07 06 00 00 01 00 00 00	r6 += 0x1
    4040	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4041	07 08 00 00 01 00 00 00	r8 += 0x1
    4042	15 08 4e 00 20 00 00 00	if r8 == 0x20 goto +0x4e <LBB131_110>

0000000000007e58 <LBB131_95>
    4043	bf 91 00 00 00 00 00 00	r1 = r9
    4044	0f 81 00 00 00 00 00 00	r1 += r8
    4045	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4046	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4047	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_94>
    4048	bf a1 00 00 00 00 00 00	r1 = r10
    4049	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4050	bf 62 00 00 00 00 00 00	r2 = r6
    4051	b7 03 00 00 01 00 00 00	r3 = 0x1
    4052	85 10 00 00 b9 fc ff ff	call -0x347 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4053	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4054	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_94>

0000000000007eb8 <LBB131_97>
    4055	b7 08 00 00 00 00 00 00	r8 = 0x0
    4056	b7 06 00 00 00 00 00 00	r6 = 0x0
    4057	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_99>
    4058	bf a1 00 00 00 00 00 00	r1 = r10
    4059	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4060	b7 02 00 00 00 00 00 00	r2 = 0x0
    4061	b7 03 00 00 04 00 00 00	r3 = 0x4
    4062	85 10 00 00 af fc ff ff	call -0x351 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4063	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4064	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000007f08 <LBB131_99>
    4065	0f 60 00 00 00 00 00 00	r0 += r6
    4066	b7 01 00 00 03 00 00 00	r1 = 0x3
    4067	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4068	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r9
    4069	07 09 00 00 01 00 00 00	r9 += 0x1
    4070	07 06 00 00 04 00 00 00	r6 += 0x4
    4071	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4072	05 00 16 00 00 00 00 00	goto +0x16 <LBB131_103>

0000000000007f48 <LBB131_100>
    4073	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4074	0f 61 00 00 00 00 00 00	r1 += r6
    4075	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4076	07 06 00 00 01 00 00 00	r6 += 0x1
    4077	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4078	07 08 00 00 01 00 00 00	r8 += 0x1
    4079	55 08 0f 00 20 00 00 00	if r8 != 0x20 goto +0xf <LBB131_103>
    4080	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4081	1f 61 00 00 00 00 00 00	r1 -= r6
    4082	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    4083	79 27 58 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x58)
    4084	79 22 48 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x48)
    4085	25 01 c4 00 07 00 00 00	if r1 > 0x7 goto +0xc4 <LBB131_130>
    4086	bf a1 00 00 00 00 00 00	r1 = r10
    4087	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4088	bf 28 00 00 00 00 00 00	r8 = r2
    4089	bf 62 00 00 00 00 00 00	r2 = r6
    4090	b7 03 00 00 08 00 00 00	r3 = 0x8
    4091	85 10 00 00 92 fc ff ff	call -0x36e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4092	bf 82 00 00 00 00 00 00	r2 = r8
    4093	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4094	05 00 bb 00 00 00 00 00	goto +0xbb <LBB131_130>

0000000000007ff8 <LBB131_103>
    4095	bf 91 00 00 00 00 00 00	r1 = r9
    4096	0f 81 00 00 00 00 00 00	r1 += r8
    4097	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4098	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4099	5d 61 e5 ff 00 00 00 00	if r1 != r6 goto -0x1b <LBB131_100>
    4100	bf a1 00 00 00 00 00 00	r1 = r10
    4101	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4102	bf 62 00 00 00 00 00 00	r2 = r6
    4103	b7 03 00 00 01 00 00 00	r3 = 0x1
    4104	85 10 00 00 85 fc ff ff	call -0x37b ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4105	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4106	05 00 de ff 00 00 00 00	goto -0x22 <LBB131_100>

0000000000008058 <LBB131_105>
    4107	b7 02 00 00 00 00 00 00	r2 = 0x0
    4108	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_107>
    4109	bf a1 00 00 00 00 00 00	r1 = r10
    4110	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4111	b7 02 00 00 00 00 00 00	r2 = 0x0
    4112	b7 03 00 00 04 00 00 00	r3 = 0x4
    4113	85 10 00 00 7c fc ff ff	call -0x384 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4114	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4115	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000080a0 <LBB131_107>
    4116	0f 20 00 00 00 00 00 00	r0 += r2
    4117	b7 01 00 00 04 00 00 00	r1 = 0x4

00000000000080b0 <LBB131_108>
    4118	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4119	07 02 00 00 04 00 00 00	r2 += 0x4

00000000000080c0 <LBB131_109>
    4120	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2

00000000000080c8 <LBB131_110>
    4121	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    4122	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4123	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    4124	79 a4 d0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x30)
    4125	7b 14 28 00 00 00 00 00	*(u64 *)(r4 + 0x28) = r1
    4126	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4127	7b 14 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r1
    4128	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    4129	79 31 18 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x18)
    4130	7b 14 48 00 00 00 00 00	*(u64 *)(r4 + 0x48) = r1
    4131	79 31 10 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x10)
    4132	7b 14 40 00 00 00 00 00	*(u64 *)(r4 + 0x40) = r1
    4133	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4134	7b 14 38 00 00 00 00 00	*(u64 *)(r4 + 0x38) = r1
    4135	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4136	7b 14 30 00 00 00 00 00	*(u64 *)(r4 + 0x30) = r1
    4137	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    4138	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4139	7b 14 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r1
    4140	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4141	7b 14 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r1
    4142	79 31 10 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x10)
    4143	7b 14 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r1
    4144	7b 24 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r2
    4145	95 00 00 00 00 00 00 00	exit

0000000000008190 <LBB131_111>
    4146	b7 06 00 00 00 00 00 00	r6 = 0x0
    4147	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_113>
    4148	bf a1 00 00 00 00 00 00	r1 = r10
    4149	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4150	b7 02 00 00 00 00 00 00	r2 = 0x0
    4151	b7 03 00 00 04 00 00 00	r3 = 0x4
    4152	85 10 00 00 55 fc ff ff	call -0x3ab ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4153	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4154	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000081d8 <LBB131_113>
    4155	0f 60 00 00 00 00 00 00	r0 += r6
    4156	b7 01 00 00 0b 00 00 00	r1 = 0xb
    4157	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4158	07 06 00 00 04 00 00 00	r6 += 0x4
    4159	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4160	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4161	1f 61 00 00 00 00 00 00	r1 -= r6
    4162	79 98 28 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x28)
    4163	b7 02 00 00 08 00 00 00	r2 = 0x8
    4164	2d 12 e2 00 00 00 00 00	if r2 > r1 goto +0xe2 <LBB131_146>

0000000000008228 <LBB131_114>
    4165	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4166	0f 61 00 00 00 00 00 00	r1 += r6
    4167	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4168	07 06 00 00 08 00 00 00	r6 += 0x8
    4169	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4170	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4171	1f 61 00 00 00 00 00 00	r1 -= r6
    4172	79 98 40 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x40)
    4173	79 97 30 00 00 00 00 00	r7 = *(u64 *)(r9 + 0x30)
    4174	25 01 06 00 07 00 00 00	if r1 > 0x7 goto +0x6 <LBB131_116>
    4175	bf a1 00 00 00 00 00 00	r1 = r10
    4176	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4177	bf 62 00 00 00 00 00 00	r2 = r6
    4178	b7 03 00 00 08 00 00 00	r3 = 0x8
    4179	85 10 00 00 3a fc ff ff	call -0x3c6 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4180	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000082a8 <LBB131_116>
    4181	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4182	0f 61 00 00 00 00 00 00	r1 += r6
    4183	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4184	07 06 00 00 08 00 00 00	r6 += 0x8
    4185	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4186	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4187	1f 61 00 00 00 00 00 00	r1 -= r6
    4188	3d 81 06 00 00 00 00 00	if r1 >= r8 goto +0x6 <LBB131_118>
    4189	bf a1 00 00 00 00 00 00	r1 = r10
    4190	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4191	bf 62 00 00 00 00 00 00	r2 = r6
    4192	bf 83 00 00 00 00 00 00	r3 = r8
    4193	85 10 00 00 2c fc ff ff	call -0x3d4 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4194	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008318 <LBB131_118>
    4195	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4196	0f 61 00 00 00 00 00 00	r1 += r6
    4197	bf 72 00 00 00 00 00 00	r2 = r7
    4198	bf 83 00 00 00 00 00 00	r3 = r8
    4199	85 10 00 00 67 12 00 00	call 0x1267 ; <memcpy>
    4200	0f 86 00 00 00 00 00 00	r6 += r8
    4201	b7 08 00 00 00 00 00 00	r8 = 0x0
    4202	07 09 00 00 01 00 00 00	r9 += 0x1
    4203	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4204	05 00 08 00 00 00 00 00	goto +0x8 <LBB131_120>

0000000000008368 <LBB131_119>
    4205	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4206	0f 61 00 00 00 00 00 00	r1 += r6
    4207	73 91 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r9
    4208	07 06 00 00 01 00 00 00	r6 += 0x1
    4209	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4210	07 08 00 00 01 00 00 00	r8 += 0x1
    4211	bf 79 00 00 00 00 00 00	r9 = r7
    4212	15 08 a4 ff 20 00 00 00	if r8 == 0x20 goto -0x5c <LBB131_110>

00000000000083a8 <LBB131_120>
    4213	bf 97 00 00 00 00 00 00	r7 = r9
    4214	0f 89 00 00 00 00 00 00	r9 += r8
    4215	71 99 00 00 00 00 00 00	r9 = *(u8 *)(r9 + 0x0)
    4216	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4217	5d 61 f3 ff 00 00 00 00	if r1 != r6 goto -0xd <LBB131_119>
    4218	bf a1 00 00 00 00 00 00	r1 = r10
    4219	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4220	bf 62 00 00 00 00 00 00	r2 = r6
    4221	b7 03 00 00 01 00 00 00	r3 = 0x1
    4222	85 10 00 00 0f fc ff ff	call -0x3f1 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4223	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4224	05 00 ec ff 00 00 00 00	goto -0x14 <LBB131_119>

0000000000008408 <LBB131_122>
    4225	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4226	0f 61 00 00 00 00 00 00	r1 += r6
    4227	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7
    4228	07 06 00 00 08 00 00 00	r6 += 0x8
    4229	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4230	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4231	bf 91 00 00 00 00 00 00	r1 = r9
    4232	1f 61 00 00 00 00 00 00	r1 -= r6
    4233	3d 71 01 00 00 00 00 00	if r1 >= r7 goto +0x1 <LBB131_124>
    4234	05 00 a3 00 00 00 00 00	goto +0xa3 <LBB131_123>

0000000000008458 <LBB131_124>
    4235	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4236	bf 81 00 00 00 00 00 00	r1 = r8
    4237	0f 61 00 00 00 00 00 00	r1 += r6
    4238	bf 73 00 00 00 00 00 00	r3 = r7
    4239	85 10 00 00 3f 12 00 00	call 0x123f ; <memcpy>
    4240	0f 76 00 00 00 00 00 00	r6 += r7
    4241	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4242	1f 69 00 00 00 00 00 00	r9 -= r6
    4243	79 a7 c0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x40)
    4244	79 71 60 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x60)
    4245	25 09 09 00 07 00 00 00	if r9 > 0x7 goto +0x9 <LBB131_126>
    4246	bf 18 00 00 00 00 00 00	r8 = r1
    4247	bf a1 00 00 00 00 00 00	r1 = r10
    4248	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4249	bf 62 00 00 00 00 00 00	r2 = r6
    4250	b7 03 00 00 08 00 00 00	r3 = 0x8
    4251	85 10 00 00 f2 fb ff ff	call -0x40e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4252	bf 81 00 00 00 00 00 00	r1 = r8
    4253	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4254	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000084f8 <LBB131_126>
    4255	0f 68 00 00 00 00 00 00	r8 += r6
    4256	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    4257	b7 08 00 00 00 00 00 00	r8 = 0x0
    4258	07 07 00 00 21 00 00 00	r7 += 0x21
    4259	07 06 00 00 08 00 00 00	r6 += 0x8
    4260	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4261	bf 79 00 00 00 00 00 00	r9 = r7
    4262	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_128>

0000000000008538 <LBB131_127>
    4263	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4264	0f 61 00 00 00 00 00 00	r1 += r6
    4265	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4266	07 06 00 00 01 00 00 00	r6 += 0x1
    4267	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4268	07 08 00 00 01 00 00 00	r8 += 0x1
    4269	15 08 6b ff 20 00 00 00	if r8 == 0x20 goto -0x95 <LBB131_110>

0000000000008570 <LBB131_128>
    4270	bf 91 00 00 00 00 00 00	r1 = r9
    4271	0f 81 00 00 00 00 00 00	r1 += r8
    4272	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4273	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4274	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_127>
    4275	bf a1 00 00 00 00 00 00	r1 = r10
    4276	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4277	bf 62 00 00 00 00 00 00	r2 = r6
    4278	b7 03 00 00 01 00 00 00	r3 = 0x1
    4279	85 10 00 00 d6 fb ff ff	call -0x42a ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4280	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4281	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_127>

00000000000085d0 <LBB131_130>
    4282	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4283	0f 61 00 00 00 00 00 00	r1 += r6
    4284	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7
    4285	07 06 00 00 08 00 00 00	r6 += 0x8
    4286	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4287	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4288	bf 91 00 00 00 00 00 00	r1 = r9
    4289	1f 61 00 00 00 00 00 00	r1 -= r6
    4290	3d 71 01 00 00 00 00 00	if r1 >= r7 goto +0x1 <LBB131_132>
    4291	05 00 74 00 00 00 00 00	goto +0x74 <LBB131_131>

0000000000008620 <LBB131_132>
    4292	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4293	bf 81 00 00 00 00 00 00	r1 = r8
    4294	0f 61 00 00 00 00 00 00	r1 += r6
    4295	bf 73 00 00 00 00 00 00	r3 = r7
    4296	85 10 00 00 06 12 00 00	call 0x1206 ; <memcpy>
    4297	0f 76 00 00 00 00 00 00	r6 += r7
    4298	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4299	1f 69 00 00 00 00 00 00	r9 -= r6
    4300	79 a7 c0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x40)
    4301	79 71 60 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x60)
    4302	25 09 09 00 07 00 00 00	if r9 > 0x7 goto +0x9 <LBB131_134>
    4303	bf 18 00 00 00 00 00 00	r8 = r1
    4304	bf a1 00 00 00 00 00 00	r1 = r10
    4305	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4306	bf 62 00 00 00 00 00 00	r2 = r6
    4307	b7 03 00 00 08 00 00 00	r3 = 0x8
    4308	85 10 00 00 b9 fb ff ff	call -0x447 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4309	bf 81 00 00 00 00 00 00	r1 = r8
    4310	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4311	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000086c0 <LBB131_134>
    4312	0f 68 00 00 00 00 00 00	r8 += r6
    4313	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    4314	07 06 00 00 08 00 00 00	r6 += 0x8
    4315	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4316	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4317	1f 61 00 00 00 00 00 00	r1 -= r6
    4318	79 78 68 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x68)
    4319	bf 79 00 00 00 00 00 00	r9 = r7
    4320	25 01 06 00 07 00 00 00	if r1 > 0x7 goto +0x6 <LBB131_136>
    4321	bf a1 00 00 00 00 00 00	r1 = r10
    4322	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4323	bf 62 00 00 00 00 00 00	r2 = r6
    4324	b7 03 00 00 08 00 00 00	r3 = 0x8
    4325	85 10 00 00 a8 fb ff ff	call -0x458 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4326	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008738 <LBB131_136>
    4327	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4328	0f 61 00 00 00 00 00 00	r1 += r6
    4329	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4330	b7 08 00 00 00 00 00 00	r8 = 0x0
    4331	07 09 00 00 21 00 00 00	r9 += 0x21
    4332	07 06 00 00 08 00 00 00	r6 += 0x8
    4333	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4334	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_138>

0000000000008778 <LBB131_137>
    4335	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4336	0f 61 00 00 00 00 00 00	r1 += r6
    4337	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4338	07 06 00 00 01 00 00 00	r6 += 0x1
    4339	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4340	07 08 00 00 01 00 00 00	r8 += 0x1
    4341	15 08 23 ff 20 00 00 00	if r8 == 0x20 goto -0xdd <LBB131_110>

00000000000087b0 <LBB131_138>
    4342	bf 91 00 00 00 00 00 00	r1 = r9
    4343	0f 81 00 00 00 00 00 00	r1 += r8
    4344	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4345	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4346	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_137>
    4347	bf a1 00 00 00 00 00 00	r1 = r10
    4348	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4349	bf 62 00 00 00 00 00 00	r2 = r6
    4350	b7 03 00 00 01 00 00 00	r3 = 0x1
    4351	85 10 00 00 8e fb ff ff	call -0x472 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4352	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4353	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_137>

0000000000008810 <LBB131_140>
    4354	bf a1 00 00 00 00 00 00	r1 = r10
    4355	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4356	b7 02 00 00 00 00 00 00	r2 = 0x0
    4357	b7 03 00 00 04 00 00 00	r3 = 0x4
    4358	85 10 00 00 87 fb ff ff	call -0x479 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4359	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4360	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4361	05 00 5c fd 00 00 00 00	goto -0x2a4 <LBB131_32>

0000000000008850 <LBB131_142>
    4362	bf a1 00 00 00 00 00 00	r1 = r10
    4363	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4364	b7 02 00 00 00 00 00 00	r2 = 0x0
    4365	b7 03 00 00 04 00 00 00	r3 = 0x4
    4366	85 10 00 00 7f fb ff ff	call -0x481 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4367	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4368	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4369	05 00 80 fd 00 00 00 00	goto -0x280 <LBB131_42>

0000000000008890 <LBB131_144>
    4370	bf a1 00 00 00 00 00 00	r1 = r10
    4371	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4372	b7 02 00 00 00 00 00 00	r2 = 0x0
    4373	b7 03 00 00 04 00 00 00	r3 = 0x4
    4374	85 10 00 00 77 fb ff ff	call -0x489 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4375	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4376	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4377	05 00 bd fd 00 00 00 00	goto -0x243 <LBB131_55>

00000000000088d0 <LBB131_145>
    4378	bf a1 00 00 00 00 00 00	r1 = r10
    4379	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4380	b7 03 00 00 08 00 00 00	r3 = 0x8
    4381	85 10 00 00 70 fb ff ff	call -0x490 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4382	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4383	05 00 cd fd 00 00 00 00	goto -0x233 <LBB131_59>

0000000000008900 <LBB131_92>
    4384	bf a1 00 00 00 00 00 00	r1 = r10
    4385	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4386	bf 62 00 00 00 00 00 00	r2 = r6
    4387	bf 83 00 00 00 00 00 00	r3 = r8
    4388	85 10 00 00 69 fb ff ff	call -0x497 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4389	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4390	05 00 93 fe 00 00 00 00	goto -0x16d <LBB131_93>

0000000000008938 <LBB131_146>
    4391	bf a1 00 00 00 00 00 00	r1 = r10
    4392	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4393	bf 62 00 00 00 00 00 00	r2 = r6
    4394	b7 03 00 00 08 00 00 00	r3 = 0x8
    4395	85 10 00 00 62 fb ff ff	call -0x49e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4396	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4397	05 00 17 ff 00 00 00 00	goto -0xe9 <LBB131_114>

0000000000008970 <LBB131_123>
    4398	bf a1 00 00 00 00 00 00	r1 = r10
    4399	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4400	bf 28 00 00 00 00 00 00	r8 = r2
    4401	bf 62 00 00 00 00 00 00	r2 = r6
    4402	bf 73 00 00 00 00 00 00	r3 = r7
    4403	85 10 00 00 5a fb ff ff	call -0x4a6 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4404	bf 82 00 00 00 00 00 00	r2 = r8
    4405	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4406	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4407	05 00 53 ff 00 00 00 00	goto -0xad <LBB131_124>

00000000000089c0 <LBB131_131>
    4408	bf a1 00 00 00 00 00 00	r1 = r10
    4409	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4410	bf 28 00 00 00 00 00 00	r8 = r2
    4411	bf 62 00 00 00 00 00 00	r2 = r6
    4412	bf 73 00 00 00 00 00 00	r3 = r7
    4413	85 10 00 00 50 fb ff ff	call -0x4b0 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4414	bf 82 00 00 00 00 00 00	r2 = r8
    4415	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4416	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4417	05 00 82 ff 00 00 00 00	goto -0x7e <LBB131_132>

0000000000008a10 <LBB131_147>
    4418	bf 61 00 00 00 00 00 00	r1 = r6
    4419	b7 02 00 00 01 00 00 00	r2 = 0x1
    4420	85 10 00 00 cf 04 00 00	call 0x4cf ; <alloc::alloc::handle_alloc_error>
    4421	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008a30 <solana_program::program::invoke>
    4422	18 05 00 00 18 2b 01 00 00 00 00 00 00 00 00 00	r5 = 0x12b18 ll
    4424	7b 5a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r5
    4425	b7 05 00 00 00 00 00 00	r5 = 0x0
    4426	7b 5a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r5
    4427	bf a5 00 00 00 00 00 00	r5 = r10
    4428	85 10 00 00 01 00 00 00	call 0x1 ; <solana_program::program::invoke_signed>
    4429	95 00 00 00 00 00 00 00	exit

0000000000008a70 <solana_program::program::invoke_signed>
    4430	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
    4431	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    4432	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    4433	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    4434	79 21 10 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x10)
    4435	79 52 08 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0xff8)
    4436	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
    4437	79 52 00 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0x1000)
    4438	7b 2a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r2
    4439	15 01 4d 00 00 00 00 00	if r1 == 0x0 goto +0x4d <LBB200_4>
    4440	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    4441	79 27 00 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x0)
    4442	27 01 00 00 22 00 00 00	r1 *= 0x22
    4443	bf 72 00 00 00 00 00 00	r2 = r7
    4444	0f 12 00 00 00 00 00 00	r2 += r1
    4445	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    4446	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    4447	27 01 00 00 30 00 00 00	r1 *= 0x30
    4448	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4449	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    4450	07 01 00 00 d8 ff ff ff	r1 += -0x28
    4451	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4452	05 00 3b 00 00 00 00 00	goto +0x3b <LBB200_2>

0000000000008b28 <LBB200_3>
    4453	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB200_7>
    4454	05 00 37 00 00 00 00 00	goto +0x37 <LBB200_14>

0000000000008b38 <LBB200_7>
    4455	79 92 28 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x28)
    4456	bf 61 00 00 00 00 00 00	r1 = r6
    4457	b7 03 00 00 20 00 00 00	r3 = 0x20
    4458	85 10 00 00 aa 11 00 00	call 0x11aa ; <memcmp>
    4459	07 08 00 00 d0 ff ff ff	r8 += -0x30
    4460	07 09 00 00 30 00 00 00	r9 += 0x30
    4461	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4462	77 00 00 00 20 00 00 00	r0 >>= 0x20
    4463	55 00 f5 ff 00 00 00 00	if r0 != 0x0 goto -0xb <LBB200_3>
    4464	71 61 21 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x21)
    4465	55 01 18 00 00 00 00 00	if r1 != 0x0 goto +0x18 <LBB200_10>
    4466	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4467	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4468	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    4470	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB200_16>
    4471	05 00 4a 00 00 00 00 00	goto +0x4a <LBB200_17>

0000000000008bc0 <LBB200_16>
    4472	bf 13 00 00 00 00 00 00	r3 = r1
    4473	07 03 00 00 10 00 00 00	r3 += 0x10
    4474	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    4475	7b 23 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r2
    4476	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4477	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    4478	18 04 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r4 = 0x7fffffffffffffff ll
    4480	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB200_18>
    4481	05 00 47 00 00 00 00 00	goto +0x47 <LBB200_19>

0000000000008c10 <LBB200_18>
    4482	bf 23 00 00 00 00 00 00	r3 = r2
    4483	07 03 00 00 10 00 00 00	r3 += 0x10
    4484	7b 3a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r3
    4485	07 02 00 00 18 00 00 00	r2 += 0x18
    4486	07 01 00 00 18 00 00 00	r1 += 0x18
    4487	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    4488	7b 2a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r2
    4489	05 00 14 00 00 00 00 00	goto +0x14 <LBB200_14>

0000000000008c50 <LBB200_10>
    4490	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4491	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4492	b7 04 00 00 00 00 00 00	r4 = 0x0
    4493	55 02 26 00 00 00 00 00	if r2 != 0x0 goto +0x26 <LBB200_12>
    4494	bf 12 00 00 00 00 00 00	r2 = r1
    4495	07 02 00 00 10 00 00 00	r2 += 0x10
    4496	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    4497	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    4498	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4499	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    4500	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB200_13>
    4501	05 00 25 00 00 00 00 00	goto +0x25 <LBB200_15>

0000000000008cb0 <LBB200_13>
    4502	bf 23 00 00 00 00 00 00	r3 = r2
    4503	07 03 00 00 10 00 00 00	r3 += 0x10
    4504	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    4505	7b 42 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r4
    4506	07 02 00 00 18 00 00 00	r2 += 0x18
    4507	07 01 00 00 18 00 00 00	r1 += 0x18
    4508	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
    4509	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1

0000000000008cf0 <LBB200_14>
    4510	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4511	1d 17 05 00 00 00 00 00	if r7 == r1 goto +0x5 <LBB200_4>

0000000000008d00 <LBB200_2>
    4512	bf 76 00 00 00 00 00 00	r6 = r7
    4513	07 07 00 00 22 00 00 00	r7 += 0x22
    4514	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x8)
    4515	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4516	05 00 c0 ff 00 00 00 00	goto -0x40 <LBB200_3>

0000000000008d28 <LBB200_4>
    4517	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    4518	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    4519	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    4520	79 a4 78 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x88)
    4521	79 a5 80 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x80)
    4522	85 10 00 00 ff ff ff ff	call -0x1 ; sol_invoke_signed_rust
    4523	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB200_6>
    4524	b7 01 00 00 14 00 00 00	r1 = 0x14
    4525	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4526	63 12 00 00 00 00 00 00	*(u32 *)(r2 + 0x0) = r1
    4527	05 00 22 00 00 00 00 00	goto +0x22 <LBB200_21>

0000000000008d80 <LBB200_6>
    4528	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    4529	bf 02 00 00 00 00 00 00	r2 = r0
    4530	85 10 00 00 7b 00 00 00	call 0x7b ; <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    4531	05 00 1e 00 00 00 00 00	goto +0x1e <LBB200_21>

0000000000008da0 <LBB200_12>
    4532	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4533	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    4534	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4535	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4537	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    4538	05 00 14 00 00 00 00 00	goto +0x14 <LBB200_20>

0000000000008dd8 <LBB200_15>
    4539	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4540	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4541	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4542	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4544	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    4545	05 00 0d 00 00 00 00 00	goto +0xd <LBB200_20>

0000000000008e10 <LBB200_17>
    4546	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4547	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    4548	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4549	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4551	79 a3 98 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x68)
    4552	05 00 06 00 00 00 00 00	goto +0x6 <LBB200_20>

0000000000008e48 <LBB200_19>
    4553	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4554	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    4555	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4556	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4558	79 a3 88 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x78)

0000000000008e78 <LBB200_20>
    4559	5f 13 00 00 00 00 00 00	r3 &= r1
    4560	47 03 00 00 0b 00 00 00	r3 |= 0xb
    4561	7b 32 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r3

0000000000008e90 <LBB200_21>
    4562	95 00 00 00 00 00 00 00	exit

0000000000008e98 <solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from>
    4563	61 12 00 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x0)
    4564	65 02 06 00 09 00 00 00	if r2 s> 0x9 goto +0x6 <LBB206_14>
    4565	65 02 0b 00 04 00 00 00	if r2 s> 0x4 goto +0xb <LBB206_8>
    4566	65 02 14 00 01 00 00 00	if r2 s> 0x1 goto +0x14 <LBB206_5>
    4567	15 02 27 00 00 00 00 00	if r2 == 0x0 goto +0x27 <LBB206_27>
    4568	18 06 00 00 00 00 00 00 00 00 00 00 02 00 00 00	r6 = 0x200000000 ll
    4570	05 00 4a 00 00 00 00 00	goto +0x4a <LBB206_39>

0000000000008ed8 <LBB206_14>
    4571	65 02 0a 00 0e 00 00 00	if r2 s> 0xe goto +0xa <LBB206_21>
    4572	65 02 13 00 0b 00 00 00	if r2 s> 0xb goto +0x13 <LBB206_18>
    4573	15 02 27 00 0a 00 00 00	if r2 == 0xa goto +0x27 <LBB206_33>
    4574	18 06 00 00 00 00 00 00 00 00 00 00 0c 00 00 00	r6 = 0xc00000000 ll
    4576	05 00 44 00 00 00 00 00	goto +0x44 <LBB206_39>

0000000000008f08 <LBB206_8>
    4577	65 02 13 00 06 00 00 00	if r2 s> 0x6 goto +0x13 <LBB206_11>
    4578	15 02 25 00 05 00 00 00	if r2 == 0x5 goto +0x25 <LBB206_30>
    4579	18 06 00 00 00 00 00 00 00 00 00 00 07 00 00 00	r6 = 0x700000000 ll
    4581	05 00 3f 00 00 00 00 00	goto +0x3f <LBB206_39>

0000000000008f30 <LBB206_21>
    4582	65 02 13 00 10 00 00 00	if r2 s> 0x10 goto +0x13 <LBB206_24>
    4583	15 02 23 00 0f 00 00 00	if r2 == 0xf goto +0x23 <LBB206_36>
    4584	18 06 00 00 00 00 00 00 00 00 00 00 11 00 00 00	r6 = 0x1100000000 ll
    4586	05 00 3a 00 00 00 00 00	goto +0x3a <LBB206_39>

0000000000008f58 <LBB206_5>
    4587	15 02 22 00 02 00 00 00	if r2 == 0x2 goto +0x22 <LBB206_28>
    4588	15 02 24 00 03 00 00 00	if r2 == 0x3 goto +0x24 <LBB206_29>
    4589	18 06 00 00 00 00 00 00 00 00 00 00 05 00 00 00	r6 = 0x500000000 ll
    4591	05 00 35 00 00 00 00 00	goto +0x35 <LBB206_39>

0000000000008f80 <LBB206_18>
    4592	15 02 23 00 0c 00 00 00	if r2 == 0xc goto +0x23 <LBB206_34>
    4593	15 02 25 00 0d 00 00 00	if r2 == 0xd goto +0x25 <LBB206_35>
    4594	18 06 00 00 00 00 00 00 00 00 00 00 0f 00 00 00	r6 = 0xf00000000 ll
    4596	05 00 30 00 00 00 00 00	goto +0x30 <LBB206_39>

0000000000008fa8 <LBB206_11>
    4597	15 02 24 00 07 00 00 00	if r2 == 0x7 goto +0x24 <LBB206_31>
    4598	15 02 26 00 08 00 00 00	if r2 == 0x8 goto +0x26 <LBB206_32>
    4599	18 06 00 00 00 00 00 00 00 00 00 00 0a 00 00 00	r6 = 0xa00000000 ll
    4601	05 00 2b 00 00 00 00 00	goto +0x2b <LBB206_39>

0000000000008fd0 <LBB206_24>
    4602	15 02 25 00 11 00 00 00	if r2 == 0x11 goto +0x25 <LBB206_37>
    4603	15 02 27 00 12 00 00 00	if r2 == 0x12 goto +0x27 <LBB206_38>
    4604	18 06 00 00 00 00 00 00 00 00 00 00 14 00 00 00	r6 = 0x1400000000 ll
    4606	05 00 26 00 00 00 00 00	goto +0x26 <LBB206_39>

0000000000008ff8 <LBB206_27>
    4607	18 06 00 00 00 00 00 00 00 00 00 00 01 00 00 00	r6 = 0x100000000 ll
    4609	61 13 04 00 00 00 00 00	r3 = *(u32 *)(r1 + 0x4)
    4610	15 03 22 00 00 00 00 00	if r3 == 0x0 goto +0x22 <LBB206_39>
    4611	bf 36 00 00 00 00 00 00	r6 = r3
    4612	05 00 20 00 00 00 00 00	goto +0x20 <LBB206_39>

0000000000009028 <LBB206_33>
    4613	18 06 00 00 00 00 00 00 00 00 00 00 0b 00 00 00	r6 = 0xb00000000 ll
    4615	05 00 1d 00 00 00 00 00	goto +0x1d <LBB206_39>

0000000000009040 <LBB206_30>
    4616	18 06 00 00 00 00 00 00 00 00 00 00 06 00 00 00	r6 = 0x600000000 ll
    4618	05 00 1a 00 00 00 00 00	goto +0x1a <LBB206_39>

0000000000009058 <LBB206_36>
    4619	18 06 00 00 00 00 00 00 00 00 00 00 10 00 00 00	r6 = 0x1000000000 ll
    4621	05 00 17 00 00 00 00 00	goto +0x17 <LBB206_39>

0000000000009070 <LBB206_28>
    4622	18 06 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r6 = 0x300000000 ll
    4624	05 00 14 00 00 00 00 00	goto +0x14 <LBB206_39>

0000000000009088 <LBB206_29>
    4625	18 06 00 00 00 00 00 00 00 00 00 00 04 00 00 00	r6 = 0x400000000 ll
    4627	05 00 11 00 00 00 00 00	goto +0x11 <LBB206_39>

00000000000090a0 <LBB206_34>
    4628	18 06 00 00 00 00 00 00 00 00 00 00 0d 00 00 00	r6 = 0xd00000000 ll
    4630	05 00 0e 00 00 00 00 00	goto +0xe <LBB206_39>

00000000000090b8 <LBB206_35>
    4631	18 06 00 00 00 00 00 00 00 00 00 00 0e 00 00 00	r6 = 0xe00000000 ll
    4633	05 00 0b 00 00 00 00 00	goto +0xb <LBB206_39>

00000000000090d0 <LBB206_31>
    4634	18 06 00 00 00 00 00 00 00 00 00 00 08 00 00 00	r6 = 0x800000000 ll
    4636	05 00 08 00 00 00 00 00	goto +0x8 <LBB206_39>

00000000000090e8 <LBB206_32>
    4637	18 06 00 00 00 00 00 00 00 00 00 00 09 00 00 00	r6 = 0x900000000 ll
    4639	05 00 05 00 00 00 00 00	goto +0x5 <LBB206_39>

0000000000009100 <LBB206_37>
    4640	18 06 00 00 00 00 00 00 00 00 00 00 12 00 00 00	r6 = 0x1200000000 ll
    4642	05 00 02 00 00 00 00 00	goto +0x2 <LBB206_39>

0000000000009118 <LBB206_38>
    4643	18 06 00 00 00 00 00 00 00 00 00 00 13 00 00 00	r6 = 0x1300000000 ll

0000000000009128 <LBB206_39>
    4645	55 02 06 00 0e 00 00 00	if r2 != 0xe goto +0x6 <LBB206_43>
    4646	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4647	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB206_43>
    4648	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    4649	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB206_43>
    4650	b7 03 00 00 01 00 00 00	r3 = 0x1
    4651	85 10 00 00 fb f9 ff ff	call -0x605 ; <__rust_dealloc>

0000000000009160 <LBB206_43>
    4652	bf 60 00 00 00 00 00 00	r0 = r6
    4653	95 00 00 00 00 00 00 00	exit

0000000000009170 <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    4654	bf 16 00 00 00 00 00 00	r6 = r1
    4655	18 03 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r3 = -0x100000000 ll
    4657	bf 21 00 00 00 00 00 00	r1 = r2
    4658	0f 31 00 00 00 00 00 00	r1 += r3
    4659	bf 13 00 00 00 00 00 00	r3 = r1
    4660	77 03 00 00 20 00 00 00	r3 >>= 0x20
    4661	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4662	4f 31 00 00 00 00 00 00	r1 |= r3
    4663	65 01 06 00 09 00 00 00	if r1 s> 0x9 goto +0x6 <LBB207_14>
    4664	65 01 0c 00 04 00 00 00	if r1 s> 0x4 goto +0xc <LBB207_8>
    4665	65 01 17 00 01 00 00 00	if r1 s> 0x1 goto +0x17 <LBB207_5>
    4666	15 01 35 00 00 00 00 00	if r1 == 0x0 goto +0x35 <LBB207_28>
    4667	b7 03 00 00 01 00 00 00	r3 = 0x1
    4668	15 01 56 00 01 00 00 00	if r1 == 0x1 goto +0x56 <LBB207_49>
    4669	05 00 2f 00 00 00 00 00	goto +0x2f <LBB207_27>

00000000000091f0 <LBB207_14>
    4670	65 01 0c 00 0e 00 00 00	if r1 s> 0xe goto +0xc <LBB207_21>
    4671	65 01 17 00 0b 00 00 00	if r1 s> 0xb goto +0x17 <LBB207_18>
    4672	15 01 32 00 0a 00 00 00	if r1 == 0xa goto +0x32 <LBB207_37>
    4673	15 01 01 00 0b 00 00 00	if r1 == 0xb goto +0x1 <LBB207_38>
    4674	05 00 2a 00 00 00 00 00	goto +0x2a <LBB207_27>

0000000000009218 <LBB207_38>
    4675	b7 03 00 00 0b 00 00 00	r3 = 0xb
    4676	05 00 4e 00 00 00 00 00	goto +0x4e <LBB207_49>

0000000000009228 <LBB207_8>
    4677	65 01 1e 00 06 00 00 00	if r1 s> 0x6 goto +0x1e <LBB207_11>
    4678	15 01 2e 00 05 00 00 00	if r1 == 0x5 goto +0x2e <LBB207_32>
    4679	15 01 01 00 06 00 00 00	if r1 == 0x6 goto +0x1 <LBB207_33>
    4680	05 00 24 00 00 00 00 00	goto +0x24 <LBB207_27>

0000000000009248 <LBB207_33>
    4681	b7 03 00 00 06 00 00 00	r3 = 0x6
    4682	05 00 48 00 00 00 00 00	goto +0x48 <LBB207_49>

0000000000009258 <LBB207_21>
    4683	65 01 1e 00 10 00 00 00	if r1 s> 0x10 goto +0x1e <LBB207_24>
    4684	15 01 2a 00 0f 00 00 00	if r1 == 0xf goto +0x2a <LBB207_44>
    4685	15 01 01 00 10 00 00 00	if r1 == 0x10 goto +0x1 <LBB207_45>
    4686	05 00 1e 00 00 00 00 00	goto +0x1e <LBB207_27>

0000000000009278 <LBB207_45>
    4687	b7 03 00 00 10 00 00 00	r3 = 0x10
    4688	05 00 42 00 00 00 00 00	goto +0x42 <LBB207_49>

0000000000009288 <LBB207_5>
    4689	15 01 27 00 02 00 00 00	if r1 == 0x2 goto +0x27 <LBB207_29>
    4690	15 01 28 00 03 00 00 00	if r1 == 0x3 goto +0x28 <LBB207_30>
    4691	15 01 01 00 04 00 00 00	if r1 == 0x4 goto +0x1 <LBB207_31>
    4692	05 00 18 00 00 00 00 00	goto +0x18 <LBB207_27>

00000000000092a8 <LBB207_31>
    4693	b7 03 00 00 04 00 00 00	r3 = 0x4
    4694	05 00 3c 00 00 00 00 00	goto +0x3c <LBB207_49>

00000000000092b8 <LBB207_18>
    4695	15 01 25 00 0c 00 00 00	if r1 == 0xc goto +0x25 <LBB207_39>
    4696	15 01 26 00 0d 00 00 00	if r1 == 0xd goto +0x26 <LBB207_40>
    4697	15 01 01 00 0e 00 00 00	if r1 == 0xe goto +0x1 <LBB207_41>
    4698	05 00 12 00 00 00 00 00	goto +0x12 <LBB207_27>

00000000000092d8 <LBB207_41>
    4699	b7 07 00 00 07 00 00 00	r7 = 0x7
    4700	b7 01 00 00 07 00 00 00	r1 = 0x7
    4701	b7 02 00 00 01 00 00 00	r2 = 0x1
    4702	85 10 00 00 c6 f9 ff ff	call -0x63a ; <__rust_alloc>
    4703	55 00 2b 00 00 00 00 00	if r0 != 0x0 goto +0x2b <LBB207_43>
    4704	b7 01 00 00 07 00 00 00	r1 = 0x7
    4705	b7 02 00 00 01 00 00 00	r2 = 0x1
    4706	85 10 00 00 b1 03 00 00	call 0x3b1 ; <alloc::alloc::handle_alloc_error>
    4707	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009320 <LBB207_11>
    4708	15 01 1c 00 07 00 00 00	if r1 == 0x7 goto +0x1c <LBB207_34>
    4709	15 01 1d 00 08 00 00 00	if r1 == 0x8 goto +0x1d <LBB207_35>
    4710	15 01 01 00 09 00 00 00	if r1 == 0x9 goto +0x1 <LBB207_36>
    4711	05 00 05 00 00 00 00 00	goto +0x5 <LBB207_27>

0000000000009340 <LBB207_36>
    4712	b7 03 00 00 09 00 00 00	r3 = 0x9
    4713	05 00 29 00 00 00 00 00	goto +0x29 <LBB207_49>

0000000000009350 <LBB207_24>
    4714	15 01 1a 00 11 00 00 00	if r1 == 0x11 goto +0x1a <LBB207_46>
    4715	15 01 1b 00 12 00 00 00	if r1 == 0x12 goto +0x1b <LBB207_47>
    4716	15 01 1c 00 13 00 00 00	if r1 == 0x13 goto +0x1c <LBB207_48>

0000000000009368 <LBB207_27>
    4717	63 26 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r2
    4718	b7 03 00 00 00 00 00 00	r3 = 0x0
    4719	05 00 23 00 00 00 00 00	goto +0x23 <LBB207_49>

0000000000009380 <LBB207_28>
    4720	b7 03 00 00 00 00 00 00	r3 = 0x0
    4721	63 36 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r3
    4722	05 00 20 00 00 00 00 00	goto +0x20 <LBB207_49>

0000000000009398 <LBB207_37>
    4723	b7 03 00 00 0a 00 00 00	r3 = 0xa
    4724	05 00 1e 00 00 00 00 00	goto +0x1e <LBB207_49>

00000000000093a8 <LBB207_32>
    4725	b7 03 00 00 05 00 00 00	r3 = 0x5
    4726	05 00 1c 00 00 00 00 00	goto +0x1c <LBB207_49>

00000000000093b8 <LBB207_44>
    4727	b7 03 00 00 0f 00 00 00	r3 = 0xf
    4728	05 00 1a 00 00 00 00 00	goto +0x1a <LBB207_49>

00000000000093c8 <LBB207_29>
    4729	b7 03 00 00 02 00 00 00	r3 = 0x2
    4730	05 00 18 00 00 00 00 00	goto +0x18 <LBB207_49>

00000000000093d8 <LBB207_30>
    4731	b7 03 00 00 03 00 00 00	r3 = 0x3
    4732	05 00 16 00 00 00 00 00	goto +0x16 <LBB207_49>

00000000000093e8 <LBB207_39>
    4733	b7 03 00 00 0c 00 00 00	r3 = 0xc
    4734	05 00 14 00 00 00 00 00	goto +0x14 <LBB207_49>

00000000000093f8 <LBB207_40>
    4735	b7 03 00 00 0d 00 00 00	r3 = 0xd
    4736	05 00 12 00 00 00 00 00	goto +0x12 <LBB207_49>

0000000000009408 <LBB207_34>
    4737	b7 03 00 00 07 00 00 00	r3 = 0x7
    4738	05 00 10 00 00 00 00 00	goto +0x10 <LBB207_49>

0000000000009418 <LBB207_35>
    4739	b7 03 00 00 08 00 00 00	r3 = 0x8
    4740	05 00 0e 00 00 00 00 00	goto +0xe <LBB207_49>

0000000000009428 <LBB207_46>
    4741	b7 03 00 00 11 00 00 00	r3 = 0x11
    4742	05 00 0c 00 00 00 00 00	goto +0xc <LBB207_49>

0000000000009438 <LBB207_47>
    4743	b7 03 00 00 12 00 00 00	r3 = 0x12
    4744	05 00 0a 00 00 00 00 00	goto +0xa <LBB207_49>

0000000000009448 <LBB207_48>
    4745	b7 03 00 00 13 00 00 00	r3 = 0x13
    4746	05 00 08 00 00 00 00 00	goto +0x8 <LBB207_49>

0000000000009458 <LBB207_43>
    4747	b7 01 00 00 6e 6f 77 6e	r1 = 0x6e776f6e
    4748	63 10 03 00 00 00 00 00	*(u32 *)(r0 + 0x3) = r1
    4749	b7 01 00 00 55 6e 6b 6e	r1 = 0x6e6b6e55
    4750	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4751	7b 76 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r7
    4752	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    4753	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    4754	b7 03 00 00 0e 00 00 00	r3 = 0xe

0000000000009498 <LBB207_49>
    4755	63 36 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r3
    4756	95 00 00 00 00 00 00 00	exit

00000000000094a8 <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    4757	bf 16 00 00 00 00 00 00	r6 = r1
    4758	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    4759	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    4760	bf a1 00 00 00 00 00 00	r1 = r10
    4761	07 01 00 00 f0 ff ff ff	r1 += -0x10
    4762	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4763	b7 01 00 00 00 00 00 00	r1 = 0x0
    4764	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4765	b7 01 00 00 01 00 00 00	r1 = 0x1
    4766	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    4767	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    4768	18 01 00 00 a8 3c 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ca8 ll
    4770	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    4771	18 01 00 00 18 a8 00 00 00 00 00 00 00 00 00 00	r1 = 0xa818 ll
    4773	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4774	bf a1 00 00 00 00 00 00	r1 = r10
    4775	07 01 00 00 b0 ff ff ff	r1 += -0x50
    4776	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4777	bf 61 00 00 00 00 00 00	r1 = r6
    4778	07 01 00 00 08 00 00 00	r1 += 0x8
    4779	bf a2 00 00 00 00 00 00	r2 = r10
    4780	07 02 00 00 c0 ff ff ff	r2 += -0x40
    4781	85 10 00 00 6e 03 00 00	call 0x36e ; <alloc::fmt::format>
    4782	b7 01 00 00 0e 00 00 00	r1 = 0xe
    4783	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
    4784	71 a1 b0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x50)
    4785	55 01 0f 00 03 00 00 00	if r1 != 0x3 goto +0xf <LBB210_4>
    4786	79 a6 b8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x48)
    4787	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4788	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    4789	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4790	8d 00 00 00 02 00 00 00	callx r2
    4791	79 63 08 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x8)
    4792	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
    4793	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB210_3>
    4794	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4795	79 33 10 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x10)
    4796	85 10 00 00 6a f9 ff ff	call -0x696 ; <__rust_dealloc>

00000000000095e8 <LBB210_3>
    4797	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    4798	b7 02 00 00 18 00 00 00	r2 = 0x18
    4799	b7 03 00 00 08 00 00 00	r3 = 0x8
    4800	85 10 00 00 66 f9 ff ff	call -0x69a ; <__rust_dealloc>

0000000000009608 <LBB210_4>
    4801	95 00 00 00 00 00 00 00	exit

0000000000009610 <solana_program::pubkey::Pubkey::find_program_address>
    4802	bf 40 00 00 00 00 00 00	r0 = r4
    4803	bf 16 00 00 00 00 00 00	r6 = r1
    4804	b7 01 00 00 00 00 00 00	r1 = 0x0
    4805	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    4806	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4807	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    4808	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4809	b7 01 00 00 ff 00 00 00	r1 = 0xff
    4810	73 1a cf ff 00 00 00 00	*(u8 *)(r10 - 0x31) = r1
    4811	bf a4 00 00 00 00 00 00	r4 = r10
    4812	07 04 00 00 d0 ff ff ff	r4 += -0x30
    4813	bf a5 00 00 00 00 00 00	r5 = r10
    4814	07 05 00 00 cf ff ff ff	r5 += -0x31
    4815	bf 21 00 00 00 00 00 00	r1 = r2
    4816	bf 32 00 00 00 00 00 00	r2 = r3
    4817	bf 03 00 00 00 00 00 00	r3 = r0
    4818	85 10 00 00 ff ff ff ff	call -0x1 ; sol_try_find_program_address
    4819	55 00 09 00 00 00 00 00	if r0 != 0x0 goto +0x9 <LBB221_2>
    4820	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4821	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    4822	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    4823	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    4824	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4825	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    4826	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    4827	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    4828	71 a1 cf ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x31)

00000000000096e8 <LBB221_2>
    4829	15 00 11 00 00 00 00 00	if r0 == 0x0 goto +0x11 <LBB221_4>
    4830	18 01 00 00 18 2b 01 00 00 00 00 00 00 00 00 00	r1 = 0x12b18 ll
    4832	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4833	b7 01 00 00 00 00 00 00	r1 = 0x0
    4834	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4835	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4836	b7 01 00 00 01 00 00 00	r1 = 0x1
    4837	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    4838	18 01 00 00 d0 3c 01 00 00 00 00 00 00 00 00 00	r1 = 0x13cd0 ll
    4840	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4841	bf a1 00 00 00 00 00 00	r1 = r10
    4842	07 01 00 00 d0 ff ff ff	r1 += -0x30
    4843	18 02 00 00 e0 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13ce0 ll
    4845	85 10 00 00 7d 05 00 00	call 0x57d ; <core::panicking::panic_fmt>
    4846	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009778 <LBB221_4>
    4847	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    4848	7b 26 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r2
    4849	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    4850	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    4851	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    4852	7b 26 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r2
    4853	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4854	7b 26 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r2
    4855	73 16 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r1
    4856	95 00 00 00 00 00 00 00	exit

00000000000097c8 <solana_program::rent::Rent::minimum_balance>
    4857	bf 16 00 00 00 00 00 00	r6 = r1
    4858	07 02 00 00 80 00 00 00	r2 += 0x80
    4859	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4860	2f 21 00 00 00 00 00 00	r1 *= r2
    4861	85 10 00 00 7f 11 00 00	call 0x117f ; <__floatundidf>
    4862	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4863	bf 02 00 00 00 00 00 00	r2 = r0
    4864	85 10 00 00 cc 0e 00 00	call 0xecc ; <__muldf3>
    4865	bf 06 00 00 00 00 00 00	r6 = r0
    4866	bf 61 00 00 00 00 00 00	r1 = r6
    4867	85 10 00 00 66 0e 00 00	call 0xe66 ; <__fixunsdfdi>
    4868	bf 07 00 00 00 00 00 00	r7 = r0
    4869	b7 08 00 00 00 00 00 00	r8 = 0x0
    4870	bf 61 00 00 00 00 00 00	r1 = r6
    4871	b7 02 00 00 00 00 00 00	r2 = 0x0
    4872	85 10 00 00 a0 0e 00 00	call 0xea0 ; <__gedf2>
    4873	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4874	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    4875	6d 08 01 00 00 00 00 00	if r8 s> r0 goto +0x1 <LBB230_2>
    4876	bf 78 00 00 00 00 00 00	r8 = r7

0000000000009868 <LBB230_2>
    4877	bf 61 00 00 00 00 00 00	r1 = r6
    4878	18 02 00 00 ff ff ff ff 00 00 00 00 ff ff ef 43	r2 = 0x43efffffffffffff ll
    4880	85 10 00 00 74 0e 00 00	call 0xe74 ; <__gtdf2>
    4881	bf 01 00 00 00 00 00 00	r1 = r0
    4882	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4883	c7 01 00 00 20 00 00 00	r1 s>>= 0x20
    4884	b7 00 00 00 ff ff ff ff	r0 = -0x1
    4885	65 01 01 00 00 00 00 00	if r1 s> 0x0 goto +0x1 <LBB230_4>
    4886	bf 80 00 00 00 00 00 00	r0 = r8

00000000000098b8 <LBB230_4>
    4887	95 00 00 00 00 00 00 00	exit

00000000000098c0 <solana_program::system_instruction::assign>
    4888	bf 37 00 00 00 00 00 00	r7 = r3
    4889	bf 28 00 00 00 00 00 00	r8 = r2
    4890	bf 16 00 00 00 00 00 00	r6 = r1
    4891	b7 09 00 00 01 00 00 00	r9 = 0x1
    4892	b7 01 00 00 22 00 00 00	r1 = 0x22
    4893	b7 02 00 00 01 00 00 00	r2 = 0x1
    4894	85 10 00 00 06 f9 ff ff	call -0x6fa ; <__rust_alloc>
    4895	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB332_2>
    4896	b7 01 00 00 22 00 00 00	r1 = 0x22
    4897	b7 02 00 00 01 00 00 00	r2 = 0x1
    4898	85 10 00 00 f1 02 00 00	call 0x2f1 ; <alloc::alloc::handle_alloc_error>
    4899	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009920 <LBB332_2>
    4900	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    4901	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    4902	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    4903	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    4904	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    4905	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    4906	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    4907	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    4908	b7 01 00 00 01 01 00 00	r1 = 0x101
    4909	6b 10 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r1
    4910	b7 01 00 00 00 00 00 00	r1 = 0x0
    4911	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    4912	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    4913	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    4914	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    4915	79 71 18 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x18)
    4916	7b 1a 91 ff 00 00 00 00	*(u64 *)(r10 - 0x6f) = r1
    4917	79 71 10 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x10)
    4918	7b 1a 89 ff 00 00 00 00	*(u64 *)(r10 - 0x77) = r1
    4919	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    4920	7b 1a 81 ff 00 00 00 00	*(u64 *)(r10 - 0x7f) = r1
    4921	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    4922	7b 1a 79 ff 00 00 00 00	*(u64 *)(r10 - 0x87) = r1
    4923	73 9a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r9
    4924	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    4925	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    4926	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    4927	bf a2 00 00 00 00 00 00	r2 = r10
    4928	07 02 00 00 58 ff ff ff	r2 += -0xa8
    4929	bf a7 00 00 00 00 00 00	r7 = r10
    4930	07 07 00 00 78 ff ff ff	r7 += -0x88
    4931	bf a4 00 00 00 00 00 00	r4 = r10
    4932	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4933	bf 61 00 00 00 00 00 00	r1 = r6
    4934	bf 73 00 00 00 00 00 00	r3 = r7
    4935	85 10 00 00 dc fa ff ff	call -0x524 ; <solana_program::instruction::Instruction::new_with_bincode>
    4936	bf 71 00 00 00 00 00 00	r1 = r7
    4937	85 10 00 00 eb f8 ff ff	call -0x715 ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    4938	95 00 00 00 00 00 00 00	exit

0000000000009a58 <solana_program::system_instruction::transfer>
    4939	bf 47 00 00 00 00 00 00	r7 = r4
    4940	bf 38 00 00 00 00 00 00	r8 = r3
    4941	bf 29 00 00 00 00 00 00	r9 = r2
    4942	bf 16 00 00 00 00 00 00	r6 = r1
    4943	b7 01 00 00 44 00 00 00	r1 = 0x44
    4944	b7 02 00 00 01 00 00 00	r2 = 0x1
    4945	85 10 00 00 d3 f8 ff ff	call -0x72d ; <__rust_alloc>
    4946	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB334_2>
    4947	b7 01 00 00 44 00 00 00	r1 = 0x44
    4948	b7 02 00 00 01 00 00 00	r2 = 0x1
    4949	85 10 00 00 be 02 00 00	call 0x2be ; <alloc::alloc::handle_alloc_error>
    4950	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009ab8 <LBB334_2>
    4951	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4952	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4953	79 93 10 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x10)
    4954	79 94 18 00 00 00 00 00	r4 = *(u64 *)(r9 + 0x18)
    4955	b7 05 00 00 01 01 00 00	r5 = 0x101
    4956	6b 50 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r5
    4957	7b 40 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r4
    4958	7b 30 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r3
    4959	7b 20 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r2
    4960	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    4961	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    4962	7b 10 22 00 00 00 00 00	*(u64 *)(r0 + 0x22) = r1
    4963	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    4964	7b 10 2a 00 00 00 00 00	*(u64 *)(r0 + 0x2a) = r1
    4965	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    4966	7b 10 32 00 00 00 00 00	*(u64 *)(r0 + 0x32) = r1
    4967	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    4968	7b 10 3a 00 00 00 00 00	*(u64 *)(r0 + 0x3a) = r1
    4969	b7 01 00 00 00 01 00 00	r1 = 0x100
    4970	6b 10 42 00 00 00 00 00	*(u16 *)(r0 + 0x42) = r1
    4971	b7 01 00 00 00 00 00 00	r1 = 0x0
    4972	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    4973	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    4974	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    4975	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    4976	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    4977	b7 01 00 00 02 00 00 00	r1 = 0x2
    4978	73 1a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r1
    4979	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4980	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4981	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    4982	bf a2 00 00 00 00 00 00	r2 = r10
    4983	07 02 00 00 58 ff ff ff	r2 += -0xa8
    4984	bf a7 00 00 00 00 00 00	r7 = r10
    4985	07 07 00 00 78 ff ff ff	r7 += -0x88
    4986	bf a4 00 00 00 00 00 00	r4 = r10
    4987	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4988	bf 61 00 00 00 00 00 00	r1 = r6
    4989	bf 73 00 00 00 00 00 00	r3 = r7
    4990	85 10 00 00 a5 fa ff ff	call -0x55b ; <solana_program::instruction::Instruction::new_with_bincode>
    4991	bf 71 00 00 00 00 00 00	r1 = r7
    4992	85 10 00 00 b4 f8 ff ff	call -0x74c ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    4993	95 00 00 00 00 00 00 00	exit

0000000000009c10 <solana_program::system_instruction::allocate>
    4994	bf 37 00 00 00 00 00 00	r7 = r3
    4995	bf 28 00 00 00 00 00 00	r8 = r2
    4996	bf 16 00 00 00 00 00 00	r6 = r1
    4997	b7 09 00 00 01 00 00 00	r9 = 0x1
    4998	b7 01 00 00 22 00 00 00	r1 = 0x22
    4999	b7 02 00 00 01 00 00 00	r2 = 0x1
    5000	85 10 00 00 9c f8 ff ff	call -0x764 ; <__rust_alloc>
    5001	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB336_2>
    5002	b7 01 00 00 22 00 00 00	r1 = 0x22
    5003	b7 02 00 00 01 00 00 00	r2 = 0x1
    5004	85 10 00 00 87 02 00 00	call 0x287 ; <alloc::alloc::handle_alloc_error>
    5005	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009c70 <LBB336_2>
    5006	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    5007	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    5008	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    5009	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    5010	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    5011	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5012	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    5013	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    5014	b7 01 00 00 01 01 00 00	r1 = 0x101
    5015	6b 10 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r1
    5016	b7 01 00 00 00 00 00 00	r1 = 0x0
    5017	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    5018	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    5019	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    5020	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    5021	b7 01 00 00 08 00 00 00	r1 = 0x8
    5022	73 1a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r1
    5023	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    5024	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    5025	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    5026	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    5027	bf a2 00 00 00 00 00 00	r2 = r10
    5028	07 02 00 00 58 ff ff ff	r2 += -0xa8
    5029	bf a7 00 00 00 00 00 00	r7 = r10
    5030	07 07 00 00 78 ff ff ff	r7 += -0x88
    5031	bf a4 00 00 00 00 00 00	r4 = r10
    5032	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5033	bf 61 00 00 00 00 00 00	r1 = r6
    5034	bf 73 00 00 00 00 00 00	r3 = r7
    5035	85 10 00 00 78 fa ff ff	call -0x588 ; <solana_program::instruction::Instruction::new_with_bincode>
    5036	bf 71 00 00 00 00 00 00	r1 = r7
    5037	85 10 00 00 87 f8 ff ff	call -0x779 ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    5038	95 00 00 00 00 00 00 00	exit

0000000000009d78 <std::error::Error::type_id>
    5039	18 00 00 00 ed d3 f7 ec 00 00 00 00 03 94 b8 10	r0 = 0x10b89403ecf7d3ed ll
    5041	95 00 00 00 00 00 00 00	exit

0000000000009d90 <std::error::Error::backtrace>
    5042	b7 00 00 00 00 00 00 00	r0 = 0x0
    5043	95 00 00 00 00 00 00 00	exit

0000000000009da0 <std::error::Error::cause>
    5044	b7 02 00 00 00 00 00 00	r2 = 0x0
    5045	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5046	95 00 00 00 00 00 00 00	exit

0000000000009db8 <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
    5047	bf 16 00 00 00 00 00 00	r6 = r1
    5048	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    5049	25 01 09 00 1f 00 00 00	if r1 > 0x1f goto +0x9 <LBB408_5>
    5050	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5051	b7 02 00 00 01 00 00 00	r2 = 0x1
    5052	85 10 00 00 68 f8 ff ff	call -0x798 ; <__rust_alloc>
    5053	bf 07 00 00 00 00 00 00	r7 = r0
    5054	55 07 18 00 00 00 00 00	if r7 != 0x0 goto +0x18 <LBB408_3>
    5055	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5056	b7 02 00 00 01 00 00 00	r2 = 0x1
    5057	85 10 00 00 52 02 00 00	call 0x252 ; <alloc::alloc::handle_alloc_error>
    5058	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009e18 <LBB408_5>
    5059	07 01 00 00 e0 ff ff ff	r1 += -0x20
    5060	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    5061	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    5062	bf 13 00 00 00 00 00 00	r3 = r1
    5063	07 03 00 00 20 00 00 00	r3 += 0x20
    5064	7b 32 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r3
    5065	79 12 0f 00 00 00 00 00	r2 = *(u64 *)(r1 + 0xf)
    5066	79 13 07 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x7)
    5067	61 14 03 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x3)
    5068	63 46 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r4
    5069	61 14 00 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x0)
    5070	63 46 01 00 00 00 00 00	*(u32 *)(r6 + 0x1) = r4
    5071	71 14 1f 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x1f)
    5072	73 46 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r4
    5073	79 11 17 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x17)
    5074	7b 16 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r1
    5075	7b 36 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r3
    5076	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5077	b7 01 00 00 00 00 00 00	r1 = 0x0
    5078	05 00 23 00 00 00 00 00	goto +0x23 <LBB408_7>

0000000000009eb8 <LBB408_3>
    5079	b7 01 00 00 75 74 00 00	r1 = 0x7475
    5080	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    5081	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    5083	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    5084	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    5086	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    5087	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    5089	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    5090	b7 01 00 00 18 00 00 00	r1 = 0x18
    5091	b7 02 00 00 08 00 00 00	r2 = 0x8
    5092	85 10 00 00 40 f8 ff ff	call -0x7c0 ; <__rust_alloc>
    5093	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB408_6>
    5094	b7 01 00 00 18 00 00 00	r1 = 0x18
    5095	b7 02 00 00 08 00 00 00	r2 = 0x8
    5096	85 10 00 00 2b 02 00 00	call 0x22b ; <alloc::alloc::handle_alloc_error>
    5097	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009f50 <LBB408_6>
    5098	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5099	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    5100	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5101	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    5102	bf a1 00 00 00 00 00 00	r1 = r10
    5103	07 01 00 00 f0 ff ff ff	r1 += -0x10
    5104	b7 02 00 00 14 00 00 00	r2 = 0x14
    5105	bf 03 00 00 00 00 00 00	r3 = r0
    5106	18 04 00 00 18 3d 01 00 00 00 00 00 00 00 00 00	r4 = 0x13d18 ll
    5108	85 10 00 00 fb 00 00 00	call 0xfb ; <std::io::error::Error::_new>
    5109	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    5110	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5111	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5112	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    5113	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000009fd0 <LBB408_7>
    5114	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    5115	95 00 00 00 00 00 00 00	exit

0000000000009fe0 <solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get>
    5116	bf 16 00 00 00 00 00 00	r6 = r1
    5117	b7 01 00 00 32 00 00 00	r1 = 0x32
    5118	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
    5119	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 40	r1 = 0x4000000000000000 ll
    5121	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5122	b7 01 00 00 98 0d 00 00	r1 = 0xd98
    5123	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    5124	bf a1 00 00 00 00 00 00	r1 = r10
    5125	07 01 00 00 e8 ff ff ff	r1 += -0x18
    5126	85 10 00 00 ff ff ff ff	call -0x1 ; sol_get_rent_sysvar
    5127	bf 61 00 00 00 00 00 00	r1 = r6
    5128	07 01 00 00 08 00 00 00	r1 += 0x8
    5129	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB623_2>
    5130	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5131	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    5132	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    5133	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    5134	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    5135	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5136	b7 01 00 00 00 00 00 00	r1 = 0x0
    5137	05 00 03 00 00 00 00 00	goto +0x3 <LBB623_3>

000000000000a090 <LBB623_2>
    5138	bf 02 00 00 00 00 00 00	r2 = r0
    5139	85 10 00 00 1a fe ff ff	call -0x1e6 ; <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    5140	b7 01 00 00 01 00 00 00	r1 = 0x1

000000000000a0a8 <LBB623_3>
    5141	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5142	95 00 00 00 00 00 00 00	exit

000000000000a0b8 <bincode::config::DefaultOptions::new>
    5143	95 00 00 00 00 00 00 00	exit

000000000000a0c0 <<std::sys_common::wtf8::Wtf8Buf as core::ops::deref::DerefMut>::deref_mut>
    5144	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    5145	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    5146	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
    5147	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5148	95 00 00 00 00 00 00 00	exit

000000000000a0e8 <<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Display>::fmt>
    5149	bf 23 00 00 00 00 00 00	r3 = r2
    5150	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5151	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5152	85 10 00 00 32 08 00 00	call 0x832 ; <<str as core::fmt::Display>::fmt>
    5153	95 00 00 00 00 00 00 00	exit

000000000000a110 <<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Debug>::fmt>
    5154	bf 23 00 00 00 00 00 00	r3 = r2
    5155	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5156	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5157	85 10 00 00 e8 06 00 00	call 0x6e8 ; <<str as core::fmt::Debug>::fmt>
    5158	95 00 00 00 00 00 00 00	exit

000000000000a138 <std::io::error::ErrorKind::as_str>
    5159	b7 03 00 00 10 00 00 00	r3 = 0x10
    5160	57 02 00 00 ff 00 00 00	r2 &= 0xff
    5161	65 02 0a 00 13 00 00 00	if r2 s> 0x13 goto +0xa <LBB213_28>
    5162	65 02 18 00 09 00 00 00	if r2 s> 0x9 goto +0x18 <LBB213_15>
    5163	65 02 24 00 04 00 00 00	if r2 s> 0x4 goto +0x24 <LBB213_9>
    5164	65 02 35 00 01 00 00 00	if r2 s> 0x1 goto +0x35 <LBB213_6>
    5165	18 04 00 00 40 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b40 ll
    5167	15 02 bd 00 00 00 00 00	if r2 == 0x0 goto +0xbd <LBB213_82>
    5168	18 04 00 00 25 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e25 ll
    5170	b7 03 00 00 11 00 00 00	r3 = 0x11
    5171	05 00 b9 00 00 00 00 00	goto +0xb9 <LBB213_82>

000000000000a1a0 <LBB213_28>
    5172	65 02 07 00 1d 00 00 00	if r2 s> 0x1d goto +0x7 <LBB213_42>
    5173	65 02 20 00 18 00 00 00	if r2 s> 0x18 goto +0x20 <LBB213_36>
    5174	65 02 30 00 15 00 00 00	if r2 s> 0x15 goto +0x30 <LBB213_33>
    5175	15 02 58 00 14 00 00 00	if r2 == 0x14 goto +0x58 <LBB213_68>
    5176	18 04 00 00 b3 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cb3 ll
    5178	b7 03 00 00 0c 00 00 00	r3 = 0xc
    5179	05 00 b1 00 00 00 00 00	goto +0xb1 <LBB213_82>

000000000000a1e0 <LBB213_42>
    5180	65 02 0c 00 22 00 00 00	if r2 s> 0x22 goto +0xc <LBB213_49>
    5181	65 02 2e 00 1f 00 00 00	if r2 s> 0x1f goto +0x2e <LBB213_46>
    5182	15 02 55 00 1e 00 00 00	if r2 == 0x1e goto +0x55 <LBB213_74>
    5183	18 04 00 00 26 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c26 ll
    5185	b7 03 00 00 1b 00 00 00	r3 = 0x1b
    5186	05 00 aa 00 00 00 00 00	goto +0xaa <LBB213_82>

000000000000a218 <LBB213_15>
    5187	65 02 18 00 0e 00 00 00	if r2 s> 0xe goto +0x18 <LBB213_22>
    5188	65 02 2d 00 0b 00 00 00	if r2 s> 0xb goto +0x2d <LBB213_19>
    5189	15 02 52 00 0a 00 00 00	if r2 == 0xa goto +0x52 <LBB213_62>
    5190	18 04 00 00 a7 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12da7 ll
    5192	05 00 8b 00 00 00 00 00	goto +0x8b <LBB213_81>

000000000000a248 <LBB213_49>
    5193	65 02 2e 00 25 00 00 00	if r2 s> 0x25 goto +0x2e <LBB213_53>
    5194	15 02 51 00 23 00 00 00	if r2 == 0x23 goto +0x51 <LBB213_77>
    5195	15 02 54 00 24 00 00 00	if r2 == 0x24 goto +0x54 <LBB213_78>
    5196	18 04 00 00 bb 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bbb ll
    5198	b7 03 00 00 16 00 00 00	r3 = 0x16
    5199	05 00 9d 00 00 00 00 00	goto +0x9d <LBB213_82>

000000000000a280 <LBB213_9>
    5200	65 02 2d 00 06 00 00 00	if r2 s> 0x6 goto +0x2d <LBB213_12>
    5201	15 02 51 00 05 00 00 00	if r2 == 0x5 goto +0x51 <LBB213_58>
    5202	18 04 00 00 ee 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12dee ll
    5204	b7 03 00 00 12 00 00 00	r3 = 0x12
    5205	05 00 97 00 00 00 00 00	goto +0x97 <LBB213_82>

000000000000a2b0 <LBB213_36>
    5206	65 02 2d 00 1a 00 00 00	if r2 s> 0x1a goto +0x2d <LBB213_39>
    5207	15 02 4f 00 19 00 00 00	if r2 == 0x19 goto +0x4f <LBB213_71>
    5208	18 04 00 00 70 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c70 ll
    5210	b7 03 00 00 19 00 00 00	r3 = 0x19
    5211	05 00 91 00 00 00 00 00	goto +0x91 <LBB213_82>

000000000000a2e0 <LBB213_22>
    5212	65 02 2d 00 10 00 00 00	if r2 s> 0x10 goto +0x2d <LBB213_25>
    5213	15 02 4d 00 0f 00 00 00	if r2 == 0xf goto +0x4d <LBB213_65>
    5214	18 04 00 00 4d 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d4d ll
    5216	b7 03 00 00 13 00 00 00	r3 = 0x13
    5217	05 00 8b 00 00 00 00 00	goto +0x8b <LBB213_82>

000000000000a310 <LBB213_6>
    5218	15 02 4c 00 02 00 00 00	if r2 == 0x2 goto +0x4c <LBB213_56>
    5219	15 02 4f 00 03 00 00 00	if r2 == 0x3 goto +0x4f <LBB213_57>
    5220	18 04 00 00 70 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b70 ll
    5222	05 00 86 00 00 00 00 00	goto +0x86 <LBB213_82>

000000000000a338 <LBB213_33>
    5223	15 02 4e 00 16 00 00 00	if r2 == 0x16 goto +0x4e <LBB213_69>
    5224	15 02 51 00 17 00 00 00	if r2 == 0x17 goto +0x51 <LBB213_70>
    5225	18 04 00 00 30 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b30 ll
    5227	05 00 81 00 00 00 00 00	goto +0x81 <LBB213_82>

000000000000a360 <LBB213_46>
    5228	15 02 51 00 20 00 00 00	if r2 == 0x20 goto +0x51 <LBB213_75>
    5229	15 02 54 00 21 00 00 00	if r2 == 0x21 goto +0x54 <LBB213_76>
    5230	18 04 00 00 f1 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bf1 ll
    5232	b7 03 00 00 16 00 00 00	r3 = 0x16
    5233	05 00 7b 00 00 00 00 00	goto +0x7b <LBB213_82>

000000000000a390 <LBB213_19>
    5234	15 02 53 00 0c 00 00 00	if r2 == 0xc goto +0x53 <LBB213_63>
    5235	15 02 56 00 0d 00 00 00	if r2 == 0xd goto +0x56 <LBB213_64>
    5236	18 04 00 00 6e 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d6e ll
    5238	b7 03 00 00 0f 00 00 00	r3 = 0xf
    5239	05 00 75 00 00 00 00 00	goto +0x75 <LBB213_82>

000000000000a3c0 <LBB213_53>
    5240	15 02 55 00 26 00 00 00	if r2 == 0x26 goto +0x55 <LBB213_79>
    5241	15 02 58 00 27 00 00 00	if r2 == 0x27 goto +0x58 <LBB213_80>
    5242	18 04 00 00 90 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b90 ll
    5244	b7 03 00 00 13 00 00 00	r3 = 0x13
    5245	05 00 6f 00 00 00 00 00	goto +0x6f <LBB213_82>

000000000000a3f0 <LBB213_12>
    5246	15 02 57 00 07 00 00 00	if r2 == 0x7 goto +0x57 <LBB213_60>
    5247	15 02 5a 00 08 00 00 00	if r2 == 0x8 goto +0x5a <LBB213_61>
    5248	18 04 00 00 be 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12dbe ll
    5250	b7 03 00 00 15 00 00 00	r3 = 0x15
    5251	05 00 69 00 00 00 00 00	goto +0x69 <LBB213_82>

000000000000a420 <LBB213_39>
    5252	15 02 59 00 1b 00 00 00	if r2 == 0x1b goto +0x59 <LBB213_72>
    5253	15 02 5c 00 1c 00 00 00	if r2 == 0x1c goto +0x5c <LBB213_73>
    5254	18 04 00 00 41 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c41 ll
    5256	b7 03 00 00 14 00 00 00	r3 = 0x14
    5257	05 00 63 00 00 00 00 00	goto +0x63 <LBB213_82>

000000000000a450 <LBB213_25>
    5258	15 02 5b 00 11 00 00 00	if r2 == 0x11 goto +0x5b <LBB213_66>
    5259	15 02 5e 00 12 00 00 00	if r2 == 0x12 goto +0x5e <LBB213_67>
    5260	18 04 00 00 d6 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cd6 ll
    5262	b7 03 00 00 19 00 00 00	r3 = 0x19
    5263	05 00 5d 00 00 00 00 00	goto +0x5d <LBB213_82>

000000000000a480 <LBB213_68>
    5264	18 04 00 00 bf 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cbf ll
    5266	b7 03 00 00 17 00 00 00	r3 = 0x17
    5267	05 00 59 00 00 00 00 00	goto +0x59 <LBB213_82>

000000000000a4a0 <LBB213_74>
    5268	18 04 00 00 c0 26 01 00 00 00 00 00 00 00 00 00	r4 = 0x126c0 ll
    5270	b7 03 00 00 08 00 00 00	r3 = 0x8
    5271	05 00 55 00 00 00 00 00	goto +0x55 <LBB213_82>

000000000000a4c0 <LBB213_62>
    5272	18 04 00 00 b2 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12db2 ll
    5274	b7 03 00 00 0c 00 00 00	r3 = 0xc
    5275	05 00 51 00 00 00 00 00	goto +0x51 <LBB213_82>

000000000000a4e0 <LBB213_77>
    5276	18 04 00 00 dc 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bdc ll
    5278	b7 03 00 00 15 00 00 00	r3 = 0x15
    5279	05 00 4d 00 00 00 00 00	goto +0x4d <LBB213_82>

000000000000a500 <LBB213_78>
    5280	18 04 00 00 d1 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bd1 ll
    5282	05 00 31 00 00 00 00 00	goto +0x31 <LBB213_81>

000000000000a518 <LBB213_58>
    5283	18 04 00 00 00 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e00 ll
    5285	b7 03 00 00 13 00 00 00	r3 = 0x13
    5286	05 00 46 00 00 00 00 00	goto +0x46 <LBB213_82>

000000000000a538 <LBB213_71>
    5287	18 04 00 00 89 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c89 ll
    5289	b7 03 00 00 17 00 00 00	r3 = 0x17
    5290	05 00 42 00 00 00 00 00	goto +0x42 <LBB213_82>

000000000000a558 <LBB213_65>
    5291	18 04 00 00 60 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d60 ll
    5293	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5294	05 00 3e 00 00 00 00 00	goto +0x3e <LBB213_82>

000000000000a578 <LBB213_56>
    5295	18 04 00 00 13 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e13 ll
    5297	b7 03 00 00 12 00 00 00	r3 = 0x12
    5298	05 00 3a 00 00 00 00 00	goto +0x3a <LBB213_82>

000000000000a598 <LBB213_57>
    5299	18 04 00 00 60 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b60 ll
    5301	05 00 37 00 00 00 00 00	goto +0x37 <LBB213_82>

000000000000a5b0 <LBB213_69>
    5302	18 04 00 00 aa 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12caa ll
    5304	b7 03 00 00 09 00 00 00	r3 = 0x9
    5305	05 00 33 00 00 00 00 00	goto +0x33 <LBB213_82>

000000000000a5d0 <LBB213_70>
    5306	18 04 00 00 a0 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ca0 ll
    5308	b7 03 00 00 0a 00 00 00	r3 = 0xa
    5309	05 00 2f 00 00 00 00 00	goto +0x2f <LBB213_82>

000000000000a5f0 <LBB213_75>
    5310	18 04 00 00 18 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c18 ll
    5312	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5313	05 00 2b 00 00 00 00 00	goto +0x2b <LBB213_82>

000000000000a610 <LBB213_76>
    5314	18 04 00 00 07 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c07 ll
    5316	b7 03 00 00 11 00 00 00	r3 = 0x11
    5317	05 00 27 00 00 00 00 00	goto +0x27 <LBB213_82>

000000000000a630 <LBB213_63>
    5318	18 04 00 00 92 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d92 ll
    5320	b7 03 00 00 15 00 00 00	r3 = 0x15
    5321	05 00 23 00 00 00 00 00	goto +0x23 <LBB213_82>

000000000000a650 <LBB213_64>
    5322	18 04 00 00 7d 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d7d ll
    5324	b7 03 00 00 15 00 00 00	r3 = 0x15
    5325	05 00 1f 00 00 00 00 00	goto +0x1f <LBB213_82>

000000000000a670 <LBB213_79>
    5326	18 04 00 00 ae 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bae ll
    5328	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5329	05 00 1b 00 00 00 00 00	goto +0x1b <LBB213_82>

000000000000a690 <LBB213_80>
    5330	18 04 00 00 a3 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ba3 ll

000000000000a6a0 <LBB213_81>
    5332	b7 03 00 00 0b 00 00 00	r3 = 0xb
    5333	05 00 17 00 00 00 00 00	goto +0x17 <LBB213_82>

000000000000a6b0 <LBB213_60>
    5334	18 04 00 00 e1 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12de1 ll
    5336	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5337	05 00 13 00 00 00 00 00	goto +0x13 <LBB213_82>

000000000000a6d0 <LBB213_61>
    5338	18 04 00 00 d3 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12dd3 ll
    5340	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5341	05 00 0f 00 00 00 00 00	goto +0xf <LBB213_82>

000000000000a6f0 <LBB213_72>
    5342	18 04 00 00 62 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c62 ll
    5344	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5345	05 00 0b 00 00 00 00 00	goto +0xb <LBB213_82>

000000000000a710 <LBB213_73>
    5346	18 04 00 00 55 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c55 ll
    5348	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5349	05 00 07 00 00 00 00 00	goto +0x7 <LBB213_82>

000000000000a730 <LBB213_66>
    5350	18 04 00 00 27 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d27 ll
    5352	b7 03 00 00 26 00 00 00	r3 = 0x26
    5353	05 00 03 00 00 00 00 00	goto +0x3 <LBB213_82>

000000000000a750 <LBB213_67>
    5354	18 04 00 00 ef 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cef ll
    5356	b7 03 00 00 38 00 00 00	r3 = 0x38

000000000000a768 <LBB213_82>
    5357	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    5358	7b 41 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r4
    5359	95 00 00 00 00 00 00 00	exit

000000000000a780 <std::io::error::Error::_new>
    5360	bf 48 00 00 00 00 00 00	r8 = r4
    5361	bf 37 00 00 00 00 00 00	r7 = r3
    5362	bf 29 00 00 00 00 00 00	r9 = r2
    5363	bf 16 00 00 00 00 00 00	r6 = r1
    5364	b7 01 00 00 18 00 00 00	r1 = 0x18
    5365	b7 02 00 00 08 00 00 00	r2 = 0x8
    5366	85 10 00 00 2e f7 ff ff	call -0x8d2 ; <__rust_alloc>
    5367	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB214_2>
    5368	b7 01 00 00 18 00 00 00	r1 = 0x18
    5369	b7 02 00 00 08 00 00 00	r2 = 0x8
    5370	85 10 00 00 19 01 00 00	call 0x119 ; <alloc::alloc::handle_alloc_error>
    5371	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a7e0 <LBB214_2>
    5372	73 90 10 00 00 00 00 00	*(u8 *)(r0 + 0x10) = r9
    5373	7b 80 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r8
    5374	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    5375	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    5376	b7 01 00 00 03 00 00 00	r1 = 0x3
    5377	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5378	95 00 00 00 00 00 00 00	exit

000000000000a818 <<std::io::error::Error as core::fmt::Display>::fmt>
    5379	bf 26 00 00 00 00 00 00	r6 = r2
    5380	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    5381	65 02 1f 00 01 00 00 00	if r2 s> 0x1 goto +0x1f <LBB216_3>
    5382	15 02 26 00 00 00 00 00	if r2 == 0x0 goto +0x26 <LBB216_5>
    5383	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x1)
    5384	bf a1 00 00 00 00 00 00	r1 = r10
    5385	07 01 00 00 80 ff ff ff	r1 += -0x80
    5386	85 10 00 00 1c ff ff ff	call -0xe4 ; <std::io::error::ErrorKind::as_str>
    5387	18 01 00 00 28 ac 00 00 00 00 00 00 00 00 00 00	r1 = 0xac28 ll
    5389	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    5390	bf a1 00 00 00 00 00 00	r1 = r10
    5391	07 01 00 00 b0 ff ff ff	r1 += -0x50
    5392	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    5393	bf a1 00 00 00 00 00 00	r1 = r10
    5394	07 01 00 00 98 ff ff ff	r1 += -0x68
    5395	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5396	b7 01 00 00 00 00 00 00	r1 = 0x0
    5397	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    5398	b7 01 00 00 01 00 00 00	r1 = 0x1
    5399	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    5400	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    5401	18 01 00 00 90 3d 01 00 00 00 00 00 00 00 00 00	r1 = 0x13d90 ll
    5403	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    5404	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
    5405	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    5406	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    5407	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    5408	bf a2 00 00 00 00 00 00	r2 = r10
    5409	07 02 00 00 d0 ff ff ff	r2 += -0x30
    5410	bf 61 00 00 00 00 00 00	r1 = r6
    5411	85 10 00 00 d6 05 00 00	call 0x5d6 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    5412	05 00 18 00 00 00 00 00	goto +0x18 <LBB216_11>

000000000000a928 <LBB216_3>
    5413	15 02 12 00 02 00 00 00	if r2 == 0x2 goto +0x12 <LBB216_10>
    5414	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5415	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    5416	79 22 08 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x8)
    5417	79 23 20 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x20)
    5418	bf 62 00 00 00 00 00 00	r2 = r6
    5419	8d 00 00 00 03 00 00 00	callx r3
    5420	05 00 10 00 00 00 00 00	goto +0x10 <LBB216_11>

000000000000a968 <LBB216_5>
    5421	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x4)
    5422	63 1a 94 ff 00 00 00 00	*(u32 *)(r10 - 0x6c) = r1
    5423	b7 07 00 00 14 00 00 00	r7 = 0x14
    5424	b7 01 00 00 14 00 00 00	r1 = 0x14
    5425	b7 02 00 00 01 00 00 00	r2 = 0x1
    5426	85 10 00 00 f2 f6 ff ff	call -0x90e ; <__rust_alloc>
    5427	55 00 0c 00 00 00 00 00	if r0 != 0x0 goto +0xc <LBB216_7>
    5428	b7 01 00 00 14 00 00 00	r1 = 0x14
    5429	b7 02 00 00 01 00 00 00	r2 = 0x1
    5430	85 10 00 00 dd 00 00 00	call 0xdd ; <alloc::alloc::handle_alloc_error>
    5431	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a9c0 <LBB216_10>
    5432	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    5433	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5434	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5435	bf 63 00 00 00 00 00 00	r3 = r6
    5436	85 10 00 00 16 07 00 00	call 0x716 ; <<str as core::fmt::Display>::fmt>

000000000000a9e8 <LBB216_11>
    5437	bf 06 00 00 00 00 00 00	r6 = r0

000000000000a9f0 <LBB216_12>
    5438	bf 60 00 00 00 00 00 00	r0 = r6
    5439	95 00 00 00 00 00 00 00	exit

000000000000aa00 <LBB216_7>
    5440	b7 01 00 00 73 66 75 6c	r1 = 0x6c756673
    5441	63 10 10 00 00 00 00 00	*(u32 *)(r0 + 0x10) = r1
    5442	18 01 00 00 6e 20 73 75 00 00 00 00 63 63 65 73	r1 = 0x736563637573206e ll
    5444	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5445	18 01 00 00 6f 70 65 72 00 00 00 00 61 74 69 6f	r1 = 0x6f6974617265706f ll
    5447	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    5448	7b 7a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r7
    5449	7b 7a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r7
    5450	7b 0a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r0
    5451	b7 01 00 00 02 00 00 00	r1 = 0x2
    5452	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    5453	bf a1 00 00 00 00 00 00	r1 = r10
    5454	07 01 00 00 b0 ff ff ff	r1 += -0x50
    5455	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5456	b7 01 00 00 00 00 00 00	r1 = 0x0
    5457	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    5458	b7 01 00 00 03 00 00 00	r1 = 0x3
    5459	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    5460	18 01 00 00 a0 3d 01 00 00 00 00 00 00 00 00 00	r1 = 0x13da0 ll
    5462	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    5463	18 01 00 00 c8 fd 00 00 00 00 00 00 00 00 00 00	r1 = 0xfdc8 ll
    5465	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    5466	bf a1 00 00 00 00 00 00	r1 = r10
    5467	07 01 00 00 94 ff ff ff	r1 += -0x6c
    5468	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    5469	18 01 00 00 78 ab 00 00 00 00 00 00 00 00 00 00	r1 = 0xab78 ll
    5471	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    5472	bf a1 00 00 00 00 00 00	r1 = r10
    5473	07 01 00 00 98 ff ff ff	r1 += -0x68
    5474	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    5475	bf a2 00 00 00 00 00 00	r2 = r10
    5476	07 02 00 00 d0 ff ff ff	r2 += -0x30
    5477	bf 61 00 00 00 00 00 00	r1 = r6
    5478	85 10 00 00 93 05 00 00	call 0x593 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    5479	bf 06 00 00 00 00 00 00	r6 = r0
    5480	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
    5481	15 02 d4 ff 00 00 00 00	if r2 == 0x0 goto -0x2c <LBB216_12>
    5482	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    5483	15 01 d2 ff 00 00 00 00	if r1 == 0x0 goto -0x2e <LBB216_12>
    5484	b7 03 00 00 01 00 00 00	r3 = 0x1
    5485	85 10 00 00 b9 f6 ff ff	call -0x947 ; <__rust_dealloc>
    5486	05 00 cf ff 00 00 00 00	goto -0x31 <LBB216_12>

000000000000ab78 <<alloc::string::String as core::fmt::Display>::fmt>
    5487	bf 23 00 00 00 00 00 00	r3 = r2
    5488	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5489	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5490	85 10 00 00 e0 06 00 00	call 0x6e0 ; <<str as core::fmt::Display>::fmt>
    5491	95 00 00 00 00 00 00 00	exit

000000000000aba0 <std::process::abort>
    5492	85 10 00 00 0e 00 00 00	call 0xe ; <std::sys::sbf::abort_internal>
    5493	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000abb0 <rust_oom>
    5494	18 01 00 00 42 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12e42 ll
    5496	b7 02 00 00 2e 00 00 00	r2 = 0x2e
    5497	85 10 00 00 04 00 00 00	call 0x4 ; <std::sys::sbf::sol_log>
    5498	85 10 00 00 f9 ff ff ff	call -0x7 ; <std::process::abort>
    5499	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000abe0 <rust_begin_unwind>
    5500	85 10 00 00 03 00 00 00	call 0x3 ; <std::sys::sbf::panic>
    5501	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000abf0 <std::sys::sbf::sol_log>
    5502	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    5503	95 00 00 00 00 00 00 00	exit

000000000000ac00 <std::sys::sbf::panic>
    5504	85 10 00 00 ff ff ff ff	call -0x1 ; <std::sys::sbf::panic>
    5505	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5506	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ac18 <std::sys::sbf::abort_internal>
    5507	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5508	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ac28 <<&T as core::fmt::Display>::fmt>
    5509	bf 23 00 00 00 00 00 00	r3 = r2
    5510	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5511	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5512	85 10 00 00 ca 06 00 00	call 0x6ca ; <<str as core::fmt::Display>::fmt>
    5513	95 00 00 00 00 00 00 00	exit

000000000000ac50 <core::ops::function::FnOnce::call_once>
    5514	85 10 00 00 8b 00 00 00	call 0x8b ; <alloc::alloc::handle_alloc_error::rt_error>
    5515	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ac60 <core::ptr::drop_in_place<&u8>>
    5516	95 00 00 00 00 00 00 00	exit

000000000000ac68 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5517	bf 16 00 00 00 00 00 00	r6 = r1
    5518	bf 24 00 00 00 00 00 00	r4 = r2
    5519	0f 34 00 00 00 00 00 00	r4 += r3
    5520	b7 01 00 00 01 00 00 00	r1 = 0x1
    5521	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB2_2>
    5522	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000ac98 <LBB2_2>
    5523	57 01 00 00 01 00 00 00	r1 &= 0x1
    5524	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB2_12>
    5525	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5526	bf 17 00 00 00 00 00 00	r7 = r1
    5527	67 07 00 00 01 00 00 00	r7 <<= 0x1
    5528	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB2_5>
    5529	bf 47 00 00 00 00 00 00	r7 = r4

000000000000acd0 <LBB2_5>
    5530	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB2_7>
    5531	b7 07 00 00 08 00 00 00	r7 = 0x8

000000000000ace0 <LBB2_7>
    5532	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB2_9>
    5533	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    5534	b7 03 00 00 01 00 00 00	r3 = 0x1
    5535	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5536	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5537	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    5538	05 00 02 00 00 00 00 00	goto +0x2 <LBB2_10>

000000000000ad18 <LBB2_9>
    5539	b7 01 00 00 00 00 00 00	r1 = 0x0
    5540	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

000000000000ad28 <LBB2_10>
    5541	bf a1 00 00 00 00 00 00	r1 = r10
    5542	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5543	bf a4 00 00 00 00 00 00	r4 = r10
    5544	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5545	bf 72 00 00 00 00 00 00	r2 = r7
    5546	b7 03 00 00 01 00 00 00	r3 = 0x1
    5547	85 10 00 00 39 00 00 00	call 0x39 ; <alloc::raw_vec::finish_grow>
    5548	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    5549	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB2_14>
    5550	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    5551	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB2_13>

000000000000ad80 <LBB2_12>
    5552	85 10 00 00 5c 00 00 00	call 0x5c ; <alloc::raw_vec::capacity_overflow>
    5553	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ad90 <LBB2_14>
    5554	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5555	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5556	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5557	95 00 00 00 00 00 00 00	exit

000000000000adb0 <LBB2_13>
    5558	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5559	85 10 00 00 5c 00 00 00	call 0x5c ; <alloc::alloc::handle_alloc_error>
    5560	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000adc8 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    5561	bf 16 00 00 00 00 00 00	r6 = r1
    5562	bf 23 00 00 00 00 00 00	r3 = r2
    5563	07 03 00 00 01 00 00 00	r3 += 0x1
    5564	b7 01 00 00 01 00 00 00	r1 = 0x1
    5565	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB3_2>
    5566	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000adf8 <LBB3_2>
    5567	57 01 00 00 01 00 00 00	r1 &= 0x1
    5568	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB3_12>
    5569	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5570	bf 17 00 00 00 00 00 00	r7 = r1
    5571	67 07 00 00 01 00 00 00	r7 <<= 0x1
    5572	2d 37 01 00 00 00 00 00	if r7 > r3 goto +0x1 <LBB3_5>
    5573	bf 37 00 00 00 00 00 00	r7 = r3

000000000000ae30 <LBB3_5>
    5574	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB3_7>
    5575	b7 07 00 00 08 00 00 00	r7 = 0x8

000000000000ae40 <LBB3_7>
    5576	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB3_9>
    5577	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    5578	b7 03 00 00 01 00 00 00	r3 = 0x1
    5579	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5580	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5581	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    5582	05 00 02 00 00 00 00 00	goto +0x2 <LBB3_10>

000000000000ae78 <LBB3_9>
    5583	b7 01 00 00 00 00 00 00	r1 = 0x0
    5584	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

000000000000ae88 <LBB3_10>
    5585	bf a1 00 00 00 00 00 00	r1 = r10
    5586	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5587	bf a4 00 00 00 00 00 00	r4 = r10
    5588	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5589	bf 72 00 00 00 00 00 00	r2 = r7
    5590	b7 03 00 00 01 00 00 00	r3 = 0x1
    5591	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
    5592	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    5593	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB3_14>
    5594	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    5595	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB3_13>

000000000000aee0 <LBB3_12>
    5596	85 10 00 00 30 00 00 00	call 0x30 ; <alloc::raw_vec::capacity_overflow>
    5597	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000aef0 <LBB3_14>
    5598	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5599	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5600	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5601	95 00 00 00 00 00 00 00	exit

000000000000af10 <LBB3_13>
    5602	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5603	85 10 00 00 30 00 00 00	call 0x30 ; <alloc::alloc::handle_alloc_error>
    5604	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000af28 <alloc::raw_vec::finish_grow>
    5605	bf 38 00 00 00 00 00 00	r8 = r3
    5606	bf 27 00 00 00 00 00 00	r7 = r2
    5607	bf 16 00 00 00 00 00 00	r6 = r1
    5608	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB4_12>
    5609	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5610	b7 01 00 00 01 00 00 00	r1 = 0x1
    5611	b7 07 00 00 00 00 00 00	r7 = 0x0
    5612	05 00 1d 00 00 00 00 00	goto +0x1d <LBB4_2>

000000000000af68 <LBB4_12>
    5613	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    5614	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB4_7>
    5615	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    5616	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB4_6>
    5617	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB4_9>
    5618	bf 71 00 00 00 00 00 00	r1 = r7
    5619	bf 82 00 00 00 00 00 00	r2 = r8
    5620	85 10 00 00 30 f6 ff ff	call -0x9d0 ; <__rust_alloc>
    5621	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB4_11>
    5622	05 00 11 00 00 00 00 00	goto +0x11 <LBB4_10>

000000000000afb8 <LBB4_6>
    5623	bf 83 00 00 00 00 00 00	r3 = r8
    5624	bf 74 00 00 00 00 00 00	r4 = r7
    5625	85 10 00 00 2f f6 ff ff	call -0x9d1 ; <__rust_realloc>
    5626	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB4_11>
    5627	05 00 0c 00 00 00 00 00	goto +0xc <LBB4_10>

000000000000afe0 <LBB4_7>
    5628	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB4_9>
    5629	bf 71 00 00 00 00 00 00	r1 = r7
    5630	bf 82 00 00 00 00 00 00	r2 = r8
    5631	85 10 00 00 25 f6 ff ff	call -0x9db ; <__rust_alloc>
    5632	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB4_11>
    5633	05 00 06 00 00 00 00 00	goto +0x6 <LBB4_10>

000000000000b010 <LBB4_11>
    5634	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5635	b7 01 00 00 01 00 00 00	r1 = 0x1
    5636	bf 87 00 00 00 00 00 00	r7 = r8
    5637	05 00 04 00 00 00 00 00	goto +0x4 <LBB4_2>

000000000000b030 <LBB4_9>
    5638	b7 07 00 00 00 00 00 00	r7 = 0x0
    5639	bf 80 00 00 00 00 00 00	r0 = r8

000000000000b040 <LBB4_10>
    5640	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    5641	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000b050 <LBB4_2>
    5642	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5643	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    5644	95 00 00 00 00 00 00 00	exit

000000000000b068 <alloc::raw_vec::capacity_overflow>
    5645	18 01 00 00 8c 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12e8c ll
    5647	b7 02 00 00 11 00 00 00	r2 = 0x11
    5648	18 03 00 00 d0 3d 01 00 00 00 00 00 00 00 00 00	r3 = 0x13dd0 ll
    5650	85 10 00 00 2a 02 00 00	call 0x22a ; <core::panicking::panic>
    5651	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b0a0 <alloc::alloc::handle_alloc_error>
    5652	85 10 00 00 05 00 00 00	call 0x5 ; <core::intrinsics::const_eval_select>
    5653	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b0b0 <alloc::alloc::handle_alloc_error::rt_error>
    5654	85 10 00 00 14 f6 ff ff	call -0x9ec ; <__rust_alloc_error_handler>
    5655	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b0c0 <__rg_oom>
    5656	85 10 00 00 5d ff ff ff	call -0xa3 ; <rust_oom>
    5657	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b0d0 <core::intrinsics::const_eval_select>
    5658	85 10 00 00 6f ff ff ff	call -0x91 ; <core::ops::function::FnOnce::call_once>
    5659	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b0e0 <alloc::fmt::format>
    5660	bf 26 00 00 00 00 00 00	r6 = r2
    5661	bf 17 00 00 00 00 00 00	r7 = r1
    5662	b7 08 00 00 00 00 00 00	r8 = 0x0
    5663	79 63 28 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x28)
    5664	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5665	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x8)
    5666	bf 24 00 00 00 00 00 00	r4 = r2
    5667	67 04 00 00 04 00 00 00	r4 <<= 0x4
    5668	15 04 09 00 00 00 00 00	if r4 == 0x0 goto +0x9 <LBB20_3>
    5669	b7 00 00 00 00 00 00 00	r0 = 0x0
    5670	bf 15 00 00 00 00 00 00	r5 = r1
    5671	07 05 00 00 08 00 00 00	r5 += 0x8

000000000000b140 <LBB20_2>
    5672	79 58 00 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x0)
    5673	0f 08 00 00 00 00 00 00	r8 += r0
    5674	07 05 00 00 10 00 00 00	r5 += 0x10
    5675	07 04 00 00 f0 ff ff ff	r4 += -0x10
    5676	bf 80 00 00 00 00 00 00	r0 = r8
    5677	55 04 fa ff 00 00 00 00	if r4 != 0x0 goto -0x6 <LBB20_2>

000000000000b170 <LBB20_3>
    5678	15 03 11 00 00 00 00 00	if r3 == 0x0 goto +0x11 <LBB20_10>
    5679	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB20_7>
    5680	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    5681	55 01 04 00 00 00 00 00	if r1 != 0x0 goto +0x4 <LBB20_7>
    5682	b7 00 00 00 01 00 00 00	r0 = 0x1
    5683	b7 01 00 00 00 00 00 00	r1 = 0x0
    5684	b7 02 00 00 10 00 00 00	r2 = 0x10
    5685	2d 82 16 00 00 00 00 00	if r2 > r8 goto +0x16 <LBB20_13>

000000000000b1b0 <LBB20_7>
    5686	bf 82 00 00 00 00 00 00	r2 = r8
    5687	0f 22 00 00 00 00 00 00	r2 += r2
    5688	b7 01 00 00 00 00 00 00	r1 = 0x0
    5689	b7 00 00 00 01 00 00 00	r0 = 0x1
    5690	b7 03 00 00 01 00 00 00	r3 = 0x1
    5691	2d 28 01 00 00 00 00 00	if r8 > r2 goto +0x1 <LBB20_9>
    5692	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000b1e8 <LBB20_9>
    5693	57 03 00 00 01 00 00 00	r3 &= 0x1
    5694	bf 28 00 00 00 00 00 00	r8 = r2
    5695	55 03 0c 00 00 00 00 00	if r3 != 0x0 goto +0xc <LBB20_13>

000000000000b200 <LBB20_10>
    5696	b7 00 00 00 01 00 00 00	r0 = 0x1
    5697	b7 01 00 00 00 00 00 00	r1 = 0x0
    5698	15 08 09 00 00 00 00 00	if r8 == 0x0 goto +0x9 <LBB20_13>
    5699	bf 81 00 00 00 00 00 00	r1 = r8
    5700	b7 02 00 00 01 00 00 00	r2 = 0x1
    5701	85 10 00 00 df f5 ff ff	call -0xa21 ; <__rust_alloc>
    5702	bf 81 00 00 00 00 00 00	r1 = r8
    5703	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB20_13>
    5704	bf 81 00 00 00 00 00 00	r1 = r8
    5705	b7 02 00 00 01 00 00 00	r2 = 0x1
    5706	85 10 00 00 c9 ff ff ff	call -0x37 ; <alloc::alloc::handle_alloc_error>
    5707	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b260 <LBB20_13>
    5708	b7 02 00 00 00 00 00 00	r2 = 0x0
    5709	7b 27 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r2
    5710	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    5711	7b 07 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r0
    5712	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    5713	bf a7 00 00 00 00 00 00	r7 = r10
    5714	07 07 00 00 d0 ff ff ff	r7 += -0x30
    5715	bf 71 00 00 00 00 00 00	r1 = r7
    5716	bf 62 00 00 00 00 00 00	r2 = r6
    5717	b7 03 00 00 30 00 00 00	r3 = 0x30
    5718	85 10 00 00 78 0c 00 00	call 0xc78 ; <memcpy>
    5719	bf a1 00 00 00 00 00 00	r1 = r10
    5720	07 01 00 00 c8 ff ff ff	r1 += -0x38
    5721	18 02 00 00 20 3e 01 00 00 00 00 00 00 00 00 00	r2 = 0x13e20 ll
    5723	bf 73 00 00 00 00 00 00	r3 = r7
    5724	85 10 00 00 45 02 00 00	call 0x245 ; <core::fmt::write>
    5725	15 00 0b 00 00 00 00 00	if r0 == 0x0 goto +0xb <LBB20_15>
    5726	bf a3 00 00 00 00 00 00	r3 = r10
    5727	07 03 00 00 d0 ff ff ff	r3 += -0x30
    5728	18 01 00 00 9d 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12e9d ll
    5730	b7 02 00 00 33 00 00 00	r2 = 0x33
    5731	18 04 00 00 00 3e 01 00 00 00 00 00 00 00 00 00	r4 = 0x13e00 ll
    5733	18 05 00 00 e8 3d 01 00 00 00 00 00 00 00 00 00	r5 = 0x13de8 ll
    5735	85 10 00 00 0f 02 00 00	call 0x20f ; <core::result::unwrap_failed>
    5736	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b348 <LBB20_15>
    5737	95 00 00 00 00 00 00 00	exit

000000000000b350 <alloc::string::String::push>
    5738	bf 27 00 00 00 00 00 00	r7 = r2
    5739	bf 16 00 00 00 00 00 00	r6 = r1
    5740	bf 71 00 00 00 00 00 00	r1 = r7
    5741	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5742	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5743	25 01 0c 00 7f 00 00 00	if r1 > 0x7f goto +0xc <LBB30_4>
    5744	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    5745	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5746	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB30_3>
    5747	bf 61 00 00 00 00 00 00	r1 = r6
    5748	85 10 00 00 44 ff ff ff	call -0xbc ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    5749	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

000000000000b3b0 <LBB30_3>
    5750	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5751	0f 21 00 00 00 00 00 00	r1 += r2
    5752	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    5753	07 02 00 00 01 00 00 00	r2 += 0x1
    5754	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5755	05 00 42 00 00 00 00 00	goto +0x42 <LBB30_12>

000000000000b3e0 <LBB30_4>
    5756	b7 02 00 00 00 00 00 00	r2 = 0x0
    5757	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    5758	b7 02 00 00 00 08 00 00	r2 = 0x800
    5759	2d 12 13 00 00 00 00 00	if r2 > r1 goto +0x13 <LBB30_6>
    5760	bf 71 00 00 00 00 00 00	r1 = r7
    5761	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5762	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5763	b7 02 00 00 00 00 01 00	r2 = 0x10000
    5764	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB30_7>
    5765	05 00 16 00 00 00 00 00	goto +0x16 <LBB30_8>

000000000000b430 <LBB30_7>
    5766	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    5767	47 07 00 00 80 00 00 00	r7 |= 0x80
    5768	73 7a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r7
    5769	bf 12 00 00 00 00 00 00	r2 = r1
    5770	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    5771	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    5772	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    5773	77 01 00 00 06 00 00 00	r1 >>= 0x6
    5774	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5775	47 01 00 00 80 00 00 00	r1 |= 0x80
    5776	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5777	b7 07 00 00 03 00 00 00	r7 = 0x3
    5778	05 00 1a 00 00 00 00 00	goto +0x1a <LBB30_9>

000000000000b498 <LBB30_6>
    5779	bf 71 00 00 00 00 00 00	r1 = r7
    5780	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5781	47 01 00 00 80 00 00 00	r1 |= 0x80
    5782	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5783	77 07 00 00 06 00 00 00	r7 >>= 0x6
    5784	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    5785	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    5786	b7 07 00 00 02 00 00 00	r7 = 0x2
    5787	05 00 11 00 00 00 00 00	goto +0x11 <LBB30_9>

000000000000b4e0 <LBB30_8>
    5788	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    5789	47 07 00 00 80 00 00 00	r7 |= 0x80
    5790	73 7a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r7
    5791	bf 12 00 00 00 00 00 00	r2 = r1
    5792	77 02 00 00 12 00 00 00	r2 >>= 0x12
    5793	47 02 00 00 f0 00 00 00	r2 |= 0xf0
    5794	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    5795	bf 12 00 00 00 00 00 00	r2 = r1
    5796	77 02 00 00 06 00 00 00	r2 >>= 0x6
    5797	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    5798	47 02 00 00 80 00 00 00	r2 |= 0x80
    5799	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    5800	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    5801	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5802	47 01 00 00 80 00 00 00	r1 |= 0x80
    5803	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5804	b7 07 00 00 04 00 00 00	r7 = 0x4

000000000000b568 <LBB30_9>
    5805	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    5806	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5807	1f 81 00 00 00 00 00 00	r1 -= r8
    5808	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB30_11>
    5809	bf 61 00 00 00 00 00 00	r1 = r6
    5810	bf 82 00 00 00 00 00 00	r2 = r8
    5811	bf 73 00 00 00 00 00 00	r3 = r7
    5812	85 10 00 00 d8 fe ff ff	call -0x128 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5813	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

000000000000b5b0 <LBB30_11>
    5814	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5815	0f 81 00 00 00 00 00 00	r1 += r8
    5816	bf a2 00 00 00 00 00 00	r2 = r10
    5817	07 02 00 00 fc ff ff ff	r2 += -0x4
    5818	bf 73 00 00 00 00 00 00	r3 = r7
    5819	85 10 00 00 13 0c 00 00	call 0xc13 ; <memcpy>
    5820	0f 78 00 00 00 00 00 00	r8 += r7
    5821	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

000000000000b5f0 <LBB30_12>
    5822	95 00 00 00 00 00 00 00	exit

000000000000b5f8 <<&mut W as core::fmt::Write>::write_str>
    5823	bf 36 00 00 00 00 00 00	r6 = r3
    5824	bf 28 00 00 00 00 00 00	r8 = r2
    5825	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    5826	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    5827	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    5828	1f 91 00 00 00 00 00 00	r1 -= r9
    5829	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB60_2>
    5830	bf 71 00 00 00 00 00 00	r1 = r7
    5831	bf 92 00 00 00 00 00 00	r2 = r9
    5832	bf 63 00 00 00 00 00 00	r3 = r6
    5833	85 10 00 00 c3 fe ff ff	call -0x13d ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5834	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

000000000000b658 <LBB60_2>
    5835	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    5836	0f 91 00 00 00 00 00 00	r1 += r9
    5837	bf 82 00 00 00 00 00 00	r2 = r8
    5838	bf 63 00 00 00 00 00 00	r3 = r6
    5839	85 10 00 00 ff 0b 00 00	call 0xbff ; <memcpy>
    5840	0f 69 00 00 00 00 00 00	r9 += r6
    5841	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    5842	b7 00 00 00 00 00 00 00	r0 = 0x0
    5843	95 00 00 00 00 00 00 00	exit

000000000000b6a0 <<&mut W as core::fmt::Write>::write_char>
    5844	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5845	85 10 00 00 94 ff ff ff	call -0x6c ; <alloc::string::String::push>
    5846	b7 00 00 00 00 00 00 00	r0 = 0x0
    5847	95 00 00 00 00 00 00 00	exit

000000000000b6c0 <<&mut W as core::fmt::Write>::write_fmt>
    5848	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5849	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    5850	bf a6 00 00 00 00 00 00	r6 = r10
    5851	07 06 00 00 d0 ff ff ff	r6 += -0x30
    5852	bf 61 00 00 00 00 00 00	r1 = r6
    5853	b7 03 00 00 30 00 00 00	r3 = 0x30
    5854	85 10 00 00 f0 0b 00 00	call 0xbf0 ; <memcpy>
    5855	bf a1 00 00 00 00 00 00	r1 = r10
    5856	07 01 00 00 c8 ff ff ff	r1 += -0x38
    5857	18 02 00 00 20 3e 01 00 00 00 00 00 00 00 00 00	r2 = 0x13e20 ll
    5859	bf 63 00 00 00 00 00 00	r3 = r6
    5860	85 10 00 00 bd 01 00 00	call 0x1bd ; <core::fmt::write>
    5861	95 00 00 00 00 00 00 00	exit

000000000000b730 <core::ops::function::FnOnce::call_once>
    5862	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5863	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5864	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b748 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>>
    5865	95 00 00 00 00 00 00 00	exit

000000000000b750 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt>
    5866	bf 26 00 00 00 00 00 00	r6 = r2
    5867	bf 17 00 00 00 00 00 00	r7 = r1
    5868	85 10 00 00 f6 07 00 00	call 0x7f6 ; <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    5869	bf 01 00 00 00 00 00 00	r1 = r0
    5870	b7 00 00 00 01 00 00 00	r0 = 0x1
    5871	55 01 13 00 00 00 00 00	if r1 != 0x0 goto +0x13 <LBB70_2>
    5872	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    5873	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    5874	18 03 00 00 e8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12ee8 ll
    5876	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
    5877	b7 03 00 00 00 00 00 00	r3 = 0x0
    5878	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5879	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    5880	18 03 00 00 50 3e 01 00 00 00 00 00 00 00 00 00	r3 = 0x13e50 ll
    5882	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    5883	b7 03 00 00 01 00 00 00	r3 = 0x1
    5884	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    5885	bf a3 00 00 00 00 00 00	r3 = r10
    5886	07 03 00 00 d0 ff ff ff	r3 += -0x30
    5887	85 10 00 00 a2 01 00 00	call 0x1a2 ; <core::fmt::write>
    5888	bf 01 00 00 00 00 00 00	r1 = r0
    5889	b7 00 00 00 01 00 00 00	r0 = 0x1
    5890	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB70_3>

000000000000b818 <LBB70_2>
    5891	95 00 00 00 00 00 00 00	exit

000000000000b820 <LBB70_3>
    5892	07 07 00 00 08 00 00 00	r7 += 0x8
    5893	bf 71 00 00 00 00 00 00	r1 = r7
    5894	bf 62 00 00 00 00 00 00	r2 = r6
    5895	85 10 00 00 db 07 00 00	call 0x7db ; <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    5896	bf 01 00 00 00 00 00 00	r1 = r0
    5897	b7 00 00 00 00 00 00 00	r0 = 0x0
    5898	15 01 f8 ff 00 00 00 00	if r1 == 0x0 goto -0x8 <LBB70_2>
    5899	b7 00 00 00 01 00 00 00	r0 = 0x1
    5900	05 00 f6 ff 00 00 00 00	goto -0xa <LBB70_2>

000000000000b868 <<T as core::any::Any>::type_id>
    5901	18 00 00 00 24 5c 34 ae 00 00 00 00 4d b3 17 4e	r0 = 0x4e17b34dae345c24 ll
    5903	95 00 00 00 00 00 00 00	exit

000000000000b880 <<core::cell::BorrowError as core::fmt::Debug>::fmt>
    5904	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    5905	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    5906	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    5907	18 02 00 00 ea 2e 01 00 00 00 00 00 00 00 00 00	r2 = 0x12eea ll
    5909	b7 03 00 00 0b 00 00 00	r3 = 0xb
    5910	8d 00 00 00 04 00 00 00	callx r4
    5911	95 00 00 00 00 00 00 00	exit

000000000000b8c0 <core::char::methods::<impl char>::escape_debug_ext>
    5912	bf 27 00 00 00 00 00 00	r7 = r2
    5913	bf 16 00 00 00 00 00 00	r6 = r1
    5914	b7 01 00 00 02 00 00 00	r1 = 0x2
    5915	bf 75 00 00 00 00 00 00	r5 = r7
    5916	67 05 00 00 20 00 00 00	r5 <<= 0x20
    5917	77 05 00 00 20 00 00 00	r5 >>= 0x20
    5918	65 05 09 00 21 00 00 00	if r5 s> 0x21 goto +0x9 <LBB91_4>
    5919	b7 04 00 00 74 00 00 00	r4 = 0x74
    5920	15 05 ad 00 09 00 00 00	if r5 == 0x9 goto +0xad <LBB91_14>
    5921	15 05 04 00 0a 00 00 00	if r5 == 0xa goto +0x4 <LBB91_10>
    5922	15 05 01 00 0d 00 00 00	if r5 == 0xd goto +0x1 <LBB91_8>
    5923	05 00 07 00 00 00 00 00	goto +0x7 <LBB91_7>

000000000000b920 <LBB91_8>
    5924	b7 04 00 00 72 00 00 00	r4 = 0x72
    5925	05 00 a8 00 00 00 00 00	goto +0xa8 <LBB91_14>

000000000000b930 <LBB91_10>
    5926	b7 04 00 00 6e 00 00 00	r4 = 0x6e
    5927	05 00 a6 00 00 00 00 00	goto +0xa6 <LBB91_14>

000000000000b940 <LBB91_4>
    5928	15 05 5c 00 22 00 00 00	if r5 == 0x22 goto +0x5c <LBB91_12>
    5929	15 05 a0 00 27 00 00 00	if r5 == 0x27 goto +0xa0 <LBB91_13>
    5930	15 05 5f 00 5c 00 00 00	if r5 == 0x5c goto +0x5f <LBB91_11>

000000000000b958 <LBB91_7>
    5931	57 03 00 00 01 00 00 00	r3 &= 0x1
    5932	15 03 03 00 00 00 00 00	if r3 == 0x0 goto +0x3 <LBB91_16>
    5933	bf 71 00 00 00 00 00 00	r1 = r7
    5934	85 10 00 00 cd 09 00 00	call 0x9cd ; <core::unicode::unicode_data::grapheme_extend::lookup>
    5935	55 00 1a 00 00 00 00 00	if r0 != 0x0 goto +0x1a <LBB91_28>

000000000000b980 <LBB91_16>
    5936	bf 71 00 00 00 00 00 00	r1 = r7
    5937	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5938	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5939	b7 02 00 00 00 00 01 00	r2 = 0x10000
    5940	2d 12 57 00 00 00 00 00	if r2 > r1 goto +0x57 <LBB91_18>
    5941	b7 02 00 00 00 00 02 00	r2 = 0x20000
    5942	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB91_27>
    5943	05 00 67 00 00 00 00 00	goto +0x67 <LBB91_19>

000000000000b9c0 <LBB91_27>
    5944	18 01 00 00 f8 34 01 00 00 00 00 00 00 00 00 00	r1 = 0x134f8 ll
    5946	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    5947	b7 01 00 00 b6 01 00 00	r1 = 0x1b6
    5948	7b 1a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r1
    5949	b7 01 00 00 c0 00 00 00	r1 = 0xc0
    5950	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    5951	bf a5 00 00 00 00 00 00	r5 = r10
    5952	bf 71 00 00 00 00 00 00	r1 = r7
    5953	18 02 00 00 e4 33 01 00 00 00 00 00 00 00 00 00	r2 = 0x133e4 ll
    5955	b7 03 00 00 2a 00 00 00	r3 = 0x2a
    5956	18 04 00 00 38 34 01 00 00 00 00 00 00 00 00 00	r4 = 0x13438 ll
    5958	85 10 00 00 de 06 00 00	call 0x6de ; <core::unicode::printable::check>
    5959	b7 01 00 00 01 00 00 00	r1 = 0x1
    5960	bf 74 00 00 00 00 00 00	r4 = r7
    5961	55 00 84 00 00 00 00 00	if r0 != 0x0 goto +0x84 <LBB91_14>

000000000000ba50 <LBB91_28>
    5962	bf 71 00 00 00 00 00 00	r1 = r7
    5963	47 01 00 00 01 00 00 00	r1 |= 0x1
    5964	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5965	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5966	bf 12 00 00 00 00 00 00	r2 = r1
    5967	77 02 00 00 01 00 00 00	r2 >>= 0x1
    5968	4f 21 00 00 00 00 00 00	r1 |= r2
    5969	bf 12 00 00 00 00 00 00	r2 = r1
    5970	77 02 00 00 02 00 00 00	r2 >>= 0x2
    5971	4f 21 00 00 00 00 00 00	r1 |= r2
    5972	bf 12 00 00 00 00 00 00	r2 = r1
    5973	77 02 00 00 04 00 00 00	r2 >>= 0x4
    5974	4f 21 00 00 00 00 00 00	r1 |= r2
    5975	67 07 00 00 20 00 00 00	r7 <<= 0x20
    5976	77 07 00 00 20 00 00 00	r7 >>= 0x20
    5977	18 02 00 00 00 00 00 00 00 00 00 00 05 00 00 00	r2 = 0x500000000 ll
    5979	4f 27 00 00 00 00 00 00	r7 |= r2
    5980	bf 12 00 00 00 00 00 00	r2 = r1
    5981	77 02 00 00 08 00 00 00	r2 >>= 0x8
    5982	4f 21 00 00 00 00 00 00	r1 |= r2
    5983	bf 12 00 00 00 00 00 00	r2 = r1
    5984	77 02 00 00 10 00 00 00	r2 >>= 0x10
    5985	4f 21 00 00 00 00 00 00	r1 |= r2
    5986	bf 12 00 00 00 00 00 00	r2 = r1
    5987	77 02 00 00 20 00 00 00	r2 >>= 0x20
    5988	4f 21 00 00 00 00 00 00	r1 |= r2
    5989	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    5990	18 02 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r2 = 0x5555555555555555 ll
    5992	bf 13 00 00 00 00 00 00	r3 = r1
    5993	77 03 00 00 01 00 00 00	r3 >>= 0x1
    5994	5f 23 00 00 00 00 00 00	r3 &= r2
    5995	1f 31 00 00 00 00 00 00	r1 -= r3
    5996	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    5998	bf 12 00 00 00 00 00 00	r2 = r1
    5999	5f 32 00 00 00 00 00 00	r2 &= r3
    6000	77 01 00 00 02 00 00 00	r1 >>= 0x2
    6001	5f 31 00 00 00 00 00 00	r1 &= r3
    6002	0f 12 00 00 00 00 00 00	r2 += r1
    6003	bf 21 00 00 00 00 00 00	r1 = r2
    6004	77 01 00 00 04 00 00 00	r1 >>= 0x4
    6005	0f 12 00 00 00 00 00 00	r2 += r1
    6006	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    6008	5f 12 00 00 00 00 00 00	r2 &= r1
    6009	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    6011	2f 12 00 00 00 00 00 00	r2 *= r1
    6012	77 02 00 00 38 00 00 00	r2 >>= 0x38
    6013	07 02 00 00 e0 ff ff ff	r2 += -0x20
    6014	18 01 00 00 fc ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xfffffffc ll
    6016	5f 12 00 00 00 00 00 00	r2 &= r1
    6017	b7 01 00 00 03 00 00 00	r1 = 0x3
    6018	77 02 00 00 02 00 00 00	r2 >>= 0x2
    6019	a7 02 00 00 07 00 00 00	r2 ^= 0x7
    6020	05 00 49 00 00 00 00 00	goto +0x49 <LBB91_14>

000000000000bc28 <LBB91_12>
    6021	b7 04 00 00 22 00 00 00	r4 = 0x22
    6022	bf 35 00 00 00 00 00 00	r5 = r3
    6023	57 05 00 00 00 00 01 00	r5 &= 0x10000
    6024	15 05 a2 ff 00 00 00 00	if r5 == 0x0 goto -0x5e <LBB91_7>
    6025	05 00 44 00 00 00 00 00	goto +0x44 <LBB91_14>

000000000000bc50 <LBB91_11>
    6026	b7 04 00 00 5c 00 00 00	r4 = 0x5c
    6027	05 00 42 00 00 00 00 00	goto +0x42 <LBB91_14>

000000000000bc60 <LBB91_18>
    6028	18 01 00 00 b5 32 01 00 00 00 00 00 00 00 00 00	r1 = 0x132b5 ll
    6030	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    6031	b7 01 00 00 2f 01 00 00	r1 = 0x12f
    6032	7b 1a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r1
    6033	b7 01 00 00 20 01 00 00	r1 = 0x120
    6034	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    6035	bf a5 00 00 00 00 00 00	r5 = r10
    6036	bf 71 00 00 00 00 00 00	r1 = r7
    6037	18 02 00 00 45 31 01 00 00 00 00 00 00 00 00 00	r2 = 0x13145 ll
    6039	b7 03 00 00 28 00 00 00	r3 = 0x28
    6040	18 04 00 00 95 31 01 00 00 00 00 00 00 00 00 00	r4 = 0x13195 ll
    6042	85 10 00 00 8a 06 00 00	call 0x68a ; <core::unicode::printable::check>
    6043	b7 01 00 00 01 00 00 00	r1 = 0x1
    6044	bf 74 00 00 00 00 00 00	r4 = r7
    6045	55 00 30 00 00 00 00 00	if r0 != 0x0 goto +0x30 <LBB91_14>
    6046	05 00 ab ff 00 00 00 00	goto -0x55 <LBB91_28>

000000000000bcf8 <LBB91_19>
    6047	bf 71 00 00 00 00 00 00	r1 = r7
    6048	57 01 00 00 e0 ff 1f 00	r1 &= 0x1fffe0
    6049	15 01 a8 ff e0 a6 02 00	if r1 == 0x2a6e0 goto -0x58 <LBB91_28>
    6050	bf 71 00 00 00 00 00 00	r1 = r7
    6051	07 01 00 00 c7 48 fd ff	r1 += -0x2b739
    6052	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6053	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6054	b7 02 00 00 07 00 00 00	r2 = 0x7
    6055	2d 12 a2 ff 00 00 00 00	if r2 > r1 goto -0x5e <LBB91_28>
    6056	bf 71 00 00 00 00 00 00	r1 = r7
    6057	57 01 00 00 fe ff 1f 00	r1 &= 0x1ffffe
    6058	15 01 9f ff 1e b8 02 00	if r1 == 0x2b81e goto -0x61 <LBB91_28>
    6059	bf 71 00 00 00 00 00 00	r1 = r7
    6060	07 01 00 00 5e 31 fd ff	r1 += -0x2cea2
    6061	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6062	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6063	b7 02 00 00 0e 00 00 00	r2 = 0xe
    6064	2d 12 99 ff 00 00 00 00	if r2 > r1 goto -0x67 <LBB91_28>
    6065	bf 71 00 00 00 00 00 00	r1 = r7
    6066	07 01 00 00 1f 14 fd ff	r1 += -0x2ebe1
    6067	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6068	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6069	b7 02 00 00 1f 0c 00 00	r2 = 0xc1f
    6070	2d 12 93 ff 00 00 00 00	if r2 > r1 goto -0x6d <LBB91_28>
    6071	bf 71 00 00 00 00 00 00	r1 = r7
    6072	07 01 00 00 e2 05 fd ff	r1 += -0x2fa1e
    6073	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6074	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6075	b7 02 00 00 e2 05 00 00	r2 = 0x5e2
    6076	2d 12 8d ff 00 00 00 00	if r2 > r1 goto -0x73 <LBB91_28>
    6077	bf 71 00 00 00 00 00 00	r1 = r7
    6078	07 01 00 00 b5 ec fc ff	r1 += -0x3134b
    6079	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6080	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6081	b7 02 00 00 b5 ed 0a 00	r2 = 0xaedb5
    6082	2d 12 87 ff 00 00 00 00	if r2 > r1 goto -0x79 <LBB91_28>
    6083	b7 01 00 00 01 00 00 00	r1 = 0x1
    6084	bf 73 00 00 00 00 00 00	r3 = r7
    6085	67 03 00 00 20 00 00 00	r3 <<= 0x20
    6086	77 03 00 00 20 00 00 00	r3 >>= 0x20
    6087	bf 74 00 00 00 00 00 00	r4 = r7
    6088	25 03 81 ff ef 01 0e 00	if r3 > 0xe01ef goto -0x7f <LBB91_28>
    6089	05 00 04 00 00 00 00 00	goto +0x4 <LBB91_14>

000000000000be50 <LBB91_13>
    6090	b7 04 00 00 27 00 00 00	r4 = 0x27
    6091	bf 35 00 00 00 00 00 00	r5 = r3
    6092	57 05 00 00 00 01 00 00	r5 &= 0x100
    6093	15 05 5d ff 00 00 00 00	if r5 == 0x0 goto -0xa3 <LBB91_7>

000000000000be70 <LBB91_14>
    6094	7b 26 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r2
    6095	63 46 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r4
    6096	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
    6097	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    6098	95 00 00 00 00 00 00 00	exit

000000000000be98 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt>
    6099	bf 18 00 00 00 00 00 00	r8 = r1
    6100	79 26 20 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x20)
    6101	79 27 28 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x28)
    6102	79 74 18 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x18)
    6103	bf 61 00 00 00 00 00 00	r1 = r6
    6104	18 02 00 00 21 2f 01 00 00 00 00 00 00 00 00 00	r2 = 0x12f21 ll
    6106	b7 03 00 00 0c 00 00 00	r3 = 0xc
    6107	8d 00 00 00 04 00 00 00	callx r4
    6108	b7 09 00 00 01 00 00 00	r9 = 0x1
    6109	55 00 5d 00 00 00 00 00	if r0 != 0x0 goto +0x5d <LBB125_6>
    6110	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    6111	15 01 1a 00 00 00 00 00	if r1 == 0x0 goto +0x1a <LBB125_3>
    6112	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    6113	18 01 00 00 48 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10748 ll
    6115	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    6116	bf a1 00 00 00 00 00 00	r1 = r10
    6117	07 01 00 00 98 ff ff ff	r1 += -0x68
    6118	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6119	bf a1 00 00 00 00 00 00	r1 = r10
    6120	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6121	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6122	b7 01 00 00 00 00 00 00	r1 = 0x0
    6123	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6124	b7 01 00 00 02 00 00 00	r1 = 0x2
    6125	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6126	18 01 00 00 b0 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13eb0 ll
    6128	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6129	b7 09 00 00 01 00 00 00	r9 = 0x1
    6130	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    6131	bf a3 00 00 00 00 00 00	r3 = r10
    6132	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6133	bf 61 00 00 00 00 00 00	r1 = r6
    6134	bf 72 00 00 00 00 00 00	r2 = r7
    6135	85 10 00 00 aa 00 00 00	call 0xaa ; <core::fmt::write>
    6136	55 00 42 00 00 00 00 00	if r0 != 0x0 goto +0x42 <LBB125_6>
    6137	05 00 21 00 00 00 00 00	goto +0x21 <LBB125_5>

000000000000bfd0 <LBB125_3>
    6138	79 89 00 00 00 00 00 00	r9 = *(u64 *)(r8 + 0x0)
    6139	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    6140	79 12 18 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x18)
    6141	bf 91 00 00 00 00 00 00	r1 = r9
    6142	8d 00 00 00 02 00 00 00	callx r2
    6143	18 01 00 00 f4 bc c7 ec 00 00 00 00 1e a9 f2 7e	r1 = 0x7ef2a91eecc7bcf4 ll
    6145	5d 10 19 00 00 00 00 00	if r0 != r1 goto +0x19 <LBB125_5>
    6146	7b 9a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r9
    6147	18 01 00 00 10 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10710 ll
    6149	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    6150	bf a1 00 00 00 00 00 00	r1 = r10
    6151	07 01 00 00 98 ff ff ff	r1 += -0x68
    6152	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6153	bf a1 00 00 00 00 00 00	r1 = r10
    6154	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6155	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6156	b7 01 00 00 00 00 00 00	r1 = 0x0
    6157	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6158	b7 01 00 00 02 00 00 00	r1 = 0x2
    6159	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6160	18 01 00 00 b0 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13eb0 ll
    6162	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6163	b7 09 00 00 01 00 00 00	r9 = 0x1
    6164	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    6165	bf a3 00 00 00 00 00 00	r3 = r10
    6166	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6167	bf 61 00 00 00 00 00 00	r1 = r6
    6168	bf 72 00 00 00 00 00 00	r2 = r7
    6169	85 10 00 00 88 00 00 00	call 0x88 ; <core::fmt::write>
    6170	55 00 20 00 00 00 00 00	if r0 != 0x0 goto +0x20 <LBB125_6>

000000000000c0d8 <LBB125_5>
    6171	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    6172	bf 12 00 00 00 00 00 00	r2 = r1
    6173	07 02 00 00 14 00 00 00	r2 += 0x14
    6174	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    6175	18 02 00 00 f0 00 01 00 00 00 00 00 00 00 00 00	r2 = 0x100f0 ll
    6177	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    6178	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    6179	bf 12 00 00 00 00 00 00	r2 = r1
    6180	07 02 00 00 10 00 00 00	r2 += 0x10
    6181	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    6182	18 02 00 00 b0 07 01 00 00 00 00 00 00 00 00 00	r2 = 0x107b0 ll
    6184	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    6185	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6186	bf a1 00 00 00 00 00 00	r1 = r10
    6187	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6188	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6189	b7 01 00 00 00 00 00 00	r1 = 0x0
    6190	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6191	b7 01 00 00 03 00 00 00	r1 = 0x3
    6192	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6193	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6194	18 01 00 00 60 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e60 ll
    6196	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6197	bf a3 00 00 00 00 00 00	r3 = r10
    6198	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6199	bf 61 00 00 00 00 00 00	r1 = r6
    6200	bf 72 00 00 00 00 00 00	r2 = r7
    6201	85 10 00 00 68 00 00 00	call 0x68 ; <core::fmt::write>
    6202	bf 09 00 00 00 00 00 00	r9 = r0

000000000000c1d8 <LBB125_6>
    6203	bf 90 00 00 00 00 00 00	r0 = r9
    6204	95 00 00 00 00 00 00 00	exit

000000000000c1e8 <core::panicking::panic>
    6205	18 04 00 00 e8 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ee8 ll
    6207	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    6208	b7 04 00 00 00 00 00 00	r4 = 0x0
    6209	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
    6210	7b 4a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r4
    6211	b7 04 00 00 01 00 00 00	r4 = 0x1
    6212	7b 4a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r4
    6213	bf a4 00 00 00 00 00 00	r4 = r10
    6214	07 04 00 00 f0 ff ff ff	r4 += -0x10
    6215	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
    6216	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6217	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6218	bf a1 00 00 00 00 00 00	r1 = r10
    6219	07 01 00 00 c0 ff ff ff	r1 += -0x40
    6220	bf 32 00 00 00 00 00 00	r2 = r3
    6221	85 10 00 00 1d 00 00 00	call 0x1d ; <core::panicking::panic_fmt>
    6222	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c278 <core::panicking::panic_bounds_check>
    6223	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    6224	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6225	bf a1 00 00 00 00 00 00	r1 = r10
    6226	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6227	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6228	b7 01 00 00 00 00 00 00	r1 = 0x0
    6229	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    6230	b7 01 00 00 02 00 00 00	r1 = 0x2
    6231	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6232	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    6233	18 01 00 00 d0 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ed0 ll
    6235	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    6236	bf a1 00 00 00 00 00 00	r1 = r10
    6237	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6238	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6239	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    6241	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6242	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6243	bf a1 00 00 00 00 00 00	r1 = r10
    6244	07 01 00 00 a8 ff ff ff	r1 += -0x58
    6245	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6246	bf a1 00 00 00 00 00 00	r1 = r10
    6247	07 01 00 00 b0 ff ff ff	r1 += -0x50
    6248	bf 32 00 00 00 00 00 00	r2 = r3
    6249	85 10 00 00 01 00 00 00	call 0x1 ; <core::panicking::panic_fmt>
    6250	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c358 <core::panicking::panic_fmt>
    6251	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6252	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6253	18 01 00 00 90 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e90 ll
    6255	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6256	18 01 00 00 e8 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ee8 ll
    6258	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6259	bf a1 00 00 00 00 00 00	r1 = r10
    6260	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6261	85 10 00 00 06 fd ff ff	call -0x2fa ; <rust_begin_unwind>
    6262	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c3b8 <core::result::unwrap_failed>
    6263	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    6264	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    6265	7b 4a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r4
    6266	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    6267	bf a1 00 00 00 00 00 00	r1 = r10
    6268	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6269	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6270	b7 01 00 00 00 00 00 00	r1 = 0x0
    6271	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    6272	b7 01 00 00 02 00 00 00	r1 = 0x2
    6273	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6274	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    6275	18 01 00 00 f0 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ef0 ll
    6277	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    6278	18 01 00 00 e0 06 01 00 00 00 00 00 00 00 00 00	r1 = 0x106e0 ll
    6280	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6281	bf a1 00 00 00 00 00 00	r1 = r10
    6282	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6283	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6284	18 01 00 00 b0 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x107b0 ll
    6286	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6287	bf a1 00 00 00 00 00 00	r1 = r10
    6288	07 01 00 00 90 ff ff ff	r1 += -0x70
    6289	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6290	bf a1 00 00 00 00 00 00	r1 = r10
    6291	07 01 00 00 b0 ff ff ff	r1 += -0x50
    6292	bf 52 00 00 00 00 00 00	r2 = r5
    6293	85 10 00 00 d5 ff ff ff	call -0x2b ; <core::panicking::panic_fmt>
    6294	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c4b8 <core::fmt::Formatter::new>
    6295	b7 04 00 00 03 00 00 00	r4 = 0x3
    6296	73 41 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r4
    6297	18 04 00 00 00 00 00 00 00 00 00 00 20 00 00 00	r4 = 0x2000000000 ll
    6299	7b 41 30 00 00 00 00 00	*(u64 *)(r1 + 0x30) = r4
    6300	7b 31 28 00 00 00 00 00	*(u64 *)(r1 + 0x28) = r3
    6301	7b 21 20 00 00 00 00 00	*(u64 *)(r1 + 0x20) = r2
    6302	b7 02 00 00 00 00 00 00	r2 = 0x0
    6303	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    6304	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    6305	95 00 00 00 00 00 00 00	exit

000000000000c510 <core::fmt::write>
    6306	b7 04 00 00 03 00 00 00	r4 = 0x3
    6307	73 4a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r4
    6308	18 04 00 00 00 00 00 00 00 00 00 00 20 00 00 00	r4 = 0x2000000000 ll
    6310	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6311	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    6312	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6313	b7 07 00 00 00 00 00 00	r7 = 0x0
    6314	7b 7a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r7
    6315	7b 7a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r7
    6316	79 38 10 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x10)
    6317	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    6318	55 08 1e 00 00 00 00 00	if r8 != 0x0 goto +0x1e <LBB172_4>
    6319	79 36 28 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x28)
    6320	15 06 6b 00 00 00 00 00	if r6 == 0x0 goto +0x6b <LBB172_22>
    6321	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6322	79 18 20 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x20)
    6323	b7 07 00 00 00 00 00 00	r7 = 0x0
    6324	67 06 00 00 04 00 00 00	r6 <<= 0x4
    6325	07 08 00 00 08 00 00 00	r8 += 0x8
    6326	79 19 00 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x0)
    6327	07 09 00 00 08 00 00 00	r9 += 0x8

000000000000c5c0 <LBB172_3>
    6328	79 93 00 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x0)
    6329	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB172_26>
    6330	05 00 06 00 00 00 00 00	goto +0x6 <LBB172_25>

000000000000c5d8 <LBB172_26>
    6331	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6332	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6333	79 92 f8 ff 00 00 00 00	r2 = *(u64 *)(r9 - 0x8)
    6334	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6335	8d 00 00 00 04 00 00 00	callx r4
    6336	55 00 6e 00 00 00 00 00	if r0 != 0x0 goto +0x6e <LBB172_28>

000000000000c608 <LBB172_25>
    6337	79 81 f8 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x8)
    6338	79 83 00 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x0)
    6339	bf a2 00 00 00 00 00 00	r2 = r10
    6340	07 02 00 00 c0 ff ff ff	r2 += -0x40
    6341	8d 00 00 00 03 00 00 00	callx r3
    6342	55 00 68 00 00 00 00 00	if r0 != 0x0 goto +0x68 <LBB172_28>
    6343	07 07 00 00 01 00 00 00	r7 += 0x1
    6344	07 08 00 00 10 00 00 00	r8 += 0x10
    6345	07 09 00 00 10 00 00 00	r9 += 0x10
    6346	07 06 00 00 f0 ff ff ff	r6 += -0x10
    6347	15 06 50 00 00 00 00 00	if r6 == 0x0 goto +0x50 <LBB172_22>
    6348	05 00 eb ff 00 00 00 00	goto -0x15 <LBB172_3>

000000000000c668 <LBB172_4>
    6349	79 39 18 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x18)
    6350	15 09 4d 00 00 00 00 00	if r9 == 0x0 goto +0x4d <LBB172_22>
    6351	b7 07 00 00 00 00 00 00	r7 = 0x0
    6352	07 08 00 00 30 00 00 00	r8 += 0x30
    6353	27 09 00 00 38 00 00 00	r9 *= 0x38
    6354	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6355	79 16 00 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x0)
    6356	07 06 00 00 08 00 00 00	r6 += 0x8

000000000000c6a8 <LBB172_6>
    6357	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
    6358	55 03 0e 00 00 00 00 00	if r3 != 0x0 goto +0xe <LBB172_20>

000000000000c6b8 <LBB172_7>
    6359	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6360	79 12 20 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x20)
    6361	61 81 f8 ff 00 00 00 00	r1 = *(u32 *)(r8 - 0x8)
    6362	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 0xc) = r1
    6363	71 81 00 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x0)
    6364	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
    6365	61 81 fc ff 00 00 00 00	r1 = *(u32 *)(r8 - 0x4)
    6366	63 1a f0 ff 00 00 00 00	*(u32 *)(r10 - 0x10) = r1
    6367	79 81 f0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x10)
    6368	79 84 e8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x18)
    6369	15 04 0a 00 00 00 00 00	if r4 == 0x0 goto +0xa <LBB172_10>
    6370	b7 03 00 00 00 00 00 00	r3 = 0x0
    6371	15 04 0a 00 01 00 00 00	if r4 == 0x1 goto +0xa <LBB172_11>
    6372	05 00 13 00 00 00 00 00	goto +0x13 <LBB172_13>

000000000000c728 <LBB172_20>
    6373	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6374	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6375	79 62 f8 ff 00 00 00 00	r2 = *(u64 *)(r6 - 0x8)
    6376	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6377	8d 00 00 00 04 00 00 00	callx r4
    6378	55 00 44 00 00 00 00 00	if r0 != 0x0 goto +0x44 <LBB172_28>
    6379	05 00 eb ff 00 00 00 00	goto -0x15 <LBB172_7>

000000000000c760 <LBB172_10>
    6380	b7 03 00 00 01 00 00 00	r3 = 0x1
    6381	05 00 0a 00 00 00 00 00	goto +0xa <LBB172_13>

000000000000c770 <LBB172_11>
    6382	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6383	bf 24 00 00 00 00 00 00	r4 = r2
    6384	0f 14 00 00 00 00 00 00	r4 += r1
    6385	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
    6386	18 00 00 00 30 b7 00 00 00 00 00 00 00 00 00 00	r0 = 0xb730 ll
    6388	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB172_13>
    6389	b7 03 00 00 01 00 00 00	r3 = 0x1
    6390	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    6391	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

000000000000c7c0 <LBB172_13>
    6392	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6393	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
    6394	79 81 e0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x20)
    6395	79 84 d8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x28)
    6396	15 04 03 00 00 00 00 00	if r4 == 0x0 goto +0x3 <LBB172_16>
    6397	b7 03 00 00 00 00 00 00	r3 = 0x0
    6398	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB172_17>
    6399	05 00 0c 00 00 00 00 00	goto +0xc <LBB172_19>

000000000000c800 <LBB172_16>
    6400	b7 03 00 00 01 00 00 00	r3 = 0x1
    6401	05 00 0a 00 00 00 00 00	goto +0xa <LBB172_19>

000000000000c810 <LBB172_17>
    6402	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6403	bf 24 00 00 00 00 00 00	r4 = r2
    6404	0f 14 00 00 00 00 00 00	r4 += r1
    6405	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
    6406	18 00 00 00 30 b7 00 00 00 00 00 00 00 00 00 00	r0 = 0xb730 ll
    6408	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB172_19>
    6409	b7 03 00 00 01 00 00 00	r3 = 0x1
    6410	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    6411	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

000000000000c860 <LBB172_19>
    6412	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6413	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    6414	79 81 d0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x30)
    6415	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6416	0f 12 00 00 00 00 00 00	r2 += r1
    6417	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    6418	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
    6419	bf a2 00 00 00 00 00 00	r2 = r10
    6420	07 02 00 00 c0 ff ff ff	r2 += -0x40
    6421	8d 00 00 00 03 00 00 00	callx r3
    6422	55 00 18 00 00 00 00 00	if r0 != 0x0 goto +0x18 <LBB172_28>
    6423	07 07 00 00 01 00 00 00	r7 += 0x1
    6424	07 08 00 00 38 00 00 00	r8 += 0x38
    6425	07 06 00 00 10 00 00 00	r6 += 0x10
    6426	07 09 00 00 c8 ff ff ff	r9 += -0x38
    6427	55 09 b9 ff 00 00 00 00	if r9 != 0x0 goto -0x47 <LBB172_6>

000000000000c8e0 <LBB172_22>
    6428	bf 72 00 00 00 00 00 00	r2 = r7
    6429	67 02 00 00 04 00 00 00	r2 <<= 0x4
    6430	79 a3 b8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x48)
    6431	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    6432	0f 21 00 00 00 00 00 00	r1 += r2
    6433	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
    6434	2d 72 01 00 00 00 00 00	if r2 > r7 goto +0x1 <LBB172_24>
    6435	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000c920 <LBB172_24>
    6436	2d 72 01 00 00 00 00 00	if r2 > r7 goto +0x1 <LBB172_29>
    6437	05 00 07 00 00 00 00 00	goto +0x7 <LBB172_30>

000000000000c930 <LBB172_29>
    6438	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    6439	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6440	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    6441	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    6442	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6443	8d 00 00 00 04 00 00 00	callx r4
    6444	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB172_28>

000000000000c968 <LBB172_30>
    6445	b7 00 00 00 00 00 00 00	r0 = 0x0
    6446	05 00 01 00 00 00 00 00	goto +0x1 <LBB172_31>

000000000000c978 <LBB172_28>
    6447	b7 00 00 00 01 00 00 00	r0 = 0x1

000000000000c980 <LBB172_31>
    6448	95 00 00 00 00 00 00 00	exit

000000000000c988 <core::fmt::Formatter::pad_integral>
    6449	79 50 08 f0 00 00 00 00	r0 = *(u64 *)(r5 - 0xff8)
    6450	15 02 09 00 00 00 00 00	if r2 == 0x0 goto +0x9 <LBB173_2>
    6451	bf 38 00 00 00 00 00 00	r8 = r3
    6452	b7 07 00 00 00 00 11 00	r7 = 0x110000
    6453	61 19 30 00 00 00 00 00	r9 = *(u32 *)(r1 + 0x30)
    6454	bf 92 00 00 00 00 00 00	r2 = r9
    6455	57 02 00 00 01 00 00 00	r2 &= 0x1
    6456	bf 06 00 00 00 00 00 00	r6 = r0
    6457	15 02 07 00 00 00 00 00	if r2 == 0x0 goto +0x7 <LBB173_4>
    6458	b7 07 00 00 2b 00 00 00	r7 = 0x2b
    6459	05 00 03 00 00 00 00 00	goto +0x3 <LBB173_3>

000000000000c9e0 <LBB173_2>
    6460	bf 38 00 00 00 00 00 00	r8 = r3
    6461	b7 07 00 00 2d 00 00 00	r7 = 0x2d
    6462	61 19 30 00 00 00 00 00	r9 = *(u32 *)(r1 + 0x30)

000000000000c9f8 <LBB173_3>
    6463	bf 06 00 00 00 00 00 00	r6 = r0
    6464	07 06 00 00 01 00 00 00	r6 += 0x1

000000000000ca08 <LBB173_4>
    6465	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    6466	b7 03 00 00 00 00 00 00	r3 = 0x0
    6467	bf 92 00 00 00 00 00 00	r2 = r9
    6468	57 02 00 00 04 00 00 00	r2 &= 0x4
    6469	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB173_12>
    6470	05 00 0a 00 00 00 00 00	goto +0xa <LBB173_6>

000000000000ca38 <LBB173_12>
    6471	79 52 00 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0x1000)
    6472	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6473	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    6474	15 02 1f 00 01 00 00 00	if r2 == 0x1 goto +0x1f <LBB173_14>
    6475	bf 16 00 00 00 00 00 00	r6 = r1
    6476	bf 72 00 00 00 00 00 00	r2 = r7
    6477	85 10 00 00 c8 00 00 00	call 0xc8 ; <core::fmt::Formatter::pad_integral::write_prefix>
    6478	b7 07 00 00 01 00 00 00	r7 = 0x1
    6479	55 00 3e 00 00 00 00 00	if r0 != 0x0 goto +0x3e <LBB173_51>
    6480	05 00 36 00 00 00 00 00	goto +0x36 <LBB173_17>

000000000000ca88 <LBB173_6>
    6481	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    6482	b7 02 00 00 00 00 00 00	r2 = 0x0
    6483	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6484	bf 83 00 00 00 00 00 00	r3 = r8
    6485	15 04 08 00 00 00 00 00	if r4 == 0x0 goto +0x8 <LBB173_11>
    6486	b7 02 00 00 00 00 00 00	r2 = 0x0
    6487	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6488	bf 30 00 00 00 00 00 00	r0 = r3
    6489	05 00 09 00 00 00 00 00	goto +0x9 <LBB173_8>

000000000000cad0 <LBB173_10>
    6490	0f 72 00 00 00 00 00 00	r2 += r7
    6491	07 00 00 00 01 00 00 00	r0 += 0x1
    6492	07 04 00 00 ff ff ff ff	r4 += -0x1
    6493	55 04 05 00 00 00 00 00	if r4 != 0x0 goto +0x5 <LBB173_8>

000000000000caf0 <LBB173_11>
    6494	0f 62 00 00 00 00 00 00	r2 += r6
    6495	bf 26 00 00 00 00 00 00	r6 = r2
    6496	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6497	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x28)
    6498	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB173_12>

000000000000cb18 <LBB173_8>
    6499	71 08 00 00 00 00 00 00	r8 = *(u8 *)(r0 + 0x0)
    6500	67 08 00 00 38 00 00 00	r8 <<= 0x38
    6501	c7 08 00 00 38 00 00 00	r8 s>>= 0x38
    6502	b7 07 00 00 01 00 00 00	r7 = 0x1
    6503	65 08 f2 ff bf ff ff ff	if r8 s> -0x41 goto -0xe <LBB173_10>
    6504	b7 07 00 00 00 00 00 00	r7 = 0x0
    6505	05 00 f0 ff 00 00 00 00	goto -0x10 <LBB173_10>

000000000000cb50 <LBB173_14>
    6506	79 18 08 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x8)
    6507	3d 86 16 00 00 00 00 00	if r6 >= r8 goto +0x16 <LBB173_16>
    6508	57 09 00 00 08 00 00 00	r9 &= 0x8
    6509	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6510	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB173_18>
    6511	05 00 21 00 00 00 00 00	goto +0x21 <LBB173_27>

000000000000cb80 <LBB173_18>
    6512	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
    6513	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6514	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6515	b7 01 00 00 01 00 00 00	r1 = 0x1
    6516	15 02 01 00 03 00 00 00	if r2 == 0x3 goto +0x1 <LBB173_20>
    6517	bf 21 00 00 00 00 00 00	r1 = r2

000000000000cbb0 <LBB173_20>
    6518	1f 68 00 00 00 00 00 00	r8 -= r6
    6519	b7 09 00 00 00 00 00 00	r9 = 0x0
    6520	57 01 00 00 03 00 00 00	r1 &= 0x3
    6521	7b 8a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r8
    6522	15 01 35 00 00 00 00 00	if r1 == 0x0 goto +0x35 <LBB173_23>
    6523	15 01 31 00 01 00 00 00	if r1 == 0x1 goto +0x31 <LBB173_52>
    6524	bf 89 00 00 00 00 00 00	r9 = r8
    6525	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6526	07 08 00 00 01 00 00 00	r8 += 0x1
    6527	77 08 00 00 01 00 00 00	r8 >>= 0x1
    6528	7b 8a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r8
    6529	05 00 2e 00 00 00 00 00	goto +0x2e <LBB173_23>

000000000000cc10 <LBB173_16>
    6530	bf 16 00 00 00 00 00 00	r6 = r1
    6531	bf 72 00 00 00 00 00 00	r2 = r7
    6532	85 10 00 00 91 00 00 00	call 0x91 ; <core::fmt::Formatter::pad_integral::write_prefix>
    6533	b7 07 00 00 01 00 00 00	r7 = 0x1
    6534	55 00 07 00 00 00 00 00	if r0 != 0x0 goto +0x7 <LBB173_51>

000000000000cc38 <LBB173_17>
    6535	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    6536	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    6537	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6538	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6539	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6540	8d 00 00 00 04 00 00 00	callx r4
    6541	bf 07 00 00 00 00 00 00	r7 = r0

000000000000cc70 <LBB173_51>
    6542	57 07 00 00 01 00 00 00	r7 &= 0x1
    6543	bf 70 00 00 00 00 00 00	r0 = r7
    6544	95 00 00 00 00 00 00 00	exit

000000000000cc88 <LBB173_27>
    6545	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6546	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
    6547	b7 02 00 00 30 00 00 00	r2 = 0x30
    6548	63 21 34 00 00 00 00 00	*(u32 *)(r1 + 0x34) = r2
    6549	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6550	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    6551	bf 72 00 00 00 00 00 00	r2 = r7
    6552	b7 07 00 00 01 00 00 00	r7 = 0x1
    6553	73 71 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r7
    6554	85 10 00 00 7b 00 00 00	call 0x7b ; <core::fmt::Formatter::pad_integral::write_prefix>
    6555	55 00 f2 ff 00 00 00 00	if r0 != 0x0 goto -0xe <LBB173_51>
    6556	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6557	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6558	b7 01 00 00 01 00 00 00	r1 = 0x1
    6559	15 02 01 00 03 00 00 00	if r2 == 0x3 goto +0x1 <LBB173_30>
    6560	bf 21 00 00 00 00 00 00	r1 = r2

000000000000cd08 <LBB173_30>
    6561	1f 68 00 00 00 00 00 00	r8 -= r6
    6562	b7 09 00 00 00 00 00 00	r9 = 0x0
    6563	57 01 00 00 03 00 00 00	r1 &= 0x3
    6564	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r8
    6565	15 01 41 00 00 00 00 00	if r1 == 0x0 goto +0x41 <LBB173_33>
    6566	15 01 3d 00 01 00 00 00	if r1 == 0x1 goto +0x3d <LBB173_53>
    6567	bf 89 00 00 00 00 00 00	r9 = r8
    6568	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6569	07 08 00 00 01 00 00 00	r8 += 0x1
    6570	77 08 00 00 01 00 00 00	r8 >>= 0x1
    6571	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r8
    6572	05 00 3a 00 00 00 00 00	goto +0x3a <LBB173_33>

000000000000cd68 <LBB173_52>
    6573	b7 01 00 00 00 00 00 00	r1 = 0x0
    6574	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6575	bf 89 00 00 00 00 00 00	r9 = r8

000000000000cd80 <LBB173_23>
    6576	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    6577	07 09 00 00 01 00 00 00	r9 += 0x1
    6578	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6579	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6580	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6581	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6582	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6583	b7 07 00 00 01 00 00 00	r7 = 0x1

000000000000cdc0 <LBB173_24>
    6584	07 09 00 00 ff ff ff ff	r9 += -0x1
    6585	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB173_26>
    6586	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6587	bf 61 00 00 00 00 00 00	r1 = r6
    6588	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6589	8d 00 00 00 03 00 00 00	callx r3
    6590	55 00 cf ff 00 00 00 00	if r0 != 0x0 goto -0x31 <LBB173_51>
    6591	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB173_24>

000000000000ce00 <LBB173_26>
    6592	b7 07 00 00 01 00 00 00	r7 = 0x1
    6593	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6594	15 01 cb ff 00 00 11 00	if r1 == 0x110000 goto -0x35 <LBB173_51>
    6595	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6596	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    6597	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    6598	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6599	85 10 00 00 4e 00 00 00	call 0x4e ; <core::fmt::Formatter::pad_integral::write_prefix>
    6600	55 00 c5 ff 00 00 00 00	if r0 != 0x0 goto -0x3b <LBB173_51>
    6601	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    6602	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    6603	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    6604	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6605	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6606	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6607	8d 00 00 00 04 00 00 00	callx r4
    6608	55 00 bd ff 00 00 00 00	if r0 != 0x0 goto -0x43 <LBB173_51>
    6609	b7 07 00 00 00 00 00 00	r7 = 0x0
    6610	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6611	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6612	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6613	79 a9 c8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x38)

000000000000ceb0 <LBB173_46>
    6614	bf 91 00 00 00 00 00 00	r1 = r9
    6615	1d 79 08 00 00 00 00 00	if r9 == r7 goto +0x8 <LBB173_49>
    6616	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6617	bf 61 00 00 00 00 00 00	r1 = r6
    6618	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6619	8d 00 00 00 03 00 00 00	callx r3
    6620	07 07 00 00 01 00 00 00	r7 += 0x1
    6621	15 00 f8 ff 00 00 00 00	if r0 == 0x0 goto -0x8 <LBB173_46>
    6622	07 07 00 00 ff ff ff ff	r7 += -0x1
    6623	bf 71 00 00 00 00 00 00	r1 = r7

000000000000cf00 <LBB173_49>
    6624	b7 07 00 00 01 00 00 00	r7 = 0x1
    6625	2d 19 ac ff 00 00 00 00	if r9 > r1 goto -0x54 <LBB173_51>

000000000000cf10 <LBB173_50>
    6626	b7 07 00 00 00 00 00 00	r7 = 0x0
    6627	05 00 aa ff 00 00 00 00	goto -0x56 <LBB173_51>

000000000000cf20 <LBB173_53>
    6628	b7 01 00 00 00 00 00 00	r1 = 0x0
    6629	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6630	bf 89 00 00 00 00 00 00	r9 = r8

000000000000cf38 <LBB173_33>
    6631	07 09 00 00 01 00 00 00	r9 += 0x1
    6632	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6633	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6634	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6635	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6636	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6637	b7 07 00 00 01 00 00 00	r7 = 0x1

000000000000cf70 <LBB173_34>
    6638	07 09 00 00 ff ff ff ff	r9 += -0x1
    6639	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB173_36>
    6640	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6641	bf 61 00 00 00 00 00 00	r1 = r6
    6642	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6643	8d 00 00 00 03 00 00 00	callx r3
    6644	55 00 99 ff 00 00 00 00	if r0 != 0x0 goto -0x67 <LBB173_51>
    6645	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB173_34>

000000000000cfb0 <LBB173_36>
    6646	b7 07 00 00 01 00 00 00	r7 = 0x1
    6647	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6648	15 01 95 ff 00 00 11 00	if r1 == 0x110000 goto -0x6b <LBB173_51>
    6649	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    6650	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    6651	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    6652	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6653	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6654	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6655	8d 00 00 00 04 00 00 00	callx r4
    6656	55 00 8d ff 00 00 00 00	if r0 != 0x0 goto -0x73 <LBB173_51>
    6657	b7 09 00 00 00 00 00 00	r9 = 0x0
    6658	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6659	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6660	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)

000000000000d028 <LBB173_39>
    6661	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    6662	1d 91 09 00 00 00 00 00	if r1 == r9 goto +0x9 <LBB173_42>
    6663	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6664	bf 61 00 00 00 00 00 00	r1 = r6
    6665	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6666	8d 00 00 00 03 00 00 00	callx r3
    6667	07 09 00 00 01 00 00 00	r9 += 0x1
    6668	15 00 f8 ff 00 00 00 00	if r0 == 0x0 goto -0x8 <LBB173_39>
    6669	07 09 00 00 ff ff ff ff	r9 += -0x1
    6670	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    6671	2d 91 7e ff 00 00 00 00	if r1 > r9 goto -0x82 <LBB173_51>

000000000000d080 <LBB173_42>
    6672	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6673	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
    6674	73 21 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r2
    6675	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    6676	63 21 34 00 00 00 00 00	*(u32 *)(r1 + 0x34) = r2
    6677	05 00 cc ff 00 00 00 00	goto -0x34 <LBB173_50>

000000000000d0b0 <core::fmt::Formatter::pad_integral::write_prefix>
    6678	bf 46 00 00 00 00 00 00	r6 = r4
    6679	bf 37 00 00 00 00 00 00	r7 = r3
    6680	bf 18 00 00 00 00 00 00	r8 = r1
    6681	bf 21 00 00 00 00 00 00	r1 = r2
    6682	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6683	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6684	15 01 07 00 00 00 11 00	if r1 == 0x110000 goto +0x7 <LBB174_2>
    6685	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
    6686	79 83 28 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x28)
    6687	79 33 20 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x20)
    6688	8d 00 00 00 03 00 00 00	callx r3
    6689	bf 01 00 00 00 00 00 00	r1 = r0
    6690	b7 00 00 00 01 00 00 00	r0 = 0x1
    6691	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB174_3>

000000000000d120 <LBB174_2>
    6692	b7 00 00 00 00 00 00 00	r0 = 0x0
    6693	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB174_4>

000000000000d130 <LBB174_3>
    6694	95 00 00 00 00 00 00 00	exit

000000000000d138 <LBB174_4>
    6695	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
    6696	79 82 28 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x28)
    6697	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6698	bf 72 00 00 00 00 00 00	r2 = r7
    6699	bf 63 00 00 00 00 00 00	r3 = r6
    6700	8d 00 00 00 04 00 00 00	callx r4
    6701	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB174_3>

000000000000d170 <core::fmt::Formatter::pad>
    6702	79 14 10 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x10)
    6703	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    6704	15 05 02 00 01 00 00 00	if r5 == 0x1 goto +0x2 <LBB175_2>
    6705	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB175_5>
    6706	05 00 65 00 00 00 00 00	goto +0x65 <LBB175_3>

000000000000d198 <LBB175_2>
    6707	15 04 01 00 01 00 00 00	if r4 == 0x1 goto +0x1 <LBB175_5>
    6708	05 00 48 00 00 00 00 00	goto +0x48 <LBB175_27>

000000000000d1a8 <LBB175_5>
    6709	7b 5a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r5
    6710	b7 05 00 00 00 00 00 00	r5 = 0x0
    6711	bf 24 00 00 00 00 00 00	r4 = r2
    6712	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    6713	0f 34 00 00 00 00 00 00	r4 += r3
    6714	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    6715	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    6716	bf 28 00 00 00 00 00 00	r8 = r2
    6717	15 03 28 00 00 00 00 00	if r3 == 0x0 goto +0x28 <LBB175_13>
    6718	b7 05 00 00 00 00 00 00	r5 = 0x0
    6719	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    6720	b7 07 00 00 00 00 00 00	r7 = 0x0

000000000000d208 <LBB175_7>
    6721	bf 89 00 00 00 00 00 00	r9 = r8
    6722	1d 49 35 00 00 00 00 00	if r9 == r4 goto +0x35 <LBB175_16>
    6723	bf 98 00 00 00 00 00 00	r8 = r9
    6724	07 08 00 00 01 00 00 00	r8 += 0x1
    6725	71 90 00 00 00 00 00 00	r0 = *(u8 *)(r9 + 0x0)
    6726	bf 06 00 00 00 00 00 00	r6 = r0
    6727	67 06 00 00 38 00 00 00	r6 <<= 0x38
    6728	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    6729	65 06 18 00 ff ff ff ff	if r6 s> -0x1 goto +0x18 <LBB175_12>
    6730	bf 98 00 00 00 00 00 00	r8 = r9
    6731	07 08 00 00 02 00 00 00	r8 += 0x2
    6732	b7 02 00 00 e0 00 00 00	r2 = 0xe0
    6733	2d 02 14 00 00 00 00 00	if r2 > r0 goto +0x14 <LBB175_12>
    6734	bf 98 00 00 00 00 00 00	r8 = r9
    6735	07 08 00 00 03 00 00 00	r8 += 0x3
    6736	b7 02 00 00 f0 00 00 00	r2 = 0xf0
    6737	2d 02 10 00 00 00 00 00	if r2 > r0 goto +0x10 <LBB175_12>
    6738	71 96 01 00 00 00 00 00	r6 = *(u8 *)(r9 + 0x1)
    6739	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    6740	67 06 00 00 0c 00 00 00	r6 <<= 0xc
    6741	71 92 02 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x2)
    6742	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6743	67 02 00 00 06 00 00 00	r2 <<= 0x6
    6744	4f 62 00 00 00 00 00 00	r2 |= r6
    6745	71 96 03 00 00 00 00 00	r6 = *(u8 *)(r9 + 0x3)
    6746	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    6747	4f 62 00 00 00 00 00 00	r2 |= r6
    6748	67 00 00 00 12 00 00 00	r0 <<= 0x12
    6749	57 00 00 00 00 00 1c 00	r0 &= 0x1c0000
    6750	4f 02 00 00 00 00 00 00	r2 |= r0
    6751	bf 98 00 00 00 00 00 00	r8 = r9
    6752	07 08 00 00 04 00 00 00	r8 += 0x4
    6753	15 02 16 00 00 00 11 00	if r2 == 0x110000 goto +0x16 <LBB175_16>

000000000000d310 <LBB175_12>
    6754	07 07 00 00 01 00 00 00	r7 += 0x1
    6755	1f 95 00 00 00 00 00 00	r5 -= r9
    6756	0f 85 00 00 00 00 00 00	r5 += r8
    6757	2d 73 db ff 00 00 00 00	if r3 > r7 goto -0x25 <LBB175_7>

000000000000d330 <LBB175_13>
    6758	1d 48 11 00 00 00 00 00	if r8 == r4 goto +0x11 <LBB175_16>
    6759	71 84 00 00 00 00 00 00	r4 = *(u8 *)(r8 + 0x0)
    6760	b7 02 00 00 f0 00 00 00	r2 = 0xf0
    6761	2d 42 42 00 00 00 00 00	if r2 > r4 goto +0x42 <LBB175_17>
    6762	71 82 01 00 00 00 00 00	r2 = *(u8 *)(r8 + 0x1)
    6763	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6764	67 02 00 00 0c 00 00 00	r2 <<= 0xc
    6765	71 83 02 00 00 00 00 00	r3 = *(u8 *)(r8 + 0x2)
    6766	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    6767	67 03 00 00 06 00 00 00	r3 <<= 0x6
    6768	4f 23 00 00 00 00 00 00	r3 |= r2
    6769	71 82 03 00 00 00 00 00	r2 = *(u8 *)(r8 + 0x3)
    6770	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6771	4f 23 00 00 00 00 00 00	r3 |= r2
    6772	67 04 00 00 12 00 00 00	r4 <<= 0x12
    6773	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    6774	4f 43 00 00 00 00 00 00	r3 |= r4
    6775	55 03 34 00 00 00 11 00	if r3 != 0x110000 goto +0x34 <LBB175_17>

000000000000d3c0 <LBB175_16>
    6776	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6777	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    6778	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    6779	15 04 01 00 01 00 00 00	if r4 == 0x1 goto +0x1 <LBB175_27>
    6780	05 00 1b 00 00 00 00 00	goto +0x1b <LBB175_3>

000000000000d3e8 <LBB175_27>
    6781	b7 08 00 00 00 00 00 00	r8 = 0x0
    6782	79 19 08 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x8)
    6783	15 03 08 00 00 00 00 00	if r3 == 0x0 goto +0x8 <LBB175_32>
    6784	b7 08 00 00 00 00 00 00	r8 = 0x0
    6785	bf 34 00 00 00 00 00 00	r4 = r3
    6786	bf 25 00 00 00 00 00 00	r5 = r2
    6787	05 00 0d 00 00 00 00 00	goto +0xd <LBB175_29>

000000000000d420 <LBB175_31>
    6788	0f 08 00 00 00 00 00 00	r8 += r0
    6789	07 05 00 00 01 00 00 00	r5 += 0x1
    6790	07 04 00 00 ff ff ff ff	r4 += -0x1
    6791	55 04 09 00 00 00 00 00	if r4 != 0x0 goto +0x9 <LBB175_29>

000000000000d440 <LBB175_32>
    6792	3d 98 0f 00 00 00 00 00	if r8 >= r9 goto +0xf <LBB175_3>
    6793	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    6794	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    6795	71 15 38 00 00 00 00 00	r5 = *(u8 *)(r1 + 0x38)
    6796	b7 07 00 00 00 00 00 00	r7 = 0x0
    6797	b7 04 00 00 00 00 00 00	r4 = 0x0
    6798	15 05 12 00 03 00 00 00	if r5 == 0x3 goto +0x12 <LBB175_35>
    6799	bf 54 00 00 00 00 00 00	r4 = r5
    6800	05 00 10 00 00 00 00 00	goto +0x10 <LBB175_35>

000000000000d488 <LBB175_29>
    6801	71 56 00 00 00 00 00 00	r6 = *(u8 *)(r5 + 0x0)
    6802	67 06 00 00 38 00 00 00	r6 <<= 0x38
    6803	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    6804	b7 00 00 00 01 00 00 00	r0 = 0x1
    6805	65 06 ee ff bf ff ff ff	if r6 s> -0x41 goto -0x12 <LBB175_31>
    6806	b7 00 00 00 00 00 00 00	r0 = 0x0
    6807	05 00 ec ff 00 00 00 00	goto -0x14 <LBB175_31>

000000000000d4c0 <LBB175_3>
    6808	79 15 20 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x20)
    6809	79 11 28 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x28)
    6810	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6811	bf 51 00 00 00 00 00 00	r1 = r5
    6812	8d 00 00 00 04 00 00 00	callx r4
    6813	bf 06 00 00 00 00 00 00	r6 = r0

000000000000d4f0 <LBB175_4>
    6814	57 06 00 00 01 00 00 00	r6 &= 0x1
    6815	bf 60 00 00 00 00 00 00	r0 = r6
    6816	95 00 00 00 00 00 00 00	exit

000000000000d508 <LBB175_35>
    6817	1f 89 00 00 00 00 00 00	r9 -= r8
    6818	57 04 00 00 03 00 00 00	r4 &= 0x3
    6819	7b 9a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r9
    6820	15 04 13 00 00 00 00 00	if r4 == 0x0 goto +0x13 <LBB175_38>
    6821	15 04 0f 00 01 00 00 00	if r4 == 0x1 goto +0xf <LBB175_49>
    6822	bf 97 00 00 00 00 00 00	r7 = r9
    6823	77 07 00 00 01 00 00 00	r7 >>= 0x1
    6824	07 09 00 00 01 00 00 00	r9 += 0x1
    6825	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6826	7b 9a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r9
    6827	05 00 0c 00 00 00 00 00	goto +0xc <LBB175_38>

000000000000d560 <LBB175_17>
    6828	b7 03 00 00 00 00 00 00	r3 = 0x0
    6829	79 a6 e8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x18)
    6830	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)
    6831	15 05 3b 00 00 00 00 00	if r5 == 0x0 goto +0x3b <LBB175_21>
    6832	2d 56 31 00 00 00 00 00	if r6 > r5 goto +0x31 <LBB175_20>
    6833	b7 04 00 00 00 00 00 00	r4 = 0x0
    6834	bf 63 00 00 00 00 00 00	r3 = r6
    6835	1d 65 37 00 00 00 00 00	if r5 == r6 goto +0x37 <LBB175_21>
    6836	05 00 38 00 00 00 00 00	goto +0x38 <LBB175_22>

000000000000d5a8 <LBB175_49>
    6837	b7 02 00 00 00 00 00 00	r2 = 0x0
    6838	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6839	bf 97 00 00 00 00 00 00	r7 = r9

000000000000d5c0 <LBB175_38>
    6840	07 07 00 00 01 00 00 00	r7 += 0x1
    6841	61 18 34 00 00 00 00 00	r8 = *(u32 *)(r1 + 0x34)
    6842	79 12 28 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x28)
    6843	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6844	79 19 20 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x20)
    6845	b7 06 00 00 01 00 00 00	r6 = 0x1

000000000000d5f0 <LBB175_39>
    6846	07 07 00 00 ff ff ff ff	r7 += -0x1
    6847	15 07 07 00 00 00 00 00	if r7 == 0x0 goto +0x7 <LBB175_41>
    6848	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6849	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6850	bf 91 00 00 00 00 00 00	r1 = r9
    6851	bf 82 00 00 00 00 00 00	r2 = r8
    6852	8d 00 00 00 03 00 00 00	callx r3
    6853	55 00 d8 ff 00 00 00 00	if r0 != 0x0 goto -0x28 <LBB175_4>
    6854	05 00 f7 ff 00 00 00 00	goto -0x9 <LBB175_39>

000000000000d638 <LBB175_41>
    6855	b7 06 00 00 01 00 00 00	r6 = 0x1
    6856	bf 81 00 00 00 00 00 00	r1 = r8
    6857	15 01 d4 ff 00 00 11 00	if r1 == 0x110000 goto -0x2c <LBB175_4>
    6858	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6859	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6860	bf 91 00 00 00 00 00 00	r1 = r9
    6861	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    6862	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6863	8d 00 00 00 04 00 00 00	callx r4
    6864	55 00 cd ff 00 00 00 00	if r0 != 0x0 goto -0x33 <LBB175_4>
    6865	b7 06 00 00 00 00 00 00	r6 = 0x0
    6866	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x20)

000000000000d698 <LBB175_44>
    6867	bf 71 00 00 00 00 00 00	r1 = r7
    6868	1d 67 09 00 00 00 00 00	if r7 == r6 goto +0x9 <LBB175_47>
    6869	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6870	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6871	bf 91 00 00 00 00 00 00	r1 = r9
    6872	bf 82 00 00 00 00 00 00	r2 = r8
    6873	8d 00 00 00 03 00 00 00	callx r3
    6874	07 06 00 00 01 00 00 00	r6 += 0x1
    6875	15 00 f7 ff 00 00 00 00	if r0 == 0x0 goto -0x9 <LBB175_44>
    6876	07 06 00 00 ff ff ff ff	r6 += -0x1
    6877	bf 61 00 00 00 00 00 00	r1 = r6

000000000000d6f0 <LBB175_47>
    6878	b7 06 00 00 01 00 00 00	r6 = 0x1
    6879	2d 17 be ff 00 00 00 00	if r7 > r1 goto -0x42 <LBB175_4>
    6880	b7 06 00 00 00 00 00 00	r6 = 0x0
    6881	05 00 bc ff 00 00 00 00	goto -0x44 <LBB175_4>

000000000000d710 <LBB175_20>
    6882	bf 72 00 00 00 00 00 00	r2 = r7
    6883	0f 52 00 00 00 00 00 00	r2 += r5
    6884	b7 04 00 00 00 00 00 00	r4 = 0x0
    6885	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    6886	67 02 00 00 38 00 00 00	r2 <<= 0x38
    6887	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    6888	b7 00 00 00 c0 ff ff ff	r0 = -0x40
    6889	bf 53 00 00 00 00 00 00	r3 = r5
    6890	6d 20 02 00 00 00 00 00	if r0 s> r2 goto +0x2 <LBB175_22>

000000000000d758 <LBB175_21>
    6891	bf 35 00 00 00 00 00 00	r5 = r3
    6892	bf 74 00 00 00 00 00 00	r4 = r7

000000000000d768 <LBB175_22>
    6893	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB175_24>
    6894	bf 56 00 00 00 00 00 00	r6 = r5

000000000000d778 <LBB175_24>
    6895	7b 6a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r6
    6896	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB175_26>
    6897	bf 47 00 00 00 00 00 00	r7 = r4

000000000000d790 <LBB175_26>
    6898	7b 7a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r7
    6899	05 00 84 ff 00 00 00 00	goto -0x7c <LBB175_16>

000000000000d7a0 <<core::fmt::Formatter as core::fmt::Write>::write_str>
    6900	79 14 20 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x20)
    6901	79 11 28 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x28)
    6902	79 15 18 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x18)
    6903	bf 41 00 00 00 00 00 00	r1 = r4
    6904	8d 00 00 00 05 00 00 00	callx r5
    6905	95 00 00 00 00 00 00 00	exit

000000000000d7d0 <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    6906	79 16 28 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x28)
    6907	79 17 20 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x20)
    6908	bf a8 00 00 00 00 00 00	r8 = r10
    6909	07 08 00 00 d0 ff ff ff	r8 += -0x30
    6910	bf 81 00 00 00 00 00 00	r1 = r8
    6911	b7 03 00 00 30 00 00 00	r3 = 0x30
    6912	85 10 00 00 ce 07 00 00	call 0x7ce ; <memcpy>
    6913	bf 71 00 00 00 00 00 00	r1 = r7
    6914	bf 62 00 00 00 00 00 00	r2 = r6
    6915	bf 83 00 00 00 00 00 00	r3 = r8
    6916	85 10 00 00 9d fd ff ff	call -0x263 ; <core::fmt::write>
    6917	95 00 00 00 00 00 00 00	exit

000000000000d830 <core::fmt::Formatter::debug_lower_hex>
    6918	61 10 30 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x30)
    6919	57 00 00 00 10 00 00 00	r0 &= 0x10
    6920	77 00 00 00 04 00 00 00	r0 >>= 0x4
    6921	95 00 00 00 00 00 00 00	exit

000000000000d850 <core::fmt::Formatter::debug_upper_hex>
    6922	61 10 30 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x30)
    6923	57 00 00 00 20 00 00 00	r0 &= 0x20
    6924	77 00 00 00 05 00 00 00	r0 >>= 0x5
    6925	95 00 00 00 00 00 00 00	exit

000000000000d870 <<str as core::fmt::Debug>::fmt>
    6926	bf 28 00 00 00 00 00 00	r8 = r2
    6927	bf 16 00 00 00 00 00 00	r6 = r1
    6928	79 37 20 00 00 00 00 00	r7 = *(u64 *)(r3 + 0x20)
    6929	79 31 28 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x28)
    6930	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6931	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6932	bf 71 00 00 00 00 00 00	r1 = r7
    6933	b7 02 00 00 22 00 00 00	r2 = 0x22
    6934	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    6935	8d 00 00 00 03 00 00 00	callx r3
    6936	b7 01 00 00 01 00 00 00	r1 = 0x1
    6937	55 00 37 01 00 00 00 00	if r0 != 0x0 goto +0x137 <LBB201_61>
    6938	b7 01 00 00 00 00 00 00	r1 = 0x0
    6939	15 08 26 01 00 00 00 00	if r8 == 0x0 goto +0x126 <LBB201_12>
    6940	bf 61 00 00 00 00 00 00	r1 = r6
    6941	7b 8a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r8
    6942	0f 81 00 00 00 00 00 00	r1 += r8
    6943	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    6944	b7 01 00 00 00 00 00 00	r1 = 0x0
    6945	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6946	bf 68 00 00 00 00 00 00	r8 = r6
    6947	bf 60 00 00 00 00 00 00	r0 = r6
    6948	b7 01 00 00 00 00 00 00	r1 = 0x0
    6949	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6950	7b 8a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r8

000000000000d938 <LBB201_3>
    6951	bf 01 00 00 00 00 00 00	r1 = r0
    6952	71 13 00 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x0)
    6953	bf 32 00 00 00 00 00 00	r2 = r3
    6954	67 02 00 00 38 00 00 00	r2 <<= 0x38
    6955	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    6956	65 02 2b 00 ff ff ff ff	if r2 s> -0x1 goto +0x2b <LBB201_13>
    6957	bf 16 00 00 00 00 00 00	r6 = r1
    6958	07 06 00 00 02 00 00 00	r6 += 0x2
    6959	71 19 01 00 00 00 00 00	r9 = *(u8 *)(r1 + 0x1)
    6960	57 09 00 00 3f 00 00 00	r9 &= 0x3f
    6961	bf 34 00 00 00 00 00 00	r4 = r3
    6962	57 04 00 00 1f 00 00 00	r4 &= 0x1f
    6963	bf 42 00 00 00 00 00 00	r2 = r4
    6964	67 02 00 00 06 00 00 00	r2 <<= 0x6
    6965	4f 92 00 00 00 00 00 00	r2 |= r9
    6966	25 03 01 00 df 00 00 00	if r3 > 0xdf goto +0x1 <LBB201_5>
    6967	05 00 23 00 00 00 00 00	goto +0x23 <LBB201_14>

000000000000d9c0 <LBB201_5>
    6968	67 09 00 00 06 00 00 00	r9 <<= 0x6
    6969	71 15 02 00 00 00 00 00	r5 = *(u8 *)(r1 + 0x2)
    6970	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    6971	4f 59 00 00 00 00 00 00	r9 |= r5
    6972	bf 16 00 00 00 00 00 00	r6 = r1
    6973	07 06 00 00 03 00 00 00	r6 += 0x3
    6974	bf 45 00 00 00 00 00 00	r5 = r4
    6975	67 05 00 00 0c 00 00 00	r5 <<= 0xc
    6976	bf 92 00 00 00 00 00 00	r2 = r9
    6977	4f 52 00 00 00 00 00 00	r2 |= r5
    6978	b7 05 00 00 f0 00 00 00	r5 = 0xf0
    6979	2d 35 17 00 00 00 00 00	if r5 > r3 goto +0x17 <LBB201_14>
    6980	67 09 00 00 06 00 00 00	r9 <<= 0x6
    6981	71 13 03 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x3)
    6982	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    6983	4f 39 00 00 00 00 00 00	r9 |= r3
    6984	67 04 00 00 12 00 00 00	r4 <<= 0x12
    6985	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    6986	4f 49 00 00 00 00 00 00	r9 |= r4
    6987	07 01 00 00 04 00 00 00	r1 += 0x4
    6988	bf 16 00 00 00 00 00 00	r6 = r1
    6989	bf 92 00 00 00 00 00 00	r2 = r9
    6990	55 09 0c 00 00 00 11 00	if r9 != 0x110000 goto +0xc <LBB201_14>

000000000000da78 <LBB201_7>
    6991	b7 01 00 00 00 00 00 00	r1 = 0x0
    6992	bf 86 00 00 00 00 00 00	r6 = r8
    6993	79 a8 a8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x58)
    6994	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    6995	15 03 ee 00 00 00 00 00	if r3 == 0x0 goto +0xee <LBB201_12>
    6996	2d 38 df 00 00 00 00 00	if r8 > r3 goto +0xdf <LBB201_10>
    6997	bf 31 00 00 00 00 00 00	r1 = r3
    6998	1d 83 eb 00 00 00 00 00	if r3 == r8 goto +0xeb <LBB201_12>
    6999	05 00 e3 00 00 00 00 00	goto +0xe3 <LBB201_11>

000000000000dac0 <LBB201_13>
    7000	07 01 00 00 01 00 00 00	r1 += 0x1
    7001	bf 16 00 00 00 00 00 00	r6 = r1
    7002	bf 32 00 00 00 00 00 00	r2 = r3

000000000000dad8 <LBB201_14>
    7003	7b 6a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r6
    7004	7b 0a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r0
    7005	bf a1 00 00 00 00 00 00	r1 = r10
    7006	07 01 00 00 e8 ff ff ff	r1 += -0x18
    7007	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    7008	b7 03 00 00 01 00 01 00	r3 = 0x10001
    7009	85 10 00 00 b6 fb ff ff	call -0x44a ; <core::char::methods::<impl char>::escape_debug_ext>
    7010	61 a6 e8 ff 00 00 00 00	r6 = *(u32 *)(r10 - 0x18)
    7011	65 06 0a 00 01 00 00 00	if r6 s> 0x1 goto +0xa <LBB201_17>
    7012	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7013	15 06 1d 00 00 00 00 00	if r6 == 0x0 goto +0x1d <LBB201_29>

000000000000db30 <LBB201_16>
    7014	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    7015	1f 13 00 00 00 00 00 00	r3 -= r1
    7016	79 a0 b8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x48)
    7017	0f 03 00 00 00 00 00 00	r3 += r0
    7018	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    7019	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    7020	1d 10 e2 ff 00 00 00 00	if r0 == r1 goto -0x1e <LBB201_7>
    7021	05 00 b9 ff 00 00 00 00	goto -0x47 <LBB201_3>

000000000000db70 <LBB201_17>
    7022	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7023	15 06 13 00 02 00 00 00	if r6 == 0x2 goto +0x13 <LBB201_29>
    7024	71 a2 fc ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x4)
    7025	65 02 05 00 02 00 00 00	if r2 s> 0x2 goto +0x5 <LBB201_22>
    7026	b7 01 00 00 00 00 00 00	r1 = 0x0
    7027	15 02 0c 00 00 00 00 00	if r2 == 0x0 goto +0xc <LBB201_28>
    7028	15 02 06 00 01 00 00 00	if r2 == 0x1 goto +0x6 <LBB201_25>
    7029	b7 01 00 00 02 00 00 00	r1 = 0x2
    7030	05 00 09 00 00 00 00 00	goto +0x9 <LBB201_28>

000000000000dbb8 <LBB201_22>
    7031	15 02 05 00 03 00 00 00	if r2 == 0x3 goto +0x5 <LBB201_26>
    7032	15 02 06 00 04 00 00 00	if r2 == 0x4 goto +0x6 <LBB201_27>
    7033	b7 01 00 00 05 00 00 00	r1 = 0x5
    7034	05 00 05 00 00 00 00 00	goto +0x5 <LBB201_28>

000000000000dbd8 <LBB201_25>
    7035	b7 01 00 00 01 00 00 00	r1 = 0x1
    7036	05 00 03 00 00 00 00 00	goto +0x3 <LBB201_28>

000000000000dbe8 <LBB201_26>
    7037	b7 01 00 00 03 00 00 00	r1 = 0x3
    7038	05 00 01 00 00 00 00 00	goto +0x1 <LBB201_28>

000000000000dbf8 <LBB201_27>
    7039	b7 01 00 00 04 00 00 00	r1 = 0x4

000000000000dc00 <LBB201_28>
    7040	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    7041	0f 21 00 00 00 00 00 00	r1 += r2
    7042	15 01 e3 ff 01 00 00 00	if r1 == 0x1 goto -0x1d <LBB201_16>

000000000000dc18 <LBB201_29>
    7043	79 a5 a8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x58)
    7044	79 a0 d8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x28)
    7045	2d 30 5f 00 00 00 00 00	if r0 > r3 goto +0x5f <LBB201_38>
    7046	15 00 0a 00 00 00 00 00	if r0 == 0x0 goto +0xa <LBB201_34>
    7047	2d 05 02 00 00 00 00 00	if r5 > r0 goto +0x2 <LBB201_33>
    7048	1d 50 08 00 00 00 00 00	if r0 == r5 goto +0x8 <LBB201_34>
    7049	05 00 5b 00 00 00 00 00	goto +0x5b <LBB201_38>

000000000000dc50 <LBB201_33>
    7050	bf 81 00 00 00 00 00 00	r1 = r8
    7051	0f 01 00 00 00 00 00 00	r1 += r0
    7052	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    7053	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7054	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7055	b7 02 00 00 c0 ff ff ff	r2 = -0x40
    7056	6d 12 54 00 00 00 00 00	if r2 s> r1 goto +0x54 <LBB201_38>

000000000000dc88 <LBB201_34>
    7057	15 03 03 00 00 00 00 00	if r3 == 0x0 goto +0x3 <LBB201_39>
    7058	2d 35 4c 00 00 00 00 00	if r5 > r3 goto +0x4c <LBB201_37>
    7059	1d 53 01 00 00 00 00 00	if r3 == r5 goto +0x1 <LBB201_39>
    7060	05 00 50 00 00 00 00 00	goto +0x50 <LBB201_38>

000000000000dca8 <LBB201_39>
    7061	0f 08 00 00 00 00 00 00	r8 += r0
    7062	1f 03 00 00 00 00 00 00	r3 -= r0
    7063	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    7064	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    7065	bf 71 00 00 00 00 00 00	r1 = r7
    7066	bf 82 00 00 00 00 00 00	r2 = r8
    7067	8d 00 00 00 04 00 00 00	callx r4
    7068	55 00 57 00 00 00 00 00	if r0 != 0x0 goto +0x57 <LBB201_60>
    7069	71 a9 fc ff 00 00 00 00	r9 = *(u8 *)(r10 - 0x4)
    7070	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x8)
    7071	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7072	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    7073	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x14)
    7074	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7075	15 01 52 00 00 00 11 00	if r1 == 0x110000 goto +0x52 <LBB201_42>

000000000000dd20 <LBB201_41>
    7076	bf 81 00 00 00 00 00 00	r1 = r8
    7077	67 06 00 00 20 00 00 00	r6 <<= 0x20
    7078	bf 63 00 00 00 00 00 00	r3 = r6
    7079	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7080	65 03 01 00 01 00 00 00	if r3 s> 0x1 goto +0x1 <LBB201_64>
    7081	05 00 0e 00 00 00 00 00	goto +0xe <LBB201_62>

000000000000dd50 <LBB201_64>
    7082	b7 06 00 00 01 00 00 00	r6 = 0x1
    7083	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7084	bf 18 00 00 00 00 00 00	r8 = r1
    7085	15 03 0f 00 02 00 00 00	if r3 == 0x2 goto +0xf <LBB201_84>
    7086	b7 06 00 00 03 00 00 00	r6 = 0x3
    7087	bf 93 00 00 00 00 00 00	r3 = r9
    7088	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7089	65 03 10 00 02 00 00 00	if r3 s> 0x2 goto +0x10 <LBB201_69>
    7090	b7 09 00 00 00 00 00 00	r9 = 0x0
    7091	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7092	bf 18 00 00 00 00 00 00	r8 = r1
    7093	15 03 07 00 01 00 00 00	if r3 == 0x1 goto +0x7 <LBB201_84>
    7094	15 03 0f 00 02 00 00 00	if r3 == 0x2 goto +0xf <LBB201_72>
    7095	05 00 46 00 00 00 00 00	goto +0x46 <LBB201_44>

000000000000ddc0 <LBB201_62>
    7096	15 03 01 00 01 00 00 00	if r3 == 0x1 goto +0x1 <LBB201_77>
    7097	05 00 44 00 00 00 00 00	goto +0x44 <LBB201_44>

000000000000ddd0 <LBB201_77>
    7098	b7 06 00 00 00 00 00 00	r6 = 0x0
    7099	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)

000000000000dde0 <LBB201_83>
    7100	bf 18 00 00 00 00 00 00	r8 = r1

000000000000dde8 <LBB201_84>
    7101	bf 71 00 00 00 00 00 00	r1 = r7
    7102	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7103	8d 00 00 00 03 00 00 00	callx r3
    7104	55 00 33 00 00 00 00 00	if r0 != 0x0 goto +0x33 <LBB201_60>
    7105	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB201_41>

000000000000de10 <LBB201_69>
    7106	15 03 14 00 03 00 00 00	if r3 == 0x3 goto +0x14 <LBB201_82>
    7107	15 03 16 00 04 00 00 00	if r3 == 0x4 goto +0x16 <LBB201_75>
    7108	b7 09 00 00 04 00 00 00	r9 = 0x4
    7109	05 00 f6 ff 00 00 00 00	goto -0xa <LBB201_83>

000000000000de30 <LBB201_72>
    7110	bf 12 00 00 00 00 00 00	r2 = r1
    7111	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7112	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7113	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    7114	7f 23 00 00 00 00 00 00	r3 >>= r2
    7115	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7116	b7 02 00 00 30 00 00 00	r2 = 0x30
    7117	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7118	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB201_74>
    7119	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000de80 <LBB201_74>
    7120	0f 32 00 00 00 00 00 00	r2 += r3
    7121	b7 08 00 00 00 00 00 00	r8 = 0x0
    7122	b7 09 00 00 01 00 00 00	r9 = 0x1
    7123	15 01 e9 ff 00 00 00 00	if r1 == 0x0 goto -0x17 <LBB201_84>
    7124	b7 09 00 00 02 00 00 00	r9 = 0x2
    7125	07 01 00 00 ff ff ff ff	r1 += -0x1
    7126	05 00 e5 ff 00 00 00 00	goto -0x1b <LBB201_83>

000000000000deb8 <LBB201_82>
    7127	b7 09 00 00 02 00 00 00	r9 = 0x2
    7128	b7 02 00 00 7b 00 00 00	r2 = 0x7b
    7129	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB201_83>

000000000000ded0 <LBB201_75>
    7130	b7 09 00 00 03 00 00 00	r9 = 0x3
    7131	b7 02 00 00 75 00 00 00	r2 = 0x75
    7132	bf 18 00 00 00 00 00 00	r8 = r1
    7133	b7 06 00 00 03 00 00 00	r6 = 0x3
    7134	05 00 de ff 00 00 00 00	goto -0x22 <LBB201_84>

000000000000def8 <LBB201_37>
    7135	bf 81 00 00 00 00 00 00	r1 = r8
    7136	0f 31 00 00 00 00 00 00	r1 += r3
    7137	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    7138	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7139	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7140	65 01 b0 ff bf ff ff ff	if r1 s> -0x41 goto -0x50 <LBB201_39>

000000000000df28 <LBB201_38>
    7141	bf 81 00 00 00 00 00 00	r1 = r8
    7142	bf 52 00 00 00 00 00 00	r2 = r5
    7143	bf 34 00 00 00 00 00 00	r4 = r3
    7144	bf 03 00 00 00 00 00 00	r3 = r0
    7145	18 05 00 00 28 3f 01 00 00 00 00 00 00 00 00 00	r5 = 0x13f28 ll
    7147	85 10 00 00 4f 01 00 00	call 0x14f ; <core::str::slice_error_fail>
    7148	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000df68 <LBB201_53>
    7149	b7 09 00 00 02 00 00 00	r9 = 0x2
    7150	b7 02 00 00 7b 00 00 00	r2 = 0x7b

000000000000df78 <LBB201_58>
    7151	bf 18 00 00 00 00 00 00	r8 = r1

000000000000df80 <LBB201_59>
    7152	bf 71 00 00 00 00 00 00	r1 = r7
    7153	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7154	8d 00 00 00 03 00 00 00	callx r3
    7155	15 00 02 00 00 00 00 00	if r0 == 0x0 goto +0x2 <LBB201_42>

000000000000dfa0 <LBB201_60>
    7156	b7 01 00 00 01 00 00 00	r1 = 0x1
    7157	05 00 5b 00 00 00 00 00	goto +0x5b <LBB201_61>

000000000000dfb0 <LBB201_42>
    7158	bf 81 00 00 00 00 00 00	r1 = r8
    7159	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7160	67 06 00 00 20 00 00 00	r6 <<= 0x20
    7161	bf 63 00 00 00 00 00 00	r3 = r6
    7162	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7163	b7 06 00 00 01 00 00 00	r6 = 0x1
    7164	15 03 f3 ff 02 00 00 00	if r3 == 0x2 goto -0xd <LBB201_59>
    7165	15 03 08 00 03 00 00 00	if r3 == 0x3 goto +0x8 <LBB201_45>

000000000000dff0 <LBB201_44>
    7166	79 a5 a8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x58)
    7167	79 a8 90 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x70)
    7168	b7 00 00 00 01 00 00 00	r0 = 0x1
    7169	b7 01 00 00 80 00 00 00	r1 = 0x80
    7170	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7171	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
    7172	2d 21 2c 00 00 00 00 00	if r1 > r2 goto +0x2c <LBB201_81>
    7173	05 00 24 00 00 00 00 00	goto +0x24 <LBB201_78>

000000000000e030 <LBB201_45>
    7174	b7 06 00 00 03 00 00 00	r6 = 0x3
    7175	bf 93 00 00 00 00 00 00	r3 = r9
    7176	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7177	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB201_49>
    7178	b7 09 00 00 00 00 00 00	r9 = 0x0
    7179	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7180	bf 18 00 00 00 00 00 00	r8 = r1
    7181	15 03 e2 ff 01 00 00 00	if r3 == 0x1 goto -0x1e <LBB201_59>
    7182	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB201_54>
    7183	05 00 ee ff 00 00 00 00	goto -0x12 <LBB201_44>

000000000000e080 <LBB201_49>
    7184	15 03 dc ff 03 00 00 00	if r3 == 0x3 goto -0x24 <LBB201_53>
    7185	15 03 13 00 04 00 00 00	if r3 == 0x4 goto +0x13 <LBB201_52>
    7186	b7 09 00 00 04 00 00 00	r9 = 0x4
    7187	05 00 db ff 00 00 00 00	goto -0x25 <LBB201_58>

000000000000e0a0 <LBB201_54>
    7188	bf 12 00 00 00 00 00 00	r2 = r1
    7189	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7190	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7191	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    7192	7f 23 00 00 00 00 00 00	r3 >>= r2
    7193	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7194	b7 02 00 00 30 00 00 00	r2 = 0x30
    7195	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7196	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB201_56>
    7197	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e0f0 <LBB201_56>
    7198	0f 32 00 00 00 00 00 00	r2 += r3
    7199	b7 08 00 00 00 00 00 00	r8 = 0x0
    7200	b7 09 00 00 01 00 00 00	r9 = 0x1
    7201	15 01 ce ff 00 00 00 00	if r1 == 0x0 goto -0x32 <LBB201_59>
    7202	b7 09 00 00 02 00 00 00	r9 = 0x2
    7203	07 01 00 00 ff ff ff ff	r1 += -0x1
    7204	05 00 ca ff 00 00 00 00	goto -0x36 <LBB201_58>

000000000000e128 <LBB201_52>
    7205	b7 09 00 00 03 00 00 00	r9 = 0x3
    7206	b7 02 00 00 75 00 00 00	r2 = 0x75
    7207	bf 18 00 00 00 00 00 00	r8 = r1
    7208	b7 06 00 00 03 00 00 00	r6 = 0x3
    7209	05 00 c6 ff 00 00 00 00	goto -0x3a <LBB201_59>

000000000000e150 <LBB201_78>
    7210	b7 00 00 00 02 00 00 00	r0 = 0x2
    7211	b7 01 00 00 00 08 00 00	r1 = 0x800
    7212	2d 21 04 00 00 00 00 00	if r1 > r2 goto +0x4 <LBB201_81>
    7213	b7 00 00 00 03 00 00 00	r0 = 0x3
    7214	b7 01 00 00 00 00 01 00	r1 = 0x10000
    7215	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB201_81>
    7216	b7 00 00 00 04 00 00 00	r0 = 0x4

000000000000e188 <LBB201_81>
    7217	0f 30 00 00 00 00 00 00	r0 += r3
    7218	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r0
    7219	05 00 32 ff 00 00 00 00	goto -0xce <LBB201_16>

000000000000e1a0 <LBB201_10>
    7220	bf 61 00 00 00 00 00 00	r1 = r6
    7221	0f 31 00 00 00 00 00 00	r1 += r3
    7222	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    7223	67 02 00 00 38 00 00 00	r2 <<= 0x38
    7224	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    7225	bf 31 00 00 00 00 00 00	r1 = r3
    7226	65 02 07 00 bf ff ff ff	if r2 s> -0x41 goto +0x7 <LBB201_12>

000000000000e1d8 <LBB201_11>
    7227	bf 61 00 00 00 00 00 00	r1 = r6
    7228	bf 82 00 00 00 00 00 00	r2 = r8
    7229	bf 84 00 00 00 00 00 00	r4 = r8
    7230	18 05 00 00 40 3f 01 00 00 00 00 00 00 00 00 00	r5 = 0x13f40 ll
    7232	85 10 00 00 fa 00 00 00	call 0xfa ; <core::str::slice_error_fail>
    7233	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e210 <LBB201_12>
    7234	0f 16 00 00 00 00 00 00	r6 += r1
    7235	1f 18 00 00 00 00 00 00	r8 -= r1
    7236	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    7237	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    7238	bf 71 00 00 00 00 00 00	r1 = r7
    7239	bf 62 00 00 00 00 00 00	r2 = r6
    7240	bf 83 00 00 00 00 00 00	r3 = r8
    7241	8d 00 00 00 04 00 00 00	callx r4
    7242	b7 01 00 00 01 00 00 00	r1 = 0x1
    7243	55 00 05 00 00 00 00 00	if r0 != 0x0 goto +0x5 <LBB201_61>
    7244	bf 71 00 00 00 00 00 00	r1 = r7
    7245	b7 02 00 00 22 00 00 00	r2 = 0x22
    7246	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7247	8d 00 00 00 03 00 00 00	callx r3
    7248	bf 01 00 00 00 00 00 00	r1 = r0

000000000000e288 <LBB201_61>
    7249	bf 10 00 00 00 00 00 00	r0 = r1
    7250	95 00 00 00 00 00 00 00	exit

000000000000e298 <<str as core::fmt::Display>::fmt>
    7251	bf 24 00 00 00 00 00 00	r4 = r2
    7252	bf 12 00 00 00 00 00 00	r2 = r1
    7253	bf 31 00 00 00 00 00 00	r1 = r3
    7254	bf 43 00 00 00 00 00 00	r3 = r4
    7255	85 10 00 00 d6 fd ff ff	call -0x22a ; <core::fmt::Formatter::pad>
    7256	95 00 00 00 00 00 00 00	exit

000000000000e2c8 <<char as core::fmt::Debug>::fmt>
    7257	bf 18 00 00 00 00 00 00	r8 = r1
    7258	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    7259	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    7260	79 23 20 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x20)
    7261	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7262	b7 02 00 00 27 00 00 00	r2 = 0x27
    7263	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    7264	8d 00 00 00 03 00 00 00	callx r3
    7265	b7 07 00 00 01 00 00 00	r7 = 0x1
    7266	55 00 56 00 00 00 00 00	if r0 != 0x0 goto +0x56 <LBB203_23>
    7267	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0x0)
    7268	bf a1 00 00 00 00 00 00	r1 = r10
    7269	07 01 00 00 e8 ff ff ff	r1 += -0x18
    7270	b7 03 00 00 01 01 00 00	r3 = 0x101
    7271	85 10 00 00 b0 fa ff ff	call -0x550 ; <core::char::methods::<impl char>::escape_debug_ext>
    7272	71 a9 fc ff 00 00 00 00	r9 = *(u8 *)(r10 - 0x4)
    7273	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x8)
    7274	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7275	79 a6 f0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x10)
    7276	61 a8 e8 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x18)
    7277	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x14)
    7278	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7279	15 01 02 00 00 00 11 00	if r1 == 0x110000 goto +0x2 <LBB203_4>
    7280	b7 07 00 00 01 00 00 00	r7 = 0x1
    7281	05 00 10 00 00 00 00 00	goto +0x10 <LBB203_3>

000000000000e390 <LBB203_4>
    7282	b7 07 00 00 01 00 00 00	r7 = 0x1
    7283	05 00 47 00 00 00 00 00	goto +0x47 <LBB203_5>

000000000000e3a0 <LBB203_24>
    7284	15 03 06 00 01 00 00 00	if r3 == 0x1 goto +0x6 <LBB203_39>

000000000000e3a8 <LBB203_25>
    7285	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7286	b7 02 00 00 27 00 00 00	r2 = 0x27
    7287	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7288	8d 00 00 00 03 00 00 00	callx r3
    7289	bf 07 00 00 00 00 00 00	r7 = r0
    7290	05 00 3e 00 00 00 00 00	goto +0x3e <LBB203_23>

000000000000e3d8 <LBB203_39>
    7291	b7 08 00 00 00 00 00 00	r8 = 0x0
    7292	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)

000000000000e3e8 <LBB203_41>
    7293	bf 16 00 00 00 00 00 00	r6 = r1

000000000000e3f0 <LBB203_42>
    7294	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7295	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7296	8d 00 00 00 03 00 00 00	callx r3
    7297	55 00 37 00 00 00 00 00	if r0 != 0x0 goto +0x37 <LBB203_23>

000000000000e410 <LBB203_3>
    7298	bf 61 00 00 00 00 00 00	r1 = r6
    7299	67 08 00 00 20 00 00 00	r8 <<= 0x20
    7300	bf 83 00 00 00 00 00 00	r3 = r8
    7301	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7302	65 03 01 00 01 00 00 00	if r3 s> 0x1 goto +0x1 <LBB203_26>
    7303	05 00 ec ff 00 00 00 00	goto -0x14 <LBB203_24>

000000000000e440 <LBB203_26>
    7304	b7 08 00 00 01 00 00 00	r8 = 0x1
    7305	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7306	bf 16 00 00 00 00 00 00	r6 = r1
    7307	15 03 f2 ff 02 00 00 00	if r3 == 0x2 goto -0xe <LBB203_42>
    7308	b7 08 00 00 03 00 00 00	r8 = 0x3
    7309	bf 93 00 00 00 00 00 00	r3 = r9
    7310	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7311	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB203_31>
    7312	b7 09 00 00 00 00 00 00	r9 = 0x0
    7313	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7314	bf 16 00 00 00 00 00 00	r6 = r1
    7315	15 03 ea ff 01 00 00 00	if r3 == 0x1 goto -0x16 <LBB203_42>
    7316	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB203_34>
    7317	05 00 df ff 00 00 00 00	goto -0x21 <LBB203_25>

000000000000e4b0 <LBB203_31>
    7318	15 03 14 00 03 00 00 00	if r3 == 0x3 goto +0x14 <LBB203_40>
    7319	15 03 16 00 04 00 00 00	if r3 == 0x4 goto +0x16 <LBB203_37>
    7320	b7 09 00 00 04 00 00 00	r9 = 0x4
    7321	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB203_41>

000000000000e4d0 <LBB203_34>
    7322	bf 12 00 00 00 00 00 00	r2 = r1
    7323	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7324	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7325	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    7326	7f 23 00 00 00 00 00 00	r3 >>= r2
    7327	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7328	b7 02 00 00 30 00 00 00	r2 = 0x30
    7329	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7330	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB203_36>
    7331	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e520 <LBB203_36>
    7332	0f 32 00 00 00 00 00 00	r2 += r3
    7333	b7 06 00 00 00 00 00 00	r6 = 0x0
    7334	b7 09 00 00 01 00 00 00	r9 = 0x1
    7335	15 01 d6 ff 00 00 00 00	if r1 == 0x0 goto -0x2a <LBB203_42>
    7336	b7 09 00 00 02 00 00 00	r9 = 0x2
    7337	07 01 00 00 ff ff ff ff	r1 += -0x1
    7338	05 00 d2 ff 00 00 00 00	goto -0x2e <LBB203_41>

000000000000e558 <LBB203_40>
    7339	b7 09 00 00 02 00 00 00	r9 = 0x2
    7340	b7 02 00 00 7b 00 00 00	r2 = 0x7b
    7341	05 00 cf ff 00 00 00 00	goto -0x31 <LBB203_41>

000000000000e570 <LBB203_37>
    7342	b7 08 00 00 03 00 00 00	r8 = 0x3
    7343	b7 02 00 00 75 00 00 00	r2 = 0x75
    7344	b7 09 00 00 03 00 00 00	r9 = 0x3
    7345	05 00 cb ff 00 00 00 00	goto -0x35 <LBB203_41>

000000000000e590 <LBB203_16>
    7346	b7 09 00 00 02 00 00 00	r9 = 0x2
    7347	b7 02 00 00 7b 00 00 00	r2 = 0x7b

000000000000e5a0 <LBB203_21>
    7348	bf 16 00 00 00 00 00 00	r6 = r1

000000000000e5a8 <LBB203_22>
    7349	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7350	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7351	8d 00 00 00 03 00 00 00	callx r3
    7352	15 00 02 00 00 00 00 00	if r0 == 0x0 goto +0x2 <LBB203_5>

000000000000e5c8 <LBB203_23>
    7353	bf 70 00 00 00 00 00 00	r0 = r7
    7354	95 00 00 00 00 00 00 00	exit

000000000000e5d8 <LBB203_5>
    7355	bf 61 00 00 00 00 00 00	r1 = r6
    7356	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7357	67 08 00 00 20 00 00 00	r8 <<= 0x20
    7358	bf 83 00 00 00 00 00 00	r3 = r8
    7359	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7360	b7 08 00 00 01 00 00 00	r8 = 0x1
    7361	15 03 f3 ff 02 00 00 00	if r3 == 0x2 goto -0xd <LBB203_22>
    7362	15 03 01 00 03 00 00 00	if r3 == 0x3 goto +0x1 <LBB203_8>
    7363	05 00 b1 ff 00 00 00 00	goto -0x4f <LBB203_25>

000000000000e620 <LBB203_8>
    7364	b7 08 00 00 03 00 00 00	r8 = 0x3
    7365	bf 93 00 00 00 00 00 00	r3 = r9
    7366	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7367	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB203_12>
    7368	b7 09 00 00 00 00 00 00	r9 = 0x0
    7369	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7370	bf 16 00 00 00 00 00 00	r6 = r1
    7371	15 03 e9 ff 01 00 00 00	if r3 == 0x1 goto -0x17 <LBB203_22>
    7372	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB203_17>
    7373	05 00 a7 ff 00 00 00 00	goto -0x59 <LBB203_25>

000000000000e670 <LBB203_12>
    7374	15 03 e3 ff 03 00 00 00	if r3 == 0x3 goto -0x1d <LBB203_16>
    7375	15 03 13 00 04 00 00 00	if r3 == 0x4 goto +0x13 <LBB203_15>
    7376	b7 09 00 00 04 00 00 00	r9 = 0x4
    7377	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB203_21>

000000000000e690 <LBB203_17>
    7378	bf 12 00 00 00 00 00 00	r2 = r1
    7379	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7380	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7381	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    7382	7f 23 00 00 00 00 00 00	r3 >>= r2
    7383	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7384	b7 02 00 00 30 00 00 00	r2 = 0x30
    7385	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7386	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB203_19>
    7387	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e6e0 <LBB203_19>
    7388	0f 32 00 00 00 00 00 00	r2 += r3
    7389	b7 06 00 00 00 00 00 00	r6 = 0x0
    7390	b7 09 00 00 01 00 00 00	r9 = 0x1
    7391	15 01 d5 ff 00 00 00 00	if r1 == 0x0 goto -0x2b <LBB203_22>
    7392	b7 09 00 00 02 00 00 00	r9 = 0x2
    7393	07 01 00 00 ff ff ff ff	r1 += -0x1
    7394	05 00 d1 ff 00 00 00 00	goto -0x2f <LBB203_21>

000000000000e718 <LBB203_15>
    7395	b7 08 00 00 03 00 00 00	r8 = 0x3
    7396	b7 02 00 00 75 00 00 00	r2 = 0x75
    7397	b7 09 00 00 03 00 00 00	r9 = 0x3
    7398	05 00 cd ff 00 00 00 00	goto -0x33 <LBB203_21>

000000000000e738 <core::slice::index::slice_start_index_len_fail>
    7399	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7400	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7401	bf a1 00 00 00 00 00 00	r1 = r10
    7402	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7403	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7404	b7 01 00 00 00 00 00 00	r1 = 0x0
    7405	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7406	b7 01 00 00 02 00 00 00	r1 = 0x2
    7407	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7408	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7409	18 01 00 00 58 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f58 ll
    7411	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7412	bf a1 00 00 00 00 00 00	r1 = r10
    7413	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7414	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7415	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    7417	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7418	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7419	bf a1 00 00 00 00 00 00	r1 = r10
    7420	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7421	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7422	bf a1 00 00 00 00 00 00	r1 = r10
    7423	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7424	bf 32 00 00 00 00 00 00	r2 = r3
    7425	85 10 00 00 69 fb ff ff	call -0x497 ; <core::panicking::panic_fmt>
    7426	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e818 <core::slice::index::slice_end_index_len_fail>
    7427	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7428	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7429	bf a1 00 00 00 00 00 00	r1 = r10
    7430	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7431	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7432	b7 01 00 00 00 00 00 00	r1 = 0x0
    7433	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7434	b7 01 00 00 02 00 00 00	r1 = 0x2
    7435	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7436	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7437	18 01 00 00 78 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f78 ll
    7439	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7440	bf a1 00 00 00 00 00 00	r1 = r10
    7441	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7442	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7443	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    7445	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7446	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7447	bf a1 00 00 00 00 00 00	r1 = r10
    7448	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7449	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7450	bf a1 00 00 00 00 00 00	r1 = r10
    7451	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7452	bf 32 00 00 00 00 00 00	r2 = r3
    7453	85 10 00 00 4d fb ff ff	call -0x4b3 ; <core::panicking::panic_fmt>
    7454	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e8f8 <core::slice::index::slice_index_order_fail>
    7455	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7456	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7457	bf a1 00 00 00 00 00 00	r1 = r10
    7458	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7459	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7460	b7 01 00 00 00 00 00 00	r1 = 0x0
    7461	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7462	b7 01 00 00 02 00 00 00	r1 = 0x2
    7463	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7464	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7465	18 01 00 00 98 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f98 ll
    7467	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7468	bf a1 00 00 00 00 00 00	r1 = r10
    7469	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7470	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7471	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    7473	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7474	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7475	bf a1 00 00 00 00 00 00	r1 = r10
    7476	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7477	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7478	bf a1 00 00 00 00 00 00	r1 = r10
    7479	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7480	bf 32 00 00 00 00 00 00	r2 = r3
    7481	85 10 00 00 31 fb ff ff	call -0x4cf ; <core::panicking::panic_fmt>
    7482	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e9d8 <core::str::slice_error_fail>
    7483	7b 4a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r4
    7484	7b 3a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r3
    7485	18 06 00 00 e8 2e 01 00 00 00 00 00 00 00 00 00	r6 = 0x12ee8 ll
    7487	b7 07 00 00 00 00 00 00	r7 = 0x0
    7488	b7 00 00 00 01 01 00 00	r0 = 0x101
    7489	bf 29 00 00 00 00 00 00	r9 = r2
    7490	2d 20 09 00 00 00 00 00	if r0 > r2 goto +0x9 <LBB242_7>
    7491	b7 00 00 00 00 01 00 00	r0 = 0x100
    7492	b7 08 00 00 c0 ff ff ff	r8 = -0x40
    7493	b7 09 00 00 00 00 00 00	r9 = 0x0
    7494	b7 07 00 00 05 00 00 00	r7 = 0x5
    7495	05 00 0c 00 00 00 00 00	goto +0xc <LBB242_2>

000000000000ea40 <LBB242_6>
    7496	18 06 00 00 c0 30 01 00 00 00 00 00 00 00 00 00	r6 = 0x130c0 ll
    7498	07 00 00 00 ff ff ff ff	r0 += -0x1
    7499	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB242_2>

000000000000ea60 <LBB242_7>
    7500	7b 9a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r9
    7501	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    7502	7b 7a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r7
    7503	7b 6a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r6
    7504	2d 23 16 00 00 00 00 00	if r3 > r2 goto +0x16 <LBB242_10>
    7505	2d 24 15 00 00 00 00 00	if r4 > r2 goto +0x15 <LBB242_10>
    7506	2d 43 32 00 00 00 00 00	if r3 > r4 goto +0x32 <LBB242_37>
    7507	05 00 50 00 00 00 00 00	goto +0x50 <LBB242_14>

000000000000eaa0 <LBB242_2>
    7508	bf 16 00 00 00 00 00 00	r6 = r1
    7509	0f 06 00 00 00 00 00 00	r6 += r0
    7510	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    7511	67 06 00 00 38 00 00 00	r6 <<= 0x38
    7512	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    7513	6d 68 ee ff 00 00 00 00	if r8 s> r6 goto -0x12 <LBB242_6>
    7514	18 06 00 00 c0 30 01 00 00 00 00 00 00 00 00 00	r6 = 0x130c0 ll
    7516	b7 07 00 00 05 00 00 00	r7 = 0x5
    7517	bf 09 00 00 00 00 00 00	r9 = r0
    7518	2d 02 ed ff 00 00 00 00	if r2 > r0 goto -0x13 <LBB242_7>
    7519	bf 29 00 00 00 00 00 00	r9 = r2
    7520	1d 02 eb ff 00 00 00 00	if r2 == r0 goto -0x15 <LBB242_7>
    7521	b7 03 00 00 00 00 00 00	r3 = 0x0
    7522	bf 04 00 00 00 00 00 00	r4 = r0
    7523	18 05 00 00 b8 3f 01 00 00 00 00 00 00 00 00 00	r5 = 0x13fb8 ll
    7525	85 10 00 00 d5 ff ff ff	call -0x2b ; <core::str::slice_error_fail>
    7526	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000eb38 <LBB242_10>
    7527	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB242_12>
    7528	bf 43 00 00 00 00 00 00	r3 = r4

000000000000eb48 <LBB242_12>
    7529	7b 3a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r3
    7530	bf a1 00 00 00 00 00 00	r1 = r10
    7531	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7532	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7533	b7 01 00 00 00 00 00 00	r1 = 0x0
    7534	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7535	b7 01 00 00 03 00 00 00	r1 = 0x3
    7536	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7537	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7538	18 01 00 00 d0 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13fd0 ll
    7540	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7541	bf a1 00 00 00 00 00 00	r1 = r10
    7542	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7543	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7544	18 01 00 00 b0 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x107b0 ll
    7546	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7547	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7548	bf a1 00 00 00 00 00 00	r1 = r10
    7549	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7550	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7551	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    7553	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7554	bf a1 00 00 00 00 00 00	r1 = r10
    7555	07 01 00 00 70 ff ff ff	r1 += -0x90
    7556	05 00 8e 00 00 00 00 00	goto +0x8e <LBB242_13>

000000000000ec28 <LBB242_37>
    7557	bf a1 00 00 00 00 00 00	r1 = r10
    7558	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7559	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7560	b7 01 00 00 00 00 00 00	r1 = 0x0
    7561	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7562	b7 01 00 00 04 00 00 00	r1 = 0x4
    7563	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7564	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7565	18 01 00 00 00 40 01 00 00 00 00 00 00 00 00 00	r1 = 0x14000 ll
    7567	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7568	bf a1 00 00 00 00 00 00	r1 = r10
    7569	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7570	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7571	18 01 00 00 b0 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x107b0 ll
    7573	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7574	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7575	bf a1 00 00 00 00 00 00	r1 = r10
    7576	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7577	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7578	bf a1 00 00 00 00 00 00	r1 = r10
    7579	07 01 00 00 38 ff ff ff	r1 += -0xc8
    7580	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7581	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    7583	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7584	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7585	bf a1 00 00 00 00 00 00	r1 = r10
    7586	07 01 00 00 30 ff ff ff	r1 += -0xd0
    7587	05 00 6f 00 00 00 00 00	goto +0x6f <LBB242_13>

000000000000ed20 <LBB242_14>
    7588	15 03 0a 00 00 00 00 00	if r3 == 0x0 goto +0xa <LBB242_18>
    7589	2d 32 02 00 00 00 00 00	if r2 > r3 goto +0x2 <LBB242_17>
    7590	1d 32 08 00 00 00 00 00	if r2 == r3 goto +0x8 <LBB242_18>
    7591	05 00 08 00 00 00 00 00	goto +0x8 <LBB242_19>

000000000000ed40 <LBB242_17>
    7592	bf 10 00 00 00 00 00 00	r0 = r1
    7593	0f 30 00 00 00 00 00 00	r0 += r3
    7594	71 00 00 00 00 00 00 00	r0 = *(u8 *)(r0 + 0x0)
    7595	67 00 00 00 38 00 00 00	r0 <<= 0x38
    7596	c7 00 00 00 38 00 00 00	r0 s>>= 0x38
    7597	b7 06 00 00 c0 ff ff ff	r6 = -0x40
    7598	6d 06 01 00 00 00 00 00	if r6 s> r0 goto +0x1 <LBB242_19>

000000000000ed78 <LBB242_18>
    7599	bf 43 00 00 00 00 00 00	r3 = r4

000000000000ed80 <LBB242_19>
    7600	7b 3a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r3
    7601	15 03 0c 00 00 00 00 00	if r3 == 0x0 goto +0xc <LBB242_23>

000000000000ed90 <LBB242_20>
    7602	2d 32 02 00 00 00 00 00	if r2 > r3 goto +0x2 <LBB242_22>
    7603	1d 32 2e 00 00 00 00 00	if r2 == r3 goto +0x2e <LBB242_30>
    7604	05 00 06 00 00 00 00 00	goto +0x6 <LBB242_36>

000000000000eda8 <LBB242_22>
    7605	bf 14 00 00 00 00 00 00	r4 = r1
    7606	0f 34 00 00 00 00 00 00	r4 += r3
    7607	71 44 00 00 00 00 00 00	r4 = *(u8 *)(r4 + 0x0)
    7608	67 04 00 00 38 00 00 00	r4 <<= 0x38
    7609	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
    7610	65 04 04 00 bf ff ff ff	if r4 s> -0x41 goto +0x4 <LBB242_24>

000000000000edd8 <LBB242_36>
    7611	07 03 00 00 ff ff ff ff	r3 += -0x1
    7612	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB242_23>
    7613	05 00 f4 ff 00 00 00 00	goto -0xc <LBB242_20>

000000000000edf0 <LBB242_23>
    7614	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000edf8 <LBB242_24>
    7615	1d 23 22 00 00 00 00 00	if r3 == r2 goto +0x22 <LBB242_30>
    7616	0f 31 00 00 00 00 00 00	r1 += r3
    7617	71 10 00 00 00 00 00 00	r0 = *(u8 *)(r1 + 0x0)
    7618	bf 02 00 00 00 00 00 00	r2 = r0
    7619	67 02 00 00 38 00 00 00	r2 <<= 0x38
    7620	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    7621	65 02 22 00 ff ff ff ff	if r2 s> -0x1 goto +0x22 <LBB242_27>
    7622	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x1)
    7623	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    7624	bf 04 00 00 00 00 00 00	r4 = r0
    7625	57 04 00 00 1f 00 00 00	r4 &= 0x1f
    7626	bf 46 00 00 00 00 00 00	r6 = r4
    7627	67 06 00 00 06 00 00 00	r6 <<= 0x6
    7628	4f 26 00 00 00 00 00 00	r6 |= r2
    7629	25 00 01 00 df 00 00 00	if r0 > 0xdf goto +0x1 <LBB242_28>
    7630	05 00 4a 00 00 00 00 00	goto +0x4a <LBB242_31>

000000000000ee78 <LBB242_28>
    7631	67 02 00 00 06 00 00 00	r2 <<= 0x6
    7632	71 16 02 00 00 00 00 00	r6 = *(u8 *)(r1 + 0x2)
    7633	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    7634	4f 62 00 00 00 00 00 00	r2 |= r6
    7635	bf 47 00 00 00 00 00 00	r7 = r4
    7636	67 07 00 00 0c 00 00 00	r7 <<= 0xc
    7637	bf 26 00 00 00 00 00 00	r6 = r2
    7638	4f 76 00 00 00 00 00 00	r6 |= r7
    7639	b7 07 00 00 f0 00 00 00	r7 = 0xf0
    7640	2d 07 40 00 00 00 00 00	if r7 > r0 goto +0x40 <LBB242_31>
    7641	67 02 00 00 06 00 00 00	r2 <<= 0x6
    7642	71 11 03 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x3)
    7643	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    7644	4f 12 00 00 00 00 00 00	r2 |= r1
    7645	67 04 00 00 12 00 00 00	r4 <<= 0x12
    7646	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    7647	4f 42 00 00 00 00 00 00	r2 |= r4
    7648	bf 26 00 00 00 00 00 00	r6 = r2
    7649	55 02 37 00 00 00 11 00	if r2 != 0x110000 goto +0x37 <LBB242_31>

000000000000ef10 <LBB242_30>
    7650	18 01 00 00 f5 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ef5 ll
    7652	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    7653	bf 53 00 00 00 00 00 00	r3 = r5
    7654	85 10 00 00 56 fa ff ff	call -0x5aa ; <core::panicking::panic>
    7655	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ef40 <LBB242_27>
    7656	63 0a 6c ff 00 00 00 00	*(u32 *)(r10 - 0x94) = r0
    7657	b7 01 00 00 01 00 00 00	r1 = 0x1

000000000000ef50 <LBB242_35>
    7658	7b 3a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r3
    7659	0f 31 00 00 00 00 00 00	r1 += r3
    7660	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r1
    7661	bf a1 00 00 00 00 00 00	r1 = r10
    7662	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7663	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7664	b7 01 00 00 00 00 00 00	r1 = 0x0
    7665	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7666	b7 01 00 00 05 00 00 00	r1 = 0x5
    7667	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7668	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7669	18 01 00 00 40 40 01 00 00 00 00 00 00 00 00 00	r1 = 0x14040 ll
    7671	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7672	bf a1 00 00 00 00 00 00	r1 = r10
    7673	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7674	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7675	18 01 00 00 b0 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x107b0 ll
    7677	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7678	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7679	bf a1 00 00 00 00 00 00	r1 = r10
    7680	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7681	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7682	18 01 00 00 50 b7 00 00 00 00 00 00 00 00 00 00	r1 = 0xb750 ll
    7684	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7685	bf a1 00 00 00 00 00 00	r1 = r10
    7686	07 01 00 00 70 ff ff ff	r1 += -0x90
    7687	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7688	18 01 00 00 c8 e2 00 00 00 00 00 00 00 00 00 00	r1 = 0xe2c8 ll
    7690	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7691	bf a1 00 00 00 00 00 00	r1 = r10
    7692	07 01 00 00 6c ff ff ff	r1 += -0x94
    7693	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7694	18 01 00 00 c8 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x103c8 ll
    7696	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7697	bf a1 00 00 00 00 00 00	r1 = r10
    7698	07 01 00 00 60 ff ff ff	r1 += -0xa0

000000000000f098 <LBB242_13>
    7699	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7700	bf a1 00 00 00 00 00 00	r1 = r10
    7701	07 01 00 00 80 ff ff ff	r1 += -0x80
    7702	bf 52 00 00 00 00 00 00	r2 = r5
    7703	85 10 00 00 53 fa ff ff	call -0x5ad ; <core::panicking::panic_fmt>
    7704	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f0c8 <LBB242_31>
    7705	b7 01 00 00 01 00 00 00	r1 = 0x1
    7706	63 6a 6c ff 00 00 00 00	*(u32 *)(r10 - 0x94) = r6
    7707	b7 02 00 00 80 00 00 00	r2 = 0x80
    7708	2d 62 cd ff 00 00 00 00	if r2 > r6 goto -0x33 <LBB242_35>
    7709	b7 01 00 00 02 00 00 00	r1 = 0x2
    7710	b7 02 00 00 00 08 00 00	r2 = 0x800
    7711	2d 62 ca ff 00 00 00 00	if r2 > r6 goto -0x36 <LBB242_35>
    7712	b7 01 00 00 03 00 00 00	r1 = 0x3
    7713	b7 02 00 00 00 00 01 00	r2 = 0x10000
    7714	2d 62 c7 ff 00 00 00 00	if r2 > r6 goto -0x39 <LBB242_35>
    7715	b7 01 00 00 04 00 00 00	r1 = 0x4
    7716	05 00 c5 ff 00 00 00 00	goto -0x3b <LBB242_35>

000000000000f128 <core::unicode::printable::check>
    7717	bf 19 00 00 00 00 00 00	r9 = r1
    7718	79 51 10 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0xff0)
    7719	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7720	79 56 08 f0 00 00 00 00	r6 = *(u64 *)(r5 - 0xff8)
    7721	15 03 2a 00 00 00 00 00	if r3 == 0x0 goto +0x2a <LBB261_3>
    7722	67 03 00 00 01 00 00 00	r3 <<= 0x1
    7723	bf 21 00 00 00 00 00 00	r1 = r2
    7724	0f 31 00 00 00 00 00 00	r1 += r3
    7725	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7726	79 58 00 f0 00 00 00 00	r8 = *(u64 *)(r5 - 0x1000)
    7727	bf 93 00 00 00 00 00 00	r3 = r9
    7728	57 03 00 00 00 ff 00 00	r3 &= 0xff00
    7729	77 03 00 00 08 00 00 00	r3 >>= 0x8
    7730	b7 00 00 00 00 00 00 00	r0 = 0x0
    7731	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    7732	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8
    7733	05 00 04 00 00 00 00 00	goto +0x4 <LBB261_2>

000000000000f1b0 <LBB261_6>
    7734	2d 31 1d 00 00 00 00 00	if r1 > r3 goto +0x1d <LBB261_3>
    7735	bf 50 00 00 00 00 00 00	r0 = r5
    7736	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    7737	1d 12 1a 00 00 00 00 00	if r2 == r1 goto +0x1a <LBB261_3>

000000000000f1d0 <LBB261_2>
    7738	71 27 01 00 00 00 00 00	r7 = *(u8 *)(r2 + 0x1)
    7739	bf 05 00 00 00 00 00 00	r5 = r0
    7740	0f 75 00 00 00 00 00 00	r5 += r7
    7741	71 21 00 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x0)
    7742	07 02 00 00 02 00 00 00	r2 += 0x2
    7743	1d 31 01 00 00 00 00 00	if r1 == r3 goto +0x1 <LBB261_8>
    7744	05 00 f5 ff 00 00 00 00	goto -0xb <LBB261_6>

000000000000f208 <LBB261_8>
    7745	2d 50 39 00 00 00 00 00	if r0 > r5 goto +0x39 <LBB261_10>
    7746	2d 85 3e 00 00 00 00 00	if r5 > r8 goto +0x3e <LBB261_11>
    7747	0f 04 00 00 00 00 00 00	r4 += r0

000000000000f220 <LBB261_13>
    7748	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB261_16>
    7749	b7 00 00 00 00 00 00 00	r0 = 0x0
    7750	07 07 00 00 ff ff ff ff	r7 += -0x1
    7751	bf 91 00 00 00 00 00 00	r1 = r9
    7752	57 01 00 00 ff 00 00 00	r1 &= 0xff
    7753	71 48 00 00 00 00 00 00	r8 = *(u8 *)(r4 + 0x0)
    7754	07 04 00 00 01 00 00 00	r4 += 0x1
    7755	5d 18 f8 ff 00 00 00 00	if r8 != r1 goto -0x8 <LBB261_13>

000000000000f260 <LBB261_15>
    7756	57 00 00 00 01 00 00 00	r0 &= 0x1
    7757	95 00 00 00 00 00 00 00	exit

000000000000f270 <LBB261_16>
    7758	bf 50 00 00 00 00 00 00	r0 = r5
    7759	79 a4 e0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x20)
    7760	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    7761	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    7762	1d 12 01 00 00 00 00 00	if r2 == r1 goto +0x1 <LBB261_3>
    7763	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB261_2>

000000000000f2a0 <LBB261_3>
    7764	b7 00 00 00 01 00 00 00	r0 = 0x1
    7765	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    7766	15 01 f5 ff 00 00 00 00	if r1 == 0x0 goto -0xb <LBB261_15>
    7767	bf 62 00 00 00 00 00 00	r2 = r6
    7768	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    7769	0f 12 00 00 00 00 00 00	r2 += r1
    7770	b7 00 00 00 01 00 00 00	r0 = 0x1
    7771	57 09 00 00 ff ff 00 00	r9 &= 0xffff
    7772	b7 03 00 00 00 00 00 00	r3 = 0x0
    7773	05 00 07 00 00 00 00 00	goto +0x7 <LBB261_5>

000000000000f2f0 <LBB261_17>
    7774	bf 56 00 00 00 00 00 00	r6 = r5

000000000000f2f8 <LBB261_21>
    7775	1f 49 00 00 00 00 00 00	r9 -= r4
    7776	67 09 00 00 20 00 00 00	r9 <<= 0x20
    7777	c7 09 00 00 20 00 00 00	r9 s>>= 0x20
    7778	6d 93 e9 ff 00 00 00 00	if r3 s> r9 goto -0x17 <LBB261_15>
    7779	a7 00 00 00 01 00 00 00	r0 ^= 0x1
    7780	1d 26 e7 ff 00 00 00 00	if r6 == r2 goto -0x19 <LBB261_15>

000000000000f328 <LBB261_5>
    7781	bf 65 00 00 00 00 00 00	r5 = r6
    7782	07 05 00 00 01 00 00 00	r5 += 0x1
    7783	71 64 00 00 00 00 00 00	r4 = *(u8 *)(r6 + 0x0)
    7784	bf 41 00 00 00 00 00 00	r1 = r4
    7785	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7786	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7787	6d 13 01 00 00 00 00 00	if r3 s> r1 goto +0x1 <LBB261_18>
    7788	05 00 f1 ff 00 00 00 00	goto -0xf <LBB261_17>

000000000000f368 <LBB261_18>
    7789	5d 25 07 00 00 00 00 00	if r5 != r2 goto +0x7 <LBB261_20>
    7790	18 01 00 00 f5 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ef5 ll
    7792	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    7793	18 03 00 00 a8 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x140a8 ll
    7795	85 10 00 00 c9 f9 ff ff	call -0x637 ; <core::panicking::panic>
    7796	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f3a8 <LBB261_20>
    7797	57 04 00 00 7f 00 00 00	r4 &= 0x7f
    7798	67 04 00 00 08 00 00 00	r4 <<= 0x8
    7799	71 61 01 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x1)
    7800	4f 14 00 00 00 00 00 00	r4 |= r1
    7801	07 06 00 00 02 00 00 00	r6 += 0x2
    7802	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB261_21>

000000000000f3d8 <LBB261_10>
    7803	bf 01 00 00 00 00 00 00	r1 = r0
    7804	bf 52 00 00 00 00 00 00	r2 = r5
    7805	18 03 00 00 90 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14090 ll
    7807	85 10 00 00 9f fe ff ff	call -0x161 ; <core::slice::index::slice_index_order_fail>
    7808	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f408 <LBB261_11>
    7809	bf 51 00 00 00 00 00 00	r1 = r5
    7810	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    7811	18 03 00 00 90 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14090 ll
    7813	85 10 00 00 7d fe ff ff	call -0x183 ; <core::slice::index::slice_end_index_len_fail>
    7814	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f438 <core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt>
    7815	b7 03 00 00 00 00 00 00	r3 = 0x0
    7816	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
    7817	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7818	05 00 14 00 00 00 00 00	goto +0x14 <LBB466_1>

000000000000f458 <LBB466_3>
    7819	0f 05 00 00 00 00 00 00	r5 += r0
    7820	bf a0 00 00 00 00 00 00	r0 = r10
    7821	07 00 00 00 80 ff ff ff	r0 += -0x80
    7822	0f 30 00 00 00 00 00 00	r0 += r3
    7823	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7824	07 03 00 00 ff ff ff ff	r3 += -0x1
    7825	bf 45 00 00 00 00 00 00	r5 = r4
    7826	57 05 00 00 ff 00 00 00	r5 &= 0xff
    7827	bf 54 00 00 00 00 00 00	r4 = r5
    7828	77 04 00 00 04 00 00 00	r4 >>= 0x4
    7829	25 05 09 00 0f 00 00 00	if r5 > 0xf goto +0x9 <LBB466_1>
    7830	bf 31 00 00 00 00 00 00	r1 = r3
    7831	07 01 00 00 80 00 00 00	r1 += 0x80
    7832	b7 04 00 00 81 00 00 00	r4 = 0x81
    7833	2d 14 0b 00 00 00 00 00	if r4 > r1 goto +0xb <LBB466_6>
    7834	b7 02 00 00 80 00 00 00	r2 = 0x80
    7835	18 03 00 00 10 3f 01 00 00 00 00 00 00 00 00 00	r3 = 0x13f10 ll
    7837	85 10 00 00 49 fe ff ff	call -0x1b7 ; <core::slice::index::slice_start_index_len_fail>
    7838	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f4f8 <LBB466_1>
    7839	bf 40 00 00 00 00 00 00	r0 = r4
    7840	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7841	b7 05 00 00 30 00 00 00	r5 = 0x30
    7842	2d 01 e8 ff 00 00 00 00	if r1 > r0 goto -0x18 <LBB466_3>
    7843	b7 05 00 00 57 00 00 00	r5 = 0x57
    7844	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB466_3>

000000000000f528 <LBB466_6>
    7845	bf 31 00 00 00 00 00 00	r1 = r3
    7846	87 01 00 00 00 00 00 00	r1 = -r1
    7847	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    7848	bf a1 00 00 00 00 00 00	r1 = r10
    7849	07 01 00 00 80 ff ff ff	r1 += -0x80
    7850	0f 31 00 00 00 00 00 00	r1 += r3
    7851	07 01 00 00 80 00 00 00	r1 += 0x80
    7852	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    7853	bf a5 00 00 00 00 00 00	r5 = r10
    7854	bf 21 00 00 00 00 00 00	r1 = r2
    7855	b7 02 00 00 01 00 00 00	r2 = 0x1
    7856	18 03 00 00 61 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f61 ll
    7858	b7 04 00 00 02 00 00 00	r4 = 0x2
    7859	85 10 00 00 7d fa ff ff	call -0x583 ; <core::fmt::Formatter::pad_integral>
    7860	95 00 00 00 00 00 00 00	exit

000000000000f5a8 <core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt>
    7861	b7 03 00 00 00 00 00 00	r3 = 0x0
    7862	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
    7863	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7864	05 00 14 00 00 00 00 00	goto +0x14 <LBB467_1>

000000000000f5c8 <LBB467_3>
    7865	0f 05 00 00 00 00 00 00	r5 += r0
    7866	bf a0 00 00 00 00 00 00	r0 = r10
    7867	07 00 00 00 80 ff ff ff	r0 += -0x80
    7868	0f 30 00 00 00 00 00 00	r0 += r3
    7869	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7870	07 03 00 00 ff ff ff ff	r3 += -0x1
    7871	bf 45 00 00 00 00 00 00	r5 = r4
    7872	57 05 00 00 ff 00 00 00	r5 &= 0xff
    7873	bf 54 00 00 00 00 00 00	r4 = r5
    7874	77 04 00 00 04 00 00 00	r4 >>= 0x4
    7875	25 05 09 00 0f 00 00 00	if r5 > 0xf goto +0x9 <LBB467_1>
    7876	bf 31 00 00 00 00 00 00	r1 = r3
    7877	07 01 00 00 80 00 00 00	r1 += 0x80
    7878	b7 04 00 00 81 00 00 00	r4 = 0x81
    7879	2d 14 0b 00 00 00 00 00	if r4 > r1 goto +0xb <LBB467_6>
    7880	b7 02 00 00 80 00 00 00	r2 = 0x80
    7881	18 03 00 00 10 3f 01 00 00 00 00 00 00 00 00 00	r3 = 0x13f10 ll
    7883	85 10 00 00 1b fe ff ff	call -0x1e5 ; <core::slice::index::slice_start_index_len_fail>
    7884	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f668 <LBB467_1>
    7885	bf 40 00 00 00 00 00 00	r0 = r4
    7886	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7887	b7 05 00 00 30 00 00 00	r5 = 0x30
    7888	2d 01 e8 ff 00 00 00 00	if r1 > r0 goto -0x18 <LBB467_3>
    7889	b7 05 00 00 37 00 00 00	r5 = 0x37
    7890	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB467_3>

000000000000f698 <LBB467_6>
    7891	bf 31 00 00 00 00 00 00	r1 = r3
    7892	87 01 00 00 00 00 00 00	r1 = -r1
    7893	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    7894	bf a1 00 00 00 00 00 00	r1 = r10
    7895	07 01 00 00 80 ff ff ff	r1 += -0x80
    7896	0f 31 00 00 00 00 00 00	r1 += r3
    7897	07 01 00 00 80 00 00 00	r1 += 0x80
    7898	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    7899	bf a5 00 00 00 00 00 00	r5 = r10
    7900	bf 21 00 00 00 00 00 00	r1 = r2
    7901	b7 02 00 00 01 00 00 00	r2 = 0x1
    7902	18 03 00 00 61 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f61 ll
    7904	b7 04 00 00 02 00 00 00	r4 = 0x2
    7905	85 10 00 00 4f fa ff ff	call -0x5b1 ; <core::fmt::Formatter::pad_integral>
    7906	95 00 00 00 00 00 00 00	exit

000000000000f718 <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    7907	61 23 30 00 00 00 00 00	r3 = *(u32 *)(r2 + 0x30)
    7908	bf 34 00 00 00 00 00 00	r4 = r3
    7909	57 04 00 00 10 00 00 00	r4 &= 0x10
    7910	55 04 32 00 00 00 00 00	if r4 != 0x0 goto +0x32 <LBB492_2>
    7911	57 03 00 00 20 00 00 00	r3 &= 0x20
    7912	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB492_10>
    7913	05 00 33 00 00 00 00 00	goto +0x33 <LBB492_20>

000000000000f750 <LBB492_10>
    7914	b7 03 00 00 27 00 00 00	r3 = 0x27
    7915	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    7916	b7 04 00 00 10 27 00 00	r4 = 0x2710
    7917	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB492_14>
    7918	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000f778 <LBB492_12>
    7919	bf 14 00 00 00 00 00 00	r4 = r1
    7920	37 01 00 00 10 27 00 00	r1 /= 0x2710
    7921	bf 15 00 00 00 00 00 00	r5 = r1
    7922	27 05 00 00 10 27 00 00	r5 *= 0x2710
    7923	bf 40 00 00 00 00 00 00	r0 = r4
    7924	1f 50 00 00 00 00 00 00	r0 -= r5
    7925	bf 05 00 00 00 00 00 00	r5 = r0
    7926	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    7927	37 05 00 00 64 00 00 00	r5 /= 0x64
    7928	bf 56 00 00 00 00 00 00	r6 = r5
    7929	27 06 00 00 64 00 00 00	r6 *= 0x64
    7930	1f 60 00 00 00 00 00 00	r0 -= r6
    7931	bf a6 00 00 00 00 00 00	r6 = r10
    7932	07 06 00 00 80 ff ff ff	r6 += -0x80
    7933	0f 36 00 00 00 00 00 00	r6 += r3
    7934	67 05 00 00 01 00 00 00	r5 <<= 0x1
    7935	18 07 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r7 = 0x12f63 ll
    7937	0f 57 00 00 00 00 00 00	r7 += r5
    7938	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    7939	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    7940	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    7941	67 00 00 00 01 00 00 00	r0 <<= 0x1
    7942	18 05 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f63 ll
    7944	0f 05 00 00 00 00 00 00	r5 += r0
    7945	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    7946	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    7947	07 03 00 00 fc ff ff ff	r3 += -0x4
    7948	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB492_12>
    7949	07 03 00 00 27 00 00 00	r3 += 0x27

000000000000f870 <LBB492_14>
    7950	65 01 4f 00 63 00 00 00	if r1 s> 0x63 goto +0x4f <LBB492_16>

000000000000f878 <LBB492_15>
    7951	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7952	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB492_18>
    7953	05 00 5f 00 00 00 00 00	goto +0x5f <LBB492_17>

000000000000f890 <LBB492_18>
    7954	07 03 00 00 ff ff ff ff	r3 += -0x1
    7955	bf a4 00 00 00 00 00 00	r4 = r10
    7956	07 04 00 00 80 ff ff ff	r4 += -0x80
    7957	0f 34 00 00 00 00 00 00	r4 += r3
    7958	07 01 00 00 30 00 00 00	r1 += 0x30
    7959	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    7960	05 00 62 00 00 00 00 00	goto +0x62 <LBB492_19>

000000000000f8c8 <LBB492_2>
    7961	b7 03 00 00 00 00 00 00	r3 = 0x0
    7962	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    7963	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7964	05 00 2b 00 00 00 00 00	goto +0x2b <LBB492_3>

000000000000f8e8 <LBB492_20>
    7965	b7 03 00 00 00 00 00 00	r3 = 0x0
    7966	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    7967	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7968	05 00 0e 00 00 00 00 00	goto +0xe <LBB492_21>

000000000000f908 <LBB492_23>
    7969	0f 05 00 00 00 00 00 00	r5 += r0
    7970	bf a0 00 00 00 00 00 00	r0 = r10
    7971	07 00 00 00 80 ff ff ff	r0 += -0x80
    7972	0f 30 00 00 00 00 00 00	r0 += r3
    7973	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7974	07 03 00 00 ff ff ff ff	r3 += -0x1
    7975	bf 45 00 00 00 00 00 00	r5 = r4
    7976	77 05 00 00 04 00 00 00	r5 >>= 0x4
    7977	25 04 05 00 0f 00 00 00	if r4 > 0xf goto +0x5 <LBB492_21>
    7978	bf 31 00 00 00 00 00 00	r1 = r3
    7979	07 01 00 00 80 00 00 00	r1 += 0x80
    7980	b7 04 00 00 81 00 00 00	r4 = 0x81
    7981	2d 14 21 00 00 00 00 00	if r4 > r1 goto +0x21 <LBB492_8>
    7982	05 00 14 00 00 00 00 00	goto +0x14 <LBB492_7>

000000000000f978 <LBB492_21>
    7983	bf 54 00 00 00 00 00 00	r4 = r5
    7984	bf 40 00 00 00 00 00 00	r0 = r4
    7985	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7986	b7 05 00 00 30 00 00 00	r5 = 0x30
    7987	2d 01 ed ff 00 00 00 00	if r1 > r0 goto -0x13 <LBB492_23>
    7988	b7 05 00 00 37 00 00 00	r5 = 0x37
    7989	05 00 eb ff 00 00 00 00	goto -0x15 <LBB492_23>

000000000000f9b0 <LBB492_5>
    7990	0f 05 00 00 00 00 00 00	r5 += r0
    7991	bf a0 00 00 00 00 00 00	r0 = r10
    7992	07 00 00 00 80 ff ff ff	r0 += -0x80
    7993	0f 30 00 00 00 00 00 00	r0 += r3
    7994	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7995	07 03 00 00 ff ff ff ff	r3 += -0x1
    7996	bf 45 00 00 00 00 00 00	r5 = r4
    7997	77 05 00 00 04 00 00 00	r5 >>= 0x4
    7998	25 04 09 00 0f 00 00 00	if r4 > 0xf goto +0x9 <LBB492_3>
    7999	bf 31 00 00 00 00 00 00	r1 = r3
    8000	07 01 00 00 80 00 00 00	r1 += 0x80
    8001	b7 04 00 00 81 00 00 00	r4 = 0x81
    8002	2d 14 0c 00 00 00 00 00	if r4 > r1 goto +0xc <LBB492_8>

000000000000fa18 <LBB492_7>
    8003	b7 02 00 00 80 00 00 00	r2 = 0x80
    8004	18 03 00 00 10 3f 01 00 00 00 00 00 00 00 00 00	r3 = 0x13f10 ll
    8006	85 10 00 00 a0 fd ff ff	call -0x260 ; <core::slice::index::slice_start_index_len_fail>
    8007	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000fa40 <LBB492_3>
    8008	bf 54 00 00 00 00 00 00	r4 = r5
    8009	bf 40 00 00 00 00 00 00	r0 = r4
    8010	57 00 00 00 0f 00 00 00	r0 &= 0xf
    8011	b7 05 00 00 30 00 00 00	r5 = 0x30
    8012	2d 01 e9 ff 00 00 00 00	if r1 > r0 goto -0x17 <LBB492_5>
    8013	b7 05 00 00 57 00 00 00	r5 = 0x57
    8014	05 00 e7 ff 00 00 00 00	goto -0x19 <LBB492_5>

000000000000fa78 <LBB492_8>
    8015	bf 31 00 00 00 00 00 00	r1 = r3
    8016	87 01 00 00 00 00 00 00	r1 = -r1
    8017	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8018	bf a1 00 00 00 00 00 00	r1 = r10
    8019	07 01 00 00 80 ff ff ff	r1 += -0x80
    8020	0f 31 00 00 00 00 00 00	r1 += r3
    8021	07 01 00 00 80 00 00 00	r1 += 0x80
    8022	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8023	bf a5 00 00 00 00 00 00	r5 = r10
    8024	bf 21 00 00 00 00 00 00	r1 = r2
    8025	b7 02 00 00 01 00 00 00	r2 = 0x1
    8026	18 03 00 00 61 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f61 ll
    8028	b7 04 00 00 02 00 00 00	r4 = 0x2
    8029	05 00 2a 00 00 00 00 00	goto +0x2a <LBB492_9>

000000000000faf0 <LBB492_16>
    8030	bf 14 00 00 00 00 00 00	r4 = r1
    8031	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8032	37 04 00 00 64 00 00 00	r4 /= 0x64
    8033	bf 45 00 00 00 00 00 00	r5 = r4
    8034	27 05 00 00 64 00 00 00	r5 *= 0x64
    8035	1f 51 00 00 00 00 00 00	r1 -= r5
    8036	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8037	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8038	18 05 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f63 ll
    8040	0f 15 00 00 00 00 00 00	r5 += r1
    8041	07 03 00 00 fe ff ff ff	r3 += -0x2
    8042	bf a1 00 00 00 00 00 00	r1 = r10
    8043	07 01 00 00 80 ff ff ff	r1 += -0x80
    8044	0f 31 00 00 00 00 00 00	r1 += r3
    8045	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8046	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8047	bf 41 00 00 00 00 00 00	r1 = r4
    8048	05 00 9e ff 00 00 00 00	goto -0x62 <LBB492_15>

000000000000fb88 <LBB492_17>
    8049	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8050	18 04 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r4 = 0x12f63 ll
    8052	0f 14 00 00 00 00 00 00	r4 += r1
    8053	07 03 00 00 fe ff ff ff	r3 += -0x2
    8054	bf a1 00 00 00 00 00 00	r1 = r10
    8055	07 01 00 00 80 ff ff ff	r1 += -0x80
    8056	0f 31 00 00 00 00 00 00	r1 += r3
    8057	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8058	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

000000000000fbd8 <LBB492_19>
    8059	bf a1 00 00 00 00 00 00	r1 = r10
    8060	07 01 00 00 80 ff ff ff	r1 += -0x80
    8061	0f 31 00 00 00 00 00 00	r1 += r3
    8062	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8063	b7 01 00 00 27 00 00 00	r1 = 0x27
    8064	1f 31 00 00 00 00 00 00	r1 -= r3
    8065	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8066	bf a5 00 00 00 00 00 00	r5 = r10
    8067	bf 21 00 00 00 00 00 00	r1 = r2
    8068	b7 02 00 00 01 00 00 00	r2 = 0x1
    8069	18 03 00 00 e8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12ee8 ll
    8071	b7 04 00 00 00 00 00 00	r4 = 0x0

000000000000fc40 <LBB492_9>
    8072	85 10 00 00 a8 f9 ff ff	call -0x658 ; <core::fmt::Formatter::pad_integral>
    8073	95 00 00 00 00 00 00 00	exit

000000000000fc50 <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>
    8074	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    8075	25 01 0b 00 63 00 00 00	if r1 > 0x63 goto +0xb <LBB494_3>
    8076	b7 03 00 00 26 00 00 00	r3 = 0x26
    8077	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8078	2d 14 16 00 00 00 00 00	if r4 > r1 goto +0x16 <LBB494_4>
    8079	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8080	18 03 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f63 ll
    8082	0f 13 00 00 00 00 00 00	r3 += r1
    8083	69 31 00 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x0)
    8084	6b 1a fe ff 00 00 00 00	*(u16 *)(r10 - 0x2) = r1
    8085	b7 03 00 00 25 00 00 00	r3 = 0x25
    8086	05 00 13 00 00 00 00 00	goto +0x13 <LBB494_5>

000000000000fcb8 <LBB494_3>
    8087	bf 14 00 00 00 00 00 00	r4 = r1
    8088	37 04 00 00 64 00 00 00	r4 /= 0x64
    8089	bf 43 00 00 00 00 00 00	r3 = r4
    8090	27 03 00 00 64 00 00 00	r3 *= 0x64
    8091	1f 31 00 00 00 00 00 00	r1 -= r3
    8092	57 01 00 00 ff 00 00 00	r1 &= 0xff
    8093	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8094	18 03 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f63 ll
    8096	0f 13 00 00 00 00 00 00	r3 += r1
    8097	69 31 00 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x0)
    8098	6b 1a fe ff 00 00 00 00	*(u16 *)(r10 - 0x2) = r1
    8099	b7 03 00 00 24 00 00 00	r3 = 0x24
    8100	bf 41 00 00 00 00 00 00	r1 = r4

000000000000fd28 <LBB494_4>
    8101	bf a4 00 00 00 00 00 00	r4 = r10
    8102	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8103	0f 34 00 00 00 00 00 00	r4 += r3
    8104	07 01 00 00 30 00 00 00	r1 += 0x30
    8105	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1

000000000000fd50 <LBB494_5>
    8106	bf a1 00 00 00 00 00 00	r1 = r10
    8107	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8108	0f 31 00 00 00 00 00 00	r1 += r3
    8109	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8110	b7 01 00 00 27 00 00 00	r1 = 0x27
    8111	1f 31 00 00 00 00 00 00	r1 -= r3
    8112	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8113	bf a5 00 00 00 00 00 00	r5 = r10
    8114	bf 21 00 00 00 00 00 00	r1 = r2
    8115	b7 02 00 00 01 00 00 00	r2 = 0x1
    8116	18 03 00 00 e8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12ee8 ll
    8118	b7 04 00 00 00 00 00 00	r4 = 0x0
    8119	85 10 00 00 79 f9 ff ff	call -0x687 ; <core::fmt::Formatter::pad_integral>
    8120	95 00 00 00 00 00 00 00	exit

000000000000fdc8 <core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt>
    8121	bf 23 00 00 00 00 00 00	r3 = r2
    8122	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    8123	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8124	bf 12 00 00 00 00 00 00	r2 = r1
    8125	c7 02 00 00 3f 00 00 00	r2 s>>= 0x3f
    8126	c7 01 00 00 20 00 00 00	r1 s>>= 0x20
    8127	bf 14 00 00 00 00 00 00	r4 = r1
    8128	0f 24 00 00 00 00 00 00	r4 += r2
    8129	af 24 00 00 00 00 00 00	r4 ^= r2
    8130	b7 02 00 00 27 00 00 00	r2 = 0x27
    8131	b7 05 00 00 10 27 00 00	r5 = 0x2710
    8132	2d 45 20 00 00 00 00 00	if r5 > r4 goto +0x20 <LBB497_4>
    8133	b7 02 00 00 00 00 00 00	r2 = 0x0

000000000000fe30 <LBB497_2>
    8134	bf 45 00 00 00 00 00 00	r5 = r4
    8135	37 04 00 00 10 27 00 00	r4 /= 0x2710
    8136	bf 40 00 00 00 00 00 00	r0 = r4
    8137	27 00 00 00 10 27 00 00	r0 *= 0x2710
    8138	bf 56 00 00 00 00 00 00	r6 = r5
    8139	1f 06 00 00 00 00 00 00	r6 -= r0
    8140	bf 60 00 00 00 00 00 00	r0 = r6
    8141	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8142	37 00 00 00 64 00 00 00	r0 /= 0x64
    8143	bf 07 00 00 00 00 00 00	r7 = r0
    8144	27 07 00 00 64 00 00 00	r7 *= 0x64
    8145	1f 76 00 00 00 00 00 00	r6 -= r7
    8146	bf a7 00 00 00 00 00 00	r7 = r10
    8147	07 07 00 00 d9 ff ff ff	r7 += -0x27
    8148	0f 27 00 00 00 00 00 00	r7 += r2
    8149	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8150	18 08 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r8 = 0x12f63 ll
    8152	0f 08 00 00 00 00 00 00	r8 += r0
    8153	69 80 00 00 00 00 00 00	r0 = *(u16 *)(r8 + 0x0)
    8154	6b 07 23 00 00 00 00 00	*(u16 *)(r7 + 0x23) = r0
    8155	57 06 00 00 ff ff 00 00	r6 &= 0xffff
    8156	67 06 00 00 01 00 00 00	r6 <<= 0x1
    8157	18 00 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r0 = 0x12f63 ll
    8159	0f 60 00 00 00 00 00 00	r0 += r6
    8160	69 00 00 00 00 00 00 00	r0 = *(u16 *)(r0 + 0x0)
    8161	6b 07 25 00 00 00 00 00	*(u16 *)(r7 + 0x25) = r0
    8162	07 02 00 00 fc ff ff ff	r2 += -0x4
    8163	25 05 e2 ff ff e0 f5 05	if r5 > 0x5f5e0ff goto -0x1e <LBB497_2>
    8164	07 02 00 00 27 00 00 00	r2 += 0x27

000000000000ff28 <LBB497_4>
    8165	25 04 0a 00 63 00 00 00	if r4 > 0x63 goto +0xa <LBB497_6>

000000000000ff30 <LBB497_5>
    8166	b7 05 00 00 0a 00 00 00	r5 = 0xa
    8167	6d 45 01 00 00 00 00 00	if r5 s> r4 goto +0x1 <LBB497_8>
    8168	05 00 1a 00 00 00 00 00	goto +0x1a <LBB497_7>

000000000000ff48 <LBB497_8>
    8169	07 02 00 00 ff ff ff ff	r2 += -0x1
    8170	bf a5 00 00 00 00 00 00	r5 = r10
    8171	07 05 00 00 d9 ff ff ff	r5 += -0x27
    8172	0f 25 00 00 00 00 00 00	r5 += r2
    8173	07 04 00 00 30 00 00 00	r4 += 0x30
    8174	73 45 00 00 00 00 00 00	*(u8 *)(r5 + 0x0) = r4
    8175	05 00 1d 00 00 00 00 00	goto +0x1d <LBB497_9>

000000000000ff80 <LBB497_6>
    8176	bf 45 00 00 00 00 00 00	r5 = r4
    8177	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8178	37 05 00 00 64 00 00 00	r5 /= 0x64
    8179	bf 50 00 00 00 00 00 00	r0 = r5
    8180	27 00 00 00 64 00 00 00	r0 *= 0x64
    8181	1f 04 00 00 00 00 00 00	r4 -= r0
    8182	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8183	67 04 00 00 01 00 00 00	r4 <<= 0x1
    8184	18 00 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r0 = 0x12f63 ll
    8186	0f 40 00 00 00 00 00 00	r0 += r4
    8187	07 02 00 00 fe ff ff ff	r2 += -0x2
    8188	bf a4 00 00 00 00 00 00	r4 = r10
    8189	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8190	0f 24 00 00 00 00 00 00	r4 += r2
    8191	69 00 00 00 00 00 00 00	r0 = *(u16 *)(r0 + 0x0)
    8192	6b 04 00 00 00 00 00 00	*(u16 *)(r4 + 0x0) = r0
    8193	bf 54 00 00 00 00 00 00	r4 = r5
    8194	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB497_5>

0000000000010018 <LBB497_7>
    8195	67 04 00 00 01 00 00 00	r4 <<= 0x1
    8196	18 05 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f63 ll
    8198	0f 45 00 00 00 00 00 00	r5 += r4
    8199	07 02 00 00 fe ff ff ff	r2 += -0x2
    8200	bf a4 00 00 00 00 00 00	r4 = r10
    8201	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8202	0f 24 00 00 00 00 00 00	r4 += r2
    8203	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8204	6b 54 00 00 00 00 00 00	*(u16 *)(r4 + 0x0) = r5

0000000000010068 <LBB497_9>
    8205	b7 04 00 00 27 00 00 00	r4 = 0x27
    8206	1f 24 00 00 00 00 00 00	r4 -= r2
    8207	bf a5 00 00 00 00 00 00	r5 = r10
    8208	07 05 00 00 d9 ff ff ff	r5 += -0x27
    8209	0f 25 00 00 00 00 00 00	r5 += r2
    8210	7b 5a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r5
    8211	7b 4a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r4
    8212	b7 02 00 00 01 00 00 00	r2 = 0x1
    8213	65 01 01 00 ff ff ff ff	if r1 s> -0x1 goto +0x1 <LBB497_11>
    8214	b7 02 00 00 00 00 00 00	r2 = 0x0

00000000000100b8 <LBB497_11>
    8215	bf a5 00 00 00 00 00 00	r5 = r10
    8216	bf 31 00 00 00 00 00 00	r1 = r3
    8217	18 03 00 00 e8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12ee8 ll
    8219	b7 04 00 00 00 00 00 00	r4 = 0x0
    8220	85 10 00 00 14 f9 ff ff	call -0x6ec ; <core::fmt::Formatter::pad_integral>
    8221	95 00 00 00 00 00 00 00	exit

00000000000100f0 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>
    8222	b7 03 00 00 27 00 00 00	r3 = 0x27
    8223	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    8224	b7 04 00 00 10 27 00 00	r4 = 0x2710
    8225	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB498_4>
    8226	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000010118 <LBB498_2>
    8227	bf 14 00 00 00 00 00 00	r4 = r1
    8228	37 01 00 00 10 27 00 00	r1 /= 0x2710
    8229	bf 15 00 00 00 00 00 00	r5 = r1
    8230	27 05 00 00 10 27 00 00	r5 *= 0x2710
    8231	bf 40 00 00 00 00 00 00	r0 = r4
    8232	1f 50 00 00 00 00 00 00	r0 -= r5
    8233	bf 05 00 00 00 00 00 00	r5 = r0
    8234	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8235	37 05 00 00 64 00 00 00	r5 /= 0x64
    8236	bf 56 00 00 00 00 00 00	r6 = r5
    8237	27 06 00 00 64 00 00 00	r6 *= 0x64
    8238	1f 60 00 00 00 00 00 00	r0 -= r6
    8239	bf a6 00 00 00 00 00 00	r6 = r10
    8240	07 06 00 00 d9 ff ff ff	r6 += -0x27
    8241	0f 36 00 00 00 00 00 00	r6 += r3
    8242	67 05 00 00 01 00 00 00	r5 <<= 0x1
    8243	18 07 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r7 = 0x12f63 ll
    8245	0f 57 00 00 00 00 00 00	r7 += r5
    8246	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    8247	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    8248	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8249	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8250	18 05 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f63 ll
    8252	0f 05 00 00 00 00 00 00	r5 += r0
    8253	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8254	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    8255	07 03 00 00 fc ff ff ff	r3 += -0x4
    8256	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB498_2>
    8257	07 03 00 00 27 00 00 00	r3 += 0x27

0000000000010210 <LBB498_4>
    8258	25 01 0a 00 63 00 00 00	if r1 > 0x63 goto +0xa <LBB498_6>

0000000000010218 <LBB498_5>
    8259	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8260	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB498_8>
    8261	05 00 1a 00 00 00 00 00	goto +0x1a <LBB498_7>

0000000000010230 <LBB498_8>
    8262	07 03 00 00 ff ff ff ff	r3 += -0x1
    8263	bf a4 00 00 00 00 00 00	r4 = r10
    8264	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8265	0f 34 00 00 00 00 00 00	r4 += r3
    8266	07 01 00 00 30 00 00 00	r1 += 0x30
    8267	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    8268	05 00 1d 00 00 00 00 00	goto +0x1d <LBB498_9>

0000000000010268 <LBB498_6>
    8269	bf 14 00 00 00 00 00 00	r4 = r1
    8270	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8271	37 04 00 00 64 00 00 00	r4 /= 0x64
    8272	bf 45 00 00 00 00 00 00	r5 = r4
    8273	27 05 00 00 64 00 00 00	r5 *= 0x64
    8274	1f 51 00 00 00 00 00 00	r1 -= r5
    8275	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8276	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8277	18 05 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f63 ll
    8279	0f 15 00 00 00 00 00 00	r5 += r1
    8280	07 03 00 00 fe ff ff ff	r3 += -0x2
    8281	bf a1 00 00 00 00 00 00	r1 = r10
    8282	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8283	0f 31 00 00 00 00 00 00	r1 += r3
    8284	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8285	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8286	bf 41 00 00 00 00 00 00	r1 = r4
    8287	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB498_5>

0000000000010300 <LBB498_7>
    8288	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8289	18 04 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r4 = 0x12f63 ll
    8291	0f 14 00 00 00 00 00 00	r4 += r1
    8292	07 03 00 00 fe ff ff ff	r3 += -0x2
    8293	bf a1 00 00 00 00 00 00	r1 = r10
    8294	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8295	0f 31 00 00 00 00 00 00	r1 += r3
    8296	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8297	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

0000000000010350 <LBB498_9>
    8298	bf a1 00 00 00 00 00 00	r1 = r10
    8299	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8300	0f 31 00 00 00 00 00 00	r1 += r3
    8301	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8302	b7 01 00 00 27 00 00 00	r1 = 0x27
    8303	1f 31 00 00 00 00 00 00	r1 -= r3
    8304	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8305	bf a5 00 00 00 00 00 00	r5 = r10
    8306	bf 21 00 00 00 00 00 00	r1 = r2
    8307	b7 02 00 00 01 00 00 00	r2 = 0x1
    8308	18 03 00 00 e8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12ee8 ll
    8310	b7 04 00 00 00 00 00 00	r4 = 0x0
    8311	85 10 00 00 b9 f8 ff ff	call -0x747 ; <core::fmt::Formatter::pad_integral>
    8312	95 00 00 00 00 00 00 00	exit

00000000000103c8 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt>
    8313	b7 03 00 00 27 00 00 00	r3 = 0x27
    8314	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8315	b7 04 00 00 10 27 00 00	r4 = 0x2710
    8316	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB500_4>
    8317	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000103f0 <LBB500_2>
    8318	bf 14 00 00 00 00 00 00	r4 = r1
    8319	37 01 00 00 10 27 00 00	r1 /= 0x2710
    8320	bf 15 00 00 00 00 00 00	r5 = r1
    8321	27 05 00 00 10 27 00 00	r5 *= 0x2710
    8322	bf 40 00 00 00 00 00 00	r0 = r4
    8323	1f 50 00 00 00 00 00 00	r0 -= r5
    8324	bf 05 00 00 00 00 00 00	r5 = r0
    8325	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8326	37 05 00 00 64 00 00 00	r5 /= 0x64
    8327	bf 56 00 00 00 00 00 00	r6 = r5
    8328	27 06 00 00 64 00 00 00	r6 *= 0x64
    8329	1f 60 00 00 00 00 00 00	r0 -= r6
    8330	bf a6 00 00 00 00 00 00	r6 = r10
    8331	07 06 00 00 d9 ff ff ff	r6 += -0x27
    8332	0f 36 00 00 00 00 00 00	r6 += r3
    8333	67 05 00 00 01 00 00 00	r5 <<= 0x1
    8334	18 07 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r7 = 0x12f63 ll
    8336	0f 57 00 00 00 00 00 00	r7 += r5
    8337	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    8338	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    8339	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8340	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8341	18 05 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f63 ll
    8343	0f 05 00 00 00 00 00 00	r5 += r0
    8344	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8345	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    8346	07 03 00 00 fc ff ff ff	r3 += -0x4
    8347	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB500_2>
    8348	07 03 00 00 27 00 00 00	r3 += 0x27

00000000000104e8 <LBB500_4>
    8349	65 01 0a 00 63 00 00 00	if r1 s> 0x63 goto +0xa <LBB500_6>

00000000000104f0 <LBB500_5>
    8350	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8351	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB500_8>
    8352	05 00 1a 00 00 00 00 00	goto +0x1a <LBB500_7>

0000000000010508 <LBB500_8>
    8353	07 03 00 00 ff ff ff ff	r3 += -0x1
    8354	bf a4 00 00 00 00 00 00	r4 = r10
    8355	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8356	0f 34 00 00 00 00 00 00	r4 += r3
    8357	07 01 00 00 30 00 00 00	r1 += 0x30
    8358	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    8359	05 00 1d 00 00 00 00 00	goto +0x1d <LBB500_9>

0000000000010540 <LBB500_6>
    8360	bf 14 00 00 00 00 00 00	r4 = r1
    8361	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8362	37 04 00 00 64 00 00 00	r4 /= 0x64
    8363	bf 45 00 00 00 00 00 00	r5 = r4
    8364	27 05 00 00 64 00 00 00	r5 *= 0x64
    8365	1f 51 00 00 00 00 00 00	r1 -= r5
    8366	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8367	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8368	18 05 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f63 ll
    8370	0f 15 00 00 00 00 00 00	r5 += r1
    8371	07 03 00 00 fe ff ff ff	r3 += -0x2
    8372	bf a1 00 00 00 00 00 00	r1 = r10
    8373	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8374	0f 31 00 00 00 00 00 00	r1 += r3
    8375	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8376	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8377	bf 41 00 00 00 00 00 00	r1 = r4
    8378	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB500_5>

00000000000105d8 <LBB500_7>
    8379	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8380	18 04 00 00 63 2f 01 00 00 00 00 00 00 00 00 00	r4 = 0x12f63 ll
    8382	0f 14 00 00 00 00 00 00	r4 += r1
    8383	07 03 00 00 fe ff ff ff	r3 += -0x2
    8384	bf a1 00 00 00 00 00 00	r1 = r10
    8385	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8386	0f 31 00 00 00 00 00 00	r1 += r3
    8387	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8388	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

0000000000010628 <LBB500_9>
    8389	bf a1 00 00 00 00 00 00	r1 = r10
    8390	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8391	0f 31 00 00 00 00 00 00	r1 += r3
    8392	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8393	b7 01 00 00 27 00 00 00	r1 = 0x27
    8394	1f 31 00 00 00 00 00 00	r1 -= r3
    8395	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8396	bf a5 00 00 00 00 00 00	r5 = r10
    8397	bf 21 00 00 00 00 00 00	r1 = r2
    8398	b7 02 00 00 01 00 00 00	r2 = 0x1
    8399	18 03 00 00 e8 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12ee8 ll
    8401	b7 04 00 00 00 00 00 00	r4 = 0x0
    8402	85 10 00 00 5e f8 ff ff	call -0x7a2 ; <core::fmt::Formatter::pad_integral>
    8403	95 00 00 00 00 00 00 00	exit

00000000000106a0 <<core::fmt::Error as core::fmt::Debug>::fmt>
    8404	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    8405	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    8406	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    8407	18 02 00 00 d6 36 01 00 00 00 00 00 00 00 00 00	r2 = 0x136d6 ll
    8409	b7 03 00 00 05 00 00 00	r3 = 0x5
    8410	8d 00 00 00 04 00 00 00	callx r4
    8411	95 00 00 00 00 00 00 00	exit

00000000000106e0 <<&T as core::fmt::Debug>::fmt>
    8412	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    8413	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    8414	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    8415	bf 31 00 00 00 00 00 00	r1 = r3
    8416	8d 00 00 00 04 00 00 00	callx r4
    8417	95 00 00 00 00 00 00 00	exit

0000000000010710 <<&T as core::fmt::Display>::fmt>
    8418	bf 24 00 00 00 00 00 00	r4 = r2
    8419	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8420	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    8421	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8422	bf 41 00 00 00 00 00 00	r1 = r4
    8423	85 10 00 00 46 f9 ff ff	call -0x6ba ; <core::fmt::Formatter::pad>
    8424	95 00 00 00 00 00 00 00	exit

0000000000010748 <<&T as core::fmt::Display>::fmt>
    8425	79 26 28 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x28)
    8426	79 27 20 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x20)
    8427	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8428	bf a8 00 00 00 00 00 00	r8 = r10
    8429	07 08 00 00 d0 ff ff ff	r8 += -0x30
    8430	bf 81 00 00 00 00 00 00	r1 = r8
    8431	b7 03 00 00 30 00 00 00	r3 = 0x30
    8432	85 10 00 00 de 01 00 00	call 0x1de ; <memcpy>
    8433	bf 71 00 00 00 00 00 00	r1 = r7
    8434	bf 62 00 00 00 00 00 00	r2 = r6
    8435	bf 83 00 00 00 00 00 00	r3 = r8
    8436	85 10 00 00 ad f7 ff ff	call -0x853 ; <core::fmt::write>
    8437	95 00 00 00 00 00 00 00	exit

00000000000107b0 <<&T as core::fmt::Display>::fmt>
    8438	bf 24 00 00 00 00 00 00	r4 = r2
    8439	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    8440	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8441	bf 41 00 00 00 00 00 00	r1 = r4
    8442	85 10 00 00 33 f9 ff ff	call -0x6cd ; <core::fmt::Formatter::pad>
    8443	95 00 00 00 00 00 00 00	exit

00000000000107e0 <core::unicode::unicode_data::grapheme_extend::lookup>
    8444	b7 02 00 00 00 00 00 00	r2 = 0x0
    8445	b7 03 00 00 20 00 00 00	r3 = 0x20
    8446	bf 14 00 00 00 00 00 00	r4 = r1
    8447	67 04 00 00 0b 00 00 00	r4 <<= 0xb
    8448	b7 05 00 00 20 00 00 00	r5 = 0x20
    8449	05 00 06 00 00 00 00 00	goto +0x6 <LBB646_1>

0000000000010810 <LBB646_3>
    8450	07 03 00 00 01 00 00 00	r3 += 0x1
    8451	bf 32 00 00 00 00 00 00	r2 = r3
    8452	bf 53 00 00 00 00 00 00	r3 = r5

0000000000010828 <LBB646_4>
    8453	1f 23 00 00 00 00 00 00	r3 -= r2
    8454	2d 25 01 00 00 00 00 00	if r5 > r2 goto +0x1 <LBB646_1>
    8455	05 00 14 00 00 00 00 00	goto +0x14 <LBB646_6>

0000000000010840 <LBB646_1>
    8456	77 03 00 00 01 00 00 00	r3 >>= 0x1
    8457	0f 23 00 00 00 00 00 00	r3 += r2
    8458	bf 30 00 00 00 00 00 00	r0 = r3
    8459	67 00 00 00 02 00 00 00	r0 <<= 0x2
    8460	18 06 00 00 dc 36 01 00 00 00 00 00 00 00 00 00	r6 = 0x136dc ll
    8462	0f 06 00 00 00 00 00 00	r6 += r0
    8463	61 60 00 00 00 00 00 00	r0 = *(u32 *)(r6 + 0x0)
    8464	67 00 00 00 0b 00 00 00	r0 <<= 0xb
    8465	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8466	bf 46 00 00 00 00 00 00	r6 = r4
    8467	67 06 00 00 20 00 00 00	r6 <<= 0x20
    8468	77 00 00 00 20 00 00 00	r0 >>= 0x20
    8469	77 06 00 00 20 00 00 00	r6 >>= 0x20
    8470	2d 06 eb ff 00 00 00 00	if r6 > r0 goto -0x15 <LBB646_3>
    8471	bf 35 00 00 00 00 00 00	r5 = r3
    8472	1d 60 01 00 00 00 00 00	if r0 == r6 goto +0x1 <LBB646_5>
    8473	05 00 eb ff 00 00 00 00	goto -0x15 <LBB646_4>

00000000000108d0 <LBB646_5>
    8474	07 03 00 00 01 00 00 00	r3 += 0x1
    8475	bf 32 00 00 00 00 00 00	r2 = r3

00000000000108e0 <LBB646_6>
    8476	25 02 45 00 1f 00 00 00	if r2 > 0x1f goto +0x45 <LBB646_8>
    8477	bf 25 00 00 00 00 00 00	r5 = r2
    8478	67 05 00 00 02 00 00 00	r5 <<= 0x2
    8479	18 00 00 00 dc 36 01 00 00 00 00 00 00 00 00 00	r0 = 0x136dc ll
    8481	b7 04 00 00 c3 02 00 00	r4 = 0x2c3
    8482	15 02 04 00 1f 00 00 00	if r2 == 0x1f goto +0x4 <LBB646_10>
    8483	bf 53 00 00 00 00 00 00	r3 = r5
    8484	0f 03 00 00 00 00 00 00	r3 += r0
    8485	61 34 04 00 00 00 00 00	r4 = *(u32 *)(r3 + 0x4)
    8486	77 04 00 00 15 00 00 00	r4 >>= 0x15

0000000000010938 <LBB646_10>
    8487	bf 23 00 00 00 00 00 00	r3 = r2
    8488	07 03 00 00 ff ff ff ff	r3 += -0x1
    8489	b7 06 00 00 00 00 00 00	r6 = 0x0
    8490	b7 07 00 00 01 00 00 00	r7 = 0x1
    8491	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB646_12>
    8492	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000010968 <LBB646_12>
    8493	57 07 00 00 01 00 00 00	r7 &= 0x1
    8494	55 07 0e 00 00 00 00 00	if r7 != 0x0 goto +0xe <LBB646_16>
    8495	b7 02 00 00 20 00 00 00	r2 = 0x20
    8496	2d 32 06 00 00 00 00 00	if r2 > r3 goto +0x6 <LBB646_15>
    8497	bf 31 00 00 00 00 00 00	r1 = r3
    8498	b7 02 00 00 20 00 00 00	r2 = 0x20
    8499	18 03 00 00 f0 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x140f0 ll
    8501	85 10 00 00 19 f7 ff ff	call -0x8e7 ; <core::panicking::panic_bounds_check>
    8502	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000109b8 <LBB646_15>
    8503	67 03 00 00 02 00 00 00	r3 <<= 0x2
    8504	18 02 00 00 dc 36 01 00 00 00 00 00 00 00 00 00	r2 = 0x136dc ll
    8506	0f 32 00 00 00 00 00 00	r2 += r3
    8507	61 26 00 00 00 00 00 00	r6 = *(u32 *)(r2 + 0x0)
    8508	57 06 00 00 ff ff 1f 00	r6 &= 0x1fffff

00000000000109e8 <LBB646_16>
    8509	0f 50 00 00 00 00 00 00	r0 += r5
    8510	61 00 00 00 00 00 00 00	r0 = *(u32 *)(r0 + 0x0)
    8511	77 00 00 00 15 00 00 00	r0 >>= 0x15
    8512	bf 02 00 00 00 00 00 00	r2 = r0
    8513	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    8514	0f 24 00 00 00 00 00 00	r4 += r2
    8515	15 04 16 00 00 00 00 00	if r4 == 0x0 goto +0x16 <LBB646_23>
    8516	1f 61 00 00 00 00 00 00	r1 -= r6
    8517	18 03 00 00 5c 37 01 00 00 00 00 00 00 00 00 00	r3 = 0x1375c ll
    8519	0f 03 00 00 00 00 00 00	r3 += r0
    8520	b7 05 00 00 00 00 00 00	r5 = 0x0
    8521	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8522	77 01 00 00 20 00 00 00	r1 >>= 0x20
    8523	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000010a60 <LBB646_18>
    8524	bf 02 00 00 00 00 00 00	r2 = r0
    8525	0f 62 00 00 00 00 00 00	r2 += r6
    8526	25 02 0d 00 c2 02 00 00	if r2 > 0x2c2 goto +0xd <LBB646_20>
    8527	bf 32 00 00 00 00 00 00	r2 = r3
    8528	0f 62 00 00 00 00 00 00	r2 += r6
    8529	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    8530	0f 25 00 00 00 00 00 00	r5 += r2
    8531	bf 52 00 00 00 00 00 00	r2 = r5
    8532	67 02 00 00 20 00 00 00	r2 <<= 0x20
    8533	77 02 00 00 20 00 00 00	r2 >>= 0x20
    8534	2d 12 02 00 00 00 00 00	if r2 > r1 goto +0x2 <LBB646_22>
    8535	07 06 00 00 01 00 00 00	r6 += 0x1
    8536	2d 64 f3 ff 00 00 00 00	if r4 > r6 goto -0xd <LBB646_18>

0000000000010ac8 <LBB646_22>
    8537	0f 60 00 00 00 00 00 00	r0 += r6

0000000000010ad0 <LBB646_23>
    8538	57 00 00 00 01 00 00 00	r0 &= 0x1
    8539	95 00 00 00 00 00 00 00	exit

0000000000010ae0 <LBB646_20>
    8540	bf 21 00 00 00 00 00 00	r1 = r2
    8541	b7 02 00 00 c3 02 00 00	r2 = 0x2c3
    8542	18 03 00 00 d8 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x140d8 ll
    8544	85 10 00 00 ee f6 ff ff	call -0x912 ; <core::panicking::panic_bounds_check>
    8545	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010b10 <LBB646_8>
    8546	bf 21 00 00 00 00 00 00	r1 = r2
    8547	b7 02 00 00 20 00 00 00	r2 = 0x20
    8548	18 03 00 00 c0 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x140c0 ll
    8550	85 10 00 00 e8 f6 ff ff	call -0x918 ; <core::panicking::panic_bounds_check>
    8551	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010b40 <__adddf3>
    8552	85 10 00 00 d8 01 00 00	call 0x1d8 ; <compiler_builtins::float::add::__adddf3>
    8553	95 00 00 00 00 00 00 00	exit

0000000000010b50 <__fixunsdfdi>
    8554	b7 00 00 00 00 00 00 00	r0 = 0x0
    8555	bf 12 00 00 00 00 00 00	r2 = r1
    8556	77 02 00 00 34 00 00 00	r2 >>= 0x34
    8557	57 02 00 00 ff 07 00 00	r2 &= 0x7ff
    8558	b7 03 00 00 ff 03 00 00	r3 = 0x3ff
    8559	2d 23 14 00 00 00 00 00	if r3 > r2 goto +0x14 <LBB0_7>
    8560	b7 03 00 00 00 00 00 00	r3 = 0x0
    8561	6d 13 12 00 00 00 00 00	if r3 s> r1 goto +0x12 <LBB0_7>
    8562	b7 00 00 00 ff ff ff ff	r0 = -0x1
    8563	25 02 10 00 3e 04 00 00	if r2 > 0x43e goto +0x10 <LBB0_7>
    8564	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r3 = 0xfffffffffffff ll
    8566	5f 31 00 00 00 00 00 00	r1 &= r3
    8567	18 03 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r3 = 0x10000000000000 ll
    8569	4f 31 00 00 00 00 00 00	r1 |= r3
    8570	b7 03 00 00 33 04 00 00	r3 = 0x433
    8571	2d 23 04 00 00 00 00 00	if r3 > r2 goto +0x4 <LBB0_5>
    8572	07 02 00 00 cd fb ff ff	r2 += -0x433
    8573	57 02 00 00 ff ff 00 00	r2 &= 0xffff
    8574	6f 21 00 00 00 00 00 00	r1 <<= r2
    8575	05 00 03 00 00 00 00 00	goto +0x3 <LBB0_6>

0000000000010c00 <LBB0_5>
    8576	1f 23 00 00 00 00 00 00	r3 -= r2
    8577	57 03 00 00 ff ff 00 00	r3 &= 0xffff
    8578	7f 31 00 00 00 00 00 00	r1 >>= r3

0000000000010c18 <LBB0_6>
    8579	bf 10 00 00 00 00 00 00	r0 = r1

0000000000010c20 <LBB0_7>
    8580	95 00 00 00 00 00 00 00	exit

0000000000010c28 <__gtdf2>
    8581	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8583	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r5 = 0x7fffffffffffffff ll
    8585	bf 13 00 00 00 00 00 00	r3 = r1
    8586	5f 53 00 00 00 00 00 00	r3 &= r5
    8587	18 06 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r6 = 0x7ff0000000000000 ll
    8589	2d 63 18 00 00 00 00 00	if r3 > r6 goto +0x18 <LBB0_9>
    8590	bf 24 00 00 00 00 00 00	r4 = r2
    8591	5f 54 00 00 00 00 00 00	r4 &= r5
    8592	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8594	2d 64 13 00 00 00 00 00	if r4 > r6 goto +0x13 <LBB0_9>
    8595	4f 34 00 00 00 00 00 00	r4 |= r3
    8596	b7 00 00 00 00 00 00 00	r0 = 0x0
    8597	15 04 10 00 00 00 00 00	if r4 == 0x0 goto +0x10 <LBB0_9>
    8598	bf 23 00 00 00 00 00 00	r3 = r2
    8599	5f 13 00 00 00 00 00 00	r3 &= r1
    8600	65 03 06 00 ff ff ff ff	if r3 s> -0x1 goto +0x6 <LBB0_5>
    8601	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8603	6d 21 0a 00 00 00 00 00	if r1 s> r2 goto +0xa <LBB0_9>
    8604	b7 00 00 00 01 00 00 00	r0 = 0x1
    8605	1d 21 07 00 00 00 00 00	if r1 == r2 goto +0x7 <LBB0_8>
    8606	05 00 07 00 00 00 00 00	goto +0x7 <LBB0_9>

0000000000010cf8 <LBB0_5>
    8607	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8609	6d 12 04 00 00 00 00 00	if r2 s> r1 goto +0x4 <LBB0_9>
    8610	b7 00 00 00 01 00 00 00	r0 = 0x1
    8611	1d 21 01 00 00 00 00 00	if r1 == r2 goto +0x1 <LBB0_8>
    8612	05 00 01 00 00 00 00 00	goto +0x1 <LBB0_9>

0000000000010d28 <LBB0_8>
    8613	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000010d30 <LBB0_9>
    8614	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8615	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    8616	95 00 00 00 00 00 00 00	exit

0000000000010d48 <__gedf2>
    8617	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8619	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r5 = 0x7fffffffffffffff ll
    8621	bf 13 00 00 00 00 00 00	r3 = r1
    8622	5f 53 00 00 00 00 00 00	r3 &= r5
    8623	18 06 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r6 = 0x7ff0000000000000 ll
    8625	2d 63 18 00 00 00 00 00	if r3 > r6 goto +0x18 <LBB0_9>
    8626	bf 24 00 00 00 00 00 00	r4 = r2
    8627	5f 54 00 00 00 00 00 00	r4 &= r5
    8628	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8630	2d 64 13 00 00 00 00 00	if r4 > r6 goto +0x13 <LBB0_9>
    8631	4f 34 00 00 00 00 00 00	r4 |= r3
    8632	b7 00 00 00 00 00 00 00	r0 = 0x0
    8633	15 04 10 00 00 00 00 00	if r4 == 0x0 goto +0x10 <LBB0_9>
    8634	bf 23 00 00 00 00 00 00	r3 = r2
    8635	5f 13 00 00 00 00 00 00	r3 &= r1
    8636	65 03 06 00 ff ff ff ff	if r3 s> -0x1 goto +0x6 <LBB0_5>
    8637	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8639	6d 21 0a 00 00 00 00 00	if r1 s> r2 goto +0xa <LBB0_9>
    8640	b7 00 00 00 01 00 00 00	r0 = 0x1
    8641	1d 21 07 00 00 00 00 00	if r1 == r2 goto +0x7 <LBB0_8>
    8642	05 00 07 00 00 00 00 00	goto +0x7 <LBB0_9>

0000000000010e18 <LBB0_5>
    8643	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8645	6d 12 04 00 00 00 00 00	if r2 s> r1 goto +0x4 <LBB0_9>
    8646	b7 00 00 00 01 00 00 00	r0 = 0x1
    8647	1d 21 01 00 00 00 00 00	if r1 == r2 goto +0x1 <LBB0_8>
    8648	05 00 01 00 00 00 00 00	goto +0x1 <LBB0_9>

0000000000010e48 <LBB0_8>
    8649	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000010e50 <LBB0_9>
    8650	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8651	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    8652	95 00 00 00 00 00 00 00	exit

0000000000010e68 <__muldf3>
    8653	85 10 00 00 01 00 00 00	call 0x1 ; <compiler_builtins::float::mul::__muldf3>
    8654	95 00 00 00 00 00 00 00	exit

0000000000010e78 <compiler_builtins::float::mul::__muldf3>
    8655	bf 26 00 00 00 00 00 00	r6 = r2
    8656	bf 63 00 00 00 00 00 00	r3 = r6
    8657	af 13 00 00 00 00 00 00	r3 ^= r1
    8658	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8660	5f 23 00 00 00 00 00 00	r3 &= r2
    8661	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    8662	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r5 = 0xfffffffffffff ll
    8664	bf 62 00 00 00 00 00 00	r2 = r6
    8665	5f 52 00 00 00 00 00 00	r2 &= r5
    8666	bf 14 00 00 00 00 00 00	r4 = r1
    8667	5f 54 00 00 00 00 00 00	r4 &= r5
    8668	bf 67 00 00 00 00 00 00	r7 = r6
    8669	77 07 00 00 34 00 00 00	r7 >>= 0x34
    8670	57 07 00 00 ff 07 00 00	r7 &= 0x7ff
    8671	bf 18 00 00 00 00 00 00	r8 = r1
    8672	77 08 00 00 34 00 00 00	r8 >>= 0x34
    8673	57 08 00 00 ff 07 00 00	r8 &= 0x7ff
    8674	bf 85 00 00 00 00 00 00	r5 = r8
    8675	07 05 00 00 ff ff ff ff	r5 += -0x1
    8676	25 05 25 00 fd 07 00 00	if r5 > 0x7fd goto +0x25 <LBB1_3>
    8677	b7 09 00 00 00 00 00 00	r9 = 0x0
    8678	bf 75 00 00 00 00 00 00	r5 = r7
    8679	07 05 00 00 ff ff ff ff	r5 += -0x1
    8680	25 05 21 00 fd 07 00 00	if r5 > 0x7fd goto +0x21 <LBB1_3>

0000000000010f48 <LBB1_2>
    8681	67 02 00 00 0b 00 00 00	r2 <<= 0xb
    8682	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r1 = -0x8000000000000000 ll
    8684	4f 12 00 00 00 00 00 00	r2 |= r1
    8685	18 06 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r6 = 0x10000000000000 ll
    8687	4f 64 00 00 00 00 00 00	r4 |= r6
    8688	bf a1 00 00 00 00 00 00	r1 = r10
    8689	07 01 00 00 f0 ff ff ff	r1 += -0x10
    8690	b7 03 00 00 00 00 00 00	r3 = 0x0
    8691	b7 05 00 00 00 00 00 00	r5 = 0x0
    8692	85 10 00 00 99 02 00 00	call 0x299 ; <__multi3>
    8693	0f 87 00 00 00 00 00 00	r7 += r8
    8694	0f 97 00 00 00 00 00 00	r7 += r9
    8695	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    8696	bf 23 00 00 00 00 00 00	r3 = r2
    8697	5f 63 00 00 00 00 00 00	r3 &= r6
    8698	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    8699	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB1_23>
    8700	05 00 1d 00 00 00 00 00	goto +0x1d <LBB1_24>

0000000000010fe8 <LBB1_23>
    8701	67 02 00 00 01 00 00 00	r2 <<= 0x1
    8702	bf 13 00 00 00 00 00 00	r3 = r1
    8703	77 03 00 00 3f 00 00 00	r3 >>= 0x3f
    8704	4f 32 00 00 00 00 00 00	r2 |= r3
    8705	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8706	07 07 00 00 01 fc ff ff	r7 += -0x3ff
    8707	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8708	65 07 01 00 fe 07 00 00	if r7 s> 0x7fe goto +0x1 <LBB1_26>
    8709	05 00 17 00 00 00 00 00	goto +0x17 <LBB1_25>

0000000000011030 <LBB1_26>
    8710	18 01 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r1 = 0x7ff0000000000000 ll
    8712	4f 10 00 00 00 00 00 00	r0 |= r1
    8713	05 00 48 00 00 00 00 00	goto +0x48 <LBB1_35>

0000000000011050 <LBB1_3>
    8714	18 09 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r9 = 0x7fffffffffffffff ll
    8716	bf 15 00 00 00 00 00 00	r5 = r1
    8717	5f 95 00 00 00 00 00 00	r5 &= r9
    8718	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r0 = 0x7ff0000000000000 ll
    8720	2d 05 14 00 00 00 00 00	if r5 > r0 goto +0x14 <LBB1_5>
    8721	bf 63 00 00 00 00 00 00	r3 = r6
    8722	5f 93 00 00 00 00 00 00	r3 &= r9
    8723	2d 03 01 00 00 00 00 00	if r3 > r0 goto +0x1 <LBB1_7>
    8724	05 00 15 00 00 00 00 00	goto +0x15 <LBB1_6>

00000000000110a8 <LBB1_7>
    8725	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    8727	4f 16 00 00 00 00 00 00	r6 |= r1
    8728	bf 60 00 00 00 00 00 00	r0 = r6
    8729	05 00 38 00 00 00 00 00	goto +0x38 <LBB1_35>

00000000000110d0 <LBB1_24>
    8730	07 07 00 00 02 fc ff ff	r7 += -0x3fe
    8731	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8732	65 07 e9 ff fe 07 00 00	if r7 s> 0x7fe goto -0x17 <LBB1_26>

00000000000110e8 <LBB1_25>
    8733	b7 03 00 00 01 00 00 00	r3 = 0x1
    8734	6d 73 18 00 00 00 00 00	if r3 s> r7 goto +0x18 <LBB1_28>
    8735	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r3 = 0xfffffffffffff ll
    8737	5f 32 00 00 00 00 00 00	r2 &= r3
    8738	67 07 00 00 34 00 00 00	r7 <<= 0x34
    8739	4f 27 00 00 00 00 00 00	r7 |= r2
    8740	05 00 20 00 00 00 00 00	goto +0x20 <LBB1_30>

0000000000011128 <LBB1_5>
    8741	18 02 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r2 = 0x8000000000000 ll
    8743	4f 21 00 00 00 00 00 00	r1 |= r2
    8744	bf 10 00 00 00 00 00 00	r0 = r1
    8745	05 00 28 00 00 00 00 00	goto +0x28 <LBB1_35>

0000000000011150 <LBB1_6>
    8746	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r0 = 0x7ff0000000000000 ll
    8748	1d 05 01 00 00 00 00 00	if r5 == r0 goto +0x1 <LBB1_9>
    8749	05 00 25 00 00 00 00 00	goto +0x25 <LBB1_8>

0000000000011170 <LBB1_9>
    8750	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r0 = 0x7ff8000000000000 ll
    8752	15 03 21 00 00 00 00 00	if r3 == 0x0 goto +0x21 <LBB1_35>
    8753	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8755	5f 26 00 00 00 00 00 00	r6 &= r2
    8756	af 16 00 00 00 00 00 00	r6 ^= r1
    8757	bf 60 00 00 00 00 00 00	r0 = r6
    8758	05 00 1b 00 00 00 00 00	goto +0x1b <LBB1_35>

00000000000111b8 <LBB1_28>
    8759	1f 73 00 00 00 00 00 00	r3 -= r7
    8760	67 03 00 00 20 00 00 00	r3 <<= 0x20
    8761	77 03 00 00 20 00 00 00	r3 >>= 0x20
    8762	25 03 17 00 3f 00 00 00	if r3 > 0x3f goto +0x17 <LBB1_35>
    8763	07 07 00 00 ff ff ff ff	r7 += -0x1
    8764	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    8765	bf 14 00 00 00 00 00 00	r4 = r1
    8766	4f 24 00 00 00 00 00 00	r4 |= r2
    8767	6f 74 00 00 00 00 00 00	r4 <<= r7
    8768	7f 31 00 00 00 00 00 00	r1 >>= r3
    8769	4f 14 00 00 00 00 00 00	r4 |= r1
    8770	7f 32 00 00 00 00 00 00	r2 >>= r3
    8771	bf 41 00 00 00 00 00 00	r1 = r4
    8772	bf 27 00 00 00 00 00 00	r7 = r2

0000000000011228 <LBB1_30>
    8773	bf 72 00 00 00 00 00 00	r2 = r7
    8774	4f 02 00 00 00 00 00 00	r2 |= r0
    8775	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x8000000000000000 ll
    8777	2d 31 06 00 00 00 00 00	if r1 > r3 goto +0x6 <LBB1_32>
    8778	bf 20 00 00 00 00 00 00	r0 = r2
    8779	1d 31 01 00 00 00 00 00	if r1 == r3 goto +0x1 <LBB1_33>
    8780	05 00 05 00 00 00 00 00	goto +0x5 <LBB1_35>

0000000000011268 <LBB1_33>
    8781	57 07 00 00 01 00 00 00	r7 &= 0x1
    8782	0f 72 00 00 00 00 00 00	r2 += r7
    8783	05 00 01 00 00 00 00 00	goto +0x1 <LBB1_34>

0000000000011280 <LBB1_32>
    8784	07 02 00 00 01 00 00 00	r2 += 0x1

0000000000011288 <LBB1_34>
    8785	bf 20 00 00 00 00 00 00	r0 = r2

0000000000011290 <LBB1_35>
    8786	95 00 00 00 00 00 00 00	exit

0000000000011298 <LBB1_8>
    8787	1d 03 01 00 00 00 00 00	if r3 == r0 goto +0x1 <LBB1_13>
    8788	05 00 09 00 00 00 00 00	goto +0x9 <LBB1_11>

00000000000112a8 <LBB1_13>
    8789	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r0 = 0x7ff8000000000000 ll
    8791	15 05 fa ff 00 00 00 00	if r5 == 0x0 goto -0x6 <LBB1_35>
    8792	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8794	5f 21 00 00 00 00 00 00	r1 &= r2
    8795	af 61 00 00 00 00 00 00	r1 ^= r6
    8796	bf 10 00 00 00 00 00 00	r0 = r1
    8797	05 00 f4 ff 00 00 00 00	goto -0xc <LBB1_35>

00000000000112f0 <LBB1_11>
    8798	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8799	15 05 f2 ff 00 00 00 00	if r5 == 0x0 goto -0xe <LBB1_35>
    8800	15 03 f1 ff 00 00 00 00	if r3 == 0x0 goto -0xf <LBB1_35>
    8801	bf 36 00 00 00 00 00 00	r6 = r3
    8802	b7 09 00 00 00 00 00 00	r9 = 0x0
    8803	18 01 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r1 = 0x10000000000000 ll
    8805	2d 51 02 00 00 00 00 00	if r1 > r5 goto +0x2 <LBB1_17>
    8806	2d 61 35 00 00 00 00 00	if r1 > r6 goto +0x35 <LBB1_20>
    8807	05 00 81 ff 00 00 00 00	goto -0x7f <LBB1_2>

0000000000011340 <LBB1_17>
    8808	b7 00 00 00 40 00 00 00	r0 = 0x40
    8809	15 04 2b 00 00 00 00 00	if r4 == 0x0 goto +0x2b <LBB1_19>
    8810	bf 45 00 00 00 00 00 00	r5 = r4
    8811	77 05 00 00 01 00 00 00	r5 >>= 0x1
    8812	bf 43 00 00 00 00 00 00	r3 = r4
    8813	4f 53 00 00 00 00 00 00	r3 |= r5
    8814	bf 35 00 00 00 00 00 00	r5 = r3
    8815	77 05 00 00 02 00 00 00	r5 >>= 0x2
    8816	4f 53 00 00 00 00 00 00	r3 |= r5
    8817	bf 35 00 00 00 00 00 00	r5 = r3
    8818	77 05 00 00 04 00 00 00	r5 >>= 0x4
    8819	4f 53 00 00 00 00 00 00	r3 |= r5
    8820	bf 35 00 00 00 00 00 00	r5 = r3
    8821	77 05 00 00 08 00 00 00	r5 >>= 0x8
    8822	4f 53 00 00 00 00 00 00	r3 |= r5
    8823	bf 35 00 00 00 00 00 00	r5 = r3
    8824	77 05 00 00 10 00 00 00	r5 >>= 0x10
    8825	4f 53 00 00 00 00 00 00	r3 |= r5
    8826	bf 35 00 00 00 00 00 00	r5 = r3
    8827	77 05 00 00 20 00 00 00	r5 >>= 0x20
    8828	4f 53 00 00 00 00 00 00	r3 |= r5
    8829	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    8830	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    8832	bf 30 00 00 00 00 00 00	r0 = r3
    8833	77 00 00 00 01 00 00 00	r0 >>= 0x1
    8834	5f 50 00 00 00 00 00 00	r0 &= r5
    8835	1f 03 00 00 00 00 00 00	r3 -= r0
    8836	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    8838	bf 30 00 00 00 00 00 00	r0 = r3
    8839	5f 50 00 00 00 00 00 00	r0 &= r5
    8840	77 03 00 00 02 00 00 00	r3 >>= 0x2
    8841	5f 53 00 00 00 00 00 00	r3 &= r5
    8842	0f 30 00 00 00 00 00 00	r0 += r3
    8843	bf 03 00 00 00 00 00 00	r3 = r0
    8844	77 03 00 00 04 00 00 00	r3 >>= 0x4
    8845	0f 30 00 00 00 00 00 00	r0 += r3
    8846	18 03 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r3 = 0xf0f0f0f0f0f0f0f ll
    8848	5f 30 00 00 00 00 00 00	r0 &= r3
    8849	18 03 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r3 = 0x101010101010101 ll
    8851	2f 30 00 00 00 00 00 00	r0 *= r3
    8852	77 00 00 00 38 00 00 00	r0 >>= 0x38

00000000000114a8 <LBB1_19>
    8853	b7 09 00 00 0c 00 00 00	r9 = 0xc
    8854	1f 09 00 00 00 00 00 00	r9 -= r0
    8855	07 00 00 00 35 00 00 00	r0 += 0x35
    8856	57 00 00 00 3f 00 00 00	r0 &= 0x3f
    8857	6f 04 00 00 00 00 00 00	r4 <<= r0
    8858	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB1_20>
    8859	05 00 4d ff 00 00 00 00	goto -0xb3 <LBB1_2>

00000000000114e0 <LBB1_20>
    8860	b7 03 00 00 40 00 00 00	r3 = 0x40
    8861	15 02 2b 00 00 00 00 00	if r2 == 0x0 goto +0x2b <LBB1_22>
    8862	bf 23 00 00 00 00 00 00	r3 = r2
    8863	77 03 00 00 01 00 00 00	r3 >>= 0x1
    8864	bf 21 00 00 00 00 00 00	r1 = r2
    8865	4f 31 00 00 00 00 00 00	r1 |= r3
    8866	bf 13 00 00 00 00 00 00	r3 = r1
    8867	77 03 00 00 02 00 00 00	r3 >>= 0x2
    8868	4f 31 00 00 00 00 00 00	r1 |= r3
    8869	bf 13 00 00 00 00 00 00	r3 = r1
    8870	77 03 00 00 04 00 00 00	r3 >>= 0x4
    8871	4f 31 00 00 00 00 00 00	r1 |= r3
    8872	bf 13 00 00 00 00 00 00	r3 = r1
    8873	77 03 00 00 08 00 00 00	r3 >>= 0x8
    8874	4f 31 00 00 00 00 00 00	r1 |= r3
    8875	bf 13 00 00 00 00 00 00	r3 = r1
    8876	77 03 00 00 10 00 00 00	r3 >>= 0x10
    8877	4f 31 00 00 00 00 00 00	r1 |= r3
    8878	bf 13 00 00 00 00 00 00	r3 = r1
    8879	77 03 00 00 20 00 00 00	r3 >>= 0x20
    8880	4f 31 00 00 00 00 00 00	r1 |= r3
    8881	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    8882	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    8884	bf 15 00 00 00 00 00 00	r5 = r1
    8885	77 05 00 00 01 00 00 00	r5 >>= 0x1
    8886	5f 35 00 00 00 00 00 00	r5 &= r3
    8887	1f 51 00 00 00 00 00 00	r1 -= r5
    8888	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    8890	bf 13 00 00 00 00 00 00	r3 = r1
    8891	5f 53 00 00 00 00 00 00	r3 &= r5
    8892	77 01 00 00 02 00 00 00	r1 >>= 0x2
    8893	5f 51 00 00 00 00 00 00	r1 &= r5
    8894	0f 13 00 00 00 00 00 00	r3 += r1
    8895	bf 31 00 00 00 00 00 00	r1 = r3
    8896	77 01 00 00 04 00 00 00	r1 >>= 0x4
    8897	0f 13 00 00 00 00 00 00	r3 += r1
    8898	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    8900	5f 13 00 00 00 00 00 00	r3 &= r1
    8901	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    8903	2f 13 00 00 00 00 00 00	r3 *= r1
    8904	77 03 00 00 38 00 00 00	r3 >>= 0x38

0000000000011648 <LBB1_22>
    8905	1f 39 00 00 00 00 00 00	r9 -= r3
    8906	07 03 00 00 35 00 00 00	r3 += 0x35
    8907	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    8908	6f 32 00 00 00 00 00 00	r2 <<= r3
    8909	07 09 00 00 0c 00 00 00	r9 += 0xc
    8910	05 00 1a ff 00 00 00 00	goto -0xe6 <LBB1_2>

0000000000011678 <memcpy>
    8911	bf 16 00 00 00 00 00 00	r6 = r1
    8912	bf 34 00 00 00 00 00 00	r4 = r3
    8913	77 04 00 00 03 00 00 00	r4 >>= 0x3
    8914	bf 41 00 00 00 00 00 00	r1 = r4
    8915	27 01 00 00 f9 ff ff ff	r1 *= -0x7
    8916	0f 31 00 00 00 00 00 00	r1 += r3
    8917	25 01 18 00 0f 00 00 00	if r1 > 0xf goto +0x18 <LBB0_2>
    8918	b7 01 00 00 00 00 00 00	r1 = 0x0
    8919	b7 05 00 00 08 00 00 00	r5 = 0x8
    8920	2d 35 0b 00 00 00 00 00	if r5 > r3 goto +0xb <LBB0_6>
    8921	b7 01 00 00 00 00 00 00	r1 = 0x0
    8922	b7 05 00 00 00 00 00 00	r5 = 0x0

00000000000116d8 <LBB0_5>
    8923	bf 60 00 00 00 00 00 00	r0 = r6
    8924	0f 10 00 00 00 00 00 00	r0 += r1
    8925	bf 27 00 00 00 00 00 00	r7 = r2
    8926	0f 17 00 00 00 00 00 00	r7 += r1
    8927	79 77 00 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x0)
    8928	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    8929	07 01 00 00 08 00 00 00	r1 += 0x8
    8930	07 05 00 00 01 00 00 00	r5 += 0x1
    8931	2d 54 f7 ff 00 00 00 00	if r4 > r5 goto -0x9 <LBB0_5>

0000000000011720 <LBB0_6>
    8932	7d 31 0b 00 00 00 00 00	if r1 s>= r3 goto +0xb <LBB0_3>

0000000000011728 <LBB0_7>
    8933	bf 64 00 00 00 00 00 00	r4 = r6
    8934	0f 14 00 00 00 00 00 00	r4 += r1
    8935	bf 25 00 00 00 00 00 00	r5 = r2
    8936	0f 15 00 00 00 00 00 00	r5 += r1
    8937	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
    8938	73 54 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r5
    8939	07 01 00 00 01 00 00 00	r1 += 0x1
    8940	6d 13 f8 ff 00 00 00 00	if r3 s> r1 goto -0x8 <LBB0_7>
    8941	05 00 02 00 00 00 00 00	goto +0x2 <LBB0_3>

0000000000011770 <LBB0_2>
    8942	bf 61 00 00 00 00 00 00	r1 = r6
    8943	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcpy_

0000000000011780 <LBB0_3>
    8944	bf 60 00 00 00 00 00 00	r0 = r6
    8945	95 00 00 00 00 00 00 00	exit

0000000000011790 <memset>
    8946	bf 16 00 00 00 00 00 00	r6 = r1
    8947	bf 34 00 00 00 00 00 00	r4 = r3
    8948	77 04 00 00 03 00 00 00	r4 >>= 0x3
    8949	bf 41 00 00 00 00 00 00	r1 = r4
    8950	27 01 00 00 f9 ff ff ff	r1 *= -0x7
    8951	0f 31 00 00 00 00 00 00	r1 += r3
    8952	25 01 17 00 0f 00 00 00	if r1 > 0xf goto +0x17 <LBB2_2>
    8953	b7 01 00 00 00 00 00 00	r1 = 0x0
    8954	b7 05 00 00 08 00 00 00	r5 = 0x8
    8955	2d 35 0d 00 00 00 00 00	if r5 > r3 goto +0xd <LBB2_6>
    8956	bf 25 00 00 00 00 00 00	r5 = r2
    8957	57 05 00 00 ff 00 00 00	r5 &= 0xff
    8958	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    8960	2f 15 00 00 00 00 00 00	r5 *= r1
    8961	b7 01 00 00 00 00 00 00	r1 = 0x0
    8962	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000011818 <LBB2_5>
    8963	bf 67 00 00 00 00 00 00	r7 = r6
    8964	0f 17 00 00 00 00 00 00	r7 += r1
    8965	7b 57 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r5
    8966	07 01 00 00 08 00 00 00	r1 += 0x8
    8967	07 00 00 00 01 00 00 00	r0 += 0x1
    8968	2d 04 fa ff 00 00 00 00	if r4 > r0 goto -0x6 <LBB2_5>

0000000000011848 <LBB2_6>
    8969	7d 31 09 00 00 00 00 00	if r1 s>= r3 goto +0x9 <LBB2_3>

0000000000011850 <LBB2_7>
    8970	bf 64 00 00 00 00 00 00	r4 = r6
    8971	0f 14 00 00 00 00 00 00	r4 += r1
    8972	73 24 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r2
    8973	07 01 00 00 01 00 00 00	r1 += 0x1
    8974	6d 13 fb ff 00 00 00 00	if r3 s> r1 goto -0x5 <LBB2_7>
    8975	05 00 03 00 00 00 00 00	goto +0x3 <LBB2_3>

0000000000011880 <LBB2_2>
    8976	57 02 00 00 ff 00 00 00	r2 &= 0xff
    8977	bf 61 00 00 00 00 00 00	r1 = r6
    8978	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memset_

0000000000011898 <LBB2_3>
    8979	bf 60 00 00 00 00 00 00	r0 = r6
    8980	95 00 00 00 00 00 00 00	exit

00000000000118a8 <memcmp>
    8981	bf 35 00 00 00 00 00 00	r5 = r3
    8982	77 05 00 00 03 00 00 00	r5 >>= 0x3
    8983	bf 54 00 00 00 00 00 00	r4 = r5
    8984	27 04 00 00 f9 ff ff ff	r4 *= -0x7
    8985	0f 34 00 00 00 00 00 00	r4 += r3
    8986	25 04 1d 00 0f 00 00 00	if r4 > 0xf goto +0x1d <LBB3_2>
    8987	b7 00 00 00 00 00 00 00	r0 = 0x0
    8988	b7 06 00 00 08 00 00 00	r6 = 0x8
    8989	b7 04 00 00 00 00 00 00	r4 = 0x0
    8990	2d 36 0b 00 00 00 00 00	if r6 > r3 goto +0xb <LBB3_7>
    8991	b7 04 00 00 00 00 00 00	r4 = 0x0
    8992	bf 16 00 00 00 00 00 00	r6 = r1
    8993	bf 27 00 00 00 00 00 00	r7 = r2

0000000000011910 <LBB3_4>
    8994	79 78 00 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x0)
    8995	79 69 00 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x0)
    8996	5d 89 04 00 00 00 00 00	if r9 != r8 goto +0x4 <LBB3_6>
    8997	07 06 00 00 08 00 00 00	r6 += 0x8
    8998	07 07 00 00 08 00 00 00	r7 += 0x8
    8999	07 04 00 00 01 00 00 00	r4 += 0x1
    9000	2d 45 f9 ff 00 00 00 00	if r5 > r4 goto -0x7 <LBB3_4>

0000000000011948 <LBB3_6>
    9001	67 04 00 00 03 00 00 00	r4 <<= 0x3

0000000000011950 <LBB3_7>
    9002	7d 34 13 00 00 00 00 00	if r4 s>= r3 goto +0x13 <LBB3_12>
    9003	05 00 02 00 00 00 00 00	goto +0x2 <LBB3_10>

0000000000011960 <LBB3_9>
    9004	07 04 00 00 01 00 00 00	r4 += 0x1
    9005	7d 34 10 00 00 00 00 00	if r4 s>= r3 goto +0x10 <LBB3_12>

0000000000011970 <LBB3_10>
    9006	bf 16 00 00 00 00 00 00	r6 = r1
    9007	0f 46 00 00 00 00 00 00	r6 += r4
    9008	bf 25 00 00 00 00 00 00	r5 = r2
    9009	0f 45 00 00 00 00 00 00	r5 += r4
    9010	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
    9011	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    9012	1d 56 f7 ff 00 00 00 00	if r6 == r5 goto -0x9 <LBB3_9>
    9013	1f 56 00 00 00 00 00 00	r6 -= r5
    9014	bf 60 00 00 00 00 00 00	r0 = r6
    9015	05 00 06 00 00 00 00 00	goto +0x6 <LBB3_12>

00000000000119c0 <LBB3_2>
    9016	b7 04 00 00 00 00 00 00	r4 = 0x0
    9017	63 4a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r4
    9018	bf a4 00 00 00 00 00 00	r4 = r10
    9019	07 04 00 00 fc ff ff ff	r4 += -0x4
    9020	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcmp_
    9021	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 0x4)

00000000000119f0 <LBB3_12>
    9022	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9023	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    9024	95 00 00 00 00 00 00 00	exit

0000000000011a08 <compiler_builtins::float::add::__adddf3>
    9025	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    9027	bf 24 00 00 00 00 00 00	r4 = r2
    9028	5f 34 00 00 00 00 00 00	r4 &= r3
    9029	bf 15 00 00 00 00 00 00	r5 = r1
    9030	5f 35 00 00 00 00 00 00	r5 &= r3
    9031	bf 50 00 00 00 00 00 00	r0 = r5
    9032	07 00 00 00 ff ff ff ff	r0 += -0x1
    9033	18 03 00 00 fe ff ff ff 00 00 00 00 ff ff ef 7f	r3 = 0x7feffffffffffffe ll
    9035	2d 30 94 00 00 00 00 00	if r0 > r3 goto +0x94 <LBB1_18>
    9036	bf 40 00 00 00 00 00 00	r0 = r4
    9037	07 00 00 00 ff ff ff ff	r0 += -0x1
    9038	2d 30 91 00 00 00 00 00	if r0 > r3 goto +0x91 <LBB1_18>

0000000000011a78 <LBB1_2>
    9039	bf 23 00 00 00 00 00 00	r3 = r2
    9040	2d 54 01 00 00 00 00 00	if r4 > r5 goto +0x1 <LBB1_4>
    9041	bf 13 00 00 00 00 00 00	r3 = r1

0000000000011a90 <LBB1_4>
    9042	2d 54 01 00 00 00 00 00	if r4 > r5 goto +0x1 <LBB1_6>
    9043	bf 21 00 00 00 00 00 00	r1 = r2

0000000000011aa0 <LBB1_6>
    9044	18 06 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r6 = 0xfffffffffffff ll
    9046	bf 34 00 00 00 00 00 00	r4 = r3
    9047	5f 64 00 00 00 00 00 00	r4 &= r6
    9048	bf 10 00 00 00 00 00 00	r0 = r1
    9049	77 00 00 00 34 00 00 00	r0 >>= 0x34
    9050	57 00 00 00 ff 07 00 00	r0 &= 0x7ff
    9051	bf 32 00 00 00 00 00 00	r2 = r3
    9052	77 02 00 00 34 00 00 00	r2 >>= 0x34
    9053	57 02 00 00 ff 07 00 00	r2 &= 0x7ff
    9054	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB1_7>
    9055	05 00 32 00 00 00 00 00	goto +0x32 <LBB1_10>

0000000000011b00 <LBB1_7>
    9056	b7 05 00 00 40 00 00 00	r5 = 0x40
    9057	15 04 2b 00 00 00 00 00	if r4 == 0x0 goto +0x2b <LBB1_9>
    9058	bf 45 00 00 00 00 00 00	r5 = r4
    9059	77 05 00 00 01 00 00 00	r5 >>= 0x1
    9060	bf 42 00 00 00 00 00 00	r2 = r4
    9061	4f 52 00 00 00 00 00 00	r2 |= r5
    9062	bf 25 00 00 00 00 00 00	r5 = r2
    9063	77 05 00 00 02 00 00 00	r5 >>= 0x2
    9064	4f 52 00 00 00 00 00 00	r2 |= r5
    9065	bf 25 00 00 00 00 00 00	r5 = r2
    9066	77 05 00 00 04 00 00 00	r5 >>= 0x4
    9067	4f 52 00 00 00 00 00 00	r2 |= r5
    9068	bf 25 00 00 00 00 00 00	r5 = r2
    9069	77 05 00 00 08 00 00 00	r5 >>= 0x8
    9070	4f 52 00 00 00 00 00 00	r2 |= r5
    9071	bf 25 00 00 00 00 00 00	r5 = r2
    9072	77 05 00 00 10 00 00 00	r5 >>= 0x10
    9073	4f 52 00 00 00 00 00 00	r2 |= r5
    9074	bf 25 00 00 00 00 00 00	r5 = r2
    9075	77 05 00 00 20 00 00 00	r5 >>= 0x20
    9076	4f 52 00 00 00 00 00 00	r2 |= r5
    9077	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    9078	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    9080	bf 27 00 00 00 00 00 00	r7 = r2
    9081	77 07 00 00 01 00 00 00	r7 >>= 0x1
    9082	5f 57 00 00 00 00 00 00	r7 &= r5
    9083	1f 72 00 00 00 00 00 00	r2 -= r7
    9084	18 07 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r7 = 0x3333333333333333 ll
    9086	bf 25 00 00 00 00 00 00	r5 = r2
    9087	5f 75 00 00 00 00 00 00	r5 &= r7
    9088	77 02 00 00 02 00 00 00	r2 >>= 0x2
    9089	5f 72 00 00 00 00 00 00	r2 &= r7
    9090	0f 25 00 00 00 00 00 00	r5 += r2
    9091	bf 52 00 00 00 00 00 00	r2 = r5
    9092	77 02 00 00 04 00 00 00	r2 >>= 0x4
    9093	0f 25 00 00 00 00 00 00	r5 += r2
    9094	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    9096	5f 25 00 00 00 00 00 00	r5 &= r2
    9097	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    9099	2f 25 00 00 00 00 00 00	r5 *= r2
    9100	77 05 00 00 38 00 00 00	r5 >>= 0x38

0000000000011c68 <LBB1_9>
    9101	b7 02 00 00 0c 00 00 00	r2 = 0xc
    9102	1f 52 00 00 00 00 00 00	r2 -= r5
    9103	07 05 00 00 35 00 00 00	r5 += 0x35
    9104	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    9105	6f 54 00 00 00 00 00 00	r4 <<= r5

0000000000011c90 <LBB1_10>
    9106	bf 15 00 00 00 00 00 00	r5 = r1
    9107	5f 65 00 00 00 00 00 00	r5 &= r6
    9108	55 00 32 00 00 00 00 00	if r0 != 0x0 goto +0x32 <LBB1_14>
    9109	b7 06 00 00 40 00 00 00	r6 = 0x40
    9110	15 05 2b 00 00 00 00 00	if r5 == 0x0 goto +0x2b <LBB1_13>
    9111	bf 56 00 00 00 00 00 00	r6 = r5
    9112	77 06 00 00 01 00 00 00	r6 >>= 0x1
    9113	bf 50 00 00 00 00 00 00	r0 = r5
    9114	4f 60 00 00 00 00 00 00	r0 |= r6
    9115	bf 06 00 00 00 00 00 00	r6 = r0
    9116	77 06 00 00 02 00 00 00	r6 >>= 0x2
    9117	4f 60 00 00 00 00 00 00	r0 |= r6
    9118	bf 06 00 00 00 00 00 00	r6 = r0
    9119	77 06 00 00 04 00 00 00	r6 >>= 0x4
    9120	4f 60 00 00 00 00 00 00	r0 |= r6
    9121	bf 06 00 00 00 00 00 00	r6 = r0
    9122	77 06 00 00 08 00 00 00	r6 >>= 0x8
    9123	4f 60 00 00 00 00 00 00	r0 |= r6
    9124	bf 06 00 00 00 00 00 00	r6 = r0
    9125	77 06 00 00 10 00 00 00	r6 >>= 0x10
    9126	4f 60 00 00 00 00 00 00	r0 |= r6
    9127	bf 06 00 00 00 00 00 00	r6 = r0
    9128	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9129	4f 60 00 00 00 00 00 00	r0 |= r6
    9130	a7 00 00 00 ff ff ff ff	r0 ^= -0x1
    9131	18 06 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r6 = 0x5555555555555555 ll
    9133	bf 07 00 00 00 00 00 00	r7 = r0
    9134	77 07 00 00 01 00 00 00	r7 >>= 0x1
    9135	5f 67 00 00 00 00 00 00	r7 &= r6
    9136	1f 70 00 00 00 00 00 00	r0 -= r7
    9137	18 07 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r7 = 0x3333333333333333 ll
    9139	bf 06 00 00 00 00 00 00	r6 = r0
    9140	5f 76 00 00 00 00 00 00	r6 &= r7
    9141	77 00 00 00 02 00 00 00	r0 >>= 0x2
    9142	5f 70 00 00 00 00 00 00	r0 &= r7
    9143	0f 06 00 00 00 00 00 00	r6 += r0
    9144	bf 60 00 00 00 00 00 00	r0 = r6
    9145	77 00 00 00 04 00 00 00	r0 >>= 0x4
    9146	0f 06 00 00 00 00 00 00	r6 += r0
    9147	18 00 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r0 = 0xf0f0f0f0f0f0f0f ll
    9149	5f 06 00 00 00 00 00 00	r6 &= r0
    9150	18 00 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r0 = 0x101010101010101 ll
    9152	2f 06 00 00 00 00 00 00	r6 *= r0
    9153	77 06 00 00 38 00 00 00	r6 >>= 0x38

0000000000011e10 <LBB1_13>
    9154	b7 00 00 00 0c 00 00 00	r0 = 0xc
    9155	1f 60 00 00 00 00 00 00	r0 -= r6
    9156	07 06 00 00 35 00 00 00	r6 += 0x35
    9157	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    9158	6f 65 00 00 00 00 00 00	r5 <<= r6

0000000000011e38 <LBB1_14>
    9159	af 31 00 00 00 00 00 00	r1 ^= r3
    9160	67 05 00 00 03 00 00 00	r5 <<= 0x3
    9161	18 06 00 00 00 00 00 00 00 00 00 00 00 00 80 00	r6 = 0x80000000000000 ll
    9163	4f 65 00 00 00 00 00 00	r5 |= r6
    9164	67 04 00 00 03 00 00 00	r4 <<= 0x3
    9165	bf 27 00 00 00 00 00 00	r7 = r2
    9166	1f 07 00 00 00 00 00 00	r7 -= r0
    9167	bf 50 00 00 00 00 00 00	r0 = r5
    9168	55 07 19 00 00 00 00 00	if r7 != 0x0 goto +0x19 <LBB1_21>

0000000000011e88 <LBB1_15>
    9169	4f 64 00 00 00 00 00 00	r4 |= r6
    9170	65 01 01 00 ff ff ff ff	if r1 s> -0x1 goto +0x1 <LBB1_16>
    9171	05 00 2d 00 00 00 00 00	goto +0x2d <LBB1_26>

0000000000011ea0 <LBB1_16>
    9172	0f 40 00 00 00 00 00 00	r0 += r4
    9173	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01	r1 = 0x100000000000000 ll
    9175	bf 04 00 00 00 00 00 00	r4 = r0
    9176	5f 14 00 00 00 00 00 00	r4 &= r1
    9177	15 04 5e 00 00 00 00 00	if r4 == 0x0 goto +0x5e <LBB1_29>
    9178	bf 01 00 00 00 00 00 00	r1 = r0
    9179	77 01 00 00 01 00 00 00	r1 >>= 0x1
    9180	57 00 00 00 01 00 00 00	r0 &= 0x1
    9181	4f 10 00 00 00 00 00 00	r0 |= r1
    9182	07 02 00 00 01 00 00 00	r2 += 0x1
    9183	05 00 58 00 00 00 00 00	goto +0x58 <LBB1_29>

0000000000011f00 <LBB1_18>
    9184	18 03 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r3 = 0x7ff0000000000000 ll
    9186	2d 35 1a 00 00 00 00 00	if r5 > r3 goto +0x1a <LBB1_25>
    9187	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB1_20>
    9188	05 00 7e 00 00 00 00 00	goto +0x7e <LBB1_38>

0000000000011f28 <LBB1_20>
    9189	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    9191	4f 14 00 00 00 00 00 00	r4 |= r1
    9192	bf 45 00 00 00 00 00 00	r5 = r4
    9193	05 00 87 00 00 00 00 00	goto +0x87 <LBB1_42>

0000000000011f50 <LBB1_21>
    9194	b7 00 00 00 01 00 00 00	r0 = 0x1
    9195	bf 78 00 00 00 00 00 00	r8 = r7
    9196	67 08 00 00 20 00 00 00	r8 <<= 0x20
    9197	77 08 00 00 20 00 00 00	r8 >>= 0x20
    9198	25 08 e2 ff 3f 00 00 00	if r8 > 0x3f goto -0x1e <LBB1_15>
    9199	bf 70 00 00 00 00 00 00	r0 = r7
    9200	87 00 00 00 00 00 00 00	r0 = -r0
    9201	57 00 00 00 3f 00 00 00	r0 &= 0x3f
    9202	bf 58 00 00 00 00 00 00	r8 = r5
    9203	6f 08 00 00 00 00 00 00	r8 <<= r0
    9204	b7 00 00 00 01 00 00 00	r0 = 0x1
    9205	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB1_24>
    9206	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000011fb8 <LBB1_24>
    9207	67 07 00 00 20 00 00 00	r7 <<= 0x20
    9208	77 07 00 00 20 00 00 00	r7 >>= 0x20
    9209	7f 75 00 00 00 00 00 00	r5 >>= r7
    9210	4f 05 00 00 00 00 00 00	r5 |= r0
    9211	bf 50 00 00 00 00 00 00	r0 = r5
    9212	05 00 d4 ff 00 00 00 00	goto -0x2c <LBB1_15>

0000000000011fe8 <LBB1_25>
    9213	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    9215	4f 15 00 00 00 00 00 00	r5 |= r1
    9216	05 00 70 00 00 00 00 00	goto +0x70 <LBB1_42>

0000000000012008 <LBB1_26>
    9217	1f 04 00 00 00 00 00 00	r4 -= r0
    9218	b7 05 00 00 00 00 00 00	r5 = 0x0
    9219	15 04 6d 00 00 00 00 00	if r4 == 0x0 goto +0x6d <LBB1_42>
    9220	18 01 00 00 ff ff ff ff 00 00 00 00 ff ff 7f 00	r1 = 0x7fffffffffffff ll
    9222	bf 40 00 00 00 00 00 00	r0 = r4
    9223	2d 14 30 00 00 00 00 00	if r4 > r1 goto +0x30 <LBB1_29>
    9224	bf 45 00 00 00 00 00 00	r5 = r4
    9225	77 05 00 00 01 00 00 00	r5 >>= 0x1
    9226	bf 41 00 00 00 00 00 00	r1 = r4
    9227	4f 51 00 00 00 00 00 00	r1 |= r5
    9228	bf 15 00 00 00 00 00 00	r5 = r1
    9229	77 05 00 00 02 00 00 00	r5 >>= 0x2
    9230	4f 51 00 00 00 00 00 00	r1 |= r5
    9231	bf 15 00 00 00 00 00 00	r5 = r1
    9232	77 05 00 00 04 00 00 00	r5 >>= 0x4
    9233	4f 51 00 00 00 00 00 00	r1 |= r5
    9234	bf 15 00 00 00 00 00 00	r5 = r1
    9235	77 05 00 00 08 00 00 00	r5 >>= 0x8
    9236	4f 51 00 00 00 00 00 00	r1 |= r5
    9237	bf 15 00 00 00 00 00 00	r5 = r1
    9238	77 05 00 00 10 00 00 00	r5 >>= 0x10
    9239	4f 51 00 00 00 00 00 00	r1 |= r5
    9240	bf 15 00 00 00 00 00 00	r5 = r1
    9241	77 05 00 00 20 00 00 00	r5 >>= 0x20
    9242	4f 51 00 00 00 00 00 00	r1 |= r5
    9243	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    9244	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    9246	bf 10 00 00 00 00 00 00	r0 = r1
    9247	77 00 00 00 01 00 00 00	r0 >>= 0x1
    9248	5f 50 00 00 00 00 00 00	r0 &= r5
    9249	1f 01 00 00 00 00 00 00	r1 -= r0
    9250	18 00 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r0 = 0x3333333333333333 ll
    9252	bf 15 00 00 00 00 00 00	r5 = r1
    9253	5f 05 00 00 00 00 00 00	r5 &= r0
    9254	77 01 00 00 02 00 00 00	r1 >>= 0x2
    9255	5f 01 00 00 00 00 00 00	r1 &= r0
    9256	0f 15 00 00 00 00 00 00	r5 += r1
    9257	bf 51 00 00 00 00 00 00	r1 = r5
    9258	77 01 00 00 04 00 00 00	r1 >>= 0x4
    9259	0f 15 00 00 00 00 00 00	r5 += r1
    9260	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    9262	5f 15 00 00 00 00 00 00	r5 &= r1
    9263	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    9265	2f 15 00 00 00 00 00 00	r5 *= r1
    9266	77 05 00 00 38 00 00 00	r5 >>= 0x38
    9267	07 05 00 00 f8 ff ff ff	r5 += -0x8
    9268	1f 52 00 00 00 00 00 00	r2 -= r5
    9269	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    9270	6f 54 00 00 00 00 00 00	r4 <<= r5
    9271	bf 40 00 00 00 00 00 00	r0 = r4

00000000000121c0 <LBB1_29>
    9272	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r1 = -0x8000000000000000 ll
    9274	5f 13 00 00 00 00 00 00	r3 &= r1
    9275	65 02 01 00 fe 07 00 00	if r2 s> 0x7fe goto +0x1 <LBB1_30>
    9276	05 00 05 00 00 00 00 00	goto +0x5 <LBB1_31>

00000000000121e8 <LBB1_30>
    9277	18 01 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r1 = 0x7ff0000000000000 ll
    9279	4f 13 00 00 00 00 00 00	r3 |= r1
    9280	bf 35 00 00 00 00 00 00	r5 = r3
    9281	05 00 2f 00 00 00 00 00	goto +0x2f <LBB1_42>

0000000000012210 <LBB1_31>
    9282	b7 01 00 00 01 00 00 00	r1 = 0x1
    9283	6d 21 01 00 00 00 00 00	if r1 s> r2 goto +0x1 <LBB1_32>
    9284	05 00 0d 00 00 00 00 00	goto +0xd <LBB1_35>

0000000000012228 <LBB1_32>
    9285	bf 24 00 00 00 00 00 00	r4 = r2
    9286	07 04 00 00 ff ff ff ff	r4 += -0x1
    9287	57 04 00 00 3f 00 00 00	r4 &= 0x3f
    9288	bf 05 00 00 00 00 00 00	r5 = r0
    9289	6f 45 00 00 00 00 00 00	r5 <<= r4
    9290	b7 04 00 00 01 00 00 00	r4 = 0x1
    9291	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB1_34>
    9292	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000012268 <LBB1_34>
    9293	1f 21 00 00 00 00 00 00	r1 -= r2
    9294	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    9295	7f 10 00 00 00 00 00 00	r0 >>= r1
    9296	4f 40 00 00 00 00 00 00	r0 |= r4
    9297	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000012290 <LBB1_35>
    9298	bf 01 00 00 00 00 00 00	r1 = r0
    9299	77 01 00 00 03 00 00 00	r1 >>= 0x3
    9300	18 04 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r4 = 0xfffffffffffff ll
    9302	bf 15 00 00 00 00 00 00	r5 = r1
    9303	5f 45 00 00 00 00 00 00	r5 &= r4
    9304	67 02 00 00 34 00 00 00	r2 <<= 0x34
    9305	4f 52 00 00 00 00 00 00	r2 |= r5
    9306	4f 32 00 00 00 00 00 00	r2 |= r3
    9307	57 00 00 00 07 00 00 00	r0 &= 0x7
    9308	25 00 12 00 04 00 00 00	if r0 > 0x4 goto +0x12 <LBB1_40>
    9309	bf 25 00 00 00 00 00 00	r5 = r2
    9310	15 00 01 00 04 00 00 00	if r0 == 0x4 goto +0x1 <LBB1_37>
    9311	05 00 11 00 00 00 00 00	goto +0x11 <LBB1_42>

0000000000012300 <LBB1_37>
    9312	57 01 00 00 01 00 00 00	r1 &= 0x1
    9313	0f 12 00 00 00 00 00 00	r2 += r1
    9314	05 00 0d 00 00 00 00 00	goto +0xd <LBB1_41>

0000000000012318 <LBB1_38>
    9315	18 03 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r3 = 0x7ff0000000000000 ll
    9317	1d 35 01 00 00 00 00 00	if r5 == r3 goto +0x1 <LBB1_39>
    9318	05 00 0c 00 00 00 00 00	goto +0xc <LBB1_44>

0000000000012338 <LBB1_39>
    9319	af 12 00 00 00 00 00 00	r2 ^= r1
    9320	18 05 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r5 = 0x7ff8000000000000 ll
    9322	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x8000000000000000 ll
    9324	bf 10 00 00 00 00 00 00	r0 = r1
    9325	1d 32 03 00 00 00 00 00	if r2 == r3 goto +0x3 <LBB1_42>
    9326	05 00 03 00 00 00 00 00	goto +0x3 <LBB1_43>

0000000000012378 <LBB1_40>
    9327	07 02 00 00 01 00 00 00	r2 += 0x1

0000000000012380 <LBB1_41>
    9328	bf 25 00 00 00 00 00 00	r5 = r2

0000000000012388 <LBB1_42>
    9329	bf 50 00 00 00 00 00 00	r0 = r5

0000000000012390 <LBB1_43>
    9330	95 00 00 00 00 00 00 00	exit

0000000000012398 <LBB1_44>
    9331	bf 20 00 00 00 00 00 00	r0 = r2
    9332	1d 34 fd ff 00 00 00 00	if r4 == r3 goto -0x3 <LBB1_43>
    9333	15 05 03 00 00 00 00 00	if r5 == 0x0 goto +0x3 <LBB1_47>
    9334	bf 10 00 00 00 00 00 00	r0 = r1
    9335	15 04 fa ff 00 00 00 00	if r4 == 0x0 goto -0x6 <LBB1_43>
    9336	05 00 d6 fe 00 00 00 00	goto -0x12a <LBB1_2>

00000000000123c8 <LBB1_47>
    9337	bf 20 00 00 00 00 00 00	r0 = r2
    9338	55 04 f7 ff 00 00 00 00	if r4 != 0x0 goto -0x9 <LBB1_43>
    9339	5f 12 00 00 00 00 00 00	r2 &= r1
    9340	05 00 f3 ff 00 00 00 00	goto -0xd <LBB1_41>

00000000000123e8 <__floatundidf>
    9341	bf 16 00 00 00 00 00 00	r6 = r1
    9342	77 01 00 00 20 00 00 00	r1 >>= 0x20
    9343	18 02 00 00 00 00 00 00 00 00 00 00 00 00 30 45	r2 = 0x4530000000000000 ll
    9345	4f 21 00 00 00 00 00 00	r1 |= r2
    9346	18 02 00 00 00 00 10 00 00 00 00 00 00 00 30 c5	r2 = -0x3acffffffff00000 ll
    9348	85 10 00 00 e3 fc ff ff	call -0x31d ; <__adddf3>
    9349	67 06 00 00 20 00 00 00	r6 <<= 0x20
    9350	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9351	18 01 00 00 00 00 00 00 00 00 00 00 00 00 30 43	r1 = 0x4330000000000000 ll
    9353	4f 16 00 00 00 00 00 00	r6 |= r1
    9354	bf 01 00 00 00 00 00 00	r1 = r0
    9355	bf 62 00 00 00 00 00 00	r2 = r6
    9356	85 10 00 00 db fc ff ff	call -0x325 ; <__adddf3>
    9357	95 00 00 00 00 00 00 00	exit

0000000000012470 <__multi3>
    9358	2f 43 00 00 00 00 00 00	r3 *= r4
    9359	2f 25 00 00 00 00 00 00	r5 *= r2
    9360	0f 35 00 00 00 00 00 00	r5 += r3
    9361	bf 20 00 00 00 00 00 00	r0 = r2
    9362	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9363	bf 43 00 00 00 00 00 00	r3 = r4
    9364	77 03 00 00 20 00 00 00	r3 >>= 0x20
    9365	bf 36 00 00 00 00 00 00	r6 = r3
    9366	2f 06 00 00 00 00 00 00	r6 *= r0
    9367	0f 65 00 00 00 00 00 00	r5 += r6
    9368	67 04 00 00 20 00 00 00	r4 <<= 0x20
    9369	77 04 00 00 20 00 00 00	r4 >>= 0x20
    9370	bf 46 00 00 00 00 00 00	r6 = r4
    9371	2f 06 00 00 00 00 00 00	r6 *= r0
    9372	67 02 00 00 20 00 00 00	r2 <<= 0x20
    9373	77 02 00 00 20 00 00 00	r2 >>= 0x20
    9374	2f 24 00 00 00 00 00 00	r4 *= r2
    9375	bf 40 00 00 00 00 00 00	r0 = r4
    9376	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9377	0f 60 00 00 00 00 00 00	r0 += r6
    9378	bf 06 00 00 00 00 00 00	r6 = r0
    9379	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9380	0f 65 00 00 00 00 00 00	r5 += r6
    9381	2f 23 00 00 00 00 00 00	r3 *= r2
    9382	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9383	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9384	0f 30 00 00 00 00 00 00	r0 += r3
    9385	bf 02 00 00 00 00 00 00	r2 = r0
    9386	77 02 00 00 20 00 00 00	r2 >>= 0x20
    9387	0f 25 00 00 00 00 00 00	r5 += r2
    9388	7b 51 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r5
    9389	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9390	67 04 00 00 20 00 00 00	r4 <<= 0x20
    9391	77 04 00 00 20 00 00 00	r4 >>= 0x20
    9392	4f 40 00 00 00 00 00 00	r0 |= r4
    9393	7b 01 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r0
    9394	95 00 00 00 00 00 00 00	exit
