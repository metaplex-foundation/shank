-rwxr-xr-x  1 thlorenz  admin  150832 Nov 17 1226 /Volumes/d/dev/mp/projects/breakpoint/tictactoe/program/target/bpfel-unknown-unknown/release/tictactoe.so
ELF Header
  Magic   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class                             ELF64
  Data                              2's complement, little endian
  Version                           1 (current)
  OS/ABI                            UNIX - System V
  ABI Version                       0
  Type                              DYN (Shared object file)
  Machine                           EM_BPF
  Version                           0x1
  Entry point address               0x19E8
  Start of program headers          64 (bytes into file)
  Start of section headers          150064 (bytes into file)
  Flags                             0x0
  Size of this header               64 (bytes)
  Size of program headers           56 (bytes)
  Number of program headers         4
  Size of section headers           64 (bytes)
  Number of section headers         12
  Section header string table index 10
There are 12 section headers, starting at offset 0x24a30

Section Headers
  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        0000000000000120 000120 012538 00  AX  0   0  8
  [ 2] .rodata           PROGBITS        0000000000012658 012658 001487 00  AM  0   0  8
  [ 3] .data.rel.ro      PROGBITS        0000000000013ae0 013ae0 0006e8 00  WA  0   0  8
  [ 4] .dynamic          DYNAMIC         00000000000141c8 0141c8 0000b0 10  WA  6   0  8
  [ 5] .dynsym           DYNSYM          0000000000014278 014278 000108 18   A  6   1  8
  [ 6] .dynstr           STRTAB          0000000000014380 014380 000094 00   A  0   0  1
  [ 7] .rel.dyn          REL             0000000000014418 014418 001cb0 10   A  5   0  8
  [ 8] .comment          PROGBITS        0000000000000000 0160c8 00006e 01  MS  0   0  1
  [ 9] .symtab           SYMTAB          0000000000000000 016138 007c50 18     11 1316  8
  [10] .shstrtab         STRTAB          0000000000000000 01dd88 000061 00      0   0  1
  [11] .strtab           STRTAB          0000000000000000 01dde9 006c41 00      0   0  1
Key to Flags
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  R (retain), p (processor specific)

Elf file type is DYN (Shared object file)
Entry point 0x19e8
There are 4 program headers, starting at offset 64

Program Headers
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  LOAD           0x000120 0x0000000000000120 0x0000000000000120 0x012538 0x012538 R E 0x1000
  LOAD           0x012658 0x0000000000012658 0x0000000000012658 0x001b70 0x001b70 RW  0x1000
  LOAD           0x014278 0x0000000000014278 0x0000000000014278 0x001e50 0x001e50 R   0x1000
  DYNAMIC        0x0141c8 0x00000000000141c8 0x00000000000141c8 0x0000b0 0x0000b0 RW  0x8

 Section to Segment mapping
  Segment Sections...
   00     .text
   01     .rodata .data.rel.ro
   02     .dynsym .dynstr .rel.dyn
   03     .dynamic
   None   .comment .symtab .shstrtab .strtab
Dynamic section at offset 0x141c8 contains 11 entries
  Tag                Type       Name/Value
  0x000000000000001e (FLAGS)    TEXTREL
  0x0000000000000011 (REL)      0x14418
  0x0000000000000012 (RELSZ)    7344 (bytes)
  0x0000000000000013 (RELENT)   16 (bytes)
  0x000000006ffffffa (RELCOUNT) 356
  0x0000000000000006 (SYMTAB)   0x14278
  0x000000000000000b (SYMENT)   24 (bytes)
  0x0000000000000005 (STRTAB)   0x14380
  0x000000000000000a (STRSZ)    148 (bytes)
  0x0000000000000016 (TEXTREL)  0x0
  0x0000000000000000 (NULL)     0x0

Relocation section '.rel.dyn' at offset 0x14418 contains 459 entries
    Offset             Info             Type               Symbol's Value  Symbol's Name
0000000000000930  0000000000000008 R_BPF_64_RELATIVE
0000000000000960  0000000000000008 R_BPF_64_RELATIVE
0000000000000988  0000000000000008 R_BPF_64_RELATIVE
00000000000009b0  0000000000000008 R_BPF_64_RELATIVE
0000000000000ae8  0000000000000008 R_BPF_64_RELATIVE
0000000000000b00  0000000000000008 R_BPF_64_RELATIVE
0000000000000c58  0000000000000008 R_BPF_64_RELATIVE
0000000000000cf8  0000000000000008 R_BPF_64_RELATIVE
0000000000000e38  0000000000000008 R_BPF_64_RELATIVE
0000000000000e50  0000000000000008 R_BPF_64_RELATIVE
0000000000000fa8  0000000000000008 R_BPF_64_RELATIVE
0000000000001068  0000000000000008 R_BPF_64_RELATIVE
0000000000001208  0000000000000008 R_BPF_64_RELATIVE
0000000000001228  0000000000000008 R_BPF_64_RELATIVE
00000000000014e0  0000000000000008 R_BPF_64_RELATIVE
0000000000001500  0000000000000008 R_BPF_64_RELATIVE
0000000000001848  0000000000000008 R_BPF_64_RELATIVE
0000000000001bd8  0000000000000008 R_BPF_64_RELATIVE
0000000000001c80  0000000000000008 R_BPF_64_RELATIVE
0000000000001cd0  0000000000000008 R_BPF_64_RELATIVE
0000000000001da8  0000000000000008 R_BPF_64_RELATIVE
0000000000001dc0  0000000000000008 R_BPF_64_RELATIVE
0000000000002178  0000000000000008 R_BPF_64_RELATIVE
00000000000021a8  0000000000000008 R_BPF_64_RELATIVE
00000000000021d8  0000000000000008 R_BPF_64_RELATIVE
0000000000002208  0000000000000008 R_BPF_64_RELATIVE
0000000000002238  0000000000000008 R_BPF_64_RELATIVE
0000000000002268  0000000000000008 R_BPF_64_RELATIVE
00000000000022d0  0000000000000008 R_BPF_64_RELATIVE
00000000000022e8  0000000000000008 R_BPF_64_RELATIVE
00000000000024e8  0000000000000008 R_BPF_64_RELATIVE
0000000000002500  0000000000000008 R_BPF_64_RELATIVE
00000000000026b0  0000000000000008 R_BPF_64_RELATIVE
0000000000002798  0000000000000008 R_BPF_64_RELATIVE
0000000000002960  0000000000000008 R_BPF_64_RELATIVE
00000000000029b0  0000000000000008 R_BPF_64_RELATIVE
00000000000029c8  0000000000000008 R_BPF_64_RELATIVE
00000000000029d8  0000000000000008 R_BPF_64_RELATIVE
00000000000029f8  0000000000000008 R_BPF_64_RELATIVE
0000000000002a18  0000000000000008 R_BPF_64_RELATIVE
0000000000002a38  0000000000000008 R_BPF_64_RELATIVE
0000000000002a58  0000000000000008 R_BPF_64_RELATIVE
0000000000002a78  0000000000000008 R_BPF_64_RELATIVE
0000000000002a98  0000000000000008 R_BPF_64_RELATIVE
0000000000002ab8  0000000000000008 R_BPF_64_RELATIVE
0000000000002ad8  0000000000000008 R_BPF_64_RELATIVE
0000000000002af8  0000000000000008 R_BPF_64_RELATIVE
0000000000002b18  0000000000000008 R_BPF_64_RELATIVE
0000000000002b38  0000000000000008 R_BPF_64_RELATIVE
0000000000002b58  0000000000000008 R_BPF_64_RELATIVE
0000000000002fb0  0000000000000008 R_BPF_64_RELATIVE
0000000000002fc8  0000000000000008 R_BPF_64_RELATIVE
0000000000003190  0000000000000008 R_BPF_64_RELATIVE
0000000000003298  0000000000000008 R_BPF_64_RELATIVE
0000000000003a28  0000000000000008 R_BPF_64_RELATIVE
0000000000003b30  0000000000000008 R_BPF_64_RELATIVE
0000000000003b48  0000000000000008 R_BPF_64_RELATIVE
0000000000004178  0000000000000008 R_BPF_64_RELATIVE
00000000000041f0  0000000000000008 R_BPF_64_RELATIVE
0000000000004df8  0000000000000008 R_BPF_64_RELATIVE
0000000000004e10  0000000000000008 R_BPF_64_RELATIVE
0000000000004ef0  0000000000000008 R_BPF_64_RELATIVE
0000000000004f30  0000000000000008 R_BPF_64_RELATIVE
0000000000004f58  0000000000000008 R_BPF_64_RELATIVE
0000000000004f98  0000000000000008 R_BPF_64_RELATIVE
0000000000004fb8  0000000000000008 R_BPF_64_RELATIVE
0000000000004ff8  0000000000000008 R_BPF_64_RELATIVE
0000000000005010  0000000000000008 R_BPF_64_RELATIVE
0000000000005050  0000000000000008 R_BPF_64_RELATIVE
0000000000005068  0000000000000008 R_BPF_64_RELATIVE
00000000000050a8  0000000000000008 R_BPF_64_RELATIVE
00000000000050c0  0000000000000008 R_BPF_64_RELATIVE
0000000000005100  0000000000000008 R_BPF_64_RELATIVE
0000000000005118  0000000000000008 R_BPF_64_RELATIVE
0000000000005158  0000000000000008 R_BPF_64_RELATIVE
0000000000005320  0000000000000008 R_BPF_64_RELATIVE
0000000000005338  0000000000000008 R_BPF_64_RELATIVE
0000000000005490  0000000000000008 R_BPF_64_RELATIVE
0000000000005528  0000000000000008 R_BPF_64_RELATIVE
0000000000005748  0000000000000008 R_BPF_64_RELATIVE
0000000000005760  0000000000000008 R_BPF_64_RELATIVE
00000000000058b8  0000000000000008 R_BPF_64_RELATIVE
0000000000005980  0000000000000008 R_BPF_64_RELATIVE
0000000000005ba0  0000000000000008 R_BPF_64_RELATIVE
0000000000005fc8  0000000000000008 R_BPF_64_RELATIVE
0000000000006100  0000000000000008 R_BPF_64_RELATIVE
0000000000006390  0000000000000008 R_BPF_64_RELATIVE
00000000000063a8  0000000000000008 R_BPF_64_RELATIVE
00000000000063b8  0000000000000008 R_BPF_64_RELATIVE
0000000000006cc0  0000000000000008 R_BPF_64_RELATIVE
0000000000008af0  0000000000000008 R_BPF_64_RELATIVE
00000000000095c0  0000000000000008 R_BPF_64_RELATIVE
00000000000095d8  0000000000000008 R_BPF_64_RELATIVE
00000000000097b0  0000000000000008 R_BPF_64_RELATIVE
00000000000097f0  0000000000000008 R_BPF_64_RELATIVE
0000000000009818  0000000000000008 R_BPF_64_RELATIVE
000000000000a050  0000000000000008 R_BPF_64_RELATIVE
000000000000a228  0000000000000008 R_BPF_64_RELATIVE
000000000000a240  0000000000000008 R_BPF_64_RELATIVE
000000000000a280  0000000000000008 R_BPF_64_RELATIVE
000000000000a2b8  0000000000000008 R_BPF_64_RELATIVE
000000000000a2f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a320  0000000000000008 R_BPF_64_RELATIVE
000000000000a350  0000000000000008 R_BPF_64_RELATIVE
000000000000a380  0000000000000008 R_BPF_64_RELATIVE
000000000000a3b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a3e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a408  0000000000000008 R_BPF_64_RELATIVE
000000000000a430  0000000000000008 R_BPF_64_RELATIVE
000000000000a460  0000000000000008 R_BPF_64_RELATIVE
000000000000a490  0000000000000008 R_BPF_64_RELATIVE
000000000000a4c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a520  0000000000000008 R_BPF_64_RELATIVE
000000000000a540  0000000000000008 R_BPF_64_RELATIVE
000000000000a560  0000000000000008 R_BPF_64_RELATIVE
000000000000a580  0000000000000008 R_BPF_64_RELATIVE
000000000000a5a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5d8  0000000000000008 R_BPF_64_RELATIVE
000000000000a5f8  0000000000000008 R_BPF_64_RELATIVE
000000000000a618  0000000000000008 R_BPF_64_RELATIVE
000000000000a638  0000000000000008 R_BPF_64_RELATIVE
000000000000a658  0000000000000008 R_BPF_64_RELATIVE
000000000000a670  0000000000000008 R_BPF_64_RELATIVE
000000000000a690  0000000000000008 R_BPF_64_RELATIVE
000000000000a6b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a710  0000000000000008 R_BPF_64_RELATIVE
000000000000a730  0000000000000008 R_BPF_64_RELATIVE
000000000000a750  0000000000000008 R_BPF_64_RELATIVE
000000000000a770  0000000000000008 R_BPF_64_RELATIVE
000000000000a790  0000000000000008 R_BPF_64_RELATIVE
000000000000a7b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a7d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a7f0  0000000000000008 R_BPF_64_RELATIVE
000000000000a810  0000000000000008 R_BPF_64_RELATIVE
000000000000a918  0000000000000008 R_BPF_64_RELATIVE
000000000000a988  0000000000000008 R_BPF_64_RELATIVE
000000000000ab60  0000000000000008 R_BPF_64_RELATIVE
000000000000ab78  0000000000000008 R_BPF_64_RELATIVE
000000000000aba8  0000000000000008 R_BPF_64_RELATIVE
000000000000ac70  0000000000000008 R_BPF_64_RELATIVE
000000000000b128  0000000000000008 R_BPF_64_RELATIVE
000000000000b140  0000000000000008 R_BPF_64_RELATIVE
000000000000b388  0000000000000008 R_BPF_64_RELATIVE
000000000000b3c0  0000000000000008 R_BPF_64_RELATIVE
000000000000b3d8  0000000000000008 R_BPF_64_RELATIVE
000000000000b3e8  0000000000000008 R_BPF_64_RELATIVE
000000000000b7c8  0000000000000008 R_BPF_64_RELATIVE
000000000000b850  0000000000000008 R_BPF_64_RELATIVE
000000000000b880  0000000000000008 R_BPF_64_RELATIVE
000000000000b958  0000000000000008 R_BPF_64_RELATIVE
000000000000ba80  0000000000000008 R_BPF_64_RELATIVE
000000000000bac8  0000000000000008 R_BPF_64_RELATIVE
000000000000bae0  0000000000000008 R_BPF_64_RELATIVE
000000000000bd20  0000000000000008 R_BPF_64_RELATIVE
000000000000bd68  0000000000000008 R_BPF_64_RELATIVE
000000000000bd80  0000000000000008 R_BPF_64_RELATIVE
000000000000bf80  0000000000000008 R_BPF_64_RELATIVE
000000000000bfc8  0000000000000008 R_BPF_64_RELATIVE
000000000000c030  0000000000000008 R_BPF_64_RELATIVE
000000000000c0d8  0000000000000008 R_BPF_64_RELATIVE
000000000000c140  0000000000000008 R_BPF_64_RELATIVE
000000000000c1b8  0000000000000008 R_BPF_64_RELATIVE
000000000000c1f0  0000000000000008 R_BPF_64_RELATIVE
000000000000c250  0000000000000008 R_BPF_64_RELATIVE
000000000000c2a8  0000000000000008 R_BPF_64_RELATIVE
000000000000c388  0000000000000008 R_BPF_64_RELATIVE
000000000000c3b8  0000000000000008 R_BPF_64_RELATIVE
000000000000c428  0000000000000008 R_BPF_64_RELATIVE
000000000000c440  0000000000000008 R_BPF_64_RELATIVE
000000000000c4d8  0000000000000008 R_BPF_64_RELATIVE
000000000000c4f0  0000000000000008 R_BPF_64_RELATIVE
000000000000c520  0000000000000008 R_BPF_64_RELATIVE
000000000000c850  0000000000000008 R_BPF_64_RELATIVE
000000000000c8f0  0000000000000008 R_BPF_64_RELATIVE
000000000000e008  0000000000000008 R_BPF_64_RELATIVE
000000000000e2b0  0000000000000008 R_BPF_64_RELATIVE
000000000000e848  0000000000000008 R_BPF_64_RELATIVE
000000000000e878  0000000000000008 R_BPF_64_RELATIVE
000000000000e928  0000000000000008 R_BPF_64_RELATIVE
000000000000e958  0000000000000008 R_BPF_64_RELATIVE
000000000000ea08  0000000000000008 R_BPF_64_RELATIVE
000000000000ea38  0000000000000008 R_BPF_64_RELATIVE
000000000000eaa8  0000000000000008 R_BPF_64_RELATIVE
000000000000eb00  0000000000000008 R_BPF_64_RELATIVE
000000000000eb90  0000000000000008 R_BPF_64_RELATIVE
000000000000ebd8  0000000000000008 R_BPF_64_RELATIVE
000000000000ec50  0000000000000008 R_BPF_64_RELATIVE
000000000000ec80  0000000000000008 R_BPF_64_RELATIVE
000000000000ecb8  0000000000000008 R_BPF_64_RELATIVE
000000000000ed28  0000000000000008 R_BPF_64_RELATIVE
000000000000ed58  0000000000000008 R_BPF_64_RELATIVE
000000000000eda8  0000000000000008 R_BPF_64_RELATIVE
000000000000efd0  0000000000000008 R_BPF_64_RELATIVE
000000000000f068  0000000000000008 R_BPF_64_RELATIVE
000000000000f098  0000000000000008 R_BPF_64_RELATIVE
000000000000f0d0  0000000000000008 R_BPF_64_RELATIVE
000000000000f100  0000000000000008 R_BPF_64_RELATIVE
000000000000f130  0000000000000008 R_BPF_64_RELATIVE
000000000000f430  0000000000000008 R_BPF_64_RELATIVE
000000000000f448  0000000000000008 R_BPF_64_RELATIVE
000000000000f4a8  0000000000000008 R_BPF_64_RELATIVE
000000000000f4d8  0000000000000008 R_BPF_64_RELATIVE
000000000000f598  0000000000000008 R_BPF_64_RELATIVE
000000000000f640  0000000000000008 R_BPF_64_RELATIVE
000000000000f708  0000000000000008 R_BPF_64_RELATIVE
000000000000f7b0  0000000000000008 R_BPF_64_RELATIVE
000000000000f8b8  0000000000000008 R_BPF_64_RELATIVE
000000000000f8f0  0000000000000008 R_BPF_64_RELATIVE
000000000000fae0  0000000000000008 R_BPF_64_RELATIVE
000000000000fb90  0000000000000008 R_BPF_64_RELATIVE
000000000000fbf0  0000000000000008 R_BPF_64_RELATIVE
000000000000fc50  0000000000000008 R_BPF_64_RELATIVE
000000000000fce8  0000000000000008 R_BPF_64_RELATIVE
000000000000fd40  0000000000000008 R_BPF_64_RELATIVE
000000000000fdb0  0000000000000008 R_BPF_64_RELATIVE
000000000000fe60  0000000000000008 R_BPF_64_RELATIVE
000000000000ff70  0000000000000008 R_BPF_64_RELATIVE
000000000000ffa8  0000000000000008 R_BPF_64_RELATIVE
0000000000010080  0000000000000008 R_BPF_64_RELATIVE
00000000000100e0  0000000000000008 R_BPF_64_RELATIVE
0000000000010188  0000000000000008 R_BPF_64_RELATIVE
0000000000010258  0000000000000008 R_BPF_64_RELATIVE
0000000000010290  0000000000000008 R_BPF_64_RELATIVE
0000000000010368  0000000000000008 R_BPF_64_RELATIVE
00000000000103c8  0000000000000008 R_BPF_64_RELATIVE
0000000000010460  0000000000000008 R_BPF_64_RELATIVE
0000000000010530  0000000000000008 R_BPF_64_RELATIVE
0000000000010568  0000000000000008 R_BPF_64_RELATIVE
0000000000010640  0000000000000008 R_BPF_64_RELATIVE
00000000000106a0  0000000000000008 R_BPF_64_RELATIVE
0000000000010738  0000000000000008 R_BPF_64_RELATIVE
0000000000010778  0000000000000008 R_BPF_64_RELATIVE
0000000000010920  0000000000000008 R_BPF_64_RELATIVE
00000000000109b8  0000000000000008 R_BPF_64_RELATIVE
0000000000010a58  0000000000000008 R_BPF_64_RELATIVE
0000000000010a80  0000000000000008 R_BPF_64_RELATIVE
0000000000010ae8  0000000000000008 R_BPF_64_RELATIVE
0000000000010bb0  0000000000000008 R_BPF_64_RELATIVE
0000000000010be0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ae0  0000000000000008 R_BPF_64_RELATIVE
0000000000013af0  0000000000000008 R_BPF_64_RELATIVE
0000000000013b00  0000000000000008 R_BPF_64_RELATIVE
0000000000013b10  0000000000000008 R_BPF_64_RELATIVE
0000000000013b20  0000000000000008 R_BPF_64_RELATIVE
0000000000013b30  0000000000000008 R_BPF_64_RELATIVE
0000000000013b40  0000000000000008 R_BPF_64_RELATIVE
0000000000013b50  0000000000000008 R_BPF_64_RELATIVE
0000000000013b60  0000000000000008 R_BPF_64_RELATIVE
0000000000013b70  0000000000000008 R_BPF_64_RELATIVE
0000000000013b80  0000000000000008 R_BPF_64_RELATIVE
0000000000013b90  0000000000000008 R_BPF_64_RELATIVE
0000000000013ba0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bb0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bc0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013be0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bf0  0000000000000008 R_BPF_64_RELATIVE
0000000000013c00  0000000000000008 R_BPF_64_RELATIVE
0000000000013c10  0000000000000008 R_BPF_64_RELATIVE
0000000000013c20  0000000000000008 R_BPF_64_RELATIVE
0000000000013c30  0000000000000008 R_BPF_64_RELATIVE
0000000000013c48  0000000000000008 R_BPF_64_RELATIVE
0000000000013c50  0000000000000008 R_BPF_64_RELATIVE
0000000000013c68  0000000000000008 R_BPF_64_RELATIVE
0000000000013c70  0000000000000008 R_BPF_64_RELATIVE
0000000000013c78  0000000000000008 R_BPF_64_RELATIVE
0000000000013c80  0000000000000008 R_BPF_64_RELATIVE
0000000000013c88  0000000000000008 R_BPF_64_RELATIVE
0000000000013c90  0000000000000008 R_BPF_64_RELATIVE
0000000000013c98  0000000000000008 R_BPF_64_RELATIVE
0000000000013ca0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ca8  0000000000000008 R_BPF_64_RELATIVE
0000000000013cb8  0000000000000008 R_BPF_64_RELATIVE
0000000000013cd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013cd8  0000000000000008 R_BPF_64_RELATIVE
0000000000013ce0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ce8  0000000000000008 R_BPF_64_RELATIVE
0000000000013d00  0000000000000008 R_BPF_64_RELATIVE
0000000000013d18  0000000000000008 R_BPF_64_RELATIVE
0000000000013d20  0000000000000008 R_BPF_64_RELATIVE
0000000000013d38  0000000000000008 R_BPF_64_RELATIVE
0000000000013d40  0000000000000008 R_BPF_64_RELATIVE
0000000000013d48  0000000000000008 R_BPF_64_RELATIVE
0000000000013d50  0000000000000008 R_BPF_64_RELATIVE
0000000000013d68  0000000000000008 R_BPF_64_RELATIVE
0000000000013d78  0000000000000008 R_BPF_64_RELATIVE
0000000000013d90  0000000000000008 R_BPF_64_RELATIVE
0000000000013da0  0000000000000008 R_BPF_64_RELATIVE
0000000000013db8  0000000000000008 R_BPF_64_RELATIVE
0000000000013dd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013dd8  0000000000000008 R_BPF_64_RELATIVE
0000000000013df0  0000000000000008 R_BPF_64_RELATIVE
0000000000013df8  0000000000000008 R_BPF_64_RELATIVE
0000000000013e00  0000000000000008 R_BPF_64_RELATIVE
0000000000013e08  0000000000000008 R_BPF_64_RELATIVE
0000000000013e10  0000000000000008 R_BPF_64_RELATIVE
0000000000013e18  0000000000000008 R_BPF_64_RELATIVE
0000000000013e20  0000000000000008 R_BPF_64_RELATIVE
0000000000013e28  0000000000000008 R_BPF_64_RELATIVE
0000000000013e30  0000000000000008 R_BPF_64_RELATIVE
0000000000013e48  0000000000000008 R_BPF_64_RELATIVE
0000000000013e50  0000000000000008 R_BPF_64_RELATIVE
0000000000013e60  0000000000000008 R_BPF_64_RELATIVE
0000000000013e70  0000000000000008 R_BPF_64_RELATIVE
0000000000013e80  0000000000000008 R_BPF_64_RELATIVE
0000000000013e90  0000000000000008 R_BPF_64_RELATIVE
0000000000013ea8  0000000000000008 R_BPF_64_RELATIVE
0000000000013ec0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ed8  0000000000000008 R_BPF_64_RELATIVE
0000000000013ee0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ef8  0000000000000008 R_BPF_64_RELATIVE
0000000000013f00  0000000000000008 R_BPF_64_RELATIVE
0000000000013f08  0000000000000008 R_BPF_64_RELATIVE
0000000000013f10  0000000000000008 R_BPF_64_RELATIVE
0000000000013f20  0000000000000008 R_BPF_64_RELATIVE
0000000000013f30  0000000000000008 R_BPF_64_RELATIVE
0000000000013f40  0000000000000008 R_BPF_64_RELATIVE
0000000000013f50  0000000000000008 R_BPF_64_RELATIVE
0000000000013f68  0000000000000008 R_BPF_64_RELATIVE
0000000000013f70  0000000000000008 R_BPF_64_RELATIVE
0000000000013f80  0000000000000008 R_BPF_64_RELATIVE
0000000000013f90  0000000000000008 R_BPF_64_RELATIVE
0000000000013fa0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fb0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fc0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fe8  0000000000000008 R_BPF_64_RELATIVE
0000000000014000  0000000000000008 R_BPF_64_RELATIVE
0000000000014018  0000000000000008 R_BPF_64_RELATIVE
0000000000014028  0000000000000008 R_BPF_64_RELATIVE
0000000000014038  0000000000000008 R_BPF_64_RELATIVE
0000000000014048  0000000000000008 R_BPF_64_RELATIVE
0000000000014058  0000000000000008 R_BPF_64_RELATIVE
0000000000014068  0000000000000008 R_BPF_64_RELATIVE
0000000000014078  0000000000000008 R_BPF_64_RELATIVE
0000000000014090  0000000000000008 R_BPF_64_RELATIVE
00000000000140a0  0000000000000008 R_BPF_64_RELATIVE
00000000000140b0  0000000000000008 R_BPF_64_RELATIVE
00000000000140c0  0000000000000008 R_BPF_64_RELATIVE
00000000000140d0  0000000000000008 R_BPF_64_RELATIVE
00000000000140e0  0000000000000008 R_BPF_64_RELATIVE
00000000000140f0  0000000000000008 R_BPF_64_RELATIVE
0000000000014100  0000000000000008 R_BPF_64_RELATIVE
0000000000014110  0000000000000008 R_BPF_64_RELATIVE
0000000000014120  0000000000000008 R_BPF_64_RELATIVE
0000000000014130  0000000000000008 R_BPF_64_RELATIVE
0000000000014140  0000000000000008 R_BPF_64_RELATIVE
0000000000014150  0000000000000008 R_BPF_64_RELATIVE
0000000000014168  0000000000000008 R_BPF_64_RELATIVE
0000000000014180  0000000000000008 R_BPF_64_RELATIVE
0000000000014198  0000000000000008 R_BPF_64_RELATIVE
00000000000141b0  0000000000000008 R_BPF_64_RELATIVE
0000000000001e40  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002368  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002580  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002b70  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002d68  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000003030  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
00000000000032b0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000003a40  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000003bc0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000004258  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000004e88  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
000000000000acb0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000000410  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000448  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000570  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000005a8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000a30  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000c10  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000d98  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000f60  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001678  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001800  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001af8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001b90  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000029f0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000003308  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000003310  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000051f0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005448  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000056b0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005870  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005a50  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005b58  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000063d0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006650  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006688  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006820  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006858  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006a38  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006aa0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006cd8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006d20  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006d28  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000071b8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000008ae8  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000093d8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009830  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000099d8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009b70  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009d28  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009ed0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000a008  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000a898  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000aa78  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ac68  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ac98  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000aca8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000acc8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000acd0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000acd8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ace0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ad18  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ae48  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ae80  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000afa8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000afe0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b158  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b168  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b178  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b188  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b198  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b318  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b400  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b7f8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b800  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c330  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c410  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c470  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c570  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e020  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e2c8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e8d0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e9b0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ea90  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ebf0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000eff8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f180  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f460  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f4c0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f4f0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f5b0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f720  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000faf8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010a70  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010bc8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010bf8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000acc0  000000040000000a R_BPF_64_32            0000000000004db0 custom_panic
0000000000011950  000000050000000a R_BPF_64_32            0000000000000000 sol_memset_
0000000000009750  000000060000000a R_BPF_64_32            0000000000000000 sol_try_find_program_address
0000000000008e10  000000070000000a R_BPF_64_32            0000000000000000 sol_invoke_signed_rust
000000000000a0f0  000000080000000a R_BPF_64_32            0000000000000000 sol_get_rent_sysvar
0000000000011838  000000090000000a R_BPF_64_32            0000000000000000 sol_memcpy_
0000000000011aa0  0000000a0000000a R_BPF_64_32            0000000000000000 sol_memcmp_

Symbol table '.dynsym' contains 11 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
     2 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
     3 00000000000019e8 12776 FUNC    GLOBAL DEFAULT     1 entrypoint
     4 0000000000004db0   280 FUNC    GLOBAL DEFAULT     1 custom_panic
     5 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memset_
     6 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_try_find_program_address
     7 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_invoke_signed_rust
     8 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_get_rent_sysvar
     9 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
    10 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcmp_

Symbol table '.symtab' contains 1326 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS tictactoe.f9d98a26-cgu.0
     2 0000000000000120    56 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>
     3 0000000000000150     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
     4 0000000000000158     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&u8>
     5 0000000000000160   400 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>
     6 00000000000001c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_3
     7 0000000000000228     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_6
     8 0000000000000288     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_9
     9 00000000000002e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_12
    10 0000000000013ae0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_1
    11 00000000000002f0   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
    12 0000000000000320     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_2
    13 0000000000000408     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_12
    14 0000000000000358     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_5
    15 0000000000000368     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_7
    16 00000000000003a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_9
    17 00000000000003b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_10
    18 00000000000005b0   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
    19 0000000000000418     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_14
    20 0000000000000438     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_13
    21 0000000000000450   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
    22 0000000000000480     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_2
    23 0000000000000568     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_12
    24 00000000000004b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_5
    25 00000000000004c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_7
    26 0000000000000500     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_9
    27 0000000000000510     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_10
    28 0000000000000578     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_14
    29 0000000000000598     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_13
    30 00000000000005f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_12
    31 00000000000006d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_2
    32 0000000000000668     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_7
    33 0000000000000640     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_6
    34 00000000000006b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_9
    35 0000000000000698     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_11
    36 00000000000006c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_10
    37 0000000000000850     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_7
    38 00000000000007f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_5
    39 00000000000007b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_9
    40 0000000000000870     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_11
    41 00000000000007d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_10
    42 0000000000000860     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_8
    43 00000000000126e5     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_2
    44 0000000000000950     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_3
    45 0000000000000980     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_5
    46 0000000000012790    18 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_3
    47 00000000000009c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_7
    48 00000000000009a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_6
    49 00000000000127a2    13 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_5
    50 0000000000000a38     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_5
    51 0000000000000b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_3
    52 0000000000000a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_11
    53 0000000000000aa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_7
    54 0000000000000d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_10
    55 0000000000013ba0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_7
    56 0000000000006128   168 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for u8>::fmt
    57 0000000000000ca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_9
    58 0000000000000bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_4
    59 0000000000000c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB19_6
    60 0000000000013c50    88 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_8
    61 0000000000000da0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_5
    62 0000000000000ed0     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_3
    63 0000000000001000     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_13
    64 0000000000000ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_12
    65 0000000000001018     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_9
    66 0000000000000f48     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_4
    67 0000000000000f68     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_10
    68 00000000000010a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB21_11
    69 00000000000010b0  1152 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize
    70 00000000000010f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_2
    71 0000000000001128     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_4
    72 0000000000001208     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_10
    73 0000000000001198     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_7
    74 00000000000011c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_9
    75 00000000000012a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_12
    76 0000000000013ca8    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_21
    77 0000000000001258     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_11
    78 00000000000012d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_14
    79 0000000000001308     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_16
    80 0000000000001350     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_17
    81 0000000000001380     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_19
    82 00000000000013c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_21
    83 0000000000001400     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_23
    84 0000000000001430     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_25
    85 0000000000001448     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_27
    86 00000000000014b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_29
    87 00000000000014e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_31
    88 0000000000001738     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_11
    89 0000000000001680     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_7
    90 0000000000001770     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_5
    91 0000000000001878     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_9
    92 0000000000001748     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_12
    93 0000000000001760     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_13
    94 0000000000001808     0 NOTYPE  LOCAL  DEFAULT     1 LBB24_8
    95 0000000000001b00     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_4
    96 0000000000001cf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_20
    97 0000000000001b18     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_5
    98 0000000000001c00     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_8
    99 0000000000001b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_7
   100 0000000000001c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_9
   101 0000000000001ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_15
   102 0000000000001cb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_16
   103 0000000000002168     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_33
   104 00000000000021c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_39
   105 00000000000028d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_69
   106 0000000000012ab1    22 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_22
   107 0000000000002b70     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_84
   108 0000000000002c30     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_91
   109 0000000000002bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_86
   110 0000000000002198     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_36
   111 00000000000021f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_42
   112 00000000000029f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_72
   113 0000000000012981    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_23
   114 0000000000002450     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_59
   115 0000000000002288     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_51
   116 0000000000013b40    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_24
   117 0000000000001e78     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_25
   118 00000000000028b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_68
   119 0000000000002408     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_58
   120 0000000000003088     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_108
   121 00000000000020a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_30
   122 00000000000030d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_110
   123 0000000000003d08     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_162
   124 0000000000004ae0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_251
   125 0000000000002228     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_45
   126 0000000000002a18     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_73
   127 0000000000012a30    25 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_25
   128 0000000000002258     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_48
   129 0000000000002a38     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_74
   130 000000000001290c    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_26
   131 0000000000002a58     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_75
   132 0000000000002a78     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_76
   133 0000000000012a61    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_27
   134 0000000000002a98     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_77
   135 0000000000002ab8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_78
   136 000000000001293f    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_28
   137 0000000000002ad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_79
   138 0000000000002af8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_80
   139 00000000000129b6    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_29
   140 0000000000002b18     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_81
   141 0000000000002b38     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_82
   142 00000000000128c2    21 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_30
   143 0000000000013b20    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_31
   144 00000000000023a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_54
   145 0000000000002da8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_101
   146 0000000000002dc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_102
   147 0000000000013b00    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_32
   148 00000000000025b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_62
   149 0000000000003120     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_111
   150 0000000000002908     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_70
   151 0000000000002b58     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_83
   152 0000000000013cb8    48 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_33
   153 0000000000002d58     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_98
   154 0000000000012af1    55 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_34
   155 0000000000013d00    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_35
   156 0000000000013ce8    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_36
   157 000000000001299b    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_37
   158 0000000000012a49    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_38
   159 0000000000012924    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_39
   160 0000000000012a94    29 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_40
   161 0000000000012a7b    25 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_41
   162 0000000000012965    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_42
   163 0000000000012952    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_43
   164 0000000000012a11    31 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_44
   165 00000000000128f9    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_46
   166 00000000000128d7    34 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_47
   167 0000000000012ac7    14 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_48
   168 0000000000002b78     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_85
   169 0000000000002c70     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_94
   170 0000000000002c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_90
   171 0000000000002d48     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_97
   172 0000000000002ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_87
   173 0000000000002d08     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_95
   174 0000000000003318     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_117
   175 0000000000003068     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_107
   176 00000000000030c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_109
   177 0000000000003440     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_120
   178 0000000000003288     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_114
   179 0000000000003aa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_151
   180 0000000000003298     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_115
   181 0000000000012723    31 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_49
   182 0000000000003608     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_123
   183 0000000000003308     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_116
   184 00000000000034a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_121
   185 0000000000004a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_249
   186 00000000000035c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_122
   187 0000000000003c78     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_161
   188 0000000000003650     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_125
   189 0000000000003678     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_127
   190 0000000000003690     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_129
   191 00000000000036c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_131
   192 0000000000003708     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_133
   193 0000000000003770     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_135
   194 0000000000003848     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_137
   195 0000000000003860     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_139
   196 00000000000038a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_141
   197 0000000000003990     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_142
   198 0000000000003d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_163
   199 00000000000039e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_146
   200 0000000000003a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_149
   201 0000000000012742    41 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_50
   202 0000000000003e08     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_170
   203 0000000000003ad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_153
   204 0000000000003af0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_155
   205 0000000000013b60    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_51
   206 0000000000003bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_158
   207 0000000000004160     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_190
   208 00000000000042b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_194
   209 0000000000004ad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_250
   210 0000000000003dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_167
   211 0000000000003df0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_169
   212 0000000000003e50     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_172
   213 0000000000003e80     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_174
   214 0000000000003e98     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_176
   215 0000000000003ec8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_178
   216 0000000000003f00     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_180
   217 0000000000003f48     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_182
   218 00000000000040c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_183
   219 0000000000004b10     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_252
   220 0000000000004120     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_187
   221 0000000000013b80    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_52
   222 0000000000004290     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_193
   223 0000000000004a48     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_248
   224 00000000000042f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_196
   225 0000000000004328     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_198
   226 0000000000004340     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_200
   227 0000000000004370     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_202
   228 00000000000043b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_204
   229 0000000000004428     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_206
   230 0000000000004458     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_208
   231 0000000000004470     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_210
   232 0000000000004498     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_212
   233 00000000000044d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_214
   234 0000000000004560     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_216
   235 00000000000045a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_218
   236 00000000000045c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_220
   237 00000000000045e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_222
   238 00000000000047e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_225
   239 0000000000004840     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_228
   240 00000000000048a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_231
   241 0000000000004900     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_234
   242 0000000000004960     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_237
   243 00000000000049c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_240
   244 0000000000004a00     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_244
   245 0000000000004a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_247
   246 0000000000004ba8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_256
   247 0000000000004c08     0 NOTYPE  LOCAL  DEFAULT     1 LBB29_2
   248 0000000000004c38     0 NOTYPE  LOCAL  DEFAULT     1 LBB29_4
   249 0000000000004c50     0 NOTYPE  LOCAL  DEFAULT     1 LBB29_6
   250 0000000000004c98     0 NOTYPE  LOCAL  DEFAULT     1 LBB29_8
   251 0000000000004ce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB31_2
   252 0000000000004d18     0 NOTYPE  LOCAL  DEFAULT     1 LBB31_4
   253 0000000000004d30     0 NOTYPE  LOCAL  DEFAULT     1 LBB31_6
   254 0000000000004da8     0 NOTYPE  LOCAL  DEFAULT     1 LBB31_10
   255 0000000000004d80     0 NOTYPE  LOCAL  DEFAULT     1 LBB31_9
   256 0000000000013bb0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_53
   257 00000000000061d0    24 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   258 0000000000004ec0     0 NOTYPE  LOCAL  DEFAULT     1 LBB33_3
   259 0000000000004f48     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_4
   260 0000000000005010     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_9
   261 0000000000005068     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_10
   262 0000000000012690     0 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_61
   263 0000000000013c00    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_62
   264 0000000000005168     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_13
   265 0000000000004fb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_7
   266 00000000000050c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_11
   267 0000000000013be0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_63
   268 0000000000005118     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_12
   269 0000000000013bc0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_64
   270 0000000000013c20    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_65
   271 0000000000013c10    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_66
   272 0000000000013bf0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_67
   273 0000000000013bd0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_68
   274 00000000000051f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_5
   275 00000000000053b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_3
   276 0000000000005298     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_12
   277 00000000000055d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_15
   278 0000000000005250     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_13
   279 00000000000052e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_9
   280 00000000000052c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_17
   281 0000000000005570     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_16
   282 00000000000054b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_18
   283 00000000000054d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_11
   284 0000000000005430     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_4
   285 0000000000005450     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_8
   286 0000000000005648     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_19
   287 0000000000005650     0 NOTYPE  LOCAL  DEFAULT     1 LBB36_20
   288 00000000000056b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_5
   289 00000000000057e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_3
   290 0000000000005910     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_13
   291 0000000000005908     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_12
   292 0000000000005930     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_9
   293 0000000000005858     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_4
   294 0000000000005878     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_10
   295 00000000000059c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_11
   296 0000000000005a58     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_6
   297 0000000000005a70     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_7
   298 0000000000005ac8     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_4
   299 0000000000005bc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_9
   300 0000000000005be0     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_10
   301 0000000000005b60     0 NOTYPE  LOCAL  DEFAULT     1 LBB39_8
   302 0000000000005bf0    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::type_id
   303 0000000000005c08    16 FUNC    LOCAL  DEFAULT     1 std::error::Error::backtrace
   304 0000000000005c18    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::cause
   305 0000000000005c30   168 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Write>::write_str
   306 0000000000005c90     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_2
   307 0000000000005cd8   688 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Write>::write_char
   308 0000000000005d68     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_4
   309 0000000000005d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_3
   310 0000000000005f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_12
   311 0000000000005e20     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_6
   312 0000000000005db8     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_7
   313 0000000000005e68     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_8
   314 0000000000005ef0     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_9
   315 0000000000005f38     0 NOTYPE  LOCAL  DEFAULT     1 LBB46_11
   316 0000000000005f88   104 FUNC    LOCAL  DEFAULT     1 core::fmt::Write::write_fmt
   317 0000000000013d20    48 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_69
   318 0000000000005ff0   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   319 0000000000006050     0 NOTYPE  LOCAL  DEFAULT     1 LBB48_2
   320 0000000000006098    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   321 00000000000060b8   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   322 0000000000006190     0 NOTYPE  LOCAL  DEFAULT     1 LBB51_2
   323 0000000000006170     0 NOTYPE  LOCAL  DEFAULT     1 LBB51_5
   324 00000000000061b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB51_4
   325 00000000000061c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB51_3
   326 0000000000012658    14 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_71
   327 0000000000012666    36 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_72
   328 0000000000012690    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_75
   329 00000000000126ac     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_76
   330 00000000000126b5    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_77
   331 00000000000126cd    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_78
   332 00000000000126ee    29 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_79
   333 000000000001270b     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_80
   334 0000000000012714    15 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_81
   335 00000000000127af    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_82
   336 00000000000127c9    37 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_83
   337 00000000000127ee    12 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_84
   338 00000000000127fa    35 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_85
   339 000000000001281d    34 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_86
   340 000000000001283f    61 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_87
   341 000000000001287c    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_88
   342 0000000000012894    46 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_89
   343 0000000000013c30    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_90
   344 0000000000012ad5    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_91
   345 0000000000012b28    75 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_92
   346 0000000000000910   200 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::GameState as core::fmt::Debug>::fmt
   347 00000000000006f0   544 FUNC    LOCAL  DEFAULT     1 tictactoe::instructions::PlayerMove::process
   348 00000000000009d8   872 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize
   349 0000000000000d40   880 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize
   350 0000000000001530  1208 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize
   351 0000000000005198  1216 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize
   352 0000000000004ec8   720 FUNC    LOCAL  DEFAULT     1 <tictactoe::error::TictactoeError as core::fmt::Display>::fmt
   353 0000000000004bd0   208 FUNC    LOCAL  HIDDEN      1 __rg_alloc
   354 0000000000004ca0     8 FUNC    LOCAL  HIDDEN      1 __rg_dealloc
   355 0000000000004ca8   264 FUNC    LOCAL  HIDDEN      1 __rg_realloc
   356 00000000000059c8   552 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize
   357 0000000000005658   880 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize
   358 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS 1mmfwtw9ogskz7n7
   359 00000000000061e8     0 NOTYPE  LOCAL  DEFAULT     1
   360 00000000000061f8     0 NOTYPE  LOCAL  DEFAULT     1
   361 0000000000006208     0 NOTYPE  LOCAL  DEFAULT     1
   362 0000000000006218     0 NOTYPE  LOCAL  DEFAULT     1
   363 00000000000061f8    16 FUNC    LOCAL  DEFAULT     1 __rust_dealloc
   364 00000000000061e8    16 FUNC    LOCAL  DEFAULT     1 __rust_alloc
   365 0000000000006208    16 FUNC    LOCAL  DEFAULT     1 __rust_realloc
   366 0000000000006218    16 FUNC    LOCAL  DEFAULT     1 __rust_alloc_error_handler
   367 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS solana_program.e9ff558d-cgu.0
   368 0000000000006228     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&alloc::vec::Vec<(u64,solana_program::stake_history::StakeHistoryEntry)>>
   369 0000000000006230    56 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>
   370 0000000000006260     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_3
   371 0000000000006268   240 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>
   372 00000000000062b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_3
   373 0000000000006320     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_6
   374 0000000000006290     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_9
   375 00000000000062c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_5
   376 0000000000006340     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_8
   377 00000000000062d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_12
   378 00000000000062f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_15
   379 0000000000012bd8    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_15
   380 0000000000013e30    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_16
   381 0000000000013d50    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_17
   382 00000000000063d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_2
   383 0000000000006480     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_2
   384 0000000000006498     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_3
   385 0000000000006508     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_2
   386 0000000000006520     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_3
   387 0000000000006860   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   388 0000000000006530   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   389 0000000000006560     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_2
   390 0000000000006648     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_12
   391 0000000000006598     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_5
   392 00000000000065a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_7
   393 00000000000065e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_9
   394 00000000000065f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_10
   395 0000000000006658     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_14
   396 0000000000006678     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_13
   397 0000000000006690   464 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   398 00000000000066c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_2
   399 0000000000006818     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_16
   400 00000000000066f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_5
   401 0000000000006708     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_7
   402 0000000000006768     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_9
   403 0000000000006778     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_11
   404 00000000000067b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_13
   405 00000000000067c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_14
   406 0000000000006828     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_18
   407 0000000000006848     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_17
   408 00000000000068a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_12
   409 0000000000006988     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_2
   410 0000000000006918     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_7
   411 00000000000068f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_6
   412 0000000000006968     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_9
   413 0000000000006948     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_11
   414 0000000000006978     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_10
   415 00000000000071e0  6416 FUNC    LOCAL  DEFAULT     1 solana_program::instruction::Instruction::new_with_bincode
   416 0000000000013d90    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_63
   417 0000000000013da0    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_64
   418 0000000000013d68    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_69
   419 0000000000006a18     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_2
   420 0000000000006a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_4
   421 0000000000006a40     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_6
   422 0000000000006aa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_9
   423 0000000000006a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_8
   424 0000000000006ab8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_10
   425 0000000000006bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_14
   426 0000000000006c90     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_15
   427 0000000000006b18     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_12
   428 0000000000006bc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_13
   429 0000000000006e90     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_30
   430 0000000000006ce0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_18
   431 0000000000013d78    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_70
   432 0000000000006d30     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_20
   433 0000000000006d20     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_19
   434 0000000000006d80     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_22
   435 0000000000006db8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_24
   436 0000000000006dd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_26
   437 0000000000006df8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_28
   438 0000000000006f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_32
   439 00000000000071a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_43
   440 0000000000006f98     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_34
   441 0000000000006fd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_36
   442 0000000000007000     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_38
   443 0000000000007020     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_40
   444 0000000000007108     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_42
   445 0000000000007250     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_5
   446 0000000000007290     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_12
   447 0000000000007340     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_25
   448 00000000000072a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_18
   449 0000000000007240     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_4
   450 0000000000007270     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_9
   451 00000000000072b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_16
   452 00000000000072d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_19
   453 00000000000072e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_21
   454 00000000000072e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_20
   455 00000000000072c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_17
   456 0000000000007300     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_23
   457 0000000000007318     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_24
   458 0000000000007370     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_27
   459 0000000000008ad0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_147
   460 0000000000007448     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_33
   461 0000000000007688     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_48
   462 0000000000007790     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_56
   463 0000000000007968     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_65
   464 00000000000073f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_32
   465 00000000000088d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_140
   466 0000000000007728     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_52
   467 00000000000074f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_38
   468 0000000000007518     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_39
   469 0000000000007a80     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_71
   470 0000000000007b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_77
   471 00000000000074a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_37
   472 0000000000008180     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_109
   473 0000000000007758     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_53
   474 0000000000007cb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_83
   475 0000000000007550     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_42
   476 0000000000008910     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_142
   477 0000000000007628     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_46
   478 0000000000007588     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_43
   479 0000000000007e48     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_91
   480 0000000000007f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_97
   481 0000000000008118     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_105
   482 00000000000076e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_51
   483 0000000000008250     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_111
   484 0000000000007778     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_55
   485 0000000000008950     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_144
   486 0000000000008170     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_108
   487 00000000000077e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_58
   488 0000000000008990     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_145
   489 0000000000007828     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_59
   490 0000000000007898     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_61
   491 0000000000007910     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_63
   492 00000000000078d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_62
   493 0000000000008188     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_110
   494 00000000000079b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_67
   495 0000000000007a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_69
   496 00000000000079f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_68
   497 0000000000007ad0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_73
   498 0000000000007b40     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_75
   499 0000000000007b08     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_74
   500 0000000000007be8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_79
   501 0000000000007c58     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_81
   502 0000000000007c20     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_80
   503 0000000000007d00     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_85
   504 0000000000007de8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_89
   505 0000000000007d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_86
   506 00000000000084c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_122
   507 0000000000007e90     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_93
   508 00000000000089c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_92
   509 0000000000007f18     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_95
   510 0000000000007ee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_94
   511 0000000000007fc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_99
   512 00000000000080b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_103
   513 0000000000008008     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_100
   514 0000000000008690     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_130
   515 0000000000008160     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_107
   516 0000000000008298     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_113
   517 00000000000089f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_146
   518 00000000000082e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_114
   519 0000000000008368     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_116
   520 00000000000083d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_118
   521 0000000000008468     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_120
   522 0000000000008428     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_119
   523 0000000000008518     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_124
   524 0000000000008a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_123
   525 00000000000085b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_126
   526 0000000000008630     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_128
   527 00000000000085f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_127
   528 00000000000086e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_132
   529 0000000000008a80     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_131
   530 0000000000008780     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_134
   531 00000000000087f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_136
   532 0000000000008870     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_138
   533 0000000000008838     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_137
   534 0000000000008de8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_4
   535 0000000000008dc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_2
   536 0000000000008be8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_3
   537 0000000000008bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_7
   538 0000000000008db0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_14
   539 0000000000008d10     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_10
   540 0000000000008c80     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_16
   541 0000000000008ed0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_17
   542 0000000000008cd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_18
   543 0000000000008f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_19
   544 0000000000008e60     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_12
   545 0000000000008d70     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_13
   546 0000000000008e98     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_15
   547 0000000000008e40     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_6
   548 0000000000008f50     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_21
   549 0000000000008f38     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_20
   550 0000000000008f98     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_14
   551 0000000000008fc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_8
   552 0000000000009018     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_5
   553 00000000000090b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_27
   554 00000000000091e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_39
   555 0000000000008ff0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_21
   556 0000000000009040     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_18
   557 00000000000090e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_33
   558 0000000000009068     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_11
   559 0000000000009100     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_30
   560 0000000000009090     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_24
   561 0000000000009118     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_36
   562 0000000000009130     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_28
   563 0000000000009148     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_29
   564 0000000000009160     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_34
   565 0000000000009178     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_35
   566 0000000000009190     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_31
   567 00000000000091a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_32
   568 00000000000091c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_37
   569 00000000000091d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_38
   570 0000000000009220     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_43
   571 00000000000092b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_14
   572 00000000000092e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_8
   573 0000000000009348     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_5
   574 0000000000009440     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_28
   575 0000000000009558     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_49
   576 0000000000009428     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_27
   577 0000000000009318     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_21
   578 0000000000009378     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_18
   579 0000000000009458     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_37
   580 00000000000092d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_38
   581 00000000000093e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_11
   582 0000000000009468     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_32
   583 0000000000009308     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_33
   584 0000000000009410     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_24
   585 0000000000009478     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_44
   586 0000000000009338     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_45
   587 0000000000009488     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_29
   588 0000000000009498     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_30
   589 0000000000009368     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_31
   590 00000000000094a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_39
   591 00000000000094b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_40
   592 0000000000009398     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_41
   593 0000000000009518     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_43
   594 00000000000094c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_34
   595 00000000000094d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_35
   596 0000000000009400     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_36
   597 00000000000094e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_46
   598 00000000000094f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_47
   599 0000000000009508     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_48
   600 00000000000096c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_4
   601 00000000000096a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_3
   602 00000000000097a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_2
   603 0000000000009838     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_4
   604 0000000000009928     0 NOTYPE  LOCAL  DEFAULT     1 LBB230_2
   605 0000000000009978     0 NOTYPE  LOCAL  DEFAULT     1 LBB230_4
   606 0000000000013dd8    88 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_209
   607 00000000000099e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_2
   608 0000000000009b78     0 NOTYPE  LOCAL  DEFAULT     1 LBB334_2
   609 0000000000009d30     0 NOTYPE  LOCAL  DEFAULT     1 LBB336_2
   610 0000000000009e38    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::type_id
   611 0000000000009e50    16 FUNC    LOCAL  DEFAULT     1 std::error::Error::backtrace
   612 0000000000009e60    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::cause
   613 0000000000009ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_5
   614 0000000000009f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_3
   615 000000000000a090     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_7
   616 000000000000a010     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_6
   617 000000000000a150     0 NOTYPE  LOCAL  DEFAULT     1 LBB623_2
   618 000000000000a168     0 NOTYPE  LOCAL  DEFAULT     1 LBB623_3
   619 0000000000012b73    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_794
   620 0000000000012b86    17 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_822
   621 0000000000012b97    13 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_845
   622 0000000000012ba4    49 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_851
   623 0000000000013db8    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_866
   624 00000000000071c0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref
   625 00000000000096d0   440 FUNC    LOCAL  DEFAULT     1 solana_program::pubkey::Pubkey::find_program_address
   626 0000000000009e78   552 FUNC    LOCAL  DEFAULT     1 <solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize
   627 00000000000069a0  2080 FUNC    LOCAL  DEFAULT     1 solana_program::entrypoint::deserialize
   628 0000000000009568   360 FUNC    LOCAL  DEFAULT     1 <solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from
   629 0000000000006410   152 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::try_borrow_data
   630 00000000000064a8   136 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::try_borrow_mut_data
   631 0000000000008f58   728 FUNC    LOCAL  DEFAULT     1 solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from
   632 000000000000a0a0   216 FUNC    LOCAL  DEFAULT     1 solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get
   633 0000000000009888   248 FUNC    LOCAL  DEFAULT     1 solana_program::rent::Rent::minimum_balance
   634 0000000000006358   184 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::lamports
   635 0000000000009cd0   360 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::allocate
   636 0000000000008b30  1064 FUNC    LOCAL  DEFAULT     1 solana_program::program::invoke_signed
   637 0000000000009980   408 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::assign
   638 0000000000009b18   440 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::transfer
   639 0000000000008af0    64 FUNC    LOCAL  DEFAULT     1 solana_program::program::invoke
   640 0000000000012bd8     0 OBJECT  LOCAL  DEFAULT     2 solana_program::message::legacy::BUILTIN_PROGRAMS_KEYS
   641 00000000000071c0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::hash::Hash as core::convert::AsRef<[u8]>>::as_ref
   642 0000000000009230   824 FUNC    LOCAL  DEFAULT     1 <solana_program::program_error::ProgramError as core::convert::From<u64>>::from
   643 0000000000009e78   552 FUNC    LOCAL  DEFAULT     1 <solana_program::hash::Hash as borsh::de::BorshDeserialize>::deserialize
   644 00000000000071c0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::blake3::Hash as core::convert::AsRef<[u8]>>::as_ref
   645 00000000000071c0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::keccak::Hash as core::convert::AsRef<[u8]>>::as_ref
   646 0000000000009e78   552 FUNC    LOCAL  DEFAULT     1 <solana_program::blake3::Hash as borsh::de::BorshDeserialize>::deserialize
   647 0000000000009e78   552 FUNC    LOCAL  DEFAULT     1 <solana_program::keccak::Hash as borsh::de::BorshDeserialize>::deserialize
   648 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS blake3.b6ab9703-cgu.0
   649 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS solana_frozen_abi.c0b6b15a-cgu.0
   650 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS bs58.9c04cdba-cgu.0
   651 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS keccak.d4752f62-cgu.0
   652 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS bincode.adfda9c8-cgu.0
   653 000000000000a178     8 FUNC    LOCAL  DEFAULT     1 bincode::config::DefaultOptions::new
   654 000000000000a178     8 FUNC    LOCAL  DEFAULT     1 <bincode::config::DefaultOptions as core::default::Default>::default
   655 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS sha2.46e18164-cgu.0
   656 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS log.abad14e7-cgu.0
   657 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS borsh.c965a638-cgu.0
   658 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS std.76e7c9c4-cgu.0
   659 0000000000012bf0     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.0
   660 0000000000013e50    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.894d23c69aaefe319b308348099da530.113
   661 000000000000ace8    40 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   662 000000000000a1f8  1608 FUNC    LOCAL  DEFAULT     1 std::io::error::ErrorKind::as_str
   663 000000000000a260     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_28
   664 000000000000a2d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_15
   665 000000000000a340     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_9
   666 000000000000a3d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_6
   667 000000000000a828     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_82
   668 0000000000012ee5    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.161
   669 000000000000a2a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_42
   670 000000000000a370     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_36
   671 000000000000a3f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_33
   672 000000000000a540     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_68
   673 0000000000012d73    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.141
   674 000000000000a308     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_49
   675 000000000000a420     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_46
   676 000000000000a560     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_74
   677 0000000000012ce6    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.131
   678 000000000000a3a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_22
   679 000000000000a450     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_19
   680 000000000000a580     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_62
   681 0000000000012e67    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.151
   682 000000000000a760     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_81
   683 000000000000a480     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_53
   684 000000000000a5a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_77
   685 000000000000a5c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_78
   686 0000000000012c7b    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.125
   687 000000000000a4b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_12
   688 000000000000a5d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_58
   689 0000000000012eae    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.156
   690 000000000000a4e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_39
   691 000000000000a5f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_71
   692 0000000000012d30    25 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.136
   693 000000000000a510     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_25
   694 000000000000a618     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_65
   695 0000000000012e0d    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.146
   696 000000000000a638     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_56
   697 000000000000a658     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_57
   698 000000000000a670     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_69
   699 000000000000a690     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_70
   700 000000000000a6b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_75
   701 000000000000a6d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_76
   702 0000000000012cb1    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.128
   703 000000000000a6f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_63
   704 000000000000a710     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_64
   705 0000000000012e2e    15 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.148
   706 000000000000a730     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_79
   707 000000000000a750     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_80
   708 0000000000012c50    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.122
   709 000000000000a770     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_60
   710 000000000000a790     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_61
   711 0000000000012e7e    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.153
   712 000000000000a7b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_72
   713 000000000000a7d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_73
   714 0000000000012d01    20 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.133
   715 000000000000a7f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_66
   716 000000000000a810     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_67
   717 0000000000012d96    25 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.143
   718 0000000000012d7f    23 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.142
   719 0000000000012e72    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.152
   720 0000000000012c9c    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.127
   721 0000000000012c91    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.126
   722 0000000000012ec0    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.157
   723 0000000000012d49    23 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.137
   724 0000000000012e20    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.147
   725 0000000000012ed3    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.160
   726 0000000000012d6a     9 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.140
   727 0000000000012d60    10 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.139
   728 0000000000012cd8    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.130
   729 0000000000012cc7    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.129
   730 0000000000012e52    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.150
   731 0000000000012e3d    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.149
   732 0000000000012c6e    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.124
   733 0000000000012c63    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.123
   734 0000000000012ea1    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.155
   735 0000000000012e93    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.154
   736 0000000000012d22    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.135
   737 0000000000012d15    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.134
   738 0000000000012de7    38 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.145
   739 0000000000012daf    56 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.144
   740 000000000000a8a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_2
   741 000000000000a9e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_3
   742 000000000000aa28     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_5
   743 000000000000aaa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_11
   744 000000000000aa80     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_10
   745 000000000000aac0     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_7
   746 000000000000aab0     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_12
   747 0000000000013e60    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.894d23c69aaefe319b308348099da530.175
   748 000000000000ac38    40 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Display>::fmt
   749 0000000000012f02    46 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.353
   750 000000000000acb0    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::sol_log
   751 0000000000012ef6    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.173
   752 0000000000012f01     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.174
   753 000000000000a840   152 FUNC    LOCAL  DEFAULT     1 std::io::error::Error::_new
   754 000000000000a1a8    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Display>::fmt
   755 000000000000a1d0    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Debug>::fmt
   756 000000000000a180    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as std::error::Error>::description
   757 000000000000a8d8   864 FUNC    LOCAL  DEFAULT     1 <std::io::error::Error as core::fmt::Display>::fmt
   758 000000000000acc0    24 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::panic
   759 000000000000ac60    16 FUNC    LOCAL  DEFAULT     1 std::process::abort
   760 000000000000acd8    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::abort_internal
   761 000000000000ac70    48 FUNC    LOCAL  DEFAULT     1 rust_oom
   762 000000000000aca0    16 FUNC    LOCAL  DEFAULT     1 rust_begin_unwind
   763 000000000000a180    40 FUNC    LOCAL  DEFAULT     1 <std::sys_common::wtf8::Wtf8Buf as core::ops::deref::Deref>::deref
   764 000000000000a180    40 FUNC    LOCAL  DEFAULT     1 <std::sys_common::wtf8::Wtf8Buf as core::ops::deref::DerefMut>::deref_mut
   765 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS panic_abort.848a2d84-cgu.0
   766 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS hashbrown.a672f3dc-cgu.0
   767 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS alloc.55e0798c-cgu.0
   768 000000000000ad10    16 FUNC    LOCAL  DEFAULT     1 core::ops::function::FnOnce::call_once
   769 000000000000ad20     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&u8>
   770 000000000000ad28   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   771 000000000000ad58     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
   772 000000000000ae40     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_12
   773 000000000000ad90     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_5
   774 000000000000ada0     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_7
   775 000000000000add8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_9
   776 000000000000ade8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_10
   777 000000000000afe8   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   778 000000000000ae50     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_14
   779 000000000000ae70     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_13
   780 000000000000ae88   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   781 000000000000aeb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_2
   782 000000000000afa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_12
   783 000000000000aef0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_5
   784 000000000000af00     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_7
   785 000000000000af38     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_9
   786 000000000000af48     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_10
   787 000000000000afb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_14
   788 000000000000afd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_13
   789 000000000000b028     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_12
   790 000000000000b110     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_2
   791 000000000000b0a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_7
   792 000000000000b078     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_6
   793 000000000000b0f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_9
   794 000000000000b0d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_11
   795 000000000000b100     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_10
   796 0000000000012f4c    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.1
   797 0000000000013e90    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.2
   798 000000000000b190    16 FUNC    LOCAL  DEFAULT     1 core::intrinsics::const_eval_select
   799 000000000000b230     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_3
   800 000000000000b200     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_2
   801 000000000000b2c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_10
   802 000000000000b270     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_7
   803 000000000000b320     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_13
   804 000000000000b2a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_9
   805 0000000000013ee0    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.60
   806 000000000000b408     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_15
   807 0000000000012f5d    51 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.14
   808 0000000000013ec0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.58
   809 0000000000013ea8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.16
   810 000000000000b410   680 FUNC    LOCAL  DEFAULT     1 alloc::string::String::push
   811 000000000000b4a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_4
   812 000000000000b470     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_3
   813 000000000000b6b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_12
   814 000000000000b558     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_6
   815 000000000000b4f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_7
   816 000000000000b5a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_8
   817 000000000000b628     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_9
   818 000000000000b670     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_11
   819 000000000000b6b8   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   820 000000000000b718     0 NOTYPE  LOCAL  DEFAULT     1 LBB60_2
   821 000000000000b760    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   822 000000000000b780   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   823 0000000000012f30    28 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.0
   824 0000000000012f90    24 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.15
   825 000000000000b1a0   624 FUNC    LOCAL  DEFAULT     1 alloc::fmt::format
   826 000000000000b128    56 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::capacity_overflow
   827 000000000000b160    16 FUNC    LOCAL  DEFAULT     1 alloc::alloc::handle_alloc_error
   828 000000000000b180    16 FUNC    LOCAL  HIDDEN      1 __rg_oom
   829 000000000000b170    16 FUNC    LOCAL  DEFAULT     1 alloc::alloc::handle_alloc_error::rt_error
   830 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS core.817fea1d-cgu.0
   831 000000000000b7f0    24 FUNC    LOCAL  DEFAULT     1 core::ops::function::FnOnce::call_once
   832 000000000000b808     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>
   833 0000000000012fa8     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.100
   834 0000000000013f10    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.130
   835 000000000000b810   280 FUNC    LOCAL  DEFAULT     1 <core::ops::range::Range<Idx> as core::fmt::Debug>::fmt
   836 000000000000f7d8  1336 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for usize>::fmt
   837 000000000000b8d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_2
   838 000000000000b8e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_3
   839 000000000000b928    24 FUNC    LOCAL  DEFAULT     1 <T as core::any::Any>::type_id
   840 0000000000012faa    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.137
   841 000000000000b980  1496 FUNC    LOCAL  DEFAULT     1 core::char::methods::<impl char>::escape_debug_ext
   842 000000000000ba00     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_4
   843 000000000000bf30     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_14
   844 000000000000b9f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_10
   845 000000000000b9e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_8
   846 000000000000ba18     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_7
   847 000000000000bce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_12
   848 000000000000bf10     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_13
   849 000000000000bd10     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_11
   850 000000000000ba40     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_16
   851 000000000000bb10     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_28
   852 000000000000bd20     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_18
   853 000000000000ba80     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_27
   854 000000000000bdb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_19
   855 00000000000135b8   438 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.355
   856 00000000000134a4    84 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.353
   857 00000000000134f8   192 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.354
   858 000000000000f1e8   784 FUNC    LOCAL  DEFAULT     1 core::unicode::printable::check
   859 0000000000013375   303 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.352
   860 0000000000013205    80 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.350
   861 0000000000013255   288 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.351
   862 0000000000010870    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   863 0000000000013f20    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.167
   864 0000000000012fe1    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.169
   865 000000000000c298     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_6
   866 000000000000c090     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_3
   867 0000000000010808   104 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   868 0000000000013f70    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.172
   869 000000000000c198     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_5
   870 00000000000107d0    56 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   871 0000000000013f90    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.176
   872 0000000000013f50    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.168
   873 00000000000107a0    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Debug>::fmt
   874 0000000000013fb0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.191
   875 0000000000013004     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.190
   876 0000000000013023   200 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.228
   877 000000000000c728     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_4
   878 000000000000c9a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_22
   879 000000000000c680     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_3
   880 000000000000c698     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_26
   881 000000000000c6c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_25
   882 000000000000ca38     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_28
   883 000000000000c768     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_6
   884 000000000000c7e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_20
   885 000000000000c778     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_7
   886 000000000000c820     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_10
   887 000000000000c830     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_11
   888 000000000000c880     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_13
   889 000000000000c8c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_16
   890 000000000000c8d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_17
   891 000000000000c920     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_19
   892 000000000000c9e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_24
   893 000000000000c9f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_29
   894 000000000000ca28     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_30
   895 000000000000ca40     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_31
   896 000000000000caa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_2
   897 000000000000cac8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_4
   898 000000000000cab8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_3
   899 000000000000caf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_12
   900 000000000000cb48     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_6
   901 000000000000cc10     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_14
   902 000000000000d170   192 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral::write_prefix
   903 000000000000cd30     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_51
   904 000000000000ccf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_17
   905 000000000000cbb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_11
   906 000000000000cbd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_8
   907 000000000000cb90     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_10
   908 000000000000ccd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_16
   909 000000000000cc40     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_18
   910 000000000000cd48     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_27
   911 000000000000cc70     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_20
   912 000000000000ce40     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_23
   913 000000000000ce28     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_52
   914 000000000000cdc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_30
   915 000000000000cff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_33
   916 000000000000cfe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_53
   917 000000000000ce80     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_24
   918 000000000000cec0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_26
   919 000000000000cf70     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_46
   920 000000000000cfc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_49
   921 000000000000cfd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_50
   922 000000000000d030     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_34
   923 000000000000d070     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_36
   924 000000000000d0e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_39
   925 000000000000d140     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_42
   926 000000000000d1e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_2
   927 000000000000d1f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_3
   928 000000000000d1f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_4
   929 000000000000d258     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_2
   930 000000000000d268     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_5
   931 000000000000d580     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_3
   932 000000000000d4a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_27
   933 000000000000d3f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_13
   934 000000000000d2c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_7
   935 000000000000d480     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_16
   936 000000000000d3d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_12
   937 000000000000d620     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_17
   938 000000000000d500     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_32
   939 000000000000d548     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_29
   940 000000000000d4e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_31
   941 000000000000d5c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_35
   942 000000000000d5b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_4
   943 000000000000d680     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_38
   944 000000000000d668     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_49
   945 000000000000d818     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_21
   946 000000000000d7d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_20
   947 000000000000d828     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_22
   948 000000000000d6b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_39
   949 000000000000d6f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_41
   950 000000000000d758     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_44
   951 000000000000d7b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_47
   952 000000000000d838     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_24
   953 000000000000d850     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_26
   954 000000000000e348     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_61
   955 000000000000e2d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_12
   956 000000000000d9f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_3
   957 000000000000db80     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_13
   958 000000000000da80     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_5
   959 000000000000db98     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_14
   960 000000000000db38     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_7
   961 000000000000e260     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_10
   962 000000000000e298     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_11
   963 000000000000dc30     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_17
   964 000000000000dcd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_29
   965 000000000000dbf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_16
   966 000000000000dc78     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_22
   967 000000000000dcc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_28
   968 000000000000dc98     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_25
   969 000000000000dca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_26
   970 000000000000dcb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_27
   971 000000000000dfe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_38
   972 000000000000dd48     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_34
   973 000000000000dd10     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_33
   974 000000000000dd68     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_39
   975 000000000000dfb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_37
   976 000000000000e060     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_60
   977 000000000000e070     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_42
   978 000000000000dde0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_41
   979 000000000000de10     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_64
   980 000000000000de80     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_62
   981 000000000000dea8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_84
   982 000000000000ded0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_69
   983 000000000000def0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_72
   984 000000000000e0b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_44
   985 000000000000de90     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_77
   986 000000000000dea0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_83
   987 000000000000df78     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_82
   988 000000000000df90     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_75
   989 000000000000df40     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_74
   990 0000000000013fe8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.239
   991 000000000000e028     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_53
   992 000000000000e038     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_58
   993 000000000000e040     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_59
   994 000000000000e0f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_45
   995 000000000000e248     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_81
   996 000000000000e210     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_78
   997 000000000000e140     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_49
   998 000000000000e160     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_54
   999 000000000000e1e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_52
  1000 000000000000e1b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_56
  1001 0000000000014000    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.240
  1002 000000000000e688     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_23
  1003 000000000000e450     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_4
  1004 000000000000e4d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_3
  1005 000000000000e698     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_5
  1006 000000000000e460     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_24
  1007 000000000000e498     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_39
  1008 000000000000e468     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_25
  1009 000000000000e4a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_41
  1010 000000000000e4b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_42
  1011 000000000000e500     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_26
  1012 000000000000e570     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_31
  1013 000000000000e590     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_34
  1014 000000000000e618     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_40
  1015 000000000000e630     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_37
  1016 000000000000e5e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_36
  1017 000000000000e650     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_16
  1018 000000000000e660     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_21
  1019 000000000000e668     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_22
  1020 000000000000e6e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_8
  1021 000000000000e730     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_12
  1022 000000000000e750     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_17
  1023 000000000000e7d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_15
  1024 000000000000e7a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_19
  1025 0000000000013fd0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.224
  1026 0000000000013021     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.227
  1027 0000000000014018    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.251
  1028 0000000000014038    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.253
  1029 0000000000014058    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.256
  1030 000000000000eb20     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_7
  1031 000000000000eb60     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_2
  1032 000000000000eb00     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_6
  1033 0000000000013180     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.313
  1034 000000000000ebf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_10
  1035 000000000000ece8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_37
  1036 000000000000ede0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_14
  1037 0000000000014078    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.292
  1038 000000000000ec08     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_12
  1039 0000000000014090    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.316
  1040 000000000000f158     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_13
  1041 00000000000140c0    64 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.320
  1042 000000000000ee38     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_18
  1043 000000000000ee00     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_17
  1044 000000000000ee40     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_19
  1045 000000000000eeb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_23
  1046 000000000000ee50     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_20
  1047 000000000000ee68     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_22
  1048 000000000000efd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_30
  1049 000000000000ee98     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_36
  1050 000000000000eeb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_24
  1051 000000000000f000     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_27
  1052 000000000000ef38     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_28
  1053 000000000000f188     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_31
  1054 0000000000012fb5    43 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.165
  1055 000000000000f010     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_35
  1056 0000000000014100    80 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.324
  1057 000000000000f360     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_3
  1058 000000000000f290     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_2
  1059 000000000000f270     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_6
  1060 000000000000f2c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_8
  1061 000000000000f498     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_10
  1062 000000000000f4c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_11
  1063 000000000000f2e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_13
  1064 000000000000f330     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_16
  1065 000000000000f320     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_15
  1066 000000000000f3e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_5
  1067 000000000000f3b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_17
  1068 000000000000f3b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_21
  1069 000000000000f428     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_18
  1070 000000000000f468     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_20
  1071 0000000000014168    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.349
  1072 0000000000014150    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.348
  1073 000000000000f5b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_1
  1074 000000000000f518     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_3
  1075 000000000000f5e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_6
  1076 000000000000f728     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_1
  1077 000000000000f688     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_3
  1078 000000000000f758     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_6
  1079 000000000000f988     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_2
  1080 000000000000f810     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_10
  1081 000000000000f9a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_20
  1082 000000000000f930     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_14
  1083 000000000000f838     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_12
  1084 000000000000fbb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_16
  1085 000000000000f938     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_15
  1086 000000000000f950     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_18
  1087 000000000000fc48     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_17
  1088 000000000000fc98     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_19
  1089 000000000000fb00     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_3
  1090 000000000000fa38     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_21
  1091 000000000000f9c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_23
  1092 000000000000fb38     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_8
  1093 000000000000fad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_7
  1094 000000000000fa70     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_5
  1095 000000000000fd00     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_9
  1096 000000000000fd78     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_3
  1097 000000000000fde8     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_4
  1098 000000000000fe10     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_5
  1099 000000000000ffe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_4
  1100 000000000000fef0     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_2
  1101 0000000000010040     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_6
  1102 000000000000fff0     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_5
  1103 0000000000010008     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_8
  1104 00000000000100d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_7
  1105 0000000000010128     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_9
  1106 0000000000010178     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_11
  1107 00000000000102d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_4
  1108 00000000000101d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_2
  1109 0000000000010328     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_6
  1110 00000000000102d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_5
  1111 00000000000102f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_8
  1112 00000000000103c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_7
  1113 0000000000010410     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_9
  1114 00000000000105a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_4
  1115 00000000000104b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_2
  1116 0000000000010600     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_6
  1117 00000000000105b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_5
  1118 00000000000105c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_8
  1119 0000000000010698     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_7
  1120 00000000000106e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_9
  1121 0000000000013796     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.540
  1122 00000000000141b0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.362
  1123 0000000000014198    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.361
  1124 0000000000014180    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.360
  1125 0000000000010900     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_1
  1126 00000000000108d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_3
  1127 00000000000108e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_4
  1128 00000000000109a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_6
  1129 000000000001379c   128 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS
  1130 0000000000010990     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_5
  1131 0000000000010bd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_8
  1132 00000000000109f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_10
  1133 0000000000010a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_12
  1134 0000000000010aa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_16
  1135 0000000000010a78     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_15
  1136 0000000000010b90     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_23
  1137 000000000001381c   707 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::OFFSETS
  1138 0000000000010b20     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_18
  1139 0000000000010ba0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_20
  1140 0000000000010b88     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_22
  1141 0000000000012fa8     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.129
  1142 0000000000012fe0     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.166
  1143 0000000000012fed     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.170
  1144 0000000000012fee     3 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.171
  1145 0000000000012ff1    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.175
  1146 0000000000013003     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.188
  1147 0000000000013006    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.223
  1148 00000000000130eb    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.232
  1149 0000000000013106    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.249
  1150 0000000000013118    34 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.250
  1151 000000000001313a    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.254
  1152 0000000000013150    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.255
  1153 000000000001315d    35 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.290
  1154 0000000000013185    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.314
  1155 0000000000013190    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.315
  1156 00000000000131a6    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.317
  1157 00000000000131b4    38 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.321
  1158 00000000000131da     6 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.323
  1159 00000000000131e0    37 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.347
  1160 000000000001376e    40 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.356
  1161 000000000000d860    48 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::write_str
  1162 0000000000010488   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt
  1163 000000000000c578    88 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::new
  1164 000000000000c478   256 FUNC    LOCAL  DEFAULT     1 core::result::unwrap_failed
  1165 0000000000010488   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt
  1166 000000000000d890    96 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::write_fmt
  1167 000000000000c5d0  1144 FUNC    LOCAL  DEFAULT     1 core::fmt::write
  1168 000000000000d8f0    32 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_lower_hex
  1169 000000000000d910    32 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_upper_hex
  1170 000000000000f668   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt
  1171 000000000000f4f8   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt
  1172 000000000000fd10   376 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt
  1173 000000000000bf58   848 FUNC    LOCAL  DEFAULT     1 <core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt
  1174 0000000000010760    64 FUNC    LOCAL  DEFAULT     1 <core::fmt::Error as core::fmt::Debug>::fmt
  1175 000000000000c2a8   144 FUNC    LOCAL  DEFAULT     1 core::panicking::panic
  1176 00000000000101b0   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt
  1177 000000000000e8d8   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_end_index_len_fail
  1178 000000000000c338   224 FUNC    LOCAL  DEFAULT     1 core::panicking::panic_bounds_check
  1179 000000000000c418    96 FUNC    LOCAL  DEFAULT     1 core::panicking::panic_fmt
  1180 000000000000e358    48 FUNC    LOCAL  DEFAULT     1 <str as core::fmt::Display>::fmt
  1181 000000000000fe88   808 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt
  1182 000000000000e9b8   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_index_order_fail
  1183 000000000000e7f8   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_start_index_len_fail
  1184 000000000000d930  2600 FUNC    LOCAL  DEFAULT     1 <str as core::fmt::Debug>::fmt
  1185 000000000000b940    64 FUNC    LOCAL  DEFAULT     1 <core::cell::BorrowError as core::fmt::Debug>::fmt
  1186 000000000000e388  1136 FUNC    LOCAL  DEFAULT     1 <char as core::fmt::Debug>::fmt
  1187 000000000000d230  1584 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad
  1188 00000000000108a0   864 FUNC    LOCAL  DEFAULT     1 core::unicode::unicode_data::grapheme_extend::lookup
  1189 000000000000ea98  1872 FUNC    LOCAL  DEFAULT     1 core::str::slice_error_fail
  1190 000000000000ca48  1832 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral
  1191 000000000000f4f8   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::LowerHex for i8>::fmt
  1192 000000000000f668   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::UpperHex for i8>::fmt
  1193 000000000000d860    48 FUNC    LOCAL  DEFAULT     1 <core::fmt::Formatter as core::fmt::Write>::write_str
  1194 000000000000d890    96 FUNC    LOCAL  DEFAULT     1 <core::fmt::Formatter as core::fmt::Write>::write_fmt
  1195 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.103
  1196 0000000000010c00    16 FUNC    LOCAL  HIDDEN      1 __adddf3
  1197 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.130
  1198 0000000000010ce0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_7
  1199 0000000000010cc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1200 0000000000010cd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
  1201 0000000000010c10   216 FUNC    LOCAL  HIDDEN      1 __fixunsdfdi
  1202 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.14
  1203 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.165
  1204 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.167
  1205 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.181
  1206 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.200
  1207 0000000000010df0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_9
  1208 0000000000010db8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1209 0000000000010de8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_8
  1210 0000000000010ce8   288 FUNC    LOCAL  HIDDEN      1 __gtdf2
  1211 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.27
  1212 0000000000010f10     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_9
  1213 0000000000010ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1214 0000000000010f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_8
  1215 0000000000010e08   288 FUNC    LOCAL  HIDDEN      1 __gedf2
  1216 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.3
  1217 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.39
  1218 0000000000010f28    16 FUNC    LOCAL  HIDDEN      1 __muldf3
  1219 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.164
  1220 0000000000011110     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_3
  1221 0000000000011008     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_2
  1222 00000000000110a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_23
  1223 0000000000011190     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_24
  1224 00000000000110f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_26
  1225 00000000000111a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_25
  1226 0000000000011350     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_35
  1227 00000000000111e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_5
  1228 0000000000011168     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_7
  1229 0000000000011210     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_6
  1230 0000000000011278     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_28
  1231 00000000000112e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_30
  1232 0000000000011230     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_9
  1233 0000000000011358     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_8
  1234 0000000000011340     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_32
  1235 0000000000011328     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_33
  1236 0000000000011348     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_34
  1237 0000000000011368     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_13
  1238 00000000000113b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_11
  1239 0000000000011400     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_17
  1240 00000000000115a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_20
  1241 0000000000011568     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_19
  1242 0000000000011708     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_22
  1243 0000000000010f38  2048 FUNC    LOCAL  HIDDEN      1 compiler_builtins::float::mul::__muldf3
  1244 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.55
  1245 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.58
  1246 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.71
  1247 0000000000011830     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_2
  1248 00000000000117e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
  1249 0000000000011798     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1250 0000000000011840     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
  1251 00000000000117e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_7
  1252 0000000000011940     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
  1253 0000000000011908     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_6
  1254 00000000000118d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_5
  1255 0000000000011958     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_3
  1256 0000000000011910     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_7
  1257 0000000000011a80     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_2
  1258 0000000000011a10     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_7
  1259 00000000000119d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_4
  1260 0000000000011a08     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_6
  1261 0000000000011ab0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_12
  1262 0000000000011a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_10
  1263 0000000000011a20     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_9
  1264 0000000000011850   280 FUNC    LOCAL  HIDDEN      1 memset
  1265 0000000000011968   352 FUNC    LOCAL  HIDDEN      1 memcmp
  1266 0000000000011738   280 FUNC    LOCAL  HIDDEN      1 memcpy
  1267 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.8
  1268 0000000000011fc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_18
  1269 0000000000011b38     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_2
  1270 0000000000011b50     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_4
  1271 0000000000011b60     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_6
  1272 0000000000011bc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_7
  1273 0000000000011d50     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_10
  1274 0000000000011d28     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_9
  1275 0000000000011ef8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_14
  1276 0000000000011ed0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_13
  1277 0000000000012010     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_21
  1278 0000000000011f48     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_15
  1279 0000000000011f60     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_16
  1280 00000000000120c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_26
  1281 0000000000012280     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_29
  1282 00000000000120a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_25
  1283 0000000000011fe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_20
  1284 00000000000123d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_38
  1285 0000000000012448     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_42
  1286 0000000000012078     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_24
  1287 00000000000122a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_30
  1288 00000000000122d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_31
  1289 00000000000122e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_32
  1290 0000000000012350     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_35
  1291 0000000000012328     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_34
  1292 0000000000012438     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_40
  1293 00000000000123c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_37
  1294 0000000000012440     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_41
  1295 00000000000123f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_39
  1296 0000000000012458     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_44
  1297 0000000000012450     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_43
  1298 0000000000012488     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_47
  1299 0000000000011ac8  2528 FUNC    LOCAL  HIDDEN      1 compiler_builtins::float::add::__adddf3
  1300 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.81
  1301 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.87
  1302 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.95
  1303 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS divdi3.c
  1304 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS floatundidf.c
  1305 00000000000124a8   136 FUNC    LOCAL  HIDDEN      1 __floatundidf
  1306 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS floatundisf.c
  1307 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS lshrti3.c
  1308 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS muloti4.c
  1309 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS multi3.c
  1310 0000000000012530   296 FUNC    LOCAL  HIDDEN      1 __multi3
  1311 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivmoddi4.c
  1312 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivti3.c
  1313 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivmodti4.c
  1314 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS umodti3.c
  1315 00000000000141c8     0 NOTYPE  LOCAL  HIDDEN      4 _DYNAMIC
  1316 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
  1317 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
  1318 00000000000019e8 12776 FUNC    GLOBAL DEFAULT     1 entrypoint
  1319 0000000000004db0   280 FUNC    GLOBAL DEFAULT     1 custom_panic
  1320 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memset_
  1321 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_try_find_program_address
  1322 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_invoke_signed_rust
  1323 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_get_rent_sysvar
  1324 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
  1325 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcmp_
There are no section groups in this file.

/Volumes/d/dev/mp/projects/breakpoint/tictactoe/program/target/bpfel-unknown-unknown/release/tictactoe.so	file format elf64-bpf

Disassembly of section .text

0000000000000120 <core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>>
      36	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      37	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB0_3>
      38	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
      39	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB0_3>
      40	b7 03 00 00 01 00 00 00	r3 = 0x1
      41	85 10 00 00 15 0c 00 00	call 0xc15 ; <__rust_dealloc>

0000000000000150 <LBB0_3>
      42	95 00 00 00 00 00 00 00	exit

0000000000000158 <core::ptr::drop_in_place<&u8>>
      43	95 00 00 00 00 00 00 00	exit

0000000000000160 <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
      44	bf 16 00 00 00 00 00 00	r6 = r1
      45	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
      46	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      47	07 02 00 00 ff ff ff ff	r2 += -0x1
      48	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      49	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_3>
      50	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      51	07 02 00 00 ff ff ff ff	r2 += -0x1
      52	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      53	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_3>
      54	b7 02 00 00 20 00 00 00	r2 = 0x20
      55	b7 03 00 00 08 00 00 00	r3 = 0x8
      56	85 10 00 00 06 0c 00 00	call 0xc06 ; <__rust_dealloc>

00000000000001c8 <LBB2_3>
      57	79 61 10 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x10)
      58	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      59	07 02 00 00 ff ff ff ff	r2 += -0x1
      60	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      61	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_6>
      62	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      63	07 02 00 00 ff ff ff ff	r2 += -0x1
      64	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      65	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_6>
      66	b7 02 00 00 28 00 00 00	r2 = 0x28
      67	b7 03 00 00 08 00 00 00	r3 = 0x8
      68	85 10 00 00 fa 0b 00 00	call 0xbfa ; <__rust_dealloc>

0000000000000228 <LBB2_6>
      69	79 61 38 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x38)
      70	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      71	07 02 00 00 ff ff ff ff	r2 += -0x1
      72	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      73	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_9>
      74	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      75	07 02 00 00 ff ff ff ff	r2 += -0x1
      76	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      77	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_9>
      78	b7 02 00 00 20 00 00 00	r2 = 0x20
      79	b7 03 00 00 08 00 00 00	r3 = 0x8
      80	85 10 00 00 ee 0b 00 00	call 0xbee ; <__rust_dealloc>

0000000000000288 <LBB2_9>
      81	79 61 40 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x40)
      82	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      83	07 02 00 00 ff ff ff ff	r2 += -0x1
      84	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      85	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_12>
      86	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      87	07 02 00 00 ff ff ff ff	r2 += -0x1
      88	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      89	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_12>
      90	b7 02 00 00 28 00 00 00	r2 = 0x28
      91	b7 03 00 00 08 00 00 00	r3 = 0x8
      92	85 10 00 00 e2 0b 00 00	call 0xbe2 ; <__rust_dealloc>

00000000000002e8 <LBB2_12>
      93	95 00 00 00 00 00 00 00	exit

00000000000002f0 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
      94	bf 16 00 00 00 00 00 00	r6 = r1
      95	bf 24 00 00 00 00 00 00	r4 = r2
      96	0f 34 00 00 00 00 00 00	r4 += r3
      97	b7 01 00 00 01 00 00 00	r1 = 0x1
      98	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB10_2>
      99	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000320 <LBB10_2>
     100	57 01 00 00 01 00 00 00	r1 &= 0x1
     101	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB10_12>
     102	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
     103	bf 17 00 00 00 00 00 00	r7 = r1
     104	67 07 00 00 01 00 00 00	r7 <<= 0x1
     105	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB10_5>
     106	bf 47 00 00 00 00 00 00	r7 = r4

0000000000000358 <LBB10_5>
     107	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB10_7>
     108	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000000368 <LBB10_7>
     109	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB10_9>
     110	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
     111	b7 03 00 00 01 00 00 00	r3 = 0x1
     112	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
     113	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     114	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
     115	05 00 02 00 00 00 00 00	goto +0x2 <LBB10_10>

00000000000003a0 <LBB10_9>
     116	b7 01 00 00 00 00 00 00	r1 = 0x0
     117	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

00000000000003b0 <LBB10_10>
     118	bf a1 00 00 00 00 00 00	r1 = r10
     119	07 01 00 00 d0 ff ff ff	r1 += -0x30
     120	bf a4 00 00 00 00 00 00	r4 = r10
     121	07 04 00 00 e8 ff ff ff	r4 += -0x18
     122	bf 72 00 00 00 00 00 00	r2 = r7
     123	b7 03 00 00 01 00 00 00	r3 = 0x1
     124	85 10 00 00 39 00 00 00	call 0x39 ; <alloc::raw_vec::finish_grow>
     125	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     126	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB10_14>
     127	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     128	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB10_13>

0000000000000408 <LBB10_12>
     129	85 10 00 00 a3 15 00 00	call 0x15a3 ; <alloc::raw_vec::capacity_overflow>
     130	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000418 <LBB10_14>
     131	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     132	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     133	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     134	95 00 00 00 00 00 00 00	exit

0000000000000438 <LBB10_13>
     135	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     136	85 10 00 00 a3 15 00 00	call 0x15a3 ; <alloc::alloc::handle_alloc_error>
     137	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000450 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
     138	bf 16 00 00 00 00 00 00	r6 = r1
     139	bf 23 00 00 00 00 00 00	r3 = r2
     140	07 03 00 00 01 00 00 00	r3 += 0x1
     141	b7 01 00 00 01 00 00 00	r1 = 0x1
     142	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB11_2>
     143	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000480 <LBB11_2>
     144	57 01 00 00 01 00 00 00	r1 &= 0x1
     145	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB11_12>
     146	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
     147	bf 17 00 00 00 00 00 00	r7 = r1
     148	67 07 00 00 01 00 00 00	r7 <<= 0x1
     149	2d 37 01 00 00 00 00 00	if r7 > r3 goto +0x1 <LBB11_5>
     150	bf 37 00 00 00 00 00 00	r7 = r3

00000000000004b8 <LBB11_5>
     151	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB11_7>
     152	b7 07 00 00 08 00 00 00	r7 = 0x8

00000000000004c8 <LBB11_7>
     153	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB11_9>
     154	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
     155	b7 03 00 00 01 00 00 00	r3 = 0x1
     156	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
     157	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     158	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
     159	05 00 02 00 00 00 00 00	goto +0x2 <LBB11_10>

0000000000000500 <LBB11_9>
     160	b7 01 00 00 00 00 00 00	r1 = 0x0
     161	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

0000000000000510 <LBB11_10>
     162	bf a1 00 00 00 00 00 00	r1 = r10
     163	07 01 00 00 d0 ff ff ff	r1 += -0x30
     164	bf a4 00 00 00 00 00 00	r4 = r10
     165	07 04 00 00 e8 ff ff ff	r4 += -0x18
     166	bf 72 00 00 00 00 00 00	r2 = r7
     167	b7 03 00 00 01 00 00 00	r3 = 0x1
     168	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
     169	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     170	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB11_14>
     171	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     172	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB11_13>

0000000000000568 <LBB11_12>
     173	85 10 00 00 77 15 00 00	call 0x1577 ; <alloc::raw_vec::capacity_overflow>
     174	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000578 <LBB11_14>
     175	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     176	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     177	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     178	95 00 00 00 00 00 00 00	exit

0000000000000598 <LBB11_13>
     179	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     180	85 10 00 00 77 15 00 00	call 0x1577 ; <alloc::alloc::handle_alloc_error>
     181	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000005b0 <alloc::raw_vec::finish_grow>
     182	bf 38 00 00 00 00 00 00	r8 = r3
     183	bf 27 00 00 00 00 00 00	r7 = r2
     184	bf 16 00 00 00 00 00 00	r6 = r1
     185	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB13_12>
     186	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     187	b7 01 00 00 01 00 00 00	r1 = 0x1
     188	b7 07 00 00 00 00 00 00	r7 = 0x0
     189	05 00 1d 00 00 00 00 00	goto +0x1d <LBB13_2>

00000000000005f0 <LBB13_12>
     190	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
     191	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB13_7>
     192	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
     193	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB13_6>
     194	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB13_9>
     195	bf 71 00 00 00 00 00 00	r1 = r7
     196	bf 82 00 00 00 00 00 00	r2 = r8
     197	85 10 00 00 77 0b 00 00	call 0xb77 ; <__rust_alloc>
     198	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB13_11>
     199	05 00 11 00 00 00 00 00	goto +0x11 <LBB13_10>

0000000000000640 <LBB13_6>
     200	bf 83 00 00 00 00 00 00	r3 = r8
     201	bf 74 00 00 00 00 00 00	r4 = r7
     202	85 10 00 00 76 0b 00 00	call 0xb76 ; <__rust_realloc>
     203	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB13_11>
     204	05 00 0c 00 00 00 00 00	goto +0xc <LBB13_10>

0000000000000668 <LBB13_7>
     205	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB13_9>
     206	bf 71 00 00 00 00 00 00	r1 = r7
     207	bf 82 00 00 00 00 00 00	r2 = r8
     208	85 10 00 00 6c 0b 00 00	call 0xb6c ; <__rust_alloc>
     209	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB13_11>
     210	05 00 06 00 00 00 00 00	goto +0x6 <LBB13_10>

0000000000000698 <LBB13_11>
     211	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     212	b7 01 00 00 01 00 00 00	r1 = 0x1
     213	bf 87 00 00 00 00 00 00	r7 = r8
     214	05 00 04 00 00 00 00 00	goto +0x4 <LBB13_2>

00000000000006b8 <LBB13_9>
     215	b7 07 00 00 00 00 00 00	r7 = 0x0
     216	bf 80 00 00 00 00 00 00	r0 = r8

00000000000006c8 <LBB13_10>
     217	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
     218	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000006d8 <LBB13_2>
     219	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     220	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
     221	95 00 00 00 00 00 00 00	exit

00000000000006f0 <tictactoe::instructions::PlayerMove::process>
     222	bf 47 00 00 00 00 00 00	r7 = r4
     223	bf 16 00 00 00 00 00 00	r6 = r1
     224	b7 01 00 00 b1 c7 71 00	r1 = 0x71c7b1
     225	71 24 01 00 00 00 00 00	r4 = *(u8 *)(r2 + 0x1)
     226	25 04 27 00 08 00 00 00	if r4 > 0x8 goto +0x27 <LBB14_7>
     227	bf 78 00 00 00 00 00 00	r8 = r7
     228	0f 48 00 00 00 00 00 00	r8 += r4
     229	71 84 40 00 00 00 00 00	r4 = *(u8 *)(r8 + 0x40)
     230	55 04 23 00 00 00 00 00	if r4 != 0x0 goto +0x23 <LBB14_7>
     231	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
     232	71 29 00 00 00 00 00 00	r9 = *(u8 *)(r2 + 0x0)
     233	bf 92 00 00 00 00 00 00	r2 = r9
     234	55 02 14 00 01 00 00 00	if r2 != 0x1 goto +0x14 <LBB14_5>
     235	bf 72 00 00 00 00 00 00	r2 = r7
     236	b7 03 00 00 20 00 00 00	r3 = 0x20
     237	85 10 00 00 3f 22 00 00	call 0x223f ; <memcmp>
     238	b7 01 00 00 ac c7 71 00	r1 = 0x71c7ac
     239	67 00 00 00 20 00 00 00	r0 <<= 0x20
     240	77 00 00 00 20 00 00 00	r0 >>= 0x20
     241	55 00 18 00 00 00 00 00	if r0 != 0x0 goto +0x18 <LBB14_7>
     242	b7 01 00 00 b2 c7 71 00	r1 = 0x71c7b2
     243	71 72 4a 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x4a)
     244	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB14_9>
     245	05 00 14 00 00 00 00 00	goto +0x14 <LBB14_7>

00000000000007b0 <LBB14_9>
     246	07 08 00 00 40 00 00 00	r8 += 0x40
     247	73 98 00 00 00 00 00 00	*(u8 *)(r8 + 0x0) = r9
     248	71 71 40 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x40)
     249	55 01 14 00 00 00 00 00	if r1 != 0x0 goto +0x14 <LBB14_11>

00000000000007d0 <LBB14_10>
     250	71 71 4a 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x4a)
     251	a7 01 00 00 01 00 00 00	r1 ^= 0x1
     252	73 17 4a 00 00 00 00 00	*(u8 *)(r7 + 0x4a) = r1
     253	b7 01 00 00 14 00 00 00	r1 = 0x14
     254	05 00 0d 00 00 00 00 00	goto +0xd <LBB14_8>

00000000000007f8 <LBB14_5>
     255	bf 72 00 00 00 00 00 00	r2 = r7
     256	07 02 00 00 20 00 00 00	r2 += 0x20
     257	b7 03 00 00 20 00 00 00	r3 = 0x20
     258	85 10 00 00 2a 22 00 00	call 0x222a ; <memcmp>
     259	b7 01 00 00 ac c7 71 00	r1 = 0x71c7ac
     260	67 00 00 00 20 00 00 00	r0 <<= 0x20
     261	77 00 00 00 20 00 00 00	r0 >>= 0x20
     262	55 00 03 00 00 00 00 00	if r0 != 0x0 goto +0x3 <LBB14_7>
     263	b7 01 00 00 b2 c7 71 00	r1 = 0x71c7b2
     264	71 72 4a 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x4a)
     265	15 02 ec ff 01 00 00 00	if r2 == 0x1 goto -0x14 <LBB14_9>

0000000000000850 <LBB14_7>
     266	63 16 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r1
     267	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000860 <LBB14_8>
     268	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
     269	95 00 00 00 00 00 00 00	exit

0000000000000870 <LBB14_11>
     270	71 71 41 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x41)
     271	15 01 ea ff 00 00 00 00	if r1 == 0x0 goto -0x16 <LBB14_10>
     272	71 71 42 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x42)
     273	15 01 e8 ff 00 00 00 00	if r1 == 0x0 goto -0x18 <LBB14_10>
     274	71 71 43 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x43)
     275	15 01 e6 ff 00 00 00 00	if r1 == 0x0 goto -0x1a <LBB14_10>
     276	71 71 44 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x44)
     277	15 01 e4 ff 00 00 00 00	if r1 == 0x0 goto -0x1c <LBB14_10>
     278	71 71 45 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x45)
     279	15 01 e2 ff 00 00 00 00	if r1 == 0x0 goto -0x1e <LBB14_10>
     280	71 71 46 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x46)
     281	15 01 e0 ff 00 00 00 00	if r1 == 0x0 goto -0x20 <LBB14_10>
     282	71 71 47 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x47)
     283	15 01 de ff 00 00 00 00	if r1 == 0x0 goto -0x22 <LBB14_10>
     284	71 71 48 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x48)
     285	15 01 dc ff 00 00 00 00	if r1 == 0x0 goto -0x24 <LBB14_10>
     286	b7 01 00 00 03 00 00 00	r1 = 0x3
     287	73 17 49 00 00 00 00 00	*(u8 *)(r7 + 0x49) = r1
     288	b7 01 00 00 14 00 00 00	r1 = 0x14
     289	05 00 ea ff 00 00 00 00	goto -0x16 <LBB14_8>

0000000000000910 <<tictactoe::accounts::GameState as core::fmt::Debug>::fmt>
     290	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
     291	65 01 06 00 01 00 00 00	if r1 s> 0x1 goto +0x6 <LBB18_3>
     292	15 01 0b 00 00 00 00 00	if r1 == 0x0 goto +0xb <LBB18_5>
     293	bf 21 00 00 00 00 00 00	r1 = r2
     294	18 02 00 00 90 27 01 00 00 00 00 00 00 00 00 00	r2 = 0x12790 ll
     296	b7 03 00 00 12 00 00 00	r3 = 0x12
     297	05 00 0f 00 00 00 00 00	goto +0xf <LBB18_7>

0000000000000950 <LBB18_3>
     298	15 01 0a 00 02 00 00 00	if r1 == 0x2 goto +0xa <LBB18_6>
     299	bf 21 00 00 00 00 00 00	r1 = r2
     300	18 02 00 00 78 27 01 00 00 00 00 00 00 00 00 00	r2 = 0x12778 ll
     302	b7 03 00 00 08 00 00 00	r3 = 0x8
     303	05 00 09 00 00 00 00 00	goto +0x9 <LBB18_7>

0000000000000980 <LBB18_5>
     304	bf 21 00 00 00 00 00 00	r1 = r2
     305	18 02 00 00 a2 27 01 00 00 00 00 00 00 00 00 00	r2 = 0x127a2 ll
     307	b7 03 00 00 0d 00 00 00	r3 = 0xd
     308	05 00 04 00 00 00 00 00	goto +0x4 <LBB18_7>

00000000000009a8 <LBB18_6>
     309	bf 21 00 00 00 00 00 00	r1 = r2
     310	18 02 00 00 8c 27 01 00 00 00 00 00 00 00 00 00	r2 = 0x1278c ll
     312	b7 03 00 00 04 00 00 00	r3 = 0x4

00000000000009c8 <LBB18_7>
     313	85 10 00 00 d2 19 00 00	call 0x19d2 ; <<core::fmt::Formatter as core::fmt::Write>::write_str>
     314	95 00 00 00 00 00 00 00	exit

00000000000009d8 <<tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize>
     315	bf 16 00 00 00 00 00 00	r6 = r1
     316	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
     317	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB19_5>
     318	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     319	b7 02 00 00 01 00 00 00	r2 = 0x1
     320	85 10 00 00 fc 0a 00 00	call 0xafc ; <__rust_alloc>
     321	bf 07 00 00 00 00 00 00	r7 = r0
     322	55 07 2d 00 00 00 00 00	if r7 != 0x0 goto +0x2d <LBB19_3>
     323	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     324	b7 02 00 00 01 00 00 00	r2 = 0x1
     325	85 10 00 00 e6 14 00 00	call 0x14e6 ; <alloc::alloc::handle_alloc_error>
     326	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000a38 <LBB19_5>
     327	07 03 00 00 ff ff ff ff	r3 += -0x1
     328	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
     329	71 41 00 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x0)
     330	7b 32 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r3
     331	07 04 00 00 01 00 00 00	r4 += 0x1
     332	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
     333	73 1a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r1
     334	b7 02 00 00 04 00 00 00	r2 = 0x4
     335	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB19_11>
     336	05 00 04 00 00 00 00 00	goto +0x4 <LBB19_7>

0000000000000a88 <LBB19_11>
     337	b7 02 00 00 00 00 00 00	r2 = 0x0
     338	73 26 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r2
     339	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
     340	05 00 52 00 00 00 00 00	goto +0x52 <LBB19_10>

0000000000000aa8 <LBB19_7>
     341	bf a1 00 00 00 00 00 00	r1 = r10
     342	07 01 00 00 f0 ff ff ff	r1 += -0x10
     343	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     344	b7 01 00 00 00 00 00 00	r1 = 0x0
     345	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     346	b7 07 00 00 01 00 00 00	r7 = 0x1
     347	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
     348	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
     349	18 01 00 00 a0 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ba0 ll
     351	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     352	18 01 00 00 28 61 00 00 00 00 00 00 00 00 00 00	r1 = 0x6128 ll
     354	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     355	bf a1 00 00 00 00 00 00	r1 = r10
     356	07 01 00 00 a7 ff ff ff	r1 += -0x59
     357	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     358	bf a1 00 00 00 00 00 00	r1 = r10
     359	07 01 00 00 a8 ff ff ff	r1 += -0x58
     360	bf a2 00 00 00 00 00 00	r2 = r10
     361	07 02 00 00 c0 ff ff ff	r2 += -0x40
     362	85 10 00 00 c9 14 00 00	call 0x14c9 ; <alloc::fmt::format>
     363	b7 01 00 00 18 00 00 00	r1 = 0x18
     364	b7 02 00 00 08 00 00 00	r2 = 0x8
     365	85 10 00 00 cf 0a 00 00	call 0xacf ; <__rust_alloc>
     366	55 00 26 00 00 00 00 00	if r0 != 0x0 goto +0x26 <LBB19_9>
     367	05 00 0f 00 00 00 00 00	goto +0xf <LBB19_4>

0000000000000b80 <LBB19_3>
     368	b7 01 00 00 75 74 00 00	r1 = 0x7475
     369	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     370	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     372	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     373	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     375	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     376	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     378	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     379	b7 01 00 00 18 00 00 00	r1 = 0x18
     380	b7 02 00 00 08 00 00 00	r2 = 0x8
     381	85 10 00 00 bf 0a 00 00	call 0xabf ; <__rust_alloc>
     382	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB19_6>

0000000000000bf8 <LBB19_4>
     383	b7 01 00 00 18 00 00 00	r1 = 0x18
     384	b7 02 00 00 08 00 00 00	r2 = 0x8
     385	85 10 00 00 aa 14 00 00	call 0x14aa ; <alloc::alloc::handle_alloc_error>
     386	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000c18 <LBB19_6>
     387	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     388	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     389	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     390	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     391	bf a1 00 00 00 00 00 00	r1 = r10
     392	07 01 00 00 80 ff ff ff	r1 += -0x80
     393	b7 02 00 00 14 00 00 00	r2 = 0x14
     394	bf 03 00 00 00 00 00 00	r3 = r0
     395	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
     397	85 10 00 00 7a 13 00 00	call 0x137a ; <std::io::error::Error::_new>
     398	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     399	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
     400	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     401	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     402	b7 01 00 00 01 00 00 00	r1 = 0x1
     403	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     404	05 00 12 00 00 00 00 00	goto +0x12 <LBB19_10>

0000000000000ca8 <LBB19_9>
     405	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     406	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     407	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     408	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     409	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     410	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
     411	bf a1 00 00 00 00 00 00	r1 = r10
     412	07 01 00 00 90 ff ff ff	r1 += -0x70
     413	b7 02 00 00 14 00 00 00	r2 = 0x14
     414	bf 03 00 00 00 00 00 00	r3 = r0
     415	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
     417	85 10 00 00 66 13 00 00	call 0x1366 ; <std::io::error::Error::_new>
     418	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
     419	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
     420	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     421	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     422	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

0000000000000d38 <LBB19_10>
     423	95 00 00 00 00 00 00 00	exit

0000000000000d40 <<tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize>
     424	bf 16 00 00 00 00 00 00	r6 = r1
     425	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
     426	55 01 09 00 00 00 00 00	if r1 != 0x0 goto +0x9 <LBB21_5>
     427	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     428	b7 02 00 00 01 00 00 00	r2 = 0x1
     429	85 10 00 00 8f 0a 00 00	call 0xa8f ; <__rust_alloc>
     430	bf 07 00 00 00 00 00 00	r7 = r0
     431	55 07 2a 00 00 00 00 00	if r7 != 0x0 goto +0x2a <LBB21_3>
     432	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     433	b7 02 00 00 01 00 00 00	r2 = 0x1
     434	85 10 00 00 79 14 00 00	call 0x1479 ; <alloc::alloc::handle_alloc_error>
     435	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000da0 <LBB21_5>
     436	07 01 00 00 ff ff ff ff	r1 += -0x1
     437	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
     438	71 43 00 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x0)
     439	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
     440	07 04 00 00 01 00 00 00	r4 += 0x1
     441	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
     442	b7 01 00 00 00 00 00 00	r1 = 0x0
     443	73 3a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r3
     444	b7 02 00 00 00 00 00 00	r2 = 0x0
     445	15 03 42 00 00 00 00 00	if r3 == 0x0 goto +0x42 <LBB21_13>
     446	15 03 40 00 01 00 00 00	if r3 == 0x1 goto +0x40 <LBB21_12>
     447	bf a1 00 00 00 00 00 00	r1 = r10
     448	07 01 00 00 f0 ff ff ff	r1 += -0x10
     449	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     450	b7 01 00 00 00 00 00 00	r1 = 0x0
     451	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     452	b7 07 00 00 01 00 00 00	r7 = 0x1
     453	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
     454	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
     455	18 01 00 00 a0 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ba0 ll
     457	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     458	18 01 00 00 28 61 00 00 00 00 00 00 00 00 00 00	r1 = 0x6128 ll
     460	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     461	bf a1 00 00 00 00 00 00	r1 = r10
     462	07 01 00 00 a7 ff ff ff	r1 += -0x59
     463	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     464	bf a1 00 00 00 00 00 00	r1 = r10
     465	07 01 00 00 a8 ff ff ff	r1 += -0x58
     466	bf a2 00 00 00 00 00 00	r2 = r10
     467	07 02 00 00 c0 ff ff ff	r2 += -0x40
     468	85 10 00 00 5f 14 00 00	call 0x145f ; <alloc::fmt::format>
     469	b7 01 00 00 18 00 00 00	r1 = 0x18
     470	b7 02 00 00 08 00 00 00	r2 = 0x8
     471	85 10 00 00 65 0a 00 00	call 0xa65 ; <__rust_alloc>
     472	55 00 2a 00 00 00 00 00	if r0 != 0x0 goto +0x2a <LBB21_9>
     473	05 00 0f 00 00 00 00 00	goto +0xf <LBB21_4>

0000000000000ed0 <LBB21_3>
     474	b7 01 00 00 75 74 00 00	r1 = 0x7475
     475	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     476	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     478	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     479	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     481	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     482	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     484	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     485	b7 01 00 00 18 00 00 00	r1 = 0x18
     486	b7 02 00 00 08 00 00 00	r2 = 0x8
     487	85 10 00 00 55 0a 00 00	call 0xa55 ; <__rust_alloc>
     488	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB21_10>

0000000000000f48 <LBB21_4>
     489	b7 01 00 00 18 00 00 00	r1 = 0x18
     490	b7 02 00 00 08 00 00 00	r2 = 0x8
     491	85 10 00 00 40 14 00 00	call 0x1440 ; <alloc::alloc::handle_alloc_error>
     492	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000f68 <LBB21_10>
     493	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     494	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     495	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     496	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     497	bf a1 00 00 00 00 00 00	r1 = r10
     498	07 01 00 00 80 ff ff ff	r1 += -0x80
     499	b7 02 00 00 14 00 00 00	r2 = 0x14
     500	bf 03 00 00 00 00 00 00	r3 = r0
     501	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
     503	85 10 00 00 10 13 00 00	call 0x1310 ; <std::io::error::Error::_new>
     504	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     505	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
     506	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     507	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     508	b7 01 00 00 01 00 00 00	r1 = 0x1
     509	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     510	05 00 16 00 00 00 00 00	goto +0x16 <LBB21_11>

0000000000000ff8 <LBB21_12>
     511	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000001000 <LBB21_13>
     512	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     513	73 26 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r2
     514	05 00 12 00 00 00 00 00	goto +0x12 <LBB21_11>

0000000000001018 <LBB21_9>
     515	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     516	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     517	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     518	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     519	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     520	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
     521	bf a1 00 00 00 00 00 00	r1 = r10
     522	07 01 00 00 90 ff ff ff	r1 += -0x70
     523	b7 02 00 00 14 00 00 00	r2 = 0x14
     524	bf 03 00 00 00 00 00 00	r3 = r0
     525	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
     527	85 10 00 00 f8 12 00 00	call 0x12f8 ; <std::io::error::Error::_new>
     528	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
     529	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
     530	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     531	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     532	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

00000000000010a8 <LBB21_11>
     533	95 00 00 00 00 00 00 00	exit

00000000000010b0 <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
     534	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
     535	79 38 00 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x0)
     536	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
     537	79 39 08 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x8)
     538	b7 07 00 00 20 00 00 00	r7 = 0x20
     539	bf 96 00 00 00 00 00 00	r6 = r9
     540	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_2>
     541	b7 06 00 00 20 00 00 00	r6 = 0x20

00000000000010f0 <LBB23_2>
     542	bf 81 00 00 00 00 00 00	r1 = r8
     543	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
     544	bf 63 00 00 00 00 00 00	r3 = r6
     545	85 10 00 00 c5 20 00 00	call 0x20c5 ; <memcpy>
     546	b7 01 00 00 02 17 00 00	r1 = 0x1702
     547	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_4>
     548	b7 01 00 00 04 17 00 00	r1 = 0x1704

0000000000001128 <LBB23_4>
     549	0f 68 00 00 00 00 00 00	r8 += r6
     550	1f 69 00 00 00 00 00 00	r9 -= r6
     551	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
     552	7b 92 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r9
     553	7b 82 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r8
     554	bf 12 00 00 00 00 00 00	r2 = r1
     555	57 02 00 00 06 00 00 00	r2 &= 0x6
     556	55 02 14 00 04 00 00 00	if r2 != 0x4 goto +0x14 <LBB23_10>
     557	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     558	07 02 00 00 20 00 00 00	r2 += 0x20
     559	b7 07 00 00 20 00 00 00	r7 = 0x20
     560	bf 96 00 00 00 00 00 00	r6 = r9
     561	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_7>
     562	b7 06 00 00 20 00 00 00	r6 = 0x20

0000000000001198 <LBB23_7>
     563	bf 81 00 00 00 00 00 00	r1 = r8
     564	bf 63 00 00 00 00 00 00	r3 = r6
     565	85 10 00 00 b1 20 00 00	call 0x20b1 ; <memcpy>
     566	b7 01 00 00 02 17 00 00	r1 = 0x1702
     567	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_9>
     568	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000011c8 <LBB23_9>
     569	0f 68 00 00 00 00 00 00	r8 += r6
     570	1f 69 00 00 00 00 00 00	r9 -= r6
     571	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
     572	7b 92 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r9
     573	7b 82 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r8
     574	bf 12 00 00 00 00 00 00	r2 = r1
     575	57 02 00 00 06 00 00 00	r2 &= 0x6
     576	15 02 14 00 04 00 00 00	if r2 == 0x4 goto +0x14 <LBB23_12>

0000000000001208 <LBB23_10>
     577	18 02 00 00 a8 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13ca8 ll
     579	bf 13 00 00 00 00 00 00	r3 = r1
     580	77 03 00 00 08 00 00 00	r3 >>= 0x8
     581	18 04 00 00 a8 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13ca8 ll
     583	67 04 00 00 38 00 00 00	r4 <<= 0x38
     584	4f 43 00 00 00 00 00 00	r3 |= r4
     585	77 02 00 00 08 00 00 00	r2 >>= 0x8
     586	79 a5 e8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x18)

0000000000001258 <LBB23_11>
     587	57 01 00 00 ff 00 00 00	r1 &= 0xff
     588	bf 34 00 00 00 00 00 00	r4 = r3
     589	67 04 00 00 08 00 00 00	r4 <<= 0x8
     590	4f 14 00 00 00 00 00 00	r4 |= r1
     591	7b 45 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r4
     592	77 03 00 00 38 00 00 00	r3 >>= 0x38
     593	67 02 00 00 08 00 00 00	r2 <<= 0x8
     594	4f 32 00 00 00 00 00 00	r2 |= r3
     595	7b 25 08 00 00 00 00 00	*(u64 *)(r5 + 0x8) = r2
     596	95 00 00 00 00 00 00 00	exit

00000000000012a8 <LBB23_12>
     597	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     598	07 02 00 00 40 00 00 00	r2 += 0x40
     599	b7 07 00 00 09 00 00 00	r7 = 0x9
     600	bf 96 00 00 00 00 00 00	r6 = r9
     601	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_14>
     602	b7 06 00 00 09 00 00 00	r6 = 0x9

00000000000012d8 <LBB23_14>
     603	bf 81 00 00 00 00 00 00	r1 = r8
     604	bf 63 00 00 00 00 00 00	r3 = r6
     605	85 10 00 00 89 20 00 00	call 0x2089 ; <memcpy>
     606	b7 01 00 00 02 17 00 00	r1 = 0x1702
     607	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB23_16>
     608	b7 01 00 00 04 17 00 00	r1 = 0x1704

0000000000001308 <LBB23_16>
     609	0f 68 00 00 00 00 00 00	r8 += r6
     610	1f 69 00 00 00 00 00 00	r9 -= r6
     611	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)
     612	7b 97 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r9
     613	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     614	bf 12 00 00 00 00 00 00	r2 = r1
     615	57 02 00 00 06 00 00 00	r2 &= 0x6
     616	15 02 01 00 04 00 00 00	if r2 == 0x4 goto +0x1 <LBB23_17>
     617	05 00 d7 ff 00 00 00 00	goto -0x29 <LBB23_10>

0000000000001350 <LBB23_17>
     618	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     619	71 11 49 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x49)
     620	73 1a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r1
     621	b7 06 00 00 01 00 00 00	r6 = 0x1
     622	55 09 01 00 00 00 00 00	if r9 != 0x0 goto +0x1 <LBB23_19>
     623	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000001380 <LBB23_19>
     624	bf a2 00 00 00 00 00 00	r2 = r10
     625	07 02 00 00 fe ff ff ff	r2 += -0x2
     626	bf 81 00 00 00 00 00 00	r1 = r8
     627	bf 63 00 00 00 00 00 00	r3 = r6
     628	85 10 00 00 72 20 00 00	call 0x2072 ; <memcpy>
     629	b7 01 00 00 02 17 00 00	r1 = 0x1702
     630	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB23_21>
     631	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000013c0 <LBB23_21>
     632	0f 68 00 00 00 00 00 00	r8 += r6
     633	1f 69 00 00 00 00 00 00	r9 -= r6
     634	7b 97 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r9
     635	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     636	bf 12 00 00 00 00 00 00	r2 = r1
     637	57 02 00 00 06 00 00 00	r2 &= 0x6
     638	15 02 01 00 04 00 00 00	if r2 == 0x4 goto +0x1 <LBB23_23>
     639	05 00 c1 ff 00 00 00 00	goto -0x3f <LBB23_10>

0000000000001400 <LBB23_23>
     640	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     641	71 12 4a 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x4a)
     642	b7 06 00 00 01 00 00 00	r6 = 0x1
     643	b7 01 00 00 01 00 00 00	r1 = 0x1
     644	15 02 01 00 01 00 00 00	if r2 == 0x1 goto +0x1 <LBB23_25>
     645	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000001430 <LBB23_25>
     646	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r1
     647	55 09 01 00 00 00 00 00	if r9 != 0x0 goto +0x1 <LBB23_27>
     648	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000001448 <LBB23_27>
     649	bf a2 00 00 00 00 00 00	r2 = r10
     650	07 02 00 00 ff ff ff ff	r2 += -0x1
     651	bf 81 00 00 00 00 00 00	r1 = r8
     652	bf 63 00 00 00 00 00 00	r3 = r6
     653	85 10 00 00 59 20 00 00	call 0x2059 ; <memcpy>
     654	0f 68 00 00 00 00 00 00	r8 += r6
     655	bf 91 00 00 00 00 00 00	r1 = r9
     656	1f 61 00 00 00 00 00 00	r1 -= r6
     657	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     658	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     659	b7 01 00 00 02 17 00 00	r1 = 0x1702
     660	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB23_29>
     661	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000014b0 <LBB23_29>
     662	bf 12 00 00 00 00 00 00	r2 = r1
     663	57 02 00 00 06 00 00 00	r2 &= 0x6
     664	79 a5 e8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x18)
     665	55 02 02 00 04 00 00 00	if r2 != 0x4 goto +0x2 <LBB23_31>
     666	b7 01 00 00 04 00 00 00	r1 = 0x4
     667	05 00 af ff 00 00 00 00	goto -0x51 <LBB23_11>

00000000000014e0 <LBB23_31>
     668	18 02 00 00 a8 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13ca8 ll
     670	bf 13 00 00 00 00 00 00	r3 = r1
     671	77 03 00 00 08 00 00 00	r3 >>= 0x8
     672	18 04 00 00 a8 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13ca8 ll
     674	67 04 00 00 38 00 00 00	r4 <<= 0x38
     675	4f 43 00 00 00 00 00 00	r3 |= r4
     676	77 02 00 00 08 00 00 00	r2 >>= 0x8
     677	05 00 a5 ff 00 00 00 00	goto -0x5b <LBB23_11>

0000000000001530 <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
     678	bf 27 00 00 00 00 00 00	r7 = r2
     679	bf 16 00 00 00 00 00 00	r6 = r1
     680	bf a1 00 00 00 00 00 00	r1 = r10
     681	07 01 00 00 d0 ff ff ff	r1 += -0x30
     682	85 10 00 00 24 11 00 00	call 0x1124 ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
     683	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     684	15 01 3a 00 01 00 00 00	if r1 == 0x1 goto +0x3a <LBB24_11>
     685	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2c)
     686	63 1a b3 ff 00 00 00 00	*(u32 *)(r10 - 0x4d) = r1
     687	61 a1 d1 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2f)
     688	63 1a b0 ff 00 00 00 00	*(u32 *)(r10 - 0x50) = r1
     689	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     690	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
     691	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x10)
     692	73 1a a8 ff 00 00 00 00	*(u8 *)(r10 - 0x58) = r1
     693	79 a9 e0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x20)
     694	79 a8 d8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x28)
     695	bf a1 00 00 00 00 00 00	r1 = r10
     696	07 01 00 00 d0 ff ff ff	r1 += -0x30
     697	bf 72 00 00 00 00 00 00	r2 = r7
     698	85 10 00 00 14 11 00 00	call 0x1114 ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
     699	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     700	15 01 2a 00 01 00 00 00	if r1 == 0x1 goto +0x2a <LBB24_11>
     701	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2c)
     702	63 1a cb ff 00 00 00 00	*(u32 *)(r10 - 0x35) = r1
     703	61 a1 d1 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2f)
     704	63 1a c8 ff 00 00 00 00	*(u32 *)(r10 - 0x38) = r1
     705	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     706	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
     707	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x10)
     708	73 1a c0 ff 00 00 00 00	*(u8 *)(r10 - 0x40) = r1
     709	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
     710	25 01 09 00 08 00 00 00	if r1 > 0x8 goto +0x9 <LBB24_7>
     711	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     712	b7 02 00 00 01 00 00 00	r2 = 0x1
     713	85 10 00 00 73 09 00 00	call 0x973 ; <__rust_alloc>
     714	bf 07 00 00 00 00 00 00	r7 = r0
     715	55 07 22 00 00 00 00 00	if r7 != 0x0 goto +0x22 <LBB24_5>
     716	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     717	b7 02 00 00 01 00 00 00	r2 = 0x1
     718	85 10 00 00 5d 13 00 00	call 0x135d ; <alloc::alloc::handle_alloc_error>
     719	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001680 <LBB24_7>
     720	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     721	7b 2a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r2
     722	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
     723	7b 2a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r2
     724	07 01 00 00 f7 ff ff ff	r1 += -0x9
     725	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     726	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
     727	bf 12 00 00 00 00 00 00	r2 = r1
     728	07 02 00 00 09 00 00 00	r2 += 0x9
     729	7b 27 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r2
     730	69 12 07 00 00 00 00 00	r2 = *(u16 *)(r1 + 0x7)
     731	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
     732	61 12 03 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x3)
     733	63 2a fb ff 00 00 00 00	*(u32 *)(r10 - 0x5) = r2
     734	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
     735	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 0x8) = r1
     736	bf a1 00 00 00 00 00 00	r1 = r10
     737	07 01 00 00 d0 ff ff ff	r1 += -0x30
     738	bf 72 00 00 00 00 00 00	r2 = r7
     739	85 10 00 00 57 fe ff ff	call -0x1a9 ; <<tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize>
     740	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     741	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB24_11>
     742	05 00 28 00 00 00 00 00	goto +0x28 <LBB24_9>

0000000000001738 <LBB24_11>
     743	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     744	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)

0000000000001748 <LBB24_12>
     745	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     746	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     747	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000001760 <LBB24_13>
     748	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     749	95 00 00 00 00 00 00 00	exit

0000000000001770 <LBB24_5>
     750	b7 01 00 00 75 74 00 00	r1 = 0x7475
     751	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     752	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     754	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     755	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     757	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     758	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     760	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     761	b7 01 00 00 18 00 00 00	r1 = 0x18
     762	b7 02 00 00 08 00 00 00	r2 = 0x8
     763	85 10 00 00 41 09 00 00	call 0x941 ; <__rust_alloc>
     764	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB24_8>
     765	b7 01 00 00 18 00 00 00	r1 = 0x18
     766	b7 02 00 00 08 00 00 00	r2 = 0x8
     767	85 10 00 00 2c 13 00 00	call 0x132c ; <alloc::alloc::handle_alloc_error>
     768	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001808 <LBB24_8>
     769	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     770	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     771	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     772	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     773	bf a1 00 00 00 00 00 00	r1 = r10
     774	07 01 00 00 88 ff ff ff	r1 += -0x78
     775	b7 02 00 00 14 00 00 00	r2 = 0x14
     776	bf 03 00 00 00 00 00 00	r3 = r0
     777	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
     779	85 10 00 00 fc 11 00 00	call 0x11fc ; <std::io::error::Error::_new>
     780	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
     781	79 a2 90 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x70)
     782	05 00 da ff 00 00 00 00	goto -0x26 <LBB24_12>

0000000000001878 <LBB24_9>
     783	71 a1 d1 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x2f)
     784	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
     785	bf a1 00 00 00 00 00 00	r1 = r10
     786	07 01 00 00 d0 ff ff ff	r1 += -0x30
     787	bf 72 00 00 00 00 00 00	r2 = r7
     788	85 10 00 00 93 fe ff ff	call -0x16d ; <<tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize>
     789	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     790	15 01 d0 ff 01 00 00 00	if r1 == 0x1 goto -0x30 <LBB24_11>
     791	71 a1 d1 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x2f)
     792	71 a2 a8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x58)
     793	73 26 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r2
     794	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
     795	7b 26 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r2
     796	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
     797	7b 26 38 00 00 00 00 00	*(u64 *)(r6 + 0x38) = r2
     798	71 a2 c0 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x40)
     799	73 26 40 00 00 00 00 00	*(u8 *)(r6 + 0x40) = r2
     800	61 a2 f8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x8)
     801	63 2a 98 ff 00 00 00 00	*(u32 *)(r10 - 0x68) = r2
     802	61 a2 fb ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x5)
     803	63 2a 9b ff 00 00 00 00	*(u32 *)(r10 - 0x65) = r2
     804	61 a2 b0 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x50)
     805	61 a3 b3 ff 00 00 00 00	r3 = *(u32 *)(r10 - 0x4d)
     806	7b 96 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r9
     807	7b 86 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r8
     808	63 36 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r3
     809	63 26 01 00 00 00 00 00	*(u32 *)(r6 + 0x1) = r2
     810	61 a2 cb ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x35)
     811	61 a3 c8 ff 00 00 00 00	r3 = *(u32 *)(r10 - 0x38)
     812	79 a4 70 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x90)
     813	7b 46 30 00 00 00 00 00	*(u64 *)(r6 + 0x30) = r4
     814	79 a4 78 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x88)
     815	7b 46 28 00 00 00 00 00	*(u64 *)(r6 + 0x28) = r4
     816	63 36 21 00 00 00 00 00	*(u32 *)(r6 + 0x21) = r3
     817	63 26 24 00 00 00 00 00	*(u32 *)(r6 + 0x24) = r2
     818	61 a2 98 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x68)
     819	63 26 41 00 00 00 00 00	*(u32 *)(r6 + 0x41) = r2
     820	61 a2 9b ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x65)
     821	63 26 44 00 00 00 00 00	*(u32 *)(r6 + 0x44) = r2
     822	73 16 4b 00 00 00 00 00	*(u8 *)(r6 + 0x4b) = r1
     823	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
     824	73 16 4a 00 00 00 00 00	*(u8 *)(r6 + 0x4a) = r1
     825	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     826	6b 16 48 00 00 00 00 00	*(u16 *)(r6 + 0x48) = r1
     827	b7 01 00 00 00 00 00 00	r1 = 0x0
     828	05 00 af ff 00 00 00 00	goto -0x51 <LBB24_13>

00000000000019e8 <entrypoint>
     829	bf 12 00 00 00 00 00 00	r2 = r1
     830	bf a1 00 00 00 00 00 00	r1 = r10
     831	07 01 00 00 00 ff ff ff	r1 += -0x100
     832	85 10 00 00 f3 09 00 00	call 0x9f3 ; <solana_program::entrypoint::deserialize>
     833	79 a9 18 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xe8)
     834	79 a6 10 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xf0)
     835	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
     836	7b 1a 68 fd 00 00 00 00	*(u64 *)(r10 - 0x298) = r1
     837	79 a8 00 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x100)
     838	79 a1 20 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe0)
     839	79 a2 28 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xd8)
     840	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
     841	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     842	bf a1 00 00 00 00 00 00	r1 = r10
     843	07 01 00 00 00 ff ff ff	r1 += -0x100
     844	bf a2 00 00 00 00 00 00	r2 = r10
     845	07 02 00 00 c8 ff ff ff	r2 += -0x38
     846	85 10 00 00 e4 06 00 00	call 0x6e4 ; <<tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize>
     847	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
     848	15 01 0f 00 01 00 00 00	if r1 == 0x1 goto +0xf <LBB28_4>
     849	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
     850	7b 1a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r1
     851	69 a1 20 ff 00 00 00 00	r1 = *(u16 *)(r10 - 0xe0)
     852	6b 1a 38 fe 00 00 00 00	*(u16 *)(r10 - 0x1c8) = r1
     853	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     854	15 01 47 00 00 00 00 00	if r1 == 0x0 goto +0x47 <LBB28_20>
     855	b7 01 00 00 12 00 00 00	r1 = 0x12
     856	b7 02 00 00 01 00 00 00	r2 = 0x1
     857	85 10 00 00 e3 08 00 00	call 0x8e3 ; <__rust_alloc>
     858	bf 08 00 00 00 00 00 00	r8 = r0
     859	55 08 07 00 00 00 00 00	if r8 != 0x0 goto +0x7 <LBB28_5>
     860	b7 01 00 00 12 00 00 00	r1 = 0x12
     861	b7 02 00 00 01 00 00 00	r2 = 0x1
     862	85 10 00 00 cd 12 00 00	call 0x12cd ; <alloc::alloc::handle_alloc_error>
     863	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001b00 <LBB28_4>
     864	79 a3 10 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xf0)
     865	79 a2 08 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf8)
     866	05 00 1d 00 00 00 00 00	goto +0x1d <LBB28_8>

0000000000001b18 <LBB28_5>
     867	b7 01 00 00 61 64 00 00	r1 = 0x6461
     868	6b 18 10 00 00 00 00 00	*(u16 *)(r8 + 0x10) = r1
     869	18 01 00 00 62 79 74 65 00 00 00 00 73 20 72 65	r1 = 0x6572207365747962 ll
     871	7b 18 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r1
     872	18 01 00 00 4e 6f 74 20 00 00 00 00 61 6c 6c 20	r1 = 0x206c6c6120746f4e ll
     874	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
     875	b7 01 00 00 18 00 00 00	r1 = 0x18
     876	b7 02 00 00 08 00 00 00	r2 = 0x8
     877	85 10 00 00 cf 08 00 00	call 0x8cf ; <__rust_alloc>
     878	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB28_7>
     879	b7 01 00 00 18 00 00 00	r1 = 0x18
     880	b7 02 00 00 08 00 00 00	r2 = 0x8
     881	85 10 00 00 ba 12 00 00	call 0x12ba ; <alloc::alloc::handle_alloc_error>
     882	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001b98 <LBB28_7>
     883	b7 01 00 00 12 00 00 00	r1 = 0x12
     884	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     885	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     886	7b 80 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r8
     887	bf a1 00 00 00 00 00 00	r1 = r10
     888	07 01 00 00 d0 fd ff ff	r1 += -0x230
     889	b7 02 00 00 15 00 00 00	r2 = 0x15
     890	bf 03 00 00 00 00 00 00	r3 = r0
     891	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
     893	85 10 00 00 8a 11 00 00	call 0x118a ; <std::io::error::Error::_new>
     894	79 a3 d8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x228)
     895	79 a2 d0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x230)

0000000000001c00 <LBB28_8>
     896	bf a1 00 00 00 00 00 00	r1 = r10
     897	07 01 00 00 e0 fd ff ff	r1 += -0x220
     898	85 10 00 00 2a 0f 00 00	call 0xf2a ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>

0000000000001c18 <LBB28_9>
     899	61 a8 e0 fd 00 00 00 00	r8 = *(u32 *)(r10 - 0x220)
     900	15 08 0f 00 14 00 00 00	if r8 == 0x14 goto +0xf <LBB28_15>
     901	79 a1 e8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x218)
     902	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     903	79 a1 f0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x210)
     904	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     905	79 a1 f8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x208)
     906	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
     907	61 a7 e4 fd 00 00 00 00	r7 = *(u32 *)(r10 - 0x21c)
     908	65 08 0a 00 09 00 00 00	if r8 s> 0x9 goto +0xa <LBB28_16>
     909	65 08 9f 00 04 00 00 00	if r8 s> 0x4 goto +0x9f <LBB28_33>
     910	65 08 aa 00 01 00 00 00	if r8 s> 0x1 goto +0xaa <LBB28_39>
     911	15 08 8a 01 00 00 00 00	if r8 == 0x0 goto +0x18a <LBB28_69>
     912	18 01 00 00 b1 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ab1 ll
     914	b7 02 00 00 16 00 00 00	r2 = 0x16
     915	05 00 da 01 00 00 00 00	goto +0x1da <LBB28_84>

0000000000001ca0 <LBB28_15>
     916	b7 08 00 00 00 00 00 00	r8 = 0x0
     917	15 09 f0 01 00 00 00 00	if r9 == 0x0 goto +0x1f0 <LBB28_91>
     918	05 00 e8 01 00 00 00 00	goto +0x1e8 <LBB28_86>

0000000000001cb8 <LBB28_16>
     919	65 08 9b 00 0e 00 00 00	if r8 s> 0xe goto +0x9b <LBB28_36>
     920	65 08 a6 00 0b 00 00 00	if r8 s> 0xb goto +0xa6 <LBB28_42>
     921	15 08 a5 01 0a 00 00 00	if r8 == 0xa goto +0x1a5 <LBB28_72>
     922	18 01 00 00 81 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12981 ll
     924	b7 02 00 00 1a 00 00 00	r2 = 0x1a
     925	05 00 d0 01 00 00 00 00	goto +0x1d0 <LBB28_84>

0000000000001cf0 <LBB28_20>
     926	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
     927	79 a5 08 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0xf8)
     928	61 a4 04 ff 00 00 00 00	r4 = *(u32 *)(r10 - 0xfc)
     929	71 a3 03 ff 00 00 00 00	r3 = *(u8 *)(r10 - 0xfd)
     930	71 a2 02 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0xfe)
     931	71 a0 01 ff 00 00 00 00	r0 = *(u8 *)(r10 - 0xff)
     932	79 a7 30 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x1d0)
     933	7b 7a 00 fe 00 00 00 00	*(u64 *)(r10 - 0x200) = r7
     934	69 a7 38 fe 00 00 00 00	r7 = *(u16 *)(r10 - 0x1c8)
     935	6b 7a 08 fe 00 00 00 00	*(u16 *)(r10 - 0x1f8) = r7
     936	15 00 e1 00 00 00 00 00	if r0 == 0x0 goto +0xe1 <LBB28_59>
     937	15 00 a7 00 01 00 00 00	if r0 == 0x1 goto +0xa7 <LBB28_51>
     938	73 3a 11 fe 00 00 00 00	*(u8 *)(r10 - 0x1ef) = r3
     939	73 2a 10 fe 00 00 00 00	*(u8 *)(r10 - 0x1f0) = r2
     940	b7 01 00 00 01 00 00 00	r1 = 0x1
     941	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
     942	bf a1 00 00 00 00 00 00	r1 = r10
     943	07 01 00 00 c8 ff ff ff	r1 += -0x38
     944	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
     945	b7 01 00 00 00 00 00 00	r1 = 0x0
     946	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
     947	b7 01 00 00 02 00 00 00	r1 = 0x2
     948	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
     949	18 01 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b40 ll
     951	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
     952	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
     954	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     955	bf a1 00 00 00 00 00 00	r1 = r10
     956	07 01 00 00 90 ff ff ff	r1 += -0x70
     957	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     958	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
     959	bf a1 00 00 00 00 00 00	r1 = r10
     960	07 01 00 00 b0 fe ff ff	r1 += -0x150
     961	bf a2 00 00 00 00 00 00	r2 = r10
     962	07 02 00 00 00 ff ff ff	r2 += -0x100
     963	85 10 00 00 70 12 00 00	call 0x1270 ; <alloc::fmt::format>
     964	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
     965	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
     966	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
     967	bf 71 00 00 00 00 00 00	r1 = r7
     968	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
     969	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB28_25>
     970	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB28_25>
     971	bf 71 00 00 00 00 00 00	r1 = r7
     972	bf 82 00 00 00 00 00 00	r2 = r8
     973	b7 03 00 00 01 00 00 00	r3 = 0x1
     974	85 10 00 00 70 08 00 00	call 0x870 ; <__rust_dealloc>

0000000000001e78 <LBB28_25>
     975	15 09 47 01 00 00 00 00	if r9 == 0x0 goto +0x147 <LBB28_68>
     976	15 09 46 01 01 00 00 00	if r9 == 0x1 goto +0x146 <LBB28_68>
     977	79 a8 68 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x298)
     978	07 08 00 00 30 00 00 00	r8 += 0x30
     979	bf a1 00 00 00 00 00 00	r1 = r10
     980	07 01 00 00 00 ff ff ff	r1 += -0x100
     981	bf 82 00 00 00 00 00 00	r2 = r8
     982	85 10 00 00 ab 08 00 00	call 0x8ab ; <solana_program::account_info::AccountInfo::try_borrow_data>
     983	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
     984	15 01 a8 00 01 00 00 00	if r1 == 0x1 goto +0xa8 <LBB28_58>
     985	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
     986	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
     987	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
     988	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
     989	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
     990	7b 2a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r2
     991	bf a1 00 00 00 00 00 00	r1 = r10
     992	07 01 00 00 00 ff ff ff	r1 += -0x100
     993	bf a2 00 00 00 00 00 00	r2 = r10
     994	07 02 00 00 30 fe ff ff	r2 += -0x1d0
     995	85 10 00 00 c2 fe ff ff	call -0x13e ; <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
     996	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
     997	15 01 2b 02 01 00 00 00	if r1 == 0x1 goto +0x22b <LBB28_108>
     998	61 a1 04 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xfc)
     999	63 1a b3 fe 00 00 00 00	*(u32 *)(r10 - 0x14d) = r1
    1000	61 a1 01 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xff)
    1001	63 1a b0 fe 00 00 00 00	*(u32 *)(r10 - 0x150) = r1
    1002	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1003	7b 1a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r1
    1004	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1005	7b 1a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r1
    1006	bf a1 00 00 00 00 00 00	r1 = r10
    1007	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1008	7b 1a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r1
    1009	bf a2 00 00 00 00 00 00	r2 = r10
    1010	07 02 00 00 18 ff ff ff	r2 += -0xe8
    1011	b7 03 00 00 34 00 00 00	r3 = 0x34
    1012	85 10 00 00 f2 1e 00 00	call 0x1ef2 ; <memcpy>
    1013	7b 7a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r7
    1014	bf a7 00 00 00 00 00 00	r7 = r10
    1015	07 07 00 00 90 ff ff ff	r7 += -0x70
    1016	bf 71 00 00 00 00 00 00	r1 = r7
    1017	79 a2 48 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b8)
    1018	b7 03 00 00 34 00 00 00	r3 = 0x34
    1019	85 10 00 00 eb 1e 00 00	call 0x1eeb ; <memcpy>
    1020	bf a1 00 00 00 00 00 00	r1 = r10
    1021	07 01 00 00 c7 fe ff ff	r1 += -0x139
    1022	bf 72 00 00 00 00 00 00	r2 = r7
    1023	b7 03 00 00 34 00 00 00	r3 = 0x34
    1024	85 10 00 00 e6 1e 00 00	call 0x1ee6 ; <memcpy>
    1025	79 a1 58 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a8)
    1026	7b 1a bf fe 00 00 00 00	*(u64 *)(r10 - 0x141) = r1
    1027	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    1028	7b 1a b7 fe 00 00 00 00	*(u64 *)(r10 - 0x149) = r1
    1029	79 a2 50 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b0)
    1030	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    1031	07 01 00 00 ff ff ff ff	r1 += -0x1
    1032	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    1033	bf a1 00 00 00 00 00 00	r1 = r10
    1034	07 01 00 00 00 ff ff ff	r1 += -0x100
    1035	bf a2 00 00 00 00 00 00	r2 = r10
    1036	07 02 00 00 10 fe ff ff	r2 += -0x1f0
    1037	bf a4 00 00 00 00 00 00	r4 = r10
    1038	07 04 00 00 b0 fe ff ff	r4 += -0x150
    1039	79 a3 68 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x298)
    1040	85 10 00 00 cd fc ff ff	call -0x333 ; <tictactoe::instructions::PlayerMove::process>
    1041	61 a1 00 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x100)
    1042	15 01 01 00 14 00 00 00	if r1 == 0x14 goto +0x1 <LBB28_30>
    1043	05 00 06 02 00 00 00 00	goto +0x206 <LBB28_110>

00000000000020a0 <LBB28_30>
    1044	bf a1 00 00 00 00 00 00	r1 = r10
    1045	07 01 00 00 00 ff ff ff	r1 += -0x100
    1046	bf 82 00 00 00 00 00 00	r2 = r8
    1047	85 10 00 00 7d 08 00 00	call 0x87d ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1048	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1049	15 01 67 00 01 00 00 00	if r1 == 0x1 goto +0x67 <LBB28_58>
    1050	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1051	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1052	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1053	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1054	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1055	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    1056	bf a1 00 00 00 00 00 00	r1 = r10
    1057	07 01 00 00 c0 fd ff ff	r1 += -0x240
    1058	bf a2 00 00 00 00 00 00	r2 = r10
    1059	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1060	bf a3 00 00 00 00 00 00	r3 = r10
    1061	07 03 00 00 c8 ff ff ff	r3 += -0x38
    1062	85 10 00 00 ef fd ff ff	call -0x211 ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1063	79 a2 c0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x240)
    1064	bf 21 00 00 00 00 00 00	r1 = r2
    1065	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1066	15 01 76 03 04 00 00 00	if r1 == 0x4 goto +0x376 <LBB28_162>
    1067	79 a3 c8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x238)
    1068	05 00 2f 05 00 00 00 00	goto +0x52f <LBB28_251>

0000000000002168 <LBB28_33>
    1069	65 08 17 00 06 00 00 00	if r8 s> 0x6 goto +0x17 <LBB28_45>
    1070	15 08 14 01 05 00 00 00	if r8 == 0x5 goto +0x114 <LBB28_73>
    1071	18 01 00 00 30 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12a30 ll
    1073	b7 02 00 00 19 00 00 00	r2 = 0x19
    1074	05 00 3b 01 00 00 00 00	goto +0x13b <LBB28_84>

0000000000002198 <LBB28_36>
    1075	65 08 17 00 10 00 00 00	if r8 s> 0x10 goto +0x17 <LBB28_48>
    1076	15 08 12 01 0f 00 00 00	if r8 == 0xf goto +0x112 <LBB28_74>
    1077	18 01 00 00 0c 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x1290c ll
    1079	b7 02 00 00 18 00 00 00	r2 = 0x18
    1080	05 00 35 01 00 00 00 00	goto +0x135 <LBB28_84>

00000000000021c8 <LBB28_39>
    1081	15 08 11 01 02 00 00 00	if r8 == 0x2 goto +0x111 <LBB28_75>
    1082	15 08 14 01 03 00 00 00	if r8 == 0x3 goto +0x114 <LBB28_76>
    1083	18 01 00 00 61 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12a61 ll
    1085	b7 02 00 00 1a 00 00 00	r2 = 0x1a
    1086	05 00 2f 01 00 00 00 00	goto +0x12f <LBB28_84>

00000000000021f8 <LBB28_42>
    1087	15 08 13 01 0c 00 00 00	if r8 == 0xc goto +0x113 <LBB28_77>
    1088	15 08 16 01 0d 00 00 00	if r8 == 0xd goto +0x116 <LBB28_78>
    1089	18 01 00 00 3f 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x1293f ll
    1091	b7 02 00 00 13 00 00 00	r2 = 0x13
    1092	05 00 29 01 00 00 00 00	goto +0x129 <LBB28_84>

0000000000002228 <LBB28_45>
    1093	15 08 15 01 07 00 00 00	if r8 == 0x7 goto +0x115 <LBB28_79>
    1094	15 08 18 01 08 00 00 00	if r8 == 0x8 goto +0x118 <LBB28_80>
    1095	18 01 00 00 b6 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129b6 ll
    1097	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1098	05 00 23 01 00 00 00 00	goto +0x123 <LBB28_84>

0000000000002258 <LBB28_48>
    1099	15 08 17 01 11 00 00 00	if r8 == 0x11 goto +0x117 <LBB28_81>
    1100	15 08 1a 01 12 00 00 00	if r8 == 0x12 goto +0x11a <LBB28_82>
    1101	18 01 00 00 c2 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128c2 ll
    1103	b7 02 00 00 15 00 00 00	r2 = 0x15
    1104	05 00 1d 01 00 00 00 00	goto +0x11d <LBB28_84>

0000000000002288 <LBB28_51>
    1105	b7 01 00 00 01 00 00 00	r1 = 0x1
    1106	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1107	bf a1 00 00 00 00 00 00	r1 = r10
    1108	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1109	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1110	b7 01 00 00 00 00 00 00	r1 = 0x0
    1111	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1112	b7 01 00 00 02 00 00 00	r1 = 0x2
    1113	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1114	18 01 00 00 20 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b20 ll
    1116	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1117	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    1119	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1120	bf a1 00 00 00 00 00 00	r1 = r10
    1121	07 01 00 00 90 ff ff ff	r1 += -0x70
    1122	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1123	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
    1124	bf a1 00 00 00 00 00 00	r1 = r10
    1125	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1126	bf a2 00 00 00 00 00 00	r2 = r10
    1127	07 02 00 00 00 ff ff ff	r2 += -0x100
    1128	85 10 00 00 cb 11 00 00	call 0x11cb ; <alloc::fmt::format>
    1129	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1130	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1131	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1132	bf 71 00 00 00 00 00 00	r1 = r7
    1133	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1134	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB28_54>
    1135	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB28_54>
    1136	bf 71 00 00 00 00 00 00	r1 = r7
    1137	bf 82 00 00 00 00 00 00	r2 = r8
    1138	b7 03 00 00 01 00 00 00	r3 = 0x1
    1139	85 10 00 00 cb 07 00 00	call 0x7cb ; <__rust_dealloc>

00000000000023a0 <LBB28_54>
    1140	15 09 a2 00 00 00 00 00	if r9 == 0x0 goto +0xa2 <LBB28_68>
    1141	15 09 a1 00 01 00 00 00	if r9 == 0x1 goto +0xa1 <LBB28_68>
    1142	79 a8 68 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x298)
    1143	71 81 28 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x28)
    1144	15 01 3c 01 00 00 00 00	if r1 == 0x0 goto +0x13c <LBB28_101>
    1145	07 08 00 00 30 00 00 00	r8 += 0x30
    1146	bf a1 00 00 00 00 00 00	r1 = r10
    1147	07 01 00 00 00 ff ff ff	r1 += -0x100
    1148	bf 82 00 00 00 00 00 00	r2 = r8
    1149	85 10 00 00 04 08 00 00	call 0x804 ; <solana_program::account_info::AccountInfo::try_borrow_data>
    1150	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1151	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB28_58>
    1152	05 00 38 01 00 00 00 00	goto +0x138 <LBB28_102>

0000000000002408 <LBB28_58>
    1153	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    1154	7b 1a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r1
    1155	79 a1 20 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe0)
    1156	7b 1a f8 fd 00 00 00 00	*(u64 *)(r10 - 0x208) = r1
    1157	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1158	7b 1a e8 fd 00 00 00 00	*(u64 *)(r10 - 0x218) = r1
    1159	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1160	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1161	05 00 f9 fe 00 00 00 00	goto -0x107 <LBB28_9>

0000000000002450 <LBB28_59>
    1162	7b 8a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r8
    1163	7b 5a 16 fe 00 00 00 00	*(u64 *)(r10 - 0x1ea) = r5
    1164	63 4a 12 fe 00 00 00 00	*(u32 *)(r10 - 0x1ee) = r4
    1165	73 3a 11 fe 00 00 00 00	*(u8 *)(r10 - 0x1ef) = r3
    1166	73 2a 10 fe 00 00 00 00	*(u8 *)(r10 - 0x1f0) = r2
    1167	79 a2 00 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x200)
    1168	7b 2a 26 fe 00 00 00 00	*(u64 *)(r10 - 0x1da) = r2
    1169	69 a2 08 fe 00 00 00 00	r2 = *(u16 *)(r10 - 0x1f8)
    1170	6b 2a 2e fe 00 00 00 00	*(u16 *)(r10 - 0x1d2) = r2
    1171	7b 1a 1e fe 00 00 00 00	*(u64 *)(r10 - 0x1e2) = r1
    1172	b7 01 00 00 01 00 00 00	r1 = 0x1
    1173	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1174	bf a1 00 00 00 00 00 00	r1 = r10
    1175	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1176	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1177	b7 01 00 00 00 00 00 00	r1 = 0x0
    1178	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1179	b7 01 00 00 02 00 00 00	r1 = 0x2
    1180	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1181	18 01 00 00 00 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b00 ll
    1183	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1184	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    1186	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1187	bf a1 00 00 00 00 00 00	r1 = r10
    1188	07 01 00 00 90 ff ff ff	r1 += -0x70
    1189	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1190	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
    1191	bf a1 00 00 00 00 00 00	r1 = r10
    1192	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1193	bf a2 00 00 00 00 00 00	r2 = r10
    1194	07 02 00 00 00 ff ff ff	r2 += -0x100
    1195	85 10 00 00 88 11 00 00	call 0x1188 ; <alloc::fmt::format>
    1196	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1197	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1198	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1199	bf 71 00 00 00 00 00 00	r1 = r7
    1200	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1201	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB28_62>
    1202	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB28_62>
    1203	bf 71 00 00 00 00 00 00	r1 = r7
    1204	bf 82 00 00 00 00 00 00	r2 = r8
    1205	b7 03 00 00 01 00 00 00	r3 = 0x1
    1206	85 10 00 00 88 07 00 00	call 0x788 ; <__rust_dealloc>

00000000000025b8 <LBB28_62>
    1207	15 09 5f 00 00 00 00 00	if r9 == 0x0 goto +0x5f <LBB28_68>
    1208	15 09 5e 00 01 00 00 00	if r9 == 0x1 goto +0x5e <LBB28_68>
    1209	15 09 5d 00 02 00 00 00	if r9 == 0x2 goto +0x5d <LBB28_68>
    1210	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1211	71 71 28 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x28)
    1212	15 01 f8 00 00 00 00 00	if r1 == 0x0 goto +0xf8 <LBB28_101>
    1213	07 07 00 00 30 00 00 00	r7 += 0x30
    1214	18 01 00 00 bd 81 54 33 00 00 00 00 5c 4a 83 27	r1 = 0x27834a5c335481bd ll
    1216	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1217	18 01 00 00 35 47 77 69 00 00 00 00 da 47 43 0c	r1 = 0xc4347da69774735 ll
    1219	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1220	18 01 00 00 76 13 de 53 00 00 00 00 0b 69 2a 87	r1 = -0x78d596f4ac21ec8a ll
    1222	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1223	18 01 00 00 da 07 5c b2 00 00 00 00 ff 5e c6 81	r1 = -0x7e39a1004da3f826 ll
    1225	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1226	bf a1 00 00 00 00 00 00	r1 = r10
    1227	07 01 00 00 a0 fd ff ff	r1 += -0x260
    1228	bf a8 00 00 00 00 00 00	r8 = r10
    1229	07 08 00 00 10 fe ff ff	r8 += -0x1f0
    1230	bf 82 00 00 00 00 00 00	r2 = r8
    1231	85 10 00 00 68 09 00 00	call 0x968 ; <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    1232	79 a1 a8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x258)
    1233	7b 1a c8 fe 00 00 00 00	*(u64 *)(r10 - 0x138) = r1
    1234	79 a1 a0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x260)
    1235	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1236	b7 01 00 00 09 00 00 00	r1 = 0x9
    1237	7b 1a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r1
    1238	18 01 00 00 e5 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x126e5 ll
    1240	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    1241	bf a1 00 00 00 00 00 00	r1 = r10
    1242	07 01 00 00 00 ff ff ff	r1 += -0x100
    1243	bf a2 00 00 00 00 00 00	r2 = r10
    1244	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1245	bf a4 00 00 00 00 00 00	r4 = r10
    1246	07 04 00 00 c8 ff ff ff	r4 += -0x38
    1247	b7 03 00 00 02 00 00 00	r3 = 0x2
    1248	85 10 00 00 f9 0d 00 00	call 0xdf9 ; <solana_program::pubkey::Pubkey::find_program_address>
    1249	18 01 00 00 bd 81 54 33 00 00 00 00 5c 4a 83 27	r1 = 0x27834a5c335481bd ll
    1251	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1252	18 01 00 00 35 47 77 69 00 00 00 00 da 47 43 0c	r1 = 0xc4347da69774735 ll
    1254	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1255	18 01 00 00 76 13 de 53 00 00 00 00 0b 69 2a 87	r1 = -0x78d596f4ac21ec8a ll
    1257	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1258	18 01 00 00 da 07 5c b2 00 00 00 00 ff 5e c6 81	r1 = -0x7e39a1004da3f826 ll
    1260	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1261	bf a1 00 00 00 00 00 00	r1 = r10
    1262	07 01 00 00 90 fd ff ff	r1 += -0x270
    1263	bf 82 00 00 00 00 00 00	r2 = r8
    1264	85 10 00 00 47 09 00 00	call 0x947 ; <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    1265	b7 01 00 00 09 00 00 00	r1 = 0x9
    1266	7b 1a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r1
    1267	18 01 00 00 e5 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x126e5 ll
    1269	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    1270	79 a1 98 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x268)
    1271	7b 1a c8 fe 00 00 00 00	*(u64 *)(r10 - 0x138) = r1
    1272	79 a1 90 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x270)
    1273	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1274	bf a1 00 00 00 00 00 00	r1 = r10
    1275	07 01 00 00 00 ff ff ff	r1 += -0x100
    1276	bf a2 00 00 00 00 00 00	r2 = r10
    1277	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1278	bf a4 00 00 00 00 00 00	r4 = r10
    1279	07 04 00 00 c8 ff ff ff	r4 += -0x38
    1280	b7 03 00 00 02 00 00 00	r3 = 0x2
    1281	85 10 00 00 d8 0d 00 00	call 0xdd8 ; <solana_program::pubkey::Pubkey::find_program_address>
    1282	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    1283	7b 1a 48 fe 00 00 00 00	*(u64 *)(r10 - 0x1b8) = r1
    1284	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1285	7b 1a 40 fe 00 00 00 00	*(u64 *)(r10 - 0x1c0) = r1
    1286	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1287	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
    1288	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1289	7b 1a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r1
    1290	71 a8 20 ff 00 00 00 00	r8 = *(u8 *)(r10 - 0xe0)
    1291	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    1292	bf a1 00 00 00 00 00 00	r1 = r10
    1293	07 01 00 00 30 fe ff ff	r1 += -0x1d0
    1294	b7 03 00 00 20 00 00 00	r3 = 0x20
    1295	85 10 00 00 1d 1e 00 00	call 0x1e1d ; <memcmp>
    1296	67 00 00 00 20 00 00 00	r0 <<= 0x20
    1297	77 00 00 00 20 00 00 00	r0 >>= 0x20
    1298	15 00 11 01 00 00 00 00	if r0 == 0x0 goto +0x111 <LBB28_111>
    1299	18 01 00 00 00 00 00 00 00 00 00 00 af c7 71 00	r1 = 0x71c7af00000000 ll
    1301	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1302	05 00 6c fe 00 00 00 00	goto -0x194 <LBB28_9>

00000000000028b8 <LBB28_68>
    1303	b7 01 00 00 0a 00 00 00	r1 = 0xa
    1304	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1305	05 00 69 fe 00 00 00 00	goto -0x197 <LBB28_9>

00000000000028d0 <LBB28_69>
    1306	bf 71 00 00 00 00 00 00	r1 = r7
    1307	07 01 00 00 54 38 8e ff	r1 += -0x71c7ac
    1308	67 01 00 00 20 00 00 00	r1 <<= 0x20
    1309	77 01 00 00 20 00 00 00	r1 >>= 0x20
    1310	b7 02 00 00 07 00 00 00	r2 = 0x7
    1311	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB28_70>
    1312	05 00 4a 00 00 00 00 00	goto +0x4a <LBB28_83>

0000000000002908 <LBB28_70>
    1313	63 7a 90 ff 00 00 00 00	*(u32 *)(r10 - 0x70) = r7
    1314	b7 01 00 00 00 00 00 00	r1 = 0x0
    1315	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1316	7b 1a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r1
    1317	b7 01 00 00 01 00 00 00	r1 = 0x1
    1318	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    1319	bf a1 00 00 00 00 00 00	r1 = r10
    1320	07 01 00 00 00 ff ff ff	r1 += -0x100
    1321	7b 1a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r1
    1322	bf a2 00 00 00 00 00 00	r2 = r10
    1323	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1324	18 03 00 00 b8 3c 01 00 00 00 00 00 00 00 00 00	r3 = 0x13cb8 ll
    1326	85 10 00 00 80 13 00 00	call 0x1380 ; <core::fmt::Formatter::new>
    1327	bf a1 00 00 00 00 00 00	r1 = r10
    1328	07 01 00 00 90 ff ff ff	r1 += -0x70
    1329	79 a2 60 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a0)
    1330	85 10 00 00 a6 04 00 00	call 0x4a6 ; <<tictactoe::error::TictactoeError as core::fmt::Display>::fmt>
    1331	15 00 77 00 00 00 00 00	if r0 == 0x0 goto +0x77 <LBB28_98>
    1332	bf a3 00 00 00 00 00 00	r3 = r10
    1333	07 03 00 00 30 fe ff ff	r3 += -0x1d0
    1334	18 01 00 00 f1 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12af1 ll
    1336	b7 02 00 00 37 00 00 00	r2 = 0x37
    1337	18 04 00 00 00 3d 01 00 00 00 00 00 00 00 00 00	r4 = 0x13d00 ll
    1339	18 05 00 00 e8 3c 01 00 00 00 00 00 00 00 00 00	r5 = 0x13ce8 ll
    1341	85 10 00 00 51 13 00 00	call 0x1351 ; <core::result::unwrap_failed>
    1342	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000029f8 <LBB28_72>
    1343	18 01 00 00 9b 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x1299b ll
    1345	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1346	05 00 2b 00 00 00 00 00	goto +0x2b <LBB28_84>

0000000000002a18 <LBB28_73>
    1347	18 01 00 00 49 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12a49 ll
    1349	b7 02 00 00 18 00 00 00	r2 = 0x18
    1350	05 00 27 00 00 00 00 00	goto +0x27 <LBB28_84>

0000000000002a38 <LBB28_74>
    1351	18 01 00 00 24 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12924 ll
    1353	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1354	05 00 23 00 00 00 00 00	goto +0x23 <LBB28_84>

0000000000002a58 <LBB28_75>
    1355	18 01 00 00 94 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12a94 ll
    1357	b7 02 00 00 1d 00 00 00	r2 = 0x1d
    1358	05 00 1f 00 00 00 00 00	goto +0x1f <LBB28_84>

0000000000002a78 <LBB28_76>
    1359	18 01 00 00 7b 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12a7b ll
    1361	b7 02 00 00 19 00 00 00	r2 = 0x19
    1362	05 00 1b 00 00 00 00 00	goto +0x1b <LBB28_84>

0000000000002a98 <LBB28_77>
    1363	18 01 00 00 65 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12965 ll
    1365	b7 02 00 00 1c 00 00 00	r2 = 0x1c
    1366	05 00 17 00 00 00 00 00	goto +0x17 <LBB28_84>

0000000000002ab8 <LBB28_78>
    1367	18 01 00 00 52 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12952 ll
    1369	b7 02 00 00 13 00 00 00	r2 = 0x13
    1370	05 00 13 00 00 00 00 00	goto +0x13 <LBB28_84>

0000000000002ad8 <LBB28_79>
    1371	18 01 00 00 11 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12a11 ll
    1373	b7 02 00 00 1f 00 00 00	r2 = 0x1f
    1374	05 00 0f 00 00 00 00 00	goto +0xf <LBB28_84>

0000000000002af8 <LBB28_80>
    1375	18 01 00 00 d1 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129d1 ll
    1377	b7 02 00 00 20 00 00 00	r2 = 0x20
    1378	05 00 0b 00 00 00 00 00	goto +0xb <LBB28_84>

0000000000002b18 <LBB28_81>
    1379	18 01 00 00 f9 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128f9 ll
    1381	b7 02 00 00 13 00 00 00	r2 = 0x13
    1382	05 00 07 00 00 00 00 00	goto +0x7 <LBB28_84>

0000000000002b38 <LBB28_82>
    1383	18 01 00 00 d7 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128d7 ll
    1385	b7 02 00 00 22 00 00 00	r2 = 0x22
    1386	05 00 03 00 00 00 00 00	goto +0x3 <LBB28_84>

0000000000002b58 <LBB28_83>
    1387	18 01 00 00 c7 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ac7 ll
    1389	b7 02 00 00 0e 00 00 00	r2 = 0xe

0000000000002b70 <LBB28_84>
    1390	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_

0000000000002b78 <LBB28_85>
    1391	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    1392	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1393	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    1394	7b 2a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r2
    1395	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    1396	7b 3a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r3
    1397	63 7a 04 ff 00 00 00 00	*(u32 *)(r10 - 0xfc) = r7
    1398	63 8a 00 ff 00 00 00 00	*(u32 *)(r10 - 0x100) = r8
    1399	7b 3a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r3
    1400	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1401	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    1402	bf a1 00 00 00 00 00 00	r1 = r10
    1403	07 01 00 00 00 ff ff ff	r1 += -0x100
    1404	85 10 00 00 6e 0c 00 00	call 0xc6e ; <solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from>
    1405	bf 08 00 00 00 00 00 00	r8 = r0
    1406	15 09 07 00 00 00 00 00	if r9 == 0x0 goto +0x7 <LBB28_91>

0000000000002bf8 <LBB28_86>
    1407	27 09 00 00 30 00 00 00	r9 *= 0x30
    1408	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1409	07 07 00 00 10 00 00 00	r7 += 0x10
    1410	05 00 0b 00 00 00 00 00	goto +0xb <LBB28_94>

0000000000002c18 <LBB28_90>
    1411	07 07 00 00 30 00 00 00	r7 += 0x30
    1412	07 09 00 00 d0 ff ff ff	r9 += -0x30
    1413	55 09 08 00 00 00 00 00	if r9 != 0x0 goto +0x8 <LBB28_94>

0000000000002c30 <LBB28_91>
    1414	15 06 22 00 00 00 00 00	if r6 == 0x0 goto +0x22 <LBB28_97>
    1415	27 06 00 00 30 00 00 00	r6 *= 0x30
    1416	15 06 20 00 00 00 00 00	if r6 == 0x0 goto +0x20 <LBB28_97>
    1417	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1418	bf 62 00 00 00 00 00 00	r2 = r6
    1419	b7 03 00 00 08 00 00 00	r3 = 0x8
    1420	85 10 00 00 b2 06 00 00	call 0x6b2 ; <__rust_dealloc>
    1421	05 00 1b 00 00 00 00 00	goto +0x1b <LBB28_97>

0000000000002c70 <LBB28_94>
    1422	79 71 f8 ff 00 00 00 00	r1 = *(u64 *)(r7 - 0x8)
    1423	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1424	07 02 00 00 ff ff ff ff	r2 += -0x1
    1425	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    1426	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_87>
    1427	05 00 0d 00 00 00 00 00	goto +0xd <LBB28_95>

0000000000002ca0 <LBB28_87>
    1428	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1429	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1430	07 02 00 00 ff ff ff ff	r2 += -0x1
    1431	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    1432	55 02 ea ff 00 00 00 00	if r2 != 0x0 goto -0x16 <LBB28_90>
    1433	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1434	07 02 00 00 ff ff ff ff	r2 += -0x1
    1435	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    1436	55 02 e6 ff 00 00 00 00	if r2 != 0x0 goto -0x1a <LBB28_90>
    1437	b7 02 00 00 28 00 00 00	r2 = 0x28
    1438	b7 03 00 00 08 00 00 00	r3 = 0x8
    1439	85 10 00 00 9f 06 00 00	call 0x69f ; <__rust_dealloc>
    1440	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB28_90>

0000000000002d08 <LBB28_95>
    1441	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1442	07 02 00 00 ff ff ff ff	r2 += -0x1
    1443	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    1444	55 02 ef ff 00 00 00 00	if r2 != 0x0 goto -0x11 <LBB28_87>
    1445	b7 02 00 00 20 00 00 00	r2 = 0x20
    1446	b7 03 00 00 08 00 00 00	r3 = 0x8
    1447	85 10 00 00 97 06 00 00	call 0x697 ; <__rust_dealloc>
    1448	05 00 eb ff 00 00 00 00	goto -0x15 <LBB28_87>

0000000000002d48 <LBB28_97>
    1449	bf 80 00 00 00 00 00 00	r0 = r8
    1450	95 00 00 00 00 00 00 00	exit

0000000000002d58 <LBB28_98>
    1451	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1452	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1453	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1454	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1455	15 02 bf ff 00 00 00 00	if r2 == 0x0 goto -0x41 <LBB28_85>
    1456	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1457	15 01 bd ff 00 00 00 00	if r1 == 0x0 goto -0x43 <LBB28_85>
    1458	b7 03 00 00 01 00 00 00	r3 = 0x1
    1459	85 10 00 00 8b 06 00 00	call 0x68b ; <__rust_dealloc>
    1460	05 00 ba ff 00 00 00 00	goto -0x46 <LBB28_85>

0000000000002da8 <LBB28_101>
    1461	18 01 00 00 00 00 00 00 00 00 00 00 ad c7 71 00	r1 = 0x71c7ad00000000 ll
    1463	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1464	05 00 ca fd 00 00 00 00	goto -0x236 <LBB28_9>

0000000000002dc8 <LBB28_102>
    1465	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1466	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1467	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1468	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1469	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
    1470	7b 2a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r2
    1471	bf a1 00 00 00 00 00 00	r1 = r10
    1472	07 01 00 00 00 ff ff ff	r1 += -0x100
    1473	bf a2 00 00 00 00 00 00	r2 = r10
    1474	07 02 00 00 30 fe ff ff	r2 += -0x1d0
    1475	85 10 00 00 e2 fc ff ff	call -0x31e ; <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
    1476	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
    1477	15 01 4b 00 01 00 00 00	if r1 == 0x1 goto +0x4b <LBB28_108>
    1478	61 a1 04 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xfc)
    1479	63 1a b3 fe 00 00 00 00	*(u32 *)(r10 - 0x14d) = r1
    1480	61 a1 01 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xff)
    1481	63 1a b0 fe 00 00 00 00	*(u32 *)(r10 - 0x150) = r1
    1482	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1483	7b 1a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r1
    1484	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1485	7b 1a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r1
    1486	bf a1 00 00 00 00 00 00	r1 = r10
    1487	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1488	7b 1a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r1
    1489	bf a2 00 00 00 00 00 00	r2 = r10
    1490	07 02 00 00 18 ff ff ff	r2 += -0xe8
    1491	b7 03 00 00 34 00 00 00	r3 = 0x34
    1492	85 10 00 00 12 1d 00 00	call 0x1d12 ; <memcpy>
    1493	7b 7a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r7
    1494	bf a7 00 00 00 00 00 00	r7 = r10
    1495	07 07 00 00 90 ff ff ff	r7 += -0x70
    1496	bf 71 00 00 00 00 00 00	r1 = r7
    1497	79 a2 48 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b8)
    1498	b7 03 00 00 34 00 00 00	r3 = 0x34
    1499	85 10 00 00 0b 1d 00 00	call 0x1d0b ; <memcpy>
    1500	bf a1 00 00 00 00 00 00	r1 = r10
    1501	07 01 00 00 c7 fe ff ff	r1 += -0x139
    1502	bf 72 00 00 00 00 00 00	r2 = r7
    1503	b7 03 00 00 34 00 00 00	r3 = 0x34
    1504	85 10 00 00 06 1d 00 00	call 0x1d06 ; <memcpy>
    1505	79 a1 58 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a8)
    1506	7b 1a bf fe 00 00 00 00	*(u64 *)(r10 - 0x141) = r1
    1507	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    1508	7b 1a b7 fe 00 00 00 00	*(u64 *)(r10 - 0x149) = r1
    1509	79 a2 50 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b0)
    1510	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    1511	07 01 00 00 ff ff ff ff	r1 += -0x1
    1512	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    1513	71 a1 f9 fe 00 00 00 00	r1 = *(u8 *)(r10 - 0x107)
    1514	15 01 78 00 01 00 00 00	if r1 == 0x1 goto +0x78 <LBB28_117>
    1515	bf a1 00 00 00 00 00 00	r1 = r10
    1516	07 01 00 00 f9 fe ff ff	r1 += -0x107
    1517	b7 02 00 00 01 00 00 00	r2 = 0x1
    1518	7b 2a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r2
    1519	bf a2 00 00 00 00 00 00	r2 = r10
    1520	07 02 00 00 90 ff ff ff	r2 += -0x70
    1521	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1522	b7 02 00 00 00 00 00 00	r2 = 0x0
    1523	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1524	b7 02 00 00 02 00 00 00	r2 = 0x2
    1525	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1526	18 02 00 00 e0 3a 01 00 00 00 00 00 00 00 00 00	r2 = 0x13ae0 ll
    1528	7b 2a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r2
    1529	18 02 00 00 10 09 00 00 00 00 00 00 00 00 00 00	r2 = 0x910 ll
    1531	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    1532	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    1533	bf a1 00 00 00 00 00 00	r1 = r10
    1534	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1535	bf a2 00 00 00 00 00 00	r2 = r10
    1536	07 02 00 00 00 ff ff ff	r2 += -0x100
    1537	85 10 00 00 32 10 00 00	call 0x1032 ; <alloc::fmt::format>
    1538	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    1539	79 a7 c8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x38)
    1540	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    1541	bf 71 00 00 00 00 00 00	r1 = r7
    1542	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1543	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB28_107>
    1544	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB28_107>
    1545	bf 71 00 00 00 00 00 00	r1 = r7
    1546	bf 82 00 00 00 00 00 00	r2 = r8
    1547	b7 03 00 00 01 00 00 00	r3 = 0x1
    1548	85 10 00 00 32 06 00 00	call 0x632 ; <__rust_dealloc>

0000000000003068 <LBB28_107>
    1549	18 01 00 00 00 00 00 00 00 00 00 00 b0 c7 71 00	r1 = 0x71c7b000000000 ll
    1551	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1552	05 00 72 fd 00 00 00 00	goto -0x28e <LBB28_9>

0000000000003088 <LBB28_108>
    1553	79 a3 10 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xf0)
    1554	79 a2 08 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf8)
    1555	bf a1 00 00 00 00 00 00	r1 = r10
    1556	07 01 00 00 e0 fd ff ff	r1 += -0x220
    1557	85 10 00 00 97 0c 00 00	call 0xc97 ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    1558	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1559	07 01 00 00 ff ff ff ff	r1 += -0x1

00000000000030c0 <LBB28_109>
    1560	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    1561	05 00 69 fd 00 00 00 00	goto -0x297 <LBB28_9>

00000000000030d0 <LBB28_110>
    1562	61 a2 1c ff 00 00 00 00	r2 = *(u32 *)(r10 - 0xe4)
    1563	63 2a fc fd 00 00 00 00	*(u32 *)(r10 - 0x204) = r2
    1564	79 a2 14 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xec)
    1565	7b 2a f4 fd 00 00 00 00	*(u64 *)(r10 - 0x20c) = r2
    1566	79 a2 0c ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf4)
    1567	7b 2a ec fd 00 00 00 00	*(u64 *)(r10 - 0x214) = r2
    1568	79 a2 04 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xfc)
    1569	7b 2a e4 fd 00 00 00 00	*(u64 *)(r10 - 0x21c) = r2
    1570	63 1a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r1
    1571	05 00 5f fd 00 00 00 00	goto -0x2a1 <LBB28_9>

0000000000003120 <LBB28_111>
    1572	7b 7a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r7
    1573	73 8a 57 fe 00 00 00 00	*(u8 *)(r10 - 0x1a9) = r8
    1574	bf a1 00 00 00 00 00 00	r1 = r10
    1575	07 01 00 00 80 fd ff ff	r1 += -0x280
    1576	bf a2 00 00 00 00 00 00	r2 = r10
    1577	07 02 00 00 10 fe ff ff	r2 += -0x1f0
    1578	85 10 00 00 0d 08 00 00	call 0x80d ; <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    1579	b7 01 00 00 01 00 00 00	r1 = 0x1
    1580	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1581	bf a1 00 00 00 00 00 00	r1 = r10
    1582	07 01 00 00 57 fe ff ff	r1 += -0x1a9
    1583	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1584	b7 01 00 00 09 00 00 00	r1 = 0x9
    1585	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1586	18 01 00 00 e5 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x126e5 ll
    1588	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1589	79 a1 88 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x278)
    1590	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1591	79 a1 80 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x280)
    1592	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1593	bf a1 00 00 00 00 00 00	r1 = r10
    1594	07 01 00 00 00 ff ff ff	r1 += -0x100
    1595	85 10 00 00 d8 0d 00 00	call 0xdd8 ; <solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get>
    1596	bf a1 00 00 00 00 00 00	r1 = r10
    1597	07 01 00 00 0c ff ff ff	r1 += -0xf4
    1598	61 a8 08 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0xf8)
    1599	79 a2 00 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x100)
    1600	15 02 47 00 01 00 00 00	if r2 == 0x1 goto +0x47 <LBB28_120>
    1601	61 12 10 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x10)
    1602	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    1603	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1604	63 8a 78 fe 00 00 00 00	*(u32 *)(r10 - 0x188) = r8
    1605	7b 1a 7c fe 00 00 00 00	*(u64 *)(r10 - 0x184) = r1
    1606	7b 3a 84 fe 00 00 00 00	*(u64 *)(r10 - 0x17c) = r3
    1607	63 2a c0 fe 00 00 00 00	*(u32 *)(r10 - 0x140) = r2
    1608	63 2a 8c fe 00 00 00 00	*(u32 *)(r10 - 0x174) = r2
    1609	bf a1 00 00 00 00 00 00	r1 = r10
    1610	07 01 00 00 78 fe ff ff	r1 += -0x188
    1611	b7 02 00 00 4b 00 00 00	r2 = 0x4b
    1612	85 10 00 00 c4 0c 00 00	call 0xcc4 ; <solana_program::rent::Rent::minimum_balance>
    1613	bf 08 00 00 00 00 00 00	r8 = r0
    1614	79 a1 58 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a8)
    1615	25 08 01 00 01 00 00 00	if r8 > 0x1 goto +0x1 <LBB28_114>
    1616	b7 08 00 00 01 00 00 00	r8 = 0x1

0000000000003288 <LBB28_114>
    1617	85 10 00 00 19 06 00 00	call 0x619 ; <solana_program::account_info::AccountInfo::lamports>
    1618	2d 08 01 01 00 00 00 00	if r8 > r0 goto +0x101 <LBB28_151>

0000000000003298 <LBB28_115>
    1619	18 01 00 00 23 27 01 00 00 00 00 00 00 00 00 00	r1 = 0x12723 ll
    1621	b7 02 00 00 1f 00 00 00	r2 = 0x1f
    1622	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1623	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1624	79 72 30 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x30)
    1625	bf a1 00 00 00 00 00 00	r1 = r10
    1626	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1627	b7 03 00 00 4b 00 00 00	r3 = 0x4b
    1628	85 10 00 00 3d 0d 00 00	call 0xd3d ; <solana_program::system_instruction::allocate>
    1629	79 71 38 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x38)
    1630	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    1631	07 03 00 00 01 00 00 00	r3 += 0x1
    1632	25 03 60 00 01 00 00 00	if r3 > 0x1 goto +0x60 <LBB28_123>

0000000000003308 <LBB28_116>
    1633	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    1634	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003318 <LBB28_117>
    1635	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1636	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1637	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1638	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    1639	79 14 10 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x10)
    1640	79 11 18 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x18)
    1641	7b 1a e8 fe 00 00 00 00	*(u64 *)(r10 - 0x118) = r1
    1642	7b 4a e0 fe 00 00 00 00	*(u64 *)(r10 - 0x120) = r4
    1643	7b 3a d8 fe 00 00 00 00	*(u64 *)(r10 - 0x128) = r3
    1644	7b 2a d0 fe 00 00 00 00	*(u64 *)(r10 - 0x130) = r2
    1645	b7 01 00 00 02 00 00 00	r1 = 0x2
    1646	73 1a f9 fe 00 00 00 00	*(u8 *)(r10 - 0x107) = r1
    1647	bf a1 00 00 00 00 00 00	r1 = r10
    1648	07 01 00 00 00 ff ff ff	r1 += -0x100
    1649	bf 82 00 00 00 00 00 00	r2 = r8
    1650	85 10 00 00 22 06 00 00	call 0x622 ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1651	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1652	15 01 0c fe 01 00 00 00	if r1 == 0x1 goto -0x1f4 <LBB28_58>
    1653	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1654	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1655	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1656	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1657	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1658	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    1659	bf a1 00 00 00 00 00 00	r1 = r10
    1660	07 01 00 00 b0 fd ff ff	r1 += -0x250
    1661	bf a2 00 00 00 00 00 00	r2 = r10
    1662	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1663	bf a3 00 00 00 00 00 00	r3 = r10
    1664	07 03 00 00 c8 ff ff ff	r3 += -0x38
    1665	85 10 00 00 94 fb ff ff	call -0x46c ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1666	79 a2 b0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x250)
    1667	bf 21 00 00 00 00 00 00	r1 = r2
    1668	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1669	15 01 1b 01 04 00 00 00	if r1 == 0x4 goto +0x11b <LBB28_162>
    1670	79 a3 b8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x248)
    1671	05 00 d4 02 00 00 00 00	goto +0x2d4 <LBB28_251>

0000000000003440 <LBB28_120>
    1672	61 12 18 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x18)
    1673	79 13 10 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x10)
    1674	79 14 08 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x8)
    1675	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1676	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    1677	7b 4a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r4
    1678	7b 3a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r3
    1679	63 2a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r2
    1680	bf 81 00 00 00 00 00 00	r1 = r8
    1681	79 a7 58 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2a8)
    1682	15 01 01 00 14 00 00 00	if r1 == 0x14 goto +0x1 <LBB28_121>
    1683	05 00 bd 02 00 00 00 00	goto +0x2bd <LBB28_249>

00000000000034a0 <LBB28_121>
    1684	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1685	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1686	79 12 18 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x18)
    1687	7b 2a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r2
    1688	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    1689	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1690	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1691	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1692	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1693	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1694	bf a1 00 00 00 00 00 00	r1 = r10
    1695	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1696	b7 02 00 00 00 00 00 00	r2 = 0x0
    1697	b7 03 00 00 4a 00 00 00	r3 = 0x4a
    1698	85 10 00 00 67 1c 00 00	call 0x1c67 ; <memset>
    1699	b7 01 00 00 01 00 00 00	r1 = 0x1
    1700	6b 1a 49 ff 00 00 00 00	*(u16 *)(r10 - 0xb7) = r1
    1701	79 a1 d0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x130)
    1702	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1703	79 a1 d8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x128)
    1704	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1705	79 a1 e0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x120)
    1706	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    1707	79 a1 e8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x118)
    1708	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    1709	79 a1 f0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x110)
    1710	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    1711	71 a1 f8 fe 00 00 00 00	r1 = *(u8 *)(r10 - 0x108)
    1712	73 1a 48 ff 00 00 00 00	*(u8 *)(r10 - 0xb8) = r1
    1713	bf a1 00 00 00 00 00 00	r1 = r10
    1714	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1715	bf 72 00 00 00 00 00 00	r2 = r7
    1716	85 10 00 00 e0 05 00 00	call 0x5e0 ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1717	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1718	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB28_122>
    1719	05 00 d7 00 00 00 00 00	goto +0xd7 <LBB28_161>

00000000000035c0 <LBB28_122>
    1720	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1721	7b 1a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r1
    1722	79 a1 d0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x130)
    1723	7b 1a f8 fd 00 00 00 00	*(u64 *)(r10 - 0x208) = r1
    1724	79 a1 c0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x140)
    1725	7b 1a e8 fd 00 00 00 00	*(u64 *)(r10 - 0x218) = r1
    1726	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    1727	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1728	05 00 c2 fc 00 00 00 00	goto -0x33e <LBB28_9>

0000000000003608 <LBB28_123>
    1729	71 74 59 00 00 00 00 00	r4 = *(u8 *)(r7 + 0x59)
    1730	71 72 58 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x58)
    1731	79 70 30 00 00 00 00 00	r0 = *(u64 *)(r7 + 0x30)
    1732	7b 31 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r3
    1733	79 73 40 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x40)
    1734	79 35 00 00 00 00 00 00	r5 = *(u64 *)(r3 + 0x0)
    1735	07 05 00 00 01 00 00 00	r5 += 0x1
    1736	25 05 01 00 01 00 00 00	if r5 > 0x1 goto +0x1 <LBB28_125>
    1737	05 00 97 ff 00 00 00 00	goto -0x69 <LBB28_116>

0000000000003650 <LBB28_125>
    1738	7b 53 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r5
    1739	b7 07 00 00 01 00 00 00	r7 = 0x1
    1740	b7 05 00 00 01 00 00 00	r5 = 0x1
    1741	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB28_127>
    1742	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000003678 <LBB28_127>
    1743	b7 04 00 00 01 00 00 00	r4 = 0x1
    1744	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_129>
    1745	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003690 <LBB28_129>
    1746	7b 4a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r4
    1747	7b 5a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r5
    1748	79 a2 68 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x298)
    1749	71 22 5a 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x5a)
    1750	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_131>
    1751	b7 07 00 00 00 00 00 00	r7 = 0x0

00000000000036c0 <LBB28_131>
    1752	7b 7a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r7
    1753	7b 0a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r0
    1754	7b 1a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r1
    1755	79 a5 68 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x298)
    1756	79 58 68 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x68)
    1757	79 84 00 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x0)
    1758	07 04 00 00 01 00 00 00	r4 += 0x1
    1759	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB28_133>
    1760	05 00 80 ff 00 00 00 00	goto -0x80 <LBB28_116>

0000000000003708 <LBB28_133>
    1761	71 51 89 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x89)
    1762	7b 1a 18 fd 00 00 00 00	*(u64 *)(r10 - 0x2e8) = r1
    1763	71 51 88 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x88)
    1764	7b 1a 10 fd 00 00 00 00	*(u64 *)(r10 - 0x2f0) = r1
    1765	79 51 60 00 00 00 00 00	r1 = *(u64 *)(r5 + 0x60)
    1766	79 52 50 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x50)
    1767	79 57 48 00 00 00 00 00	r7 = *(u64 *)(r5 + 0x48)
    1768	7b 48 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r4
    1769	79 50 70 00 00 00 00 00	r0 = *(u64 *)(r5 + 0x70)
    1770	79 04 00 00 00 00 00 00	r4 = *(u64 *)(r0 + 0x0)
    1771	07 04 00 00 01 00 00 00	r4 += 0x1
    1772	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB28_135>
    1773	05 00 73 ff 00 00 00 00	goto -0x8d <LBB28_116>

0000000000003770 <LBB28_135>
    1774	7b 40 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r4
    1775	79 54 78 00 00 00 00 00	r4 = *(u64 *)(r5 + 0x78)
    1776	7b 4a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r4
    1777	79 54 80 00 00 00 00 00	r4 = *(u64 *)(r5 + 0x80)
    1778	7b 4a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r4
    1779	71 54 8a 00 00 00 00 00	r4 = *(u8 *)(r5 + 0x8a)
    1780	7b 0a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r0
    1781	7b 8a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r8
    1782	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    1783	79 a5 28 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2d8)
    1784	73 5a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r5
    1785	79 a5 30 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2d0)
    1786	73 5a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r5
    1787	79 a5 20 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2e0)
    1788	73 5a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r5
    1789	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1790	7b 7a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r7
    1791	7b 3a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r3
    1792	79 a2 40 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2c0)
    1793	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1794	79 a2 38 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2c8)
    1795	7b 2a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r2
    1796	79 a2 10 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2f0)
    1797	b7 03 00 00 01 00 00 00	r3 = 0x1
    1798	b7 07 00 00 01 00 00 00	r7 = 0x1
    1799	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB28_137>
    1800	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000003848 <LBB28_137>
    1801	b7 04 00 00 01 00 00 00	r4 = 0x1
    1802	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_139>
    1803	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003860 <LBB28_139>
    1804	7b 0a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r0
    1805	7b 1a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r1
    1806	7b 8a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r8
    1807	79 a1 18 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2e8)
    1808	bf 12 00 00 00 00 00 00	r2 = r1
    1809	b7 01 00 00 01 00 00 00	r1 = 0x1
    1810	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_141>
    1811	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000038a0 <LBB28_141>
    1812	7b 1a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r1
    1813	73 1a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r1
    1814	7b 4a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r4
    1815	73 4a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r4
    1816	79 a1 48 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b8)
    1817	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r1
    1818	79 a1 50 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b0)
    1819	7b 1a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r1
    1820	73 7a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r7
    1821	b7 02 00 00 03 00 00 00	r2 = 0x3
    1822	7b 2a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r2
    1823	bf a2 00 00 00 00 00 00	r2 = r10
    1824	07 02 00 00 c8 ff ff ff	r2 += -0x38
    1825	7b 2a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r2
    1826	bf a2 00 00 00 00 00 00	r2 = r10
    1827	07 02 00 00 98 fe ff ff	r2 += -0x168
    1828	7b 2a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r2
    1829	7b 3a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r3
    1830	bf a1 00 00 00 00 00 00	r1 = r10
    1831	07 01 00 00 90 ff ff ff	r1 += -0x70
    1832	bf a2 00 00 00 00 00 00	r2 = r10
    1833	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1834	bf a3 00 00 00 00 00 00	r3 = r10
    1835	07 03 00 00 00 ff ff ff	r3 += -0x100
    1836	bf a5 00 00 00 00 00 00	r5 = r10
    1837	b7 04 00 00 02 00 00 00	r4 = 0x2
    1838	85 10 00 00 37 0a 00 00	call 0xa37 ; <solana_program::program::invoke_signed>
    1839	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    1840	15 08 01 00 14 00 00 00	if r8 == 0x14 goto +0x1 <LBB28_142>
    1841	05 00 75 00 00 00 00 00	goto +0x75 <LBB28_163>

0000000000003990 <LBB28_142>
    1842	bf a1 00 00 00 00 00 00	r1 = r10
    1843	07 01 00 00 00 ff ff ff	r1 += -0x100
    1844	85 10 00 00 f7 f8 ff ff	call -0x709 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    1845	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1846	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB28_146>
    1847	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1848	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB28_146>
    1849	27 02 00 00 22 00 00 00	r2 *= 0x22
    1850	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB28_146>
    1851	b7 03 00 00 01 00 00 00	r3 = 0x1
    1852	85 10 00 00 02 05 00 00	call 0x502 ; <__rust_dealloc>

00000000000039e8 <LBB28_146>
    1853	7b 7a 18 fd 00 00 00 00	*(u64 *)(r10 - 0x2e8) = r7
    1854	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    1855	79 a8 60 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x2a0)
    1856	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB28_149>
    1857	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1858	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB28_149>
    1859	b7 03 00 00 01 00 00 00	r3 = 0x1
    1860	85 10 00 00 fa 04 00 00	call 0x4fa ; <__rust_dealloc>

0000000000003a28 <LBB28_149>
    1861	18 01 00 00 42 27 01 00 00 00 00 00 00 00 00 00	r1 = 0x12742 ll
    1863	b7 02 00 00 29 00 00 00	r2 = 0x29
    1864	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1865	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1866	79 72 30 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x30)
    1867	bf a1 00 00 00 00 00 00	r1 = r10
    1868	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1869	bf 83 00 00 00 00 00 00	r3 = r8
    1870	85 10 00 00 e1 0b 00 00	call 0xbe1 ; <solana_program::system_instruction::assign>
    1871	79 71 38 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x38)
    1872	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    1873	07 03 00 00 01 00 00 00	r3 += 0x1
    1874	25 03 6e 00 01 00 00 00	if r3 > 0x1 goto +0x6e <LBB28_170>
    1875	05 00 0d ff 00 00 00 00	goto -0xf3 <LBB28_116>

0000000000003aa0 <LBB28_151>
    1876	bf 83 00 00 00 00 00 00	r3 = r8
    1877	1f 03 00 00 00 00 00 00	r3 -= r0
    1878	b7 01 00 00 00 00 00 00	r1 = 0x0
    1879	b7 02 00 00 01 00 00 00	r2 = 0x1
    1880	b7 04 00 00 01 00 00 00	r4 = 0x1
    1881	2d 83 01 00 00 00 00 00	if r3 > r8 goto +0x1 <LBB28_153>
    1882	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003ad8 <LBB28_153>
    1883	b7 05 00 00 00 00 00 00	r5 = 0x0
    1884	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB28_155>
    1885	bf 35 00 00 00 00 00 00	r5 = r3

0000000000003af0 <LBB28_155>
    1886	7b 5a 90 fe 00 00 00 00	*(u64 *)(r10 - 0x170) = r5
    1887	7b 2a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r2
    1888	bf a2 00 00 00 00 00 00	r2 = r10
    1889	07 02 00 00 98 fe ff ff	r2 += -0x168
    1890	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1891	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1892	b7 01 00 00 02 00 00 00	r1 = 0x2
    1893	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1894	18 01 00 00 60 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b60 ll
    1896	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1897	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    1899	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    1900	bf a1 00 00 00 00 00 00	r1 = r10
    1901	07 01 00 00 90 fe ff ff	r1 += -0x170
    1902	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    1903	bf a1 00 00 00 00 00 00	r1 = r10
    1904	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1905	bf a2 00 00 00 00 00 00	r2 = r10
    1906	07 02 00 00 00 ff ff ff	r2 += -0x100
    1907	85 10 00 00 c0 0e 00 00	call 0xec0 ; <alloc::fmt::format>
    1908	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1909	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1910	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1911	bf 71 00 00 00 00 00 00	r1 = r7
    1912	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1913	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB28_158>
    1914	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB28_158>
    1915	bf 71 00 00 00 00 00 00	r1 = r7
    1916	bf 82 00 00 00 00 00 00	r2 = r8
    1917	b7 03 00 00 01 00 00 00	r3 = 0x1
    1918	85 10 00 00 c0 04 00 00	call 0x4c0 ; <__rust_dealloc>

0000000000003bf8 <LBB28_158>
    1919	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1920	bf 71 00 00 00 00 00 00	r1 = r7
    1921	85 10 00 00 e9 04 00 00	call 0x4e9 ; <solana_program::account_info::AccountInfo::lamports>
    1922	79 a4 90 fe 00 00 00 00	r4 = *(u64 *)(r10 - 0x170)
    1923	2d 04 a8 00 00 00 00 00	if r4 > r0 goto +0xa8 <LBB28_190>
    1924	79 78 30 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x30)
    1925	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    1926	bf a1 00 00 00 00 00 00	r1 = r10
    1927	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1928	bf 83 00 00 00 00 00 00	r3 = r8
    1929	85 10 00 00 d9 0b 00 00	call 0xbd9 ; <solana_program::system_instruction::transfer>
    1930	79 75 08 00 00 00 00 00	r5 = *(u64 *)(r7 + 0x8)
    1931	79 53 00 00 00 00 00 00	r3 = *(u64 *)(r5 + 0x0)
    1932	07 03 00 00 01 00 00 00	r3 += 0x1
    1933	25 03 c8 00 01 00 00 00	if r3 > 0x1 goto +0xc8 <LBB28_194>
    1934	05 00 d2 fe 00 00 00 00	goto -0x12e <LBB28_116>

0000000000003c78 <LBB28_161>
    1935	79 a7 c0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x140)
    1936	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    1937	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1938	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1939	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    1940	7b 2a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r2
    1941	bf a1 00 00 00 00 00 00	r1 = r10
    1942	07 01 00 00 70 fd ff ff	r1 += -0x290
    1943	bf a2 00 00 00 00 00 00	r2 = r10
    1944	07 02 00 00 00 ff ff ff	r2 += -0x100
    1945	bf a3 00 00 00 00 00 00	r3 = r10
    1946	07 03 00 00 90 ff ff ff	r3 += -0x70
    1947	85 10 00 00 7a fa ff ff	call -0x586 ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1948	79 a2 70 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x290)
    1949	bf 21 00 00 00 00 00 00	r1 = r2
    1950	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1951	15 01 01 00 04 00 00 00	if r1 == 0x4 goto +0x1 <LBB28_162>
    1952	05 00 ba 01 00 00 00 00	goto +0x1ba <LBB28_250>

0000000000003d08 <LBB28_162>
    1953	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1954	07 01 00 00 01 00 00 00	r1 += 0x1
    1955	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    1956	b7 01 00 00 14 00 00 00	r1 = 0x14
    1957	63 1a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r1
    1958	05 00 dc fb 00 00 00 00	goto -0x424 <LBB28_9>

0000000000003d38 <LBB28_163>
    1959	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    1960	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    1961	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    1962	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    1963	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    1964	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    1965	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    1966	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    1967	bf a1 00 00 00 00 00 00	r1 = r10
    1968	07 01 00 00 00 ff ff ff	r1 += -0x100
    1969	85 10 00 00 7a f8 ff ff	call -0x786 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    1970	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1971	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB28_167>
    1972	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1973	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB28_167>
    1974	27 02 00 00 22 00 00 00	r2 *= 0x22
    1975	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB28_167>
    1976	b7 03 00 00 01 00 00 00	r3 = 0x1
    1977	85 10 00 00 85 04 00 00	call 0x485 ; <__rust_dealloc>

0000000000003dd0 <LBB28_167>
    1978	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    1979	15 02 95 01 00 00 00 00	if r2 == 0x0 goto +0x195 <LBB28_249>
    1980	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1981	15 01 93 01 00 00 00 00	if r1 == 0x0 goto +0x193 <LBB28_249>

0000000000003df0 <LBB28_169>
    1982	b7 03 00 00 01 00 00 00	r3 = 0x1
    1983	85 10 00 00 7f 04 00 00	call 0x47f ; <__rust_dealloc>
    1984	05 00 90 01 00 00 00 00	goto +0x190 <LBB28_249>

0000000000003e08 <LBB28_170>
    1985	71 74 59 00 00 00 00 00	r4 = *(u8 *)(r7 + 0x59)
    1986	71 72 58 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x58)
    1987	79 78 30 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x30)
    1988	7b 31 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r3
    1989	79 73 40 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x40)
    1990	79 35 00 00 00 00 00 00	r5 = *(u64 *)(r3 + 0x0)
    1991	07 05 00 00 01 00 00 00	r5 += 0x1
    1992	25 05 01 00 01 00 00 00	if r5 > 0x1 goto +0x1 <LBB28_172>
    1993	05 00 97 fe 00 00 00 00	goto -0x169 <LBB28_116>

0000000000003e50 <LBB28_172>
    1994	7b 53 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r5
    1995	bf 40 00 00 00 00 00 00	r0 = r4
    1996	b7 05 00 00 01 00 00 00	r5 = 0x1
    1997	b7 04 00 00 01 00 00 00	r4 = 0x1
    1998	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB28_174>
    1999	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003e80 <LBB28_174>
    2000	b7 00 00 00 01 00 00 00	r0 = 0x1
    2001	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_176>
    2002	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000003e98 <LBB28_176>
    2003	7b 0a 08 fd 00 00 00 00	*(u64 *)(r10 - 0x2f8) = r0
    2004	7b 4a 10 fd 00 00 00 00	*(u64 *)(r10 - 0x2f0) = r4
    2005	79 a2 68 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x298)
    2006	71 22 5a 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x5a)
    2007	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_178>
    2008	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000003ec8 <LBB28_178>
    2009	bf 50 00 00 00 00 00 00	r0 = r5
    2010	7b 8a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r8
    2011	79 a4 40 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2c0)
    2012	79 47 00 00 00 00 00 00	r7 = *(u64 *)(r4 + 0x0)
    2013	07 07 00 00 01 00 00 00	r7 += 0x1
    2014	25 07 01 00 01 00 00 00	if r7 > 0x1 goto +0x1 <LBB28_180>
    2015	05 00 81 fe 00 00 00 00	goto -0x17f <LBB28_116>

0000000000003f00 <LBB28_180>
    2016	79 a8 68 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x298)
    2017	79 82 50 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x50)
    2018	79 88 48 00 00 00 00 00	r8 = *(u64 *)(r8 + 0x48)
    2019	7b 74 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r7
    2020	79 a5 38 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2c8)
    2021	79 57 00 00 00 00 00 00	r7 = *(u64 *)(r5 + 0x0)
    2022	07 07 00 00 01 00 00 00	r7 += 0x1
    2023	25 07 01 00 01 00 00 00	if r7 > 0x1 goto +0x1 <LBB28_182>
    2024	05 00 78 fe 00 00 00 00	goto -0x188 <LBB28_116>

0000000000003f48 <LBB28_182>
    2025	7b 75 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r7
    2026	79 a7 18 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2e8)
    2027	73 7a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r7
    2028	79 a7 20 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2e0)
    2029	73 7a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r7
    2030	79 a7 28 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2d8)
    2031	73 7a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r7
    2032	79 a7 48 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2b8)
    2033	7b 7a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r7
    2034	79 a7 50 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2b0)
    2035	7b 7a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r7
    2036	7b 5a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r5
    2037	7b 4a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r4
    2038	79 a4 30 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2d0)
    2039	7b 4a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r4
    2040	73 0a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r0
    2041	79 a4 10 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2f0)
    2042	73 4a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r4
    2043	79 a4 08 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2f8)
    2044	73 4a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r4
    2045	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    2046	7b 8a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r8
    2047	7b 3a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r3
    2048	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2049	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    2050	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2051	b7 01 00 00 03 00 00 00	r1 = 0x3
    2052	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    2053	bf a1 00 00 00 00 00 00	r1 = r10
    2054	07 01 00 00 c8 ff ff ff	r1 += -0x38
    2055	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    2056	bf a1 00 00 00 00 00 00	r1 = r10
    2057	07 01 00 00 98 fe ff ff	r1 += -0x168
    2058	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    2059	b7 01 00 00 01 00 00 00	r1 = 0x1
    2060	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    2061	bf a1 00 00 00 00 00 00	r1 = r10
    2062	07 01 00 00 90 ff ff ff	r1 += -0x70
    2063	bf a2 00 00 00 00 00 00	r2 = r10
    2064	07 02 00 00 b0 fe ff ff	r2 += -0x150
    2065	bf a3 00 00 00 00 00 00	r3 = r10
    2066	07 03 00 00 00 ff ff ff	r3 += -0x100
    2067	bf a5 00 00 00 00 00 00	r5 = r10
    2068	b7 04 00 00 02 00 00 00	r4 = 0x2
    2069	85 10 00 00 50 09 00 00	call 0x950 ; <solana_program::program::invoke_signed>
    2070	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    2071	15 08 01 00 14 00 00 00	if r8 == 0x14 goto +0x1 <LBB28_183>
    2072	05 00 49 01 00 00 00 00	goto +0x149 <LBB28_252>

00000000000040c8 <LBB28_183>
    2073	bf a1 00 00 00 00 00 00	r1 = r10
    2074	07 01 00 00 00 ff ff ff	r1 += -0x100
    2075	85 10 00 00 10 f8 ff ff	call -0x7f0 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    2076	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2077	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB28_187>
    2078	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2079	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB28_187>
    2080	27 02 00 00 22 00 00 00	r2 *= 0x22
    2081	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB28_187>
    2082	b7 03 00 00 01 00 00 00	r3 = 0x1
    2083	85 10 00 00 1b 04 00 00	call 0x41b ; <__rust_dealloc>

0000000000004120 <LBB28_187>
    2084	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2085	79 a7 58 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2a8)
    2086	15 02 6d fe 00 00 00 00	if r2 == 0x0 goto -0x193 <LBB28_121>
    2087	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2088	15 01 6b fe 00 00 00 00	if r1 == 0x0 goto -0x195 <LBB28_121>
    2089	b7 03 00 00 01 00 00 00	r3 = 0x1
    2090	85 10 00 00 14 04 00 00	call 0x414 ; <__rust_dealloc>
    2091	05 00 68 fe 00 00 00 00	goto -0x198 <LBB28_121>

0000000000004160 <LBB28_190>
    2092	bf 71 00 00 00 00 00 00	r1 = r7
    2093	85 10 00 00 3d 04 00 00	call 0x43d ; <solana_program::account_info::AccountInfo::lamports>
    2094	7b 0a a8 fe 00 00 00 00	*(u64 *)(r10 - 0x158) = r0
    2095	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    2097	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    2098	bf a1 00 00 00 00 00 00	r1 = r10
    2099	07 01 00 00 a8 fe ff ff	r1 += -0x158
    2100	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    2101	b7 01 00 00 01 00 00 00	r1 = 0x1
    2102	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    2103	bf a1 00 00 00 00 00 00	r1 = r10
    2104	07 01 00 00 98 fe ff ff	r1 += -0x168
    2105	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    2106	b7 08 00 00 00 00 00 00	r8 = 0x0
    2107	7b 8a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r8
    2108	b7 01 00 00 02 00 00 00	r1 = 0x2
    2109	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2110	18 01 00 00 80 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b80 ll
    2112	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2113	bf a1 00 00 00 00 00 00	r1 = r10
    2114	07 01 00 00 b0 fe ff ff	r1 += -0x150
    2115	bf a2 00 00 00 00 00 00	r2 = r10
    2116	07 02 00 00 00 ff ff ff	r2 += -0x100
    2117	85 10 00 00 ee 0d 00 00	call 0xdee ; <alloc::fmt::format>
    2118	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    2119	7b 1a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r1
    2120	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    2121	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    2122	bf 71 00 00 00 00 00 00	r1 = r7
    2123	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    2124	79 a2 60 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a0)
    2125	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB28_193>
    2126	15 07 03 00 00 00 00 00	if r7 == 0x0 goto +0x3 <LBB28_193>
    2127	bf 71 00 00 00 00 00 00	r1 = r7
    2128	b7 03 00 00 01 00 00 00	r3 = 0x1
    2129	85 10 00 00 ed 03 00 00	call 0x3ed ; <__rust_dealloc>

0000000000004290 <LBB28_193>
    2130	18 01 00 00 00 00 00 00 00 00 00 00 ae c7 71 00	r1 = 0x71c7ae00000000 ll
    2132	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    2133	05 00 f3 00 00 00 00 00	goto +0xf3 <LBB28_248>

00000000000042b0 <LBB28_194>
    2134	71 72 29 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x29)
    2135	71 71 28 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x28)
    2136	79 70 00 00 00 00 00 00	r0 = *(u64 *)(r7 + 0x0)
    2137	7b 35 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r3
    2138	79 74 10 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x10)
    2139	79 43 00 00 00 00 00 00	r3 = *(u64 *)(r4 + 0x0)
    2140	07 03 00 00 01 00 00 00	r3 += 0x1
    2141	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB28_196>
    2142	05 00 02 fe 00 00 00 00	goto -0x1fe <LBB28_116>

00000000000042f8 <LBB28_196>
    2143	7b 4a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r4
    2144	7b 34 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r3
    2145	b7 04 00 00 01 00 00 00	r4 = 0x1
    2146	b7 03 00 00 01 00 00 00	r3 = 0x1
    2147	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB28_198>
    2148	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000004328 <LBB28_198>
    2149	b7 02 00 00 01 00 00 00	r2 = 0x1
    2150	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB28_200>
    2151	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000004340 <LBB28_200>
    2152	7b 0a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r0
    2153	7b 2a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r2
    2154	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    2155	71 11 2a 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x2a)
    2156	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB28_202>
    2157	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000004370 <LBB28_202>
    2158	bf 87 00 00 00 00 00 00	r7 = r8
    2159	7b 4a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r4
    2160	7b 3a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r3
    2161	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    2162	79 10 38 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x38)
    2163	79 02 00 00 00 00 00 00	r2 = *(u64 *)(r0 + 0x0)
    2164	07 02 00 00 01 00 00 00	r2 += 0x1
    2165	25 02 01 00 01 00 00 00	if r2 > 0x1 goto +0x1 <LBB28_204>
    2166	05 00 ea fd 00 00 00 00	goto -0x216 <LBB28_116>

00000000000043b8 <LBB28_204>
    2167	71 13 59 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x59)
    2168	bf 14 00 00 00 00 00 00	r4 = r1
    2169	71 41 58 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x58)
    2170	79 48 20 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x20)
    2171	7b 8a 18 fd 00 00 00 00	*(u64 *)(r10 - 0x2e8) = r8
    2172	79 48 18 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x18)
    2173	7b 8a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r8
    2174	7b 0a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r0
    2175	7b 20 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r2
    2176	79 42 40 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x40)
    2177	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2178	07 04 00 00 01 00 00 00	r4 += 0x1
    2179	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB28_206>
    2180	05 00 dc fd 00 00 00 00	goto -0x224 <LBB28_116>

0000000000004428 <LBB28_206>
    2181	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2182	b7 00 00 00 01 00 00 00	r0 = 0x1
    2183	b7 08 00 00 01 00 00 00	r8 = 0x1
    2184	bf 74 00 00 00 00 00 00	r4 = r7
    2185	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB28_208>
    2186	b7 08 00 00 00 00 00 00	r8 = 0x0

0000000000004458 <LBB28_208>
    2187	b7 07 00 00 01 00 00 00	r7 = 0x1
    2188	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB28_210>
    2189	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000004470 <LBB28_210>
    2190	79 a1 50 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b0)
    2191	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    2192	71 11 5a 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x5a)
    2193	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB28_212>
    2194	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000004498 <LBB28_212>
    2195	7b 0a 08 fd 00 00 00 00	*(u64 *)(r10 - 0x2f8) = r0
    2196	7b 5a 10 fd 00 00 00 00	*(u64 *)(r10 - 0x2f0) = r5
    2197	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    2198	79 10 68 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x68)
    2199	79 03 00 00 00 00 00 00	r3 = *(u64 *)(r0 + 0x0)
    2200	07 03 00 00 01 00 00 00	r3 += 0x1
    2201	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB28_214>
    2202	05 00 c6 fd 00 00 00 00	goto -0x23a <LBB28_116>

00000000000044d8 <LBB28_214>
    2203	7b 8a f8 fc 00 00 00 00	*(u64 *)(r10 - 0x308) = r8
    2204	7b 4a 00 fd 00 00 00 00	*(u64 *)(r10 - 0x300) = r4
    2205	71 14 89 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x89)
    2206	bf 15 00 00 00 00 00 00	r5 = r1
    2207	71 51 88 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x88)
    2208	79 58 60 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x60)
    2209	7b 8a e0 fc 00 00 00 00	*(u64 *)(r10 - 0x320) = r8
    2210	79 58 50 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x50)
    2211	7b 8a e8 fc 00 00 00 00	*(u64 *)(r10 - 0x318) = r8
    2212	79 58 48 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x48)
    2213	7b 8a f0 fc 00 00 00 00	*(u64 *)(r10 - 0x310) = r8
    2214	7b 30 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r3
    2215	79 55 70 00 00 00 00 00	r5 = *(u64 *)(r5 + 0x70)
    2216	79 53 00 00 00 00 00 00	r3 = *(u64 *)(r5 + 0x0)
    2217	07 03 00 00 01 00 00 00	r3 += 0x1
    2218	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB28_216>
    2219	05 00 b5 fd 00 00 00 00	goto -0x24b <LBB28_116>

0000000000004560 <LBB28_216>
    2220	7b 2a d8 fc 00 00 00 00	*(u64 *)(r10 - 0x328) = r2
    2221	7b 35 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r3
    2222	bf 48 00 00 00 00 00 00	r8 = r4
    2223	bf 13 00 00 00 00 00 00	r3 = r1
    2224	b7 04 00 00 01 00 00 00	r4 = 0x1
    2225	b7 01 00 00 01 00 00 00	r1 = 0x1
    2226	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB28_218>
    2227	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000045a0 <LBB28_218>
    2228	bf 72 00 00 00 00 00 00	r2 = r7
    2229	79 a3 48 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x2b8)
    2230	b7 03 00 00 01 00 00 00	r3 = 0x1
    2231	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB28_220>
    2232	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000045c8 <LBB28_220>
    2233	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    2234	71 78 8a 00 00 00 00 00	r8 = *(u8 *)(r7 + 0x8a)
    2235	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB28_222>
    2236	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000045e8 <LBB28_222>
    2237	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    2238	79 78 78 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x78)
    2239	79 77 80 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x80)
    2240	73 3a 89 ff 00 00 00 00	*(u8 *)(r10 - 0x77) = r3
    2241	73 1a 88 ff 00 00 00 00	*(u8 *)(r10 - 0x78) = r1
    2242	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    2243	7b 8a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r8
    2244	7b 5a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r5
    2245	7b 0a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r0
    2246	79 a1 e0 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x320)
    2247	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    2248	79 a1 08 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2f8)
    2249	73 1a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r1
    2250	79 a1 f8 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x308)
    2251	73 1a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r1
    2252	73 2a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r2
    2253	79 a1 e8 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x318)
    2254	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r1
    2255	79 a1 f0 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x310)
    2256	7b 1a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r1
    2257	79 a1 d8 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x328)
    2258	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    2259	79 a1 28 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2d8)
    2260	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    2261	79 a1 00 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x300)
    2262	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    2263	79 a1 38 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2c8)
    2264	73 1a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r1
    2265	79 a1 40 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2c0)
    2266	73 1a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r1
    2267	79 a1 30 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2d0)
    2268	73 1a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r1
    2269	79 a1 18 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2e8)
    2270	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    2271	79 a1 20 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2e0)
    2272	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    2273	79 a1 48 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b8)
    2274	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    2275	79 a1 10 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2f0)
    2276	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2277	79 a1 50 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b0)
    2278	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2279	73 4a 8a ff 00 00 00 00	*(u8 *)(r10 - 0x76) = r4
    2280	bf a1 00 00 00 00 00 00	r1 = r10
    2281	07 01 00 00 90 ff ff ff	r1 += -0x70
    2282	bf a2 00 00 00 00 00 00	r2 = r10
    2283	07 02 00 00 b0 fe ff ff	r2 += -0x150
    2284	bf a3 00 00 00 00 00 00	r3 = r10
    2285	07 03 00 00 00 ff ff ff	r3 += -0x100
    2286	b7 04 00 00 03 00 00 00	r4 = 0x3
    2287	85 10 00 00 6e 08 00 00	call 0x86e ; <solana_program::program::invoke>
    2288	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    2289	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2290	07 02 00 00 ff ff ff ff	r2 += -0x1
    2291	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2292	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_225>
    2293	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2294	07 02 00 00 ff ff ff ff	r2 += -0x1
    2295	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2296	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_225>
    2297	b7 02 00 00 20 00 00 00	r2 = 0x20
    2298	b7 03 00 00 08 00 00 00	r3 = 0x8
    2299	85 10 00 00 43 03 00 00	call 0x343 ; <__rust_dealloc>

00000000000047e0 <LBB28_225>
    2300	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    2301	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2302	07 02 00 00 ff ff ff ff	r2 += -0x1
    2303	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2304	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_228>
    2305	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2306	07 02 00 00 ff ff ff ff	r2 += -0x1
    2307	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2308	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_228>
    2309	b7 02 00 00 28 00 00 00	r2 = 0x28
    2310	b7 03 00 00 08 00 00 00	r3 = 0x8
    2311	85 10 00 00 37 03 00 00	call 0x337 ; <__rust_dealloc>

0000000000004840 <LBB28_228>
    2312	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc8)
    2313	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2314	07 02 00 00 ff ff ff ff	r2 += -0x1
    2315	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2316	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_231>
    2317	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2318	07 02 00 00 ff ff ff ff	r2 += -0x1
    2319	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2320	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_231>
    2321	b7 02 00 00 20 00 00 00	r2 = 0x20
    2322	b7 03 00 00 08 00 00 00	r3 = 0x8
    2323	85 10 00 00 2b 03 00 00	call 0x32b ; <__rust_dealloc>

00000000000048a0 <LBB28_231>
    2324	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
    2325	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2326	07 02 00 00 ff ff ff ff	r2 += -0x1
    2327	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2328	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_234>
    2329	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2330	07 02 00 00 ff ff ff ff	r2 += -0x1
    2331	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2332	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_234>
    2333	b7 02 00 00 28 00 00 00	r2 = 0x28
    2334	b7 03 00 00 08 00 00 00	r3 = 0x8
    2335	85 10 00 00 1f 03 00 00	call 0x31f ; <__rust_dealloc>

0000000000004900 <LBB28_234>
    2336	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    2337	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2338	07 02 00 00 ff ff ff ff	r2 += -0x1
    2339	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2340	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_237>
    2341	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2342	07 02 00 00 ff ff ff ff	r2 += -0x1
    2343	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2344	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_237>
    2345	b7 02 00 00 20 00 00 00	r2 = 0x20
    2346	b7 03 00 00 08 00 00 00	r3 = 0x8
    2347	85 10 00 00 13 03 00 00	call 0x313 ; <__rust_dealloc>

0000000000004960 <LBB28_237>
    2348	79 a1 70 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x90)
    2349	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2350	07 02 00 00 ff ff ff ff	r2 += -0x1
    2351	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2352	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB28_240>
    2353	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2354	07 02 00 00 ff ff ff ff	r2 += -0x1
    2355	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2356	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB28_240>
    2357	b7 02 00 00 28 00 00 00	r2 = 0x28
    2358	b7 03 00 00 08 00 00 00	r3 = 0x8
    2359	85 10 00 00 07 03 00 00	call 0x307 ; <__rust_dealloc>

00000000000049c0 <LBB28_240>
    2360	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2361	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB28_244>
    2362	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2363	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB28_244>
    2364	27 02 00 00 22 00 00 00	r2 *= 0x22
    2365	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB28_244>
    2366	b7 03 00 00 01 00 00 00	r3 = 0x1
    2367	85 10 00 00 ff 02 00 00	call 0x2ff ; <__rust_dealloc>

0000000000004a00 <LBB28_244>
    2368	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2369	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB28_247>
    2370	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2371	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB28_247>
    2372	b7 03 00 00 01 00 00 00	r3 = 0x1
    2373	85 10 00 00 f9 02 00 00	call 0x2f9 ; <__rust_dealloc>

0000000000004a30 <LBB28_247>
    2374	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    2375	55 08 01 00 14 00 00 00	if r8 != 0x14 goto +0x1 <LBB28_248>
    2376	05 00 0a fd 00 00 00 00	goto -0x2f6 <LBB28_115>

0000000000004a48 <LBB28_248>
    2377	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    2378	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    2379	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    2380	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    2381	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    2382	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    2383	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    2384	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1

0000000000004a88 <LBB28_249>
    2385	61 a1 70 fe 00 00 00 00	r1 = *(u32 *)(r10 - 0x190)
    2386	63 1a fc fd 00 00 00 00	*(u32 *)(r10 - 0x204) = r1
    2387	79 a1 68 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x198)
    2388	7b 1a f4 fd 00 00 00 00	*(u64 *)(r10 - 0x20c) = r1
    2389	79 a1 60 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1a0)
    2390	7b 1a ec fd 00 00 00 00	*(u64 *)(r10 - 0x214) = r1
    2391	79 a1 58 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1a8)
    2392	7b 1a e4 fd 00 00 00 00	*(u64 *)(r10 - 0x21c) = r1
    2393	63 8a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r8
    2394	05 00 28 fa 00 00 00 00	goto -0x5d8 <LBB28_9>

0000000000004ad8 <LBB28_250>
    2395	79 a3 78 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x288)

0000000000004ae0 <LBB28_251>
    2396	bf a1 00 00 00 00 00 00	r1 = r10
    2397	07 01 00 00 e0 fd ff ff	r1 += -0x220
    2398	85 10 00 00 4e 09 00 00	call 0x94e ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    2399	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2400	07 01 00 00 01 00 00 00	r1 += 0x1
    2401	05 00 b6 fc 00 00 00 00	goto -0x34a <LBB28_109>

0000000000004b10 <LBB28_252>
    2402	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    2403	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    2404	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    2405	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    2406	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    2407	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    2408	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    2409	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    2410	bf a1 00 00 00 00 00 00	r1 = r10
    2411	07 01 00 00 00 ff ff ff	r1 += -0x100
    2412	85 10 00 00 bf f6 ff ff	call -0x941 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    2413	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2414	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB28_256>
    2415	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2416	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB28_256>
    2417	27 02 00 00 22 00 00 00	r2 *= 0x22
    2418	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB28_256>
    2419	b7 03 00 00 01 00 00 00	r3 = 0x1
    2420	85 10 00 00 ca 02 00 00	call 0x2ca ; <__rust_dealloc>

0000000000004ba8 <LBB28_256>
    2421	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2422	15 02 da ff 00 00 00 00	if r2 == 0x0 goto -0x26 <LBB28_249>
    2423	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2424	15 01 d8 ff 00 00 00 00	if r1 == 0x0 goto -0x28 <LBB28_249>
    2425	05 00 44 fe 00 00 00 00	goto -0x1bc <LBB28_169>

0000000000004bd0 <__rg_alloc>
    2426	18 03 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r3 = 0x300000000 ll
    2428	79 33 00 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x0)
    2429	18 04 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r4 = 0x300008000 ll
    2431	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB29_2>
    2432	bf 34 00 00 00 00 00 00	r4 = r3

0000000000004c08 <LBB29_2>
    2433	bf 43 00 00 00 00 00 00	r3 = r4
    2434	1f 13 00 00 00 00 00 00	r3 -= r1
    2435	b7 00 00 00 00 00 00 00	r0 = 0x0
    2436	b7 05 00 00 01 00 00 00	r5 = 0x1
    2437	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB29_4>
    2438	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000004c38 <LBB29_4>
    2439	b7 01 00 00 00 00 00 00	r1 = 0x0
    2440	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB29_6>
    2441	bf 31 00 00 00 00 00 00	r1 = r3

0000000000004c50 <LBB29_6>
    2442	87 02 00 00 00 00 00 00	r2 = -r2
    2443	5f 21 00 00 00 00 00 00	r1 &= r2
    2444	18 02 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000008 ll
    2446	2d 12 04 00 00 00 00 00	if r2 > r1 goto +0x4 <LBB29_8>
    2447	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
    2449	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    2450	bf 10 00 00 00 00 00 00	r0 = r1

0000000000004c98 <LBB29_8>
    2451	95 00 00 00 00 00 00 00	exit

0000000000004ca0 <__rg_dealloc>
    2452	95 00 00 00 00 00 00 00	exit

0000000000004ca8 <__rg_realloc>
    2453	bf 15 00 00 00 00 00 00	r5 = r1
    2454	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2456	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2457	18 06 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r6 = 0x300008000 ll
    2459	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB31_2>
    2460	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004ce8 <LBB31_2>
    2461	bf 61 00 00 00 00 00 00	r1 = r6
    2462	1f 41 00 00 00 00 00 00	r1 -= r4
    2463	b7 00 00 00 00 00 00 00	r0 = 0x0
    2464	b7 07 00 00 01 00 00 00	r7 = 0x1
    2465	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB31_4>
    2466	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000004d18 <LBB31_4>
    2467	b7 06 00 00 00 00 00 00	r6 = 0x0
    2468	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB31_6>
    2469	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004d30 <LBB31_6>
    2470	87 03 00 00 00 00 00 00	r3 = -r3
    2471	5f 36 00 00 00 00 00 00	r6 &= r3
    2472	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
    2474	2d 61 0a 00 00 00 00 00	if r1 > r6 goto +0xa <LBB31_10>
    2475	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2477	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    2478	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB31_9>
    2479	bf 24 00 00 00 00 00 00	r4 = r2

0000000000004d80 <LBB31_9>
    2480	bf 61 00 00 00 00 00 00	r1 = r6
    2481	bf 52 00 00 00 00 00 00	r2 = r5
    2482	bf 43 00 00 00 00 00 00	r3 = r4
    2483	85 10 00 00 33 19 00 00	call 0x1933 ; <memcpy>
    2484	bf 60 00 00 00 00 00 00	r0 = r6

0000000000004da8 <LBB31_10>
    2485	95 00 00 00 00 00 00 00	exit

0000000000004db0 <custom_panic>
    2486	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    2487	bf a1 00 00 00 00 00 00	r1 = r10
    2488	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2489	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2490	b7 01 00 00 00 00 00 00	r1 = 0x0
    2491	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2492	b7 01 00 00 01 00 00 00	r1 = 0x1
    2493	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    2494	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    2495	18 01 00 00 b0 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13bb0 ll
    2497	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2498	18 01 00 00 d0 61 00 00 00 00 00 00 00 00 00 00	r1 = 0x61d0 ll
    2500	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2501	bf a1 00 00 00 00 00 00	r1 = r10
    2502	07 01 00 00 a0 ff ff ff	r1 += -0x60
    2503	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2504	bf a1 00 00 00 00 00 00	r1 = r10
    2505	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2506	bf a2 00 00 00 00 00 00	r2 = r10
    2507	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2508	85 10 00 00 67 0c 00 00	call 0xc67 ; <alloc::fmt::format>
    2509	79 a6 b0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x50)
    2510	79 a7 a8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x58)
    2511	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    2512	bf 71 00 00 00 00 00 00	r1 = r7
    2513	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    2514	15 06 05 00 00 00 00 00	if r6 == 0x0 goto +0x5 <LBB33_3>
    2515	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB33_3>
    2516	bf 71 00 00 00 00 00 00	r1 = r7
    2517	bf 62 00 00 00 00 00 00	r2 = r6
    2518	b7 03 00 00 01 00 00 00	r3 = 0x1
    2519	85 10 00 00 67 02 00 00	call 0x267 ; <__rust_dealloc>

0000000000004ec0 <LBB33_3>
    2520	95 00 00 00 00 00 00 00	exit

0000000000004ec8 <<tictactoe::error::TictactoeError as core::fmt::Display>::fmt>
    2521	bf 23 00 00 00 00 00 00	r3 = r2
    2522	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    2523	65 01 0d 00 ae c7 71 00	if r1 s> 0x71c7ae goto +0xd <LBB35_4>
    2524	15 01 25 00 ac c7 71 00	if r1 == 0x71c7ac goto +0x25 <LBB35_9>
    2525	15 01 2f 00 ad c7 71 00	if r1 == 0x71c7ad goto +0x2f <LBB35_10>
    2526	18 01 00 00 90 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12690 ll
    2528	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2529	b7 01 00 00 00 00 00 00	r1 = 0x0
    2530	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2531	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2532	b7 01 00 00 01 00 00 00	r1 = 0x1
    2533	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2534	18 01 00 00 00 3c 01 00 00 00 00 00 00 00 00 00	r1 = 0x13c00 ll
    2536	05 00 44 00 00 00 00 00	goto +0x44 <LBB35_13>

0000000000004f48 <LBB35_4>
    2537	65 01 0c 00 b0 c7 71 00	if r1 s> 0x71c7b0 goto +0xc <LBB35_7>
    2538	15 01 2d 00 af c7 71 00	if r1 == 0x71c7af goto +0x2d <LBB35_11>
    2539	18 01 00 00 90 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12690 ll
    2541	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2542	b7 01 00 00 00 00 00 00	r1 = 0x0
    2543	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2544	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2545	b7 01 00 00 01 00 00 00	r1 = 0x1
    2546	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2547	18 01 00 00 e0 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13be0 ll
    2549	05 00 37 00 00 00 00 00	goto +0x37 <LBB35_13>

0000000000004fb0 <LBB35_7>
    2550	15 01 2c 00 b1 c7 71 00	if r1 == 0x71c7b1 goto +0x2c <LBB35_12>
    2551	18 01 00 00 90 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12690 ll
    2553	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2554	b7 01 00 00 00 00 00 00	r1 = 0x0
    2555	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2556	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2557	b7 01 00 00 01 00 00 00	r1 = 0x1
    2558	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2559	18 01 00 00 c0 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13bc0 ll
    2561	05 00 2b 00 00 00 00 00	goto +0x2b <LBB35_13>

0000000000005010 <LBB35_9>
    2562	18 01 00 00 90 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12690 ll
    2564	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2565	b7 01 00 00 00 00 00 00	r1 = 0x0
    2566	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2567	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2568	b7 01 00 00 01 00 00 00	r1 = 0x1
    2569	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2570	18 01 00 00 20 3c 01 00 00 00 00 00 00 00 00 00	r1 = 0x13c20 ll
    2572	05 00 20 00 00 00 00 00	goto +0x20 <LBB35_13>

0000000000005068 <LBB35_10>
    2573	18 01 00 00 90 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12690 ll
    2575	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2576	b7 01 00 00 00 00 00 00	r1 = 0x0
    2577	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2578	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2579	b7 01 00 00 01 00 00 00	r1 = 0x1
    2580	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2581	18 01 00 00 10 3c 01 00 00 00 00 00 00 00 00 00	r1 = 0x13c10 ll
    2583	05 00 15 00 00 00 00 00	goto +0x15 <LBB35_13>

00000000000050c0 <LBB35_11>
    2584	18 01 00 00 90 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12690 ll
    2586	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2587	b7 01 00 00 00 00 00 00	r1 = 0x0
    2588	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2589	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2590	b7 01 00 00 01 00 00 00	r1 = 0x1
    2591	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2592	18 01 00 00 f0 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13bf0 ll
    2594	05 00 0a 00 00 00 00 00	goto +0xa <LBB35_13>

0000000000005118 <LBB35_12>
    2595	18 01 00 00 90 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12690 ll
    2597	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2598	b7 01 00 00 00 00 00 00	r1 = 0x0
    2599	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2600	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2601	b7 01 00 00 01 00 00 00	r1 = 0x1
    2602	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2603	18 01 00 00 d0 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13bd0 ll

0000000000005168 <LBB35_13>
    2605	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2606	bf a2 00 00 00 00 00 00	r2 = r10
    2607	07 02 00 00 d0 ff ff ff	r2 += -0x30
    2608	bf 31 00 00 00 00 00 00	r1 = r3
    2609	85 10 00 00 e0 10 00 00	call 0x10e0 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    2610	95 00 00 00 00 00 00 00	exit

0000000000005198 <<tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize>
    2611	bf 16 00 00 00 00 00 00	r6 = r1
    2612	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
    2613	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB36_5>
    2614	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2615	b7 02 00 00 01 00 00 00	r2 = 0x1
    2616	85 10 00 00 04 02 00 00	call 0x204 ; <__rust_alloc>
    2617	bf 07 00 00 00 00 00 00	r7 = r0
    2618	55 07 3c 00 00 00 00 00	if r7 != 0x0 goto +0x3c <LBB36_3>
    2619	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2620	b7 02 00 00 01 00 00 00	r2 = 0x1
    2621	85 10 00 00 ee 0b 00 00	call 0xbee ; <alloc::alloc::handle_alloc_error>
    2622	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000051f8 <LBB36_5>
    2623	07 03 00 00 ff ff ff ff	r3 += -0x1
    2624	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2625	71 41 00 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x0)
    2626	7b 32 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r3
    2627	07 04 00 00 01 00 00 00	r4 += 0x1
    2628	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2629	73 1a 8f ff 00 00 00 00	*(u8 *)(r10 - 0x71) = r1
    2630	15 01 0c 00 00 00 00 00	if r1 == 0x0 goto +0xc <LBB36_12>
    2631	15 01 73 00 01 00 00 00	if r1 == 0x1 goto +0x73 <LBB36_15>
    2632	15 01 01 00 02 00 00 00	if r1 == 0x2 goto +0x1 <LBB36_13>
    2633	05 00 12 00 00 00 00 00	goto +0x12 <LBB36_9>

0000000000005250 <LBB36_13>
    2634	bf a1 00 00 00 00 00 00	r1 = r10
    2635	07 01 00 00 c0 ff ff ff	r1 += -0x40
    2636	85 10 00 00 ec 00 00 00	call 0xec ; <<tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize>
    2637	71 a1 c0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x40)
    2638	15 01 0a 00 01 00 00 00	if r1 == 0x1 goto +0xa <LBB36_17>
    2639	b7 01 00 00 02 00 00 00	r1 = 0x2
    2640	71 a5 c2 ff 00 00 00 00	r5 = *(u8 *)(r10 - 0x3e)
    2641	71 a4 c1 ff 00 00 00 00	r4 = *(u8 *)(r10 - 0x3f)
    2642	05 00 68 00 00 00 00 00	goto +0x68 <LBB36_15>

0000000000005298 <LBB36_12>
    2643	bf a1 00 00 00 00 00 00	r1 = r10
    2644	07 01 00 00 c0 ff ff ff	r1 += -0x40
    2645	85 10 00 00 79 09 00 00	call 0x979 ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
    2646	71 a1 c0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x40)
    2647	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB36_17>
    2648	05 00 55 00 00 00 00 00	goto +0x55 <LBB36_16>

00000000000052c8 <LBB36_17>
    2649	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    2650	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    2651	05 00 3b 00 00 00 00 00	goto +0x3b <LBB36_18>

00000000000052e0 <LBB36_9>
    2652	bf a1 00 00 00 00 00 00	r1 = r10
    2653	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2654	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2655	b7 01 00 00 00 00 00 00	r1 = 0x0
    2656	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2657	b7 07 00 00 01 00 00 00	r7 = 0x1
    2658	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
    2659	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    2660	18 01 00 00 a0 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ba0 ll
    2662	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2663	18 01 00 00 28 61 00 00 00 00 00 00 00 00 00 00	r1 = 0x6128 ll
    2665	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2666	bf a1 00 00 00 00 00 00	r1 = r10
    2667	07 01 00 00 8f ff ff ff	r1 += -0x71
    2668	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2669	bf a1 00 00 00 00 00 00	r1 = r10
    2670	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2671	bf a2 00 00 00 00 00 00	r2 = r10
    2672	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2673	85 10 00 00 c2 0b 00 00	call 0xbc2 ; <alloc::fmt::format>
    2674	b7 01 00 00 18 00 00 00	r1 = 0x18
    2675	b7 02 00 00 08 00 00 00	r2 = 0x8
    2676	85 10 00 00 c8 01 00 00	call 0x1c8 ; <__rust_alloc>
    2677	55 00 25 00 00 00 00 00	if r0 != 0x0 goto +0x25 <LBB36_11>
    2678	05 00 0f 00 00 00 00 00	goto +0xf <LBB36_4>

00000000000053b8 <LBB36_3>
    2679	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2680	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2681	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2683	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2684	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2686	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2687	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2689	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2690	b7 01 00 00 18 00 00 00	r1 = 0x18
    2691	b7 02 00 00 08 00 00 00	r2 = 0x8
    2692	85 10 00 00 b8 01 00 00	call 0x1b8 ; <__rust_alloc>
    2693	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB36_8>

0000000000005430 <LBB36_4>
    2694	b7 01 00 00 18 00 00 00	r1 = 0x18
    2695	b7 02 00 00 08 00 00 00	r2 = 0x8
    2696	85 10 00 00 a3 0b 00 00	call 0xba3 ; <alloc::alloc::handle_alloc_error>
    2697	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005450 <LBB36_8>
    2698	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2699	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2700	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2701	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2702	bf a1 00 00 00 00 00 00	r1 = r10
    2703	07 01 00 00 68 ff ff ff	r1 += -0x98
    2704	b7 02 00 00 14 00 00 00	r2 = 0x14
    2705	bf 03 00 00 00 00 00 00	r3 = r0
    2706	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
    2708	85 10 00 00 73 0a 00 00	call 0xa73 ; <std::io::error::Error::_new>
    2709	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    2710	79 a2 70 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x90)

00000000000054b8 <LBB36_18>
    2711	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2712	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2713	b7 01 00 00 01 00 00 00	r1 = 0x1
    2714	05 00 2e 00 00 00 00 00	goto +0x2e <LBB36_19>

00000000000054d8 <LBB36_11>
    2715	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2716	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2717	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    2718	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2719	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    2720	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    2721	bf a1 00 00 00 00 00 00	r1 = r10
    2722	07 01 00 00 78 ff ff ff	r1 += -0x88
    2723	b7 02 00 00 14 00 00 00	r2 = 0x14
    2724	bf 03 00 00 00 00 00 00	r3 = r0
    2725	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
    2727	85 10 00 00 60 0a 00 00	call 0xa60 ; <std::io::error::Error::_new>
    2728	79 a1 78 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x88)
    2729	79 a2 80 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x80)
    2730	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2731	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2732	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7
    2733	05 00 1c 00 00 00 00 00	goto +0x1c <LBB36_20>

0000000000005570 <LBB36_16>
    2734	61 a1 c3 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x3d)
    2735	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 0x60) = r1
    2736	71 a1 c7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x39)
    2737	73 1a a4 ff 00 00 00 00	*(u8 *)(r10 - 0x5c) = r1
    2738	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    2739	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    2740	71 a1 e0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x20)
    2741	73 1a 98 ff 00 00 00 00	*(u8 *)(r10 - 0x68) = r1
    2742	79 a0 d0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x30)
    2743	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    2744	b7 01 00 00 00 00 00 00	r1 = 0x0
    2745	71 a5 c2 ff 00 00 00 00	r5 = *(u8 *)(r10 - 0x3e)
    2746	71 a4 c1 ff 00 00 00 00	r4 = *(u8 *)(r10 - 0x3f)

00000000000055d8 <LBB36_15>
    2747	71 a2 a4 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x5c)
    2748	73 26 08 00 00 00 00 00	*(u8 *)(r6 + 0x8) = r2
    2749	61 a2 a0 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x60)
    2750	63 26 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r2
    2751	71 a2 98 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x68)
    2752	79 a7 90 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x70)
    2753	7b 06 11 00 00 00 00 00	*(u64 *)(r6 + 0x11) = r0
    2754	7b 36 09 00 00 00 00 00	*(u64 *)(r6 + 0x9) = r3
    2755	7b 76 19 00 00 00 00 00	*(u64 *)(r6 + 0x19) = r7
    2756	73 26 21 00 00 00 00 00	*(u8 *)(r6 + 0x21) = r2
    2757	73 56 03 00 00 00 00 00	*(u8 *)(r6 + 0x3) = r5
    2758	73 46 02 00 00 00 00 00	*(u8 *)(r6 + 0x2) = r4
    2759	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
    2760	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000005648 <LBB36_19>
    2761	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1

0000000000005650 <LBB36_20>
    2762	95 00 00 00 00 00 00 00	exit

0000000000005658 <<tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize>
    2763	bf 16 00 00 00 00 00 00	r6 = r1
    2764	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    2765	55 01 09 00 00 00 00 00	if r1 != 0x0 goto +0x9 <LBB38_5>
    2766	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2767	b7 02 00 00 01 00 00 00	r2 = 0x1
    2768	85 10 00 00 6c 01 00 00	call 0x16c ; <__rust_alloc>
    2769	bf 07 00 00 00 00 00 00	r7 = r0
    2770	55 07 29 00 00 00 00 00	if r7 != 0x0 goto +0x29 <LBB38_3>
    2771	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2772	b7 02 00 00 01 00 00 00	r2 = 0x1
    2773	85 10 00 00 56 0b 00 00	call 0xb56 ; <alloc::alloc::handle_alloc_error>
    2774	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000056b8 <LBB38_5>
    2775	07 01 00 00 ff ff ff ff	r1 += -0x1
    2776	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2777	71 43 00 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x0)
    2778	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    2779	07 04 00 00 01 00 00 00	r4 += 0x1
    2780	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2781	b7 01 00 00 01 00 00 00	r1 = 0x1
    2782	73 3a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r3
    2783	15 03 42 00 00 00 00 00	if r3 == 0x0 goto +0x42 <LBB38_13>
    2784	15 03 40 00 01 00 00 00	if r3 == 0x1 goto +0x40 <LBB38_12>
    2785	bf a1 00 00 00 00 00 00	r1 = r10
    2786	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2787	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2788	b7 01 00 00 00 00 00 00	r1 = 0x0
    2789	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2790	b7 07 00 00 01 00 00 00	r7 = 0x1
    2791	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
    2792	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    2793	18 01 00 00 a0 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ba0 ll
    2795	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2796	18 01 00 00 28 61 00 00 00 00 00 00 00 00 00 00	r1 = 0x6128 ll
    2798	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2799	bf a1 00 00 00 00 00 00	r1 = r10
    2800	07 01 00 00 a7 ff ff ff	r1 += -0x59
    2801	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2802	bf a1 00 00 00 00 00 00	r1 = r10
    2803	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2804	bf a2 00 00 00 00 00 00	r2 = r10
    2805	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2806	85 10 00 00 3d 0b 00 00	call 0xb3d ; <alloc::fmt::format>
    2807	b7 01 00 00 18 00 00 00	r1 = 0x18
    2808	b7 02 00 00 08 00 00 00	r2 = 0x8
    2809	85 10 00 00 43 01 00 00	call 0x143 ; <__rust_alloc>
    2810	55 00 2b 00 00 00 00 00	if r0 != 0x0 goto +0x2b <LBB38_9>
    2811	05 00 0f 00 00 00 00 00	goto +0xf <LBB38_4>

00000000000057e0 <LBB38_3>
    2812	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2813	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2814	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2816	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2817	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2819	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2820	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2822	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2823	b7 01 00 00 18 00 00 00	r1 = 0x18
    2824	b7 02 00 00 08 00 00 00	r2 = 0x8
    2825	85 10 00 00 33 01 00 00	call 0x133 ; <__rust_alloc>
    2826	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB38_10>

0000000000005858 <LBB38_4>
    2827	b7 01 00 00 18 00 00 00	r1 = 0x18
    2828	b7 02 00 00 08 00 00 00	r2 = 0x8
    2829	85 10 00 00 1e 0b 00 00	call 0xb1e ; <alloc::alloc::handle_alloc_error>
    2830	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005878 <LBB38_10>
    2831	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2832	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2833	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2834	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2835	bf a1 00 00 00 00 00 00	r1 = r10
    2836	07 01 00 00 80 ff ff ff	r1 += -0x80
    2837	b7 02 00 00 14 00 00 00	r2 = 0x14
    2838	bf 03 00 00 00 00 00 00	r3 = r0
    2839	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
    2841	85 10 00 00 ee 09 00 00	call 0x9ee ; <std::io::error::Error::_new>
    2842	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    2843	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
    2844	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2845	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2846	b7 01 00 00 01 00 00 00	r1 = 0x1
    2847	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    2848	05 00 17 00 00 00 00 00	goto +0x17 <LBB38_11>

0000000000005908 <LBB38_12>
    2849	b7 01 00 00 02 00 00 00	r1 = 0x2

0000000000005910 <LBB38_13>
    2850	b7 02 00 00 00 00 00 00	r2 = 0x0
    2851	73 26 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r2
    2852	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
    2853	05 00 12 00 00 00 00 00	goto +0x12 <LBB38_11>

0000000000005930 <LBB38_9>
    2854	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2855	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2856	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    2857	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2858	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    2859	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    2860	bf a1 00 00 00 00 00 00	r1 = r10
    2861	07 01 00 00 90 ff ff ff	r1 += -0x70
    2862	b7 02 00 00 14 00 00 00	r2 = 0x14
    2863	bf 03 00 00 00 00 00 00	r3 = r0
    2864	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
    2866	85 10 00 00 d5 09 00 00	call 0x9d5 ; <std::io::error::Error::_new>
    2867	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    2868	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
    2869	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2870	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2871	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

00000000000059c0 <LBB38_11>
    2872	95 00 00 00 00 00 00 00	exit

00000000000059c8 <<tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize>
    2873	bf 27 00 00 00 00 00 00	r7 = r2
    2874	bf 16 00 00 00 00 00 00	r6 = r1
    2875	bf a1 00 00 00 00 00 00	r1 = r10
    2876	07 01 00 00 e8 ff ff ff	r1 += -0x18
    2877	85 10 00 00 8d ff ff ff	call -0x73 ; <<tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize>
    2878	71 a1 e8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x18)
    2879	15 01 0b 00 01 00 00 00	if r1 == 0x1 goto +0xb <LBB39_6>
    2880	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    2881	55 01 0c 00 00 00 00 00	if r1 != 0x0 goto +0xc <LBB39_7>
    2882	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2883	b7 02 00 00 01 00 00 00	r2 = 0x1
    2884	85 10 00 00 f8 00 00 00	call 0xf8 ; <__rust_alloc>
    2885	bf 07 00 00 00 00 00 00	r7 = r0
    2886	55 07 12 00 00 00 00 00	if r7 != 0x0 goto +0x12 <LBB39_4>
    2887	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2888	b7 02 00 00 01 00 00 00	r2 = 0x1
    2889	85 10 00 00 e2 0a 00 00	call 0xae2 ; <alloc::alloc::handle_alloc_error>
    2890	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005a58 <LBB39_6>
    2891	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    2892	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    2893	05 00 2b 00 00 00 00 00	goto +0x2b <LBB39_9>

0000000000005a70 <LBB39_7>
    2894	71 a2 e9 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x17)
    2895	07 01 00 00 ff ff ff ff	r1 += -0x1
    2896	79 73 00 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x0)
    2897	71 34 00 00 00 00 00 00	r4 = *(u8 *)(r3 + 0x0)
    2898	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2899	07 03 00 00 01 00 00 00	r3 += 0x1
    2900	7b 37 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r3
    2901	73 46 02 00 00 00 00 00	*(u8 *)(r6 + 0x2) = r4
    2902	73 26 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r2
    2903	b7 01 00 00 00 00 00 00	r1 = 0x0
    2904	05 00 23 00 00 00 00 00	goto +0x23 <LBB39_10>

0000000000005ac8 <LBB39_4>
    2905	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2906	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2907	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2909	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2910	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2912	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2913	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2915	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2916	b7 01 00 00 18 00 00 00	r1 = 0x18
    2917	b7 02 00 00 08 00 00 00	r2 = 0x8
    2918	85 10 00 00 d6 00 00 00	call 0xd6 ; <__rust_alloc>
    2919	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB39_8>
    2920	b7 01 00 00 18 00 00 00	r1 = 0x18
    2921	b7 02 00 00 08 00 00 00	r2 = 0x8
    2922	85 10 00 00 c1 0a 00 00	call 0xac1 ; <alloc::alloc::handle_alloc_error>
    2923	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005b60 <LBB39_8>
    2924	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2925	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2926	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2927	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2928	bf a1 00 00 00 00 00 00	r1 = r10
    2929	07 01 00 00 d8 ff ff ff	r1 += -0x28
    2930	b7 02 00 00 14 00 00 00	r2 = 0x14
    2931	bf 03 00 00 00 00 00 00	r3 = r0
    2932	18 04 00 00 50 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13c50 ll
    2934	85 10 00 00 91 09 00 00	call 0x991 ; <std::io::error::Error::_new>
    2935	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    2936	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)

0000000000005bc8 <LBB39_9>
    2937	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2938	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2939	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000005be0 <LBB39_10>
    2940	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    2941	95 00 00 00 00 00 00 00	exit

0000000000005bf0 <std::error::Error::type_id>
    2942	18 00 00 00 ed d3 f7 ec 00 00 00 00 03 94 b8 10	r0 = 0x10b89403ecf7d3ed ll
    2944	95 00 00 00 00 00 00 00	exit

0000000000005c08 <std::error::Error::backtrace>
    2945	b7 00 00 00 00 00 00 00	r0 = 0x0
    2946	95 00 00 00 00 00 00 00	exit

0000000000005c18 <std::error::Error::cause>
    2947	b7 02 00 00 00 00 00 00	r2 = 0x0
    2948	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2949	95 00 00 00 00 00 00 00	exit

0000000000005c30 <<alloc::string::String as core::fmt::Write>::write_str>
    2950	bf 36 00 00 00 00 00 00	r6 = r3
    2951	bf 28 00 00 00 00 00 00	r8 = r2
    2952	bf 17 00 00 00 00 00 00	r7 = r1
    2953	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    2954	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    2955	1f 91 00 00 00 00 00 00	r1 -= r9
    2956	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB45_2>
    2957	bf 71 00 00 00 00 00 00	r1 = r7
    2958	bf 92 00 00 00 00 00 00	r2 = r9
    2959	bf 63 00 00 00 00 00 00	r3 = r6
    2960	85 10 00 00 cd f4 ff ff	call -0xb33 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    2961	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000005c90 <LBB45_2>
    2962	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2963	0f 91 00 00 00 00 00 00	r1 += r9
    2964	bf 82 00 00 00 00 00 00	r2 = r8
    2965	bf 63 00 00 00 00 00 00	r3 = r6
    2966	85 10 00 00 50 17 00 00	call 0x1750 ; <memcpy>
    2967	0f 69 00 00 00 00 00 00	r9 += r6
    2968	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    2969	b7 00 00 00 00 00 00 00	r0 = 0x0
    2970	95 00 00 00 00 00 00 00	exit

0000000000005cd8 <<alloc::string::String as core::fmt::Write>::write_char>
    2971	bf 27 00 00 00 00 00 00	r7 = r2
    2972	bf 16 00 00 00 00 00 00	r6 = r1
    2973	bf 71 00 00 00 00 00 00	r1 = r7
    2974	67 01 00 00 20 00 00 00	r1 <<= 0x20
    2975	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2976	25 01 0c 00 7f 00 00 00	if r1 > 0x7f goto +0xc <LBB46_4>
    2977	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    2978	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    2979	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB46_3>
    2980	bf 61 00 00 00 00 00 00	r1 = r6
    2981	85 10 00 00 e4 f4 ff ff	call -0xb1c ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    2982	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

0000000000005d38 <LBB46_3>
    2983	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    2984	0f 21 00 00 00 00 00 00	r1 += r2
    2985	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    2986	07 02 00 00 01 00 00 00	r2 += 0x1
    2987	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2988	05 00 42 00 00 00 00 00	goto +0x42 <LBB46_12>

0000000000005d68 <LBB46_4>
    2989	b7 02 00 00 00 00 00 00	r2 = 0x0
    2990	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    2991	b7 02 00 00 00 08 00 00	r2 = 0x800
    2992	2d 12 13 00 00 00 00 00	if r2 > r1 goto +0x13 <LBB46_6>
    2993	bf 71 00 00 00 00 00 00	r1 = r7
    2994	67 01 00 00 20 00 00 00	r1 <<= 0x20
    2995	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2996	b7 02 00 00 00 00 01 00	r2 = 0x10000
    2997	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB46_7>
    2998	05 00 16 00 00 00 00 00	goto +0x16 <LBB46_8>

0000000000005db8 <LBB46_7>
    2999	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    3000	47 07 00 00 80 00 00 00	r7 |= 0x80
    3001	73 7a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r7
    3002	bf 12 00 00 00 00 00 00	r2 = r1
    3003	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    3004	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    3005	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    3006	77 01 00 00 06 00 00 00	r1 >>= 0x6
    3007	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    3008	47 01 00 00 80 00 00 00	r1 |= 0x80
    3009	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    3010	b7 07 00 00 03 00 00 00	r7 = 0x3
    3011	05 00 1a 00 00 00 00 00	goto +0x1a <LBB46_9>

0000000000005e20 <LBB46_6>
    3012	bf 71 00 00 00 00 00 00	r1 = r7
    3013	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    3014	47 01 00 00 80 00 00 00	r1 |= 0x80
    3015	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    3016	77 07 00 00 06 00 00 00	r7 >>= 0x6
    3017	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    3018	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    3019	b7 07 00 00 02 00 00 00	r7 = 0x2
    3020	05 00 11 00 00 00 00 00	goto +0x11 <LBB46_9>

0000000000005e68 <LBB46_8>
    3021	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    3022	47 07 00 00 80 00 00 00	r7 |= 0x80
    3023	73 7a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r7
    3024	bf 12 00 00 00 00 00 00	r2 = r1
    3025	77 02 00 00 12 00 00 00	r2 >>= 0x12
    3026	47 02 00 00 f0 00 00 00	r2 |= 0xf0
    3027	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    3028	bf 12 00 00 00 00 00 00	r2 = r1
    3029	77 02 00 00 06 00 00 00	r2 >>= 0x6
    3030	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    3031	47 02 00 00 80 00 00 00	r2 |= 0x80
    3032	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    3033	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    3034	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    3035	47 01 00 00 80 00 00 00	r1 |= 0x80
    3036	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    3037	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000005ef0 <LBB46_9>
    3038	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    3039	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    3040	1f 81 00 00 00 00 00 00	r1 -= r8
    3041	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB46_11>
    3042	bf 61 00 00 00 00 00 00	r1 = r6
    3043	bf 82 00 00 00 00 00 00	r2 = r8
    3044	bf 73 00 00 00 00 00 00	r3 = r7
    3045	85 10 00 00 78 f4 ff ff	call -0xb88 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3046	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

0000000000005f38 <LBB46_11>
    3047	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    3048	0f 81 00 00 00 00 00 00	r1 += r8
    3049	bf a2 00 00 00 00 00 00	r2 = r10
    3050	07 02 00 00 fc ff ff ff	r2 += -0x4
    3051	bf 73 00 00 00 00 00 00	r3 = r7
    3052	85 10 00 00 fa 16 00 00	call 0x16fa ; <memcpy>
    3053	0f 78 00 00 00 00 00 00	r8 += r7
    3054	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

0000000000005f78 <LBB46_12>
    3055	b7 00 00 00 00 00 00 00	r0 = 0x0
    3056	95 00 00 00 00 00 00 00	exit

0000000000005f88 <core::fmt::Write::write_fmt>
    3057	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3058	bf a6 00 00 00 00 00 00	r6 = r10
    3059	07 06 00 00 d0 ff ff ff	r6 += -0x30
    3060	bf 61 00 00 00 00 00 00	r1 = r6
    3061	b7 03 00 00 30 00 00 00	r3 = 0x30
    3062	85 10 00 00 f0 16 00 00	call 0x16f0 ; <memcpy>
    3063	bf a1 00 00 00 00 00 00	r1 = r10
    3064	07 01 00 00 c8 ff ff ff	r1 += -0x38
    3065	18 02 00 00 20 3d 01 00 00 00 00 00 00 00 00 00	r2 = 0x13d20 ll
    3067	bf 63 00 00 00 00 00 00	r3 = r6
    3068	85 10 00 00 bd 0c 00 00	call 0xcbd ; <core::fmt::write>
    3069	95 00 00 00 00 00 00 00	exit

0000000000005ff0 <<&mut W as core::fmt::Write>::write_str>
    3070	bf 36 00 00 00 00 00 00	r6 = r3
    3071	bf 28 00 00 00 00 00 00	r8 = r2
    3072	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    3073	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    3074	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    3075	1f 91 00 00 00 00 00 00	r1 -= r9
    3076	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB48_2>
    3077	bf 71 00 00 00 00 00 00	r1 = r7
    3078	bf 92 00 00 00 00 00 00	r2 = r9
    3079	bf 63 00 00 00 00 00 00	r3 = r6
    3080	85 10 00 00 55 f4 ff ff	call -0xbab ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3081	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000006050 <LBB48_2>
    3082	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    3083	0f 91 00 00 00 00 00 00	r1 += r9
    3084	bf 82 00 00 00 00 00 00	r2 = r8
    3085	bf 63 00 00 00 00 00 00	r3 = r6
    3086	85 10 00 00 d8 16 00 00	call 0x16d8 ; <memcpy>
    3087	0f 69 00 00 00 00 00 00	r9 += r6
    3088	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    3089	b7 00 00 00 00 00 00 00	r0 = 0x0
    3090	95 00 00 00 00 00 00 00	exit

0000000000006098 <<&mut W as core::fmt::Write>::write_char>
    3091	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3092	85 10 00 00 86 ff ff ff	call -0x7a ; <<alloc::string::String as core::fmt::Write>::write_char>
    3093	b7 00 00 00 00 00 00 00	r0 = 0x0
    3094	95 00 00 00 00 00 00 00	exit

00000000000060b8 <<&mut W as core::fmt::Write>::write_fmt>
    3095	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3096	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3097	bf a6 00 00 00 00 00 00	r6 = r10
    3098	07 06 00 00 d0 ff ff ff	r6 += -0x30
    3099	bf 61 00 00 00 00 00 00	r1 = r6
    3100	b7 03 00 00 30 00 00 00	r3 = 0x30
    3101	85 10 00 00 c9 16 00 00	call 0x16c9 ; <memcpy>
    3102	bf a1 00 00 00 00 00 00	r1 = r10
    3103	07 01 00 00 c8 ff ff ff	r1 += -0x38
    3104	18 02 00 00 20 3d 01 00 00 00 00 00 00 00 00 00	r2 = 0x13d20 ll
    3106	bf 63 00 00 00 00 00 00	r3 = r6
    3107	85 10 00 00 96 0c 00 00	call 0xc96 ; <core::fmt::write>
    3108	95 00 00 00 00 00 00 00	exit

0000000000006128 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt>
    3109	bf 26 00 00 00 00 00 00	r6 = r2
    3110	bf 17 00 00 00 00 00 00	r7 = r1
    3111	bf 61 00 00 00 00 00 00	r1 = r6
    3112	85 10 00 00 f5 0e 00 00	call 0xef5 ; <core::fmt::Formatter::debug_lower_hex>
    3113	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB51_2>
    3114	bf 61 00 00 00 00 00 00	r1 = r6
    3115	85 10 00 00 f6 0e 00 00	call 0xef6 ; <core::fmt::Formatter::debug_upper_hex>
    3116	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB51_5>
    3117	05 00 08 00 00 00 00 00	goto +0x8 <LBB51_4>

0000000000006170 <LBB51_5>
    3118	bf 71 00 00 00 00 00 00	r1 = r7
    3119	bf 62 00 00 00 00 00 00	r2 = r6
    3120	85 10 00 00 9c 12 00 00	call 0x129c ; <core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt>
    3121	05 00 07 00 00 00 00 00	goto +0x7 <LBB51_3>

0000000000006190 <LBB51_2>
    3122	bf 71 00 00 00 00 00 00	r1 = r7
    3123	bf 62 00 00 00 00 00 00	r2 = r6
    3124	85 10 00 00 6a 12 00 00	call 0x126a ; <core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt>
    3125	05 00 03 00 00 00 00 00	goto +0x3 <LBB51_3>

00000000000061b0 <LBB51_4>
    3126	bf 71 00 00 00 00 00 00	r1 = r7
    3127	bf 62 00 00 00 00 00 00	r2 = r6
    3128	85 10 00 00 69 13 00 00	call 0x1369 ; <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>

00000000000061c8 <LBB51_3>
    3129	95 00 00 00 00 00 00 00	exit

00000000000061d0 <<&T as core::fmt::Display>::fmt>
    3130	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3131	85 10 00 00 af 0b 00 00	call 0xbaf ; <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt>
    3132	95 00 00 00 00 00 00 00	exit

00000000000061e8 <__rust_alloc>
    3133	85 10 00 00 3c fd ff ff	call -0x2c4 ; <__rg_alloc>
    3134	95 00 00 00 00 00 00 00	exit

00000000000061f8 <__rust_dealloc>
    3135	85 10 00 00 54 fd ff ff	call -0x2ac ; <__rg_dealloc>
    3136	95 00 00 00 00 00 00 00	exit

0000000000006208 <__rust_realloc>
    3137	85 10 00 00 53 fd ff ff	call -0x2ad ; <__rg_realloc>
    3138	95 00 00 00 00 00 00 00	exit

0000000000006218 <__rust_alloc_error_handler>
    3139	85 10 00 00 ec 09 00 00	call 0x9ec ; <__rg_oom>
    3140	95 00 00 00 00 00 00 00	exit

0000000000006228 <core::ptr::drop_in_place<&alloc::vec::Vec<(u64,solana_program::stake_history::StakeHistoryEntry)>>>
    3141	95 00 00 00 00 00 00 00	exit

0000000000006230 <core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>>
    3142	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    3143	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB6_3>
    3144	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3145	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB6_3>
    3146	b7 03 00 00 01 00 00 00	r3 = 0x1
    3147	85 10 00 00 f3 ff ff ff	call -0xd ; <__rust_dealloc>

0000000000006260 <LBB6_3>
    3148	95 00 00 00 00 00 00 00	exit

0000000000006268 <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    3149	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    3150	65 02 08 00 09 00 00 00	if r2 s> 0x9 goto +0x8 <LBB10_3>
    3151	15 02 14 00 03 00 00 00	if r2 == 0x3 goto +0x14 <LBB10_6>
    3152	15 02 01 00 09 00 00 00	if r2 == 0x9 goto +0x1 <LBB10_9>
    3153	05 00 07 00 00 00 00 00	goto +0x7 <LBB10_5>

0000000000006290 <LBB10_9>
    3154	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3155	15 02 05 00 00 00 00 00	if r2 == 0x0 goto +0x5 <LBB10_5>
    3156	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3157	15 01 03 00 00 00 00 00	if r1 == 0x0 goto +0x3 <LBB10_5>
    3158	05 00 11 00 00 00 00 00	goto +0x11 <LBB10_8>

00000000000062b8 <LBB10_3>
    3159	15 02 02 00 0a 00 00 00	if r2 == 0xa goto +0x2 <LBB10_12>
    3160	15 02 06 00 0b 00 00 00	if r2 == 0xb goto +0x6 <LBB10_15>

00000000000062c8 <LBB10_5>
    3161	95 00 00 00 00 00 00 00	exit

00000000000062d0 <LBB10_12>
    3162	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3163	15 02 fd ff 00 00 00 00	if r2 == 0x0 goto -0x3 <LBB10_5>
    3164	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3165	15 01 fb ff 00 00 00 00	if r1 == 0x0 goto -0x5 <LBB10_5>
    3166	05 00 09 00 00 00 00 00	goto +0x9 <LBB10_8>

00000000000062f8 <LBB10_15>
    3167	79 12 38 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x38)
    3168	15 02 f8 ff 00 00 00 00	if r2 == 0x0 goto -0x8 <LBB10_5>
    3169	79 11 30 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x30)
    3170	15 01 f6 ff 00 00 00 00	if r1 == 0x0 goto -0xa <LBB10_5>
    3171	05 00 04 00 00 00 00 00	goto +0x4 <LBB10_8>

0000000000006320 <LBB10_6>
    3172	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3173	15 02 f3 ff 00 00 00 00	if r2 == 0x0 goto -0xd <LBB10_5>
    3174	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3175	15 01 f1 ff 00 00 00 00	if r1 == 0x0 goto -0xf <LBB10_5>

0000000000006340 <LBB10_8>
    3176	b7 03 00 00 01 00 00 00	r3 = 0x1
    3177	85 10 00 00 d5 ff ff ff	call -0x2b ; <__rust_dealloc>
    3178	05 00 ee ff 00 00 00 00	goto -0x12 <LBB10_5>

0000000000006358 <solana_program::account_info::AccountInfo::lamports>
    3179	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    3180	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    3181	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    3183	2d 23 0b 00 00 00 00 00	if r3 > r2 goto +0xb <LBB14_2>
    3184	bf a3 00 00 00 00 00 00	r3 = r10
    3185	07 03 00 00 f8 ff ff ff	r3 += -0x8
    3186	18 01 00 00 d8 2b 01 00 00 00 00 00 00 00 00 00	r1 = 0x12bd8 ll
    3188	b7 02 00 00 18 00 00 00	r2 = 0x18
    3189	18 04 00 00 30 3e 01 00 00 00 00 00 00 00 00 00	r4 = 0x13e30 ll
    3191	18 05 00 00 50 3d 01 00 00 00 00 00 00 00 00 00	r5 = 0x13d50 ll
    3193	85 10 00 00 15 0c 00 00	call 0xc15 ; <core::result::unwrap_failed>
    3194	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000063d8 <LBB14_2>
    3195	bf 23 00 00 00 00 00 00	r3 = r2
    3196	07 03 00 00 01 00 00 00	r3 += 0x1
    3197	7b 31 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r3
    3198	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    3199	79 30 00 00 00 00 00 00	r0 = *(u64 *)(r3 + 0x0)
    3200	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    3201	95 00 00 00 00 00 00 00	exit

0000000000006410 <solana_program::account_info::AccountInfo::try_borrow_data>
    3202	79 22 10 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x10)
    3203	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    3204	18 04 00 00 fe ff ff ff 00 00 00 00 ff ff ff 7f	r4 = 0x7ffffffffffffffe ll
    3206	2d 43 09 00 00 00 00 00	if r3 > r4 goto +0x9 <LBB23_2>
    3207	bf 24 00 00 00 00 00 00	r4 = r2
    3208	07 04 00 00 10 00 00 00	r4 += 0x10
    3209	07 03 00 00 01 00 00 00	r3 += 0x1
    3210	7b 32 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r3
    3211	7b 41 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r4
    3212	07 02 00 00 18 00 00 00	r2 += 0x18
    3213	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    3214	b7 02 00 00 00 00 00 00	r2 = 0x0
    3215	05 00 03 00 00 00 00 00	goto +0x3 <LBB23_3>

0000000000006480 <LBB23_2>
    3216	b7 02 00 00 0b 00 00 00	r2 = 0xb
    3217	63 21 08 00 00 00 00 00	*(u32 *)(r1 + 0x8) = r2
    3218	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000006498 <LBB23_3>
    3219	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3220	95 00 00 00 00 00 00 00	exit

00000000000064a8 <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    3221	79 22 10 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x10)
    3222	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    3223	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB27_2>
    3224	bf 23 00 00 00 00 00 00	r3 = r2
    3225	07 03 00 00 10 00 00 00	r3 += 0x10
    3226	b7 04 00 00 ff ff ff ff	r4 = -0x1
    3227	7b 42 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r4
    3228	7b 31 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r3
    3229	07 02 00 00 18 00 00 00	r2 += 0x18
    3230	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    3231	b7 02 00 00 00 00 00 00	r2 = 0x0
    3232	05 00 03 00 00 00 00 00	goto +0x3 <LBB27_3>

0000000000006508 <LBB27_2>
    3233	b7 02 00 00 0b 00 00 00	r2 = 0xb
    3234	63 21 08 00 00 00 00 00	*(u32 *)(r1 + 0x8) = r2
    3235	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000006520 <LBB27_3>
    3236	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3237	95 00 00 00 00 00 00 00	exit

0000000000006530 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3238	bf 16 00 00 00 00 00 00	r6 = r1
    3239	bf 24 00 00 00 00 00 00	r4 = r2
    3240	0f 34 00 00 00 00 00 00	r4 += r3
    3241	b7 01 00 00 01 00 00 00	r1 = 0x1
    3242	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB32_2>
    3243	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006560 <LBB32_2>
    3244	57 01 00 00 01 00 00 00	r1 &= 0x1
    3245	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB32_12>
    3246	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    3247	bf 17 00 00 00 00 00 00	r7 = r1
    3248	67 07 00 00 01 00 00 00	r7 <<= 0x1
    3249	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB32_5>
    3250	bf 47 00 00 00 00 00 00	r7 = r4

0000000000006598 <LBB32_5>
    3251	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB32_7>
    3252	b7 07 00 00 08 00 00 00	r7 = 0x8

00000000000065a8 <LBB32_7>
    3253	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB32_9>
    3254	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    3255	b7 03 00 00 01 00 00 00	r3 = 0x1
    3256	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3257	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3258	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    3259	05 00 02 00 00 00 00 00	goto +0x2 <LBB32_10>

00000000000065e0 <LBB32_9>
    3260	b7 01 00 00 00 00 00 00	r1 = 0x0
    3261	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

00000000000065f0 <LBB32_10>
    3262	bf a1 00 00 00 00 00 00	r1 = r10
    3263	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3264	bf a4 00 00 00 00 00 00	r4 = r10
    3265	07 04 00 00 e8 ff ff ff	r4 += -0x18
    3266	bf 72 00 00 00 00 00 00	r2 = r7
    3267	b7 03 00 00 01 00 00 00	r3 = 0x1
    3268	85 10 00 00 47 00 00 00	call 0x47 ; <alloc::raw_vec::finish_grow>
    3269	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    3270	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB32_14>
    3271	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3272	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB32_13>

0000000000006648 <LBB32_12>
    3273	85 10 00 00 5b 09 00 00	call 0x95b ; <alloc::raw_vec::capacity_overflow>
    3274	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006658 <LBB32_14>
    3275	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3276	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3277	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3278	95 00 00 00 00 00 00 00	exit

0000000000006678 <LBB32_13>
    3279	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3280	85 10 00 00 5b 09 00 00	call 0x95b ; <alloc::alloc::handle_alloc_error>
    3281	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006690 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3282	bf 16 00 00 00 00 00 00	r6 = r1
    3283	bf 21 00 00 00 00 00 00	r1 = r2
    3284	07 01 00 00 01 00 00 00	r1 += 0x1
    3285	b7 03 00 00 01 00 00 00	r3 = 0x1
    3286	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB42_2>
    3287	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000066c0 <LBB42_2>
    3288	57 03 00 00 01 00 00 00	r3 &= 0x1
    3289	55 03 29 00 00 00 00 00	if r3 != 0x0 goto +0x29 <LBB42_16>
    3290	79 69 08 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x8)
    3291	bf 97 00 00 00 00 00 00	r7 = r9
    3292	67 07 00 00 01 00 00 00	r7 <<= 0x1
    3293	2d 17 01 00 00 00 00 00	if r7 > r1 goto +0x1 <LBB42_5>
    3294	bf 17 00 00 00 00 00 00	r7 = r1

00000000000066f8 <LBB42_5>
    3295	25 07 01 00 04 00 00 00	if r7 > 0x4 goto +0x1 <LBB42_7>
    3296	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000006708 <LBB42_7>
    3297	bf a1 00 00 00 00 00 00	r1 = r10
    3298	07 01 00 00 c0 ff ff ff	r1 += -0x40
    3299	b7 08 00 00 00 00 00 00	r8 = 0x0
    3300	bf 72 00 00 00 00 00 00	r2 = r7
    3301	b7 03 00 00 00 00 00 00	r3 = 0x0
    3302	b7 04 00 00 30 00 00 00	r4 = 0x30
    3303	b7 05 00 00 00 00 00 00	r5 = 0x0
    3304	85 10 00 00 bd 17 00 00	call 0x17bd ; <__multi3>
    3305	b7 01 00 00 01 00 00 00	r1 = 0x1
    3306	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
    3307	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB42_9>
    3308	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006768 <LBB42_9>
    3309	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB42_11>
    3310	b7 08 00 00 08 00 00 00	r8 = 0x8

0000000000006778 <LBB42_11>
    3311	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    3312	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB42_13>
    3313	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    3314	b7 03 00 00 08 00 00 00	r3 = 0x8
    3315	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3316	27 09 00 00 30 00 00 00	r9 *= 0x30
    3317	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    3318	05 00 01 00 00 00 00 00	goto +0x1 <LBB42_14>

00000000000067b8 <LBB42_13>
    3319	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000067c0 <LBB42_14>
    3320	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3321	bf a1 00 00 00 00 00 00	r1 = r10
    3322	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3323	bf a4 00 00 00 00 00 00	r4 = r10
    3324	07 04 00 00 e8 ff ff ff	r4 += -0x18
    3325	bf 83 00 00 00 00 00 00	r3 = r8
    3326	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
    3327	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    3328	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB42_18>
    3329	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3330	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB42_17>

0000000000006818 <LBB42_16>
    3331	85 10 00 00 21 09 00 00	call 0x921 ; <alloc::raw_vec::capacity_overflow>
    3332	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006828 <LBB42_18>
    3333	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3334	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3335	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3336	95 00 00 00 00 00 00 00	exit

0000000000006848 <LBB42_17>
    3337	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3338	85 10 00 00 21 09 00 00	call 0x921 ; <alloc::alloc::handle_alloc_error>
    3339	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006860 <alloc::raw_vec::finish_grow>
    3340	bf 38 00 00 00 00 00 00	r8 = r3
    3341	bf 27 00 00 00 00 00 00	r7 = r2
    3342	bf 16 00 00 00 00 00 00	r6 = r1
    3343	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB45_12>
    3344	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3345	b7 01 00 00 01 00 00 00	r1 = 0x1
    3346	b7 07 00 00 00 00 00 00	r7 = 0x0
    3347	05 00 1d 00 00 00 00 00	goto +0x1d <LBB45_2>

00000000000068a0 <LBB45_12>
    3348	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    3349	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB45_7>
    3350	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    3351	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB45_6>
    3352	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB45_9>
    3353	bf 71 00 00 00 00 00 00	r1 = r7
    3354	bf 82 00 00 00 00 00 00	r2 = r8
    3355	85 10 00 00 21 ff ff ff	call -0xdf ; <__rust_alloc>
    3356	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB45_11>
    3357	05 00 11 00 00 00 00 00	goto +0x11 <LBB45_10>

00000000000068f0 <LBB45_6>
    3358	bf 83 00 00 00 00 00 00	r3 = r8
    3359	bf 74 00 00 00 00 00 00	r4 = r7
    3360	85 10 00 00 20 ff ff ff	call -0xe0 ; <__rust_realloc>
    3361	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB45_11>
    3362	05 00 0c 00 00 00 00 00	goto +0xc <LBB45_10>

0000000000006918 <LBB45_7>
    3363	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB45_9>
    3364	bf 71 00 00 00 00 00 00	r1 = r7
    3365	bf 82 00 00 00 00 00 00	r2 = r8
    3366	85 10 00 00 16 ff ff ff	call -0xea ; <__rust_alloc>
    3367	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB45_11>
    3368	05 00 06 00 00 00 00 00	goto +0x6 <LBB45_10>

0000000000006948 <LBB45_11>
    3369	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3370	b7 01 00 00 01 00 00 00	r1 = 0x1
    3371	bf 87 00 00 00 00 00 00	r7 = r8
    3372	05 00 04 00 00 00 00 00	goto +0x4 <LBB45_2>

0000000000006968 <LBB45_9>
    3373	b7 07 00 00 00 00 00 00	r7 = 0x0
    3374	bf 80 00 00 00 00 00 00	r0 = r8

0000000000006978 <LBB45_10>
    3375	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    3376	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006988 <LBB45_2>
    3377	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3378	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    3379	95 00 00 00 00 00 00 00	exit

00000000000069a0 <solana_program::entrypoint::deserialize>
    3380	bf 16 00 00 00 00 00 00	r6 = r1
    3381	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    3382	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
    3383	bf a1 00 00 00 00 00 00	r1 = r10
    3384	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3385	b7 07 00 00 00 00 00 00	r7 = 0x0
    3386	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    3387	b7 03 00 00 00 00 00 00	r3 = 0x0
    3388	b7 04 00 00 30 00 00 00	r4 = 0x30
    3389	b7 05 00 00 00 00 00 00	r5 = 0x0
    3390	85 10 00 00 67 17 00 00	call 0x1767 ; <__multi3>
    3391	b7 01 00 00 01 00 00 00	r1 = 0x1
    3392	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    3393	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB91_2>
    3394	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006a18 <LBB91_2>
    3395	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB91_4>
    3396	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000006a28 <LBB91_4>
    3397	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB91_6>
    3398	85 10 00 00 de 08 00 00	call 0x8de ; <alloc::raw_vec::capacity_overflow>
    3399	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006a40 <LBB91_6>
    3400	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    3401	7b 6a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r6
    3402	15 08 0a 00 00 00 00 00	if r8 == 0x0 goto +0xa <LBB91_9>
    3403	bf 81 00 00 00 00 00 00	r1 = r8
    3404	bf 72 00 00 00 00 00 00	r2 = r7
    3405	85 10 00 00 ef fe ff ff	call -0x111 ; <__rust_alloc>
    3406	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3407	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB91_8>
    3408	05 00 06 00 00 00 00 00	goto +0x6 <LBB91_10>

0000000000006a88 <LBB91_8>
    3409	bf 81 00 00 00 00 00 00	r1 = r8
    3410	bf 72 00 00 00 00 00 00	r2 = r7
    3411	85 10 00 00 d8 08 00 00	call 0x8d8 ; <alloc::alloc::handle_alloc_error>
    3412	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006aa8 <LBB91_9>
    3413	bf 70 00 00 00 00 00 00	r0 = r7
    3414	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)

0000000000006ab8 <LBB91_10>
    3415	b7 01 00 00 00 00 00 00	r1 = 0x0
    3416	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3417	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r0
    3418	b7 09 00 00 08 00 00 00	r9 = 0x8
    3419	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    3420	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3421	15 01 21 00 00 00 00 00	if r1 == 0x0 goto +0x21 <LBB91_14>
    3422	b7 09 00 00 08 00 00 00	r9 = 0x8
    3423	bf 07 00 00 00 00 00 00	r7 = r0
    3424	b7 02 00 00 00 00 00 00	r2 = 0x0
    3425	b7 04 00 00 00 00 00 00	r4 = 0x0
    3426	05 00 2f 00 00 00 00 00	goto +0x2f <LBB91_15>

0000000000006b18 <LBB91_12>
    3427	bf 21 00 00 00 00 00 00	r1 = r2
    3428	27 01 00 00 30 00 00 00	r1 *= 0x30
    3429	bf 03 00 00 00 00 00 00	r3 = r0
    3430	0f 13 00 00 00 00 00 00	r3 += r1
    3431	73 53 2a 00 00 00 00 00	*(u8 *)(r3 + 0x2a) = r5
    3432	73 63 29 00 00 00 00 00	*(u8 *)(r3 + 0x29) = r6
    3433	73 43 28 00 00 00 00 00	*(u8 *)(r3 + 0x28) = r4
    3434	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3435	7b 13 20 00 00 00 00 00	*(u64 *)(r3 + 0x20) = r1
    3436	7b 73 18 00 00 00 00 00	*(u64 *)(r3 + 0x18) = r7
    3437	7b 83 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r8
    3438	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    3439	7b 13 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r1
    3440	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    3441	7b 13 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r1
    3442	61 a1 fb ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x5)
    3443	63 13 2b 00 00 00 00 00	*(u32 *)(r3 + 0x2b) = r1
    3444	71 a1 ff ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x1)
    3445	73 13 2f 00 00 00 00 00	*(u8 *)(r3 + 0x2f) = r1
    3446	07 02 00 00 01 00 00 00	r2 += 0x1
    3447	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    3448	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)

0000000000006bc8 <LBB91_13>
    3449	79 a4 c8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x38)
    3450	07 04 00 00 01 00 00 00	r4 += 0x1
    3451	07 09 00 00 08 00 00 00	r9 += 0x8
    3452	bf 07 00 00 00 00 00 00	r7 = r0
    3453	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    3454	2d 41 13 00 00 00 00 00	if r1 > r4 goto +0x13 <LBB91_15>

0000000000006bf8 <LBB91_14>
    3455	bf 31 00 00 00 00 00 00	r1 = r3
    3456	0f 91 00 00 00 00 00 00	r1 += r9
    3457	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3458	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3459	79 a4 80 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x80)
    3460	7b 24 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r2
    3461	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    3462	7b 24 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r2
    3463	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3464	7b 24 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r2
    3465	07 09 00 00 08 00 00 00	r9 += 0x8
    3466	bf 32 00 00 00 00 00 00	r2 = r3
    3467	0f 92 00 00 00 00 00 00	r2 += r9
    3468	7b 24 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r2
    3469	7b 14 28 00 00 00 00 00	*(u64 *)(r4 + 0x28) = r1
    3470	0f 91 00 00 00 00 00 00	r1 += r9
    3471	0f 13 00 00 00 00 00 00	r3 += r1
    3472	7b 34 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r3
    3473	95 00 00 00 00 00 00 00	exit

0000000000006c90 <LBB91_15>
    3474	bf 31 00 00 00 00 00 00	r1 = r3
    3475	0f 91 00 00 00 00 00 00	r1 += r9
    3476	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    3477	7b 4a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r4
    3478	15 01 3b 00 ff 00 00 00	if r1 == 0xff goto +0x3b <LBB91_30>
    3479	2d 12 04 00 00 00 00 00	if r2 > r1 goto +0x4 <LBB91_18>
    3480	18 03 00 00 78 3d 01 00 00 00 00 00 00 00 00 00	r3 = 0x13d78 ll
    3482	85 10 00 00 cc 0a 00 00	call 0xacc ; <core::panicking::panic_bounds_check>
    3483	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006ce0 <LBB91_18>
    3484	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r9
    3485	27 01 00 00 30 00 00 00	r1 *= 0x30
    3486	bf 74 00 00 00 00 00 00	r4 = r7
    3487	0f 14 00 00 00 00 00 00	r4 += r1
    3488	79 46 08 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x8)
    3489	79 68 00 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x0)
    3490	07 08 00 00 01 00 00 00	r8 += 0x1
    3491	25 08 02 00 01 00 00 00	if r8 > 0x1 goto +0x2 <LBB91_20>

0000000000006d20 <LBB91_19>
    3492	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    3493	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006d30 <LBB91_20>
    3494	71 45 29 00 00 00 00 00	r5 = *(u8 *)(r4 + 0x29)
    3495	71 43 28 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x28)
    3496	79 49 00 00 00 00 00 00	r9 = *(u64 *)(r4 + 0x0)
    3497	7b 9a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r9
    3498	7b 86 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r8
    3499	79 48 10 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x10)
    3500	79 84 00 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x0)
    3501	07 04 00 00 01 00 00 00	r4 += 0x1
    3502	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB91_22>
    3503	05 00 f4 ff 00 00 00 00	goto -0xc <LBB91_19>

0000000000006d80 <LBB91_22>
    3504	7b 6a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r6
    3505	7b 48 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r4
    3506	bf 54 00 00 00 00 00 00	r4 = r5
    3507	b7 05 00 00 01 00 00 00	r5 = 0x1
    3508	b7 06 00 00 01 00 00 00	r6 = 0x1
    3509	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB91_24>
    3510	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000006db8 <LBB91_24>
    3511	b7 04 00 00 01 00 00 00	r4 = 0x1
    3512	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x48)
    3513	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_26>
    3514	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000006dd8 <LBB91_26>
    3515	0f 17 00 00 00 00 00 00	r7 += r1
    3516	71 71 2a 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x2a)
    3517	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB91_28>
    3518	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000006df8 <LBB91_28>
    3519	79 71 20 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x20)
    3520	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3521	79 77 18 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x18)
    3522	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3523	5d 12 9f ff 00 00 00 00	if r2 != r1 goto -0x61 <LBB91_12>
    3524	bf a1 00 00 00 00 00 00	r1 = r10
    3525	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3526	7b 7a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r7
    3527	bf 57 00 00 00 00 00 00	r7 = r5
    3528	7b 6a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r6
    3529	bf 46 00 00 00 00 00 00	r6 = r4
    3530	85 10 00 00 07 ff ff ff	call -0xf9 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3531	bf 64 00 00 00 00 00 00	r4 = r6
    3532	79 a6 90 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x70)
    3533	bf 75 00 00 00 00 00 00	r5 = r7
    3534	79 a7 88 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x78)
    3535	79 a0 e0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x20)
    3536	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3537	05 00 91 ff 00 00 00 00	goto -0x6f <LBB91_12>

0000000000006e90 <LBB91_30>
    3538	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    3539	bf 96 00 00 00 00 00 00	r6 = r9
    3540	0f 36 00 00 00 00 00 00	r6 += r3
    3541	71 61 03 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x3)
    3542	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3543	71 61 02 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x2)
    3544	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    3545	71 61 01 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x1)
    3546	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    3547	b7 01 00 00 20 00 00 00	r1 = 0x20
    3548	b7 02 00 00 08 00 00 00	r2 = 0x8
    3549	85 10 00 00 5f fe ff ff	call -0x1a1 ; <__rust_alloc>
    3550	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB91_32>
    3551	b7 01 00 00 20 00 00 00	r1 = 0x20
    3552	05 00 54 00 00 00 00 00	goto +0x54 <LBB91_43>

0000000000006f08 <LBB91_32>
    3553	b7 01 00 00 00 00 00 00	r1 = 0x0
    3554	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    3555	b7 01 00 00 01 00 00 00	r1 = 0x1
    3556	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    3557	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    3558	bf 61 00 00 00 00 00 00	r1 = r6
    3559	07 01 00 00 48 00 00 00	r1 += 0x48
    3560	7b 0a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r0
    3561	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    3562	79 67 50 00 00 00 00 00	r7 = *(u64 *)(r6 + 0x50)
    3563	63 76 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r7
    3564	b7 01 00 00 28 00 00 00	r1 = 0x28
    3565	b7 02 00 00 08 00 00 00	r2 = 0x8
    3566	85 10 00 00 4e fe ff ff	call -0x1b2 ; <__rust_alloc>
    3567	bf 08 00 00 00 00 00 00	r8 = r0
    3568	55 08 02 00 00 00 00 00	if r8 != 0x0 goto +0x2 <LBB91_34>
    3569	b7 01 00 00 28 00 00 00	r1 = 0x28
    3570	05 00 42 00 00 00 00 00	goto +0x42 <LBB91_43>

0000000000006f98 <LBB91_34>
    3571	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3572	bf 13 00 00 00 00 00 00	r3 = r1
    3573	b7 04 00 00 00 00 00 00	r4 = 0x0
    3574	b7 01 00 00 01 00 00 00	r1 = 0x1
    3575	b7 05 00 00 01 00 00 00	r5 = 0x1
    3576	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    3577	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_36>
    3578	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000006fd8 <LBB91_36>
    3579	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x58)
    3580	7b 48 10 00 00 00 00 00	*(u64 *)(r8 + 0x10) = r4
    3581	b7 04 00 00 01 00 00 00	r4 = 0x1
    3582	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_38>
    3583	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000007000 <LBB91_38>
    3584	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    3585	b7 00 00 00 01 00 00 00	r0 = 0x1
    3586	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_40>
    3587	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000007020 <LBB91_40>
    3588	7b 0a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r0
    3589	7b 4a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r4
    3590	bf 63 00 00 00 00 00 00	r3 = r6
    3591	07 03 00 00 28 00 00 00	r3 += 0x28
    3592	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    3593	07 06 00 00 08 00 00 00	r6 += 0x8
    3594	7b 18 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r1
    3595	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    3596	bf 91 00 00 00 00 00 00	r1 = r9
    3597	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3598	0f 31 00 00 00 00 00 00	r1 += r3
    3599	07 01 00 00 58 00 00 00	r1 += 0x58
    3600	7b 18 18 00 00 00 00 00	*(u64 *)(r8 + 0x18) = r1
    3601	7b 78 20 00 00 00 00 00	*(u64 *)(r8 + 0x20) = r7
    3602	0f 79 00 00 00 00 00 00	r9 += r7
    3603	07 09 00 00 5f 28 00 00	r9 += 0x285f
    3604	57 09 00 00 f8 ff ff ff	r9 &= -0x8
    3605	bf 31 00 00 00 00 00 00	r1 = r3
    3606	0f 91 00 00 00 00 00 00	r1 += r9
    3607	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    3608	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3609	5d 12 07 00 00 00 00 00	if r2 != r1 goto +0x7 <LBB91_42>
    3610	bf a1 00 00 00 00 00 00	r1 = r10
    3611	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3612	7b 5a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r5
    3613	85 10 00 00 b4 fe ff ff	call -0x14c ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3614	79 a5 b8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x48)
    3615	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3616	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)

0000000000007108 <LBB91_42>
    3617	bf 21 00 00 00 00 00 00	r1 = r2
    3618	27 01 00 00 30 00 00 00	r1 *= 0x30
    3619	79 a0 e0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x20)
    3620	bf 04 00 00 00 00 00 00	r4 = r0
    3621	0f 14 00 00 00 00 00 00	r4 += r1
    3622	73 54 2a 00 00 00 00 00	*(u8 *)(r4 + 0x2a) = r5
    3623	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    3624	73 14 29 00 00 00 00 00	*(u8 *)(r4 + 0x29) = r1
    3625	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    3626	73 14 28 00 00 00 00 00	*(u8 *)(r4 + 0x28) = r1
    3627	7b 74 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r7
    3628	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3629	7b 14 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r1
    3630	7b 84 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r8
    3631	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    3632	7b 14 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r1
    3633	7b 64 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r6
    3634	07 02 00 00 01 00 00 00	r2 += 0x1
    3635	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    3636	05 00 44 ff 00 00 00 00	goto -0xbc <LBB91_13>

00000000000071a8 <LBB91_43>
    3637	b7 02 00 00 08 00 00 00	r2 = 0x8
    3638	85 10 00 00 f5 07 00 00	call 0x7f5 ; <alloc::alloc::handle_alloc_error>
    3639	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000071c0 <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    3640	b7 03 00 00 20 00 00 00	r3 = 0x20
    3641	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    3642	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3643	95 00 00 00 00 00 00 00	exit

00000000000071e0 <solana_program::instruction::Instruction::new_with_bincode>
    3644	bf 47 00 00 00 00 00 00	r7 = r4
    3645	bf 39 00 00 00 00 00 00	r9 = r3
    3646	bf 26 00 00 00 00 00 00	r6 = r2
    3647	bf 18 00 00 00 00 00 00	r8 = r1
    3648	85 10 00 00 ee 05 00 00	call 0x5ee ; <bincode::config::DefaultOptions::new>
    3649	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    3650	7b 6a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r6
    3651	65 02 06 00 05 00 00 00	if r2 s> 0x5 goto +0x6 <LBB131_5>
    3652	65 02 0d 00 02 00 00 00	if r2 s> 0x2 goto +0xd <LBB131_12>
    3653	b7 06 00 00 34 00 00 00	r6 = 0x34
    3654	15 02 21 00 00 00 00 00	if r2 == 0x0 goto +0x21 <LBB131_25>
    3655	15 02 0d 00 01 00 00 00	if r2 == 0x1 goto +0xd <LBB131_18>

0000000000007240 <LBB131_4>
    3656	b7 06 00 00 0c 00 00 00	r6 = 0xc
    3657	05 00 1e 00 00 00 00 00	goto +0x1e <LBB131_25>

0000000000007250 <LBB131_5>
    3658	65 02 03 00 08 00 00 00	if r2 s> 0x8 goto +0x3 <LBB131_9>
    3659	15 02 09 00 06 00 00 00	if r2 == 0x6 goto +0x9 <LBB131_18>
    3660	15 02 08 00 07 00 00 00	if r2 == 0x7 goto +0x8 <LBB131_18>
    3661	05 00 fa ff 00 00 00 00	goto -0x6 <LBB131_4>

0000000000007270 <LBB131_9>
    3662	65 02 08 00 0a 00 00 00	if r2 s> 0xa goto +0x8 <LBB131_16>
    3663	15 02 0a 00 09 00 00 00	if r2 == 0x9 goto +0xa <LBB131_19>
    3664	b7 01 00 00 4c 00 00 00	r1 = 0x4c
    3665	05 00 0b 00 00 00 00 00	goto +0xb <LBB131_21>

0000000000007290 <LBB131_12>
    3666	15 02 09 00 03 00 00 00	if r2 == 0x3 goto +0x9 <LBB131_20>
    3667	15 02 04 00 04 00 00 00	if r2 == 0x4 goto +0x4 <LBB131_17>
    3668	05 00 f3 ff 00 00 00 00	goto -0xd <LBB131_4>

00000000000072a8 <LBB131_18>
    3669	b7 06 00 00 24 00 00 00	r6 = 0x24
    3670	05 00 11 00 00 00 00 00	goto +0x11 <LBB131_25>

00000000000072b8 <LBB131_16>
    3671	15 02 08 00 0b 00 00 00	if r2 == 0xb goto +0x8 <LBB131_23>

00000000000072c0 <LBB131_17>
    3672	b7 06 00 00 04 00 00 00	r6 = 0x4
    3673	05 00 0e 00 00 00 00 00	goto +0xe <LBB131_25>

00000000000072d0 <LBB131_19>
    3674	b7 01 00 00 54 00 00 00	r1 = 0x54
    3675	05 00 01 00 00 00 00 00	goto +0x1 <LBB131_21>

00000000000072e0 <LBB131_20>
    3676	b7 01 00 00 5c 00 00 00	r1 = 0x5c

00000000000072e8 <LBB131_21>
    3677	bf 93 00 00 00 00 00 00	r3 = r9
    3678	07 03 00 00 58 00 00 00	r3 += 0x58
    3679	05 00 03 00 00 00 00 00	goto +0x3 <LBB131_24>

0000000000007300 <LBB131_23>
    3680	b7 01 00 00 34 00 00 00	r1 = 0x34
    3681	bf 93 00 00 00 00 00 00	r3 = r9
    3682	07 03 00 00 40 00 00 00	r3 += 0x40

0000000000007318 <LBB131_24>
    3683	79 36 00 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x0)
    3684	0f 16 00 00 00 00 00 00	r6 += r1
    3685	b7 00 00 00 01 00 00 00	r0 = 0x1
    3686	b7 01 00 00 00 00 00 00	r1 = 0x0
    3687	15 06 06 00 00 00 00 00	if r6 == 0x0 goto +0x6 <LBB131_27>

0000000000007340 <LBB131_25>
    3688	bf 61 00 00 00 00 00 00	r1 = r6
    3689	b7 02 00 00 01 00 00 00	r2 = 0x1
    3690	85 10 00 00 d2 fd ff ff	call -0x22e ; <__rust_alloc>
    3691	15 00 ee 02 00 00 00 00	if r0 == 0x0 goto +0x2ee <LBB131_147>
    3692	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    3693	bf 61 00 00 00 00 00 00	r1 = r6

0000000000007370 <LBB131_27>
    3694	b7 03 00 00 00 00 00 00	r3 = 0x0
    3695	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3696	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3697	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    3698	bf a3 00 00 00 00 00 00	r3 = r10
    3699	07 03 00 00 f0 ff ff ff	r3 += -0x10
    3700	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    3701	7b 8a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r8
    3702	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    3703	65 02 11 00 05 00 00 00	if r2 s> 0x5 goto +0x11 <LBB131_33>
    3704	65 02 58 00 02 00 00 00	if r2 s> 0x2 goto +0x58 <LBB131_48>
    3705	15 02 78 00 00 00 00 00	if r2 == 0x0 goto +0x78 <LBB131_56>
    3706	15 02 b2 00 01 00 00 00	if r2 == 0x1 goto +0xb2 <LBB131_65>
    3707	b7 02 00 00 00 00 00 00	r2 = 0x0
    3708	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_32>
    3709	05 00 9c 02 00 00 00 00	goto +0x29c <LBB131_140>

00000000000073f0 <LBB131_32>
    3710	0f 20 00 00 00 00 00 00	r0 += r2
    3711	b7 01 00 00 02 00 00 00	r1 = 0x2
    3712	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3713	07 02 00 00 04 00 00 00	r2 += 0x4
    3714	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3715	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3716	1f 21 00 00 00 00 00 00	r1 -= r2
    3717	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3718	b7 03 00 00 08 00 00 00	r3 = 0x8
    3719	2d 13 5d 00 00 00 00 00	if r3 > r1 goto +0x5d <LBB131_52>
    3720	05 00 15 00 00 00 00 00	goto +0x15 <LBB131_38>

0000000000007448 <LBB131_33>
    3721	65 02 19 00 08 00 00 00	if r2 s> 0x8 goto +0x19 <LBB131_39>
    3722	15 02 c5 00 06 00 00 00	if r2 == 0x6 goto +0xc5 <LBB131_71>
    3723	15 02 e7 00 07 00 00 00	if r2 == 0x7 goto +0xe7 <LBB131_77>
    3724	b7 02 00 00 00 00 00 00	r2 = 0x0
    3725	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_37>
    3726	bf a1 00 00 00 00 00 00	r1 = r10
    3727	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3728	b7 02 00 00 00 00 00 00	r2 = 0x0
    3729	b7 03 00 00 04 00 00 00	r3 = 0x4
    3730	85 10 00 00 13 fe ff ff	call -0x1ed ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3731	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3732	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000074a8 <LBB131_37>
    3733	0f 20 00 00 00 00 00 00	r0 += r2
    3734	b7 01 00 00 08 00 00 00	r1 = 0x8
    3735	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3736	07 02 00 00 04 00 00 00	r2 += 0x4
    3737	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3738	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    3739	1f 23 00 00 00 00 00 00	r3 -= r2
    3740	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3741	2d 31 47 00 00 00 00 00	if r1 > r3 goto +0x47 <LBB131_52>

00000000000074f0 <LBB131_38>
    3742	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3743	0f 21 00 00 00 00 00 00	r1 += r2
    3744	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3745	07 02 00 00 08 00 00 00	r2 += 0x8
    3746	05 00 8d 01 00 00 00 00	goto +0x18d <LBB131_109>

0000000000007518 <LBB131_39>
    3747	65 02 47 00 0a 00 00 00	if r2 s> 0xa goto +0x47 <LBB131_53>
    3748	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r9
    3749	15 02 f0 00 09 00 00 00	if r2 == 0x9 goto +0xf0 <LBB131_83>
    3750	b7 08 00 00 00 00 00 00	r8 = 0x0
    3751	b7 06 00 00 00 00 00 00	r6 = 0x0
    3752	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_42>
    3753	05 00 78 02 00 00 00 00	goto +0x278 <LBB131_142>

0000000000007550 <LBB131_42>
    3754	0f 60 00 00 00 00 00 00	r0 += r6
    3755	b7 01 00 00 0a 00 00 00	r1 = 0xa
    3756	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3757	07 09 00 00 01 00 00 00	r9 += 0x1
    3758	07 06 00 00 04 00 00 00	r6 += 0x4
    3759	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3760	05 00 14 00 00 00 00 00	goto +0x14 <LBB131_46>

0000000000007588 <LBB131_43>
    3761	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3762	0f 61 00 00 00 00 00 00	r1 += r6
    3763	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3764	07 06 00 00 01 00 00 00	r6 += 0x1
    3765	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3766	07 08 00 00 01 00 00 00	r8 += 0x1
    3767	55 08 0d 00 20 00 00 00	if r8 != 0x20 goto +0xd <LBB131_46>
    3768	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3769	1f 61 00 00 00 00 00 00	r1 -= r6
    3770	79 a9 c0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x40)
    3771	79 98 58 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x58)
    3772	79 97 48 00 00 00 00 00	r7 = *(u64 *)(r9 + 0x48)
    3773	25 01 0b 01 07 00 00 00	if r1 > 0x7 goto +0x10b <LBB131_91>
    3774	bf a1 00 00 00 00 00 00	r1 = r10
    3775	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3776	bf 62 00 00 00 00 00 00	r2 = r6
    3777	b7 03 00 00 08 00 00 00	r3 = 0x8
    3778	85 10 00 00 e3 fd ff ff	call -0x21d ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3779	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    3780	05 00 04 01 00 00 00 00	goto +0x104 <LBB131_91>

0000000000007628 <LBB131_46>
    3781	bf 91 00 00 00 00 00 00	r1 = r9
    3782	0f 81 00 00 00 00 00 00	r1 += r8
    3783	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3784	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3785	5d 61 e7 ff 00 00 00 00	if r1 != r6 goto -0x19 <LBB131_43>
    3786	bf a1 00 00 00 00 00 00	r1 = r10
    3787	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3788	bf 62 00 00 00 00 00 00	r2 = r6
    3789	b7 03 00 00 01 00 00 00	r3 = 0x1
    3790	85 10 00 00 d7 fd ff ff	call -0x229 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3791	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    3792	05 00 e0 ff 00 00 00 00	goto -0x20 <LBB131_43>

0000000000007688 <LBB131_48>
    3793	15 02 1d 01 03 00 00 00	if r2 == 0x3 goto +0x11d <LBB131_97>
    3794	15 02 50 01 04 00 00 00	if r2 == 0x4 goto +0x150 <LBB131_105>
    3795	b7 02 00 00 00 00 00 00	r2 = 0x0
    3796	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3797	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_51>
    3798	bf a1 00 00 00 00 00 00	r1 = r10
    3799	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3800	b7 02 00 00 00 00 00 00	r2 = 0x0
    3801	b7 03 00 00 04 00 00 00	r3 = 0x4
    3802	85 10 00 00 cb fd ff ff	call -0x235 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3803	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3804	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000076e8 <LBB131_51>
    3805	0f 20 00 00 00 00 00 00	r0 += r2
    3806	b7 01 00 00 05 00 00 00	r1 = 0x5
    3807	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3808	07 02 00 00 04 00 00 00	r2 += 0x4
    3809	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3810	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3811	1f 21 00 00 00 00 00 00	r1 -= r2
    3812	25 01 b9 ff 07 00 00 00	if r1 > 0x7 goto -0x47 <LBB131_38>

0000000000007728 <LBB131_52>
    3813	bf a1 00 00 00 00 00 00	r1 = r10
    3814	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3815	b7 03 00 00 08 00 00 00	r3 = 0x8
    3816	85 10 00 00 bd fd ff ff	call -0x243 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3817	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3818	05 00 b3 ff 00 00 00 00	goto -0x4d <LBB131_38>

0000000000007758 <LBB131_53>
    3819	15 02 5e 01 0b 00 00 00	if r2 == 0xb goto +0x15e <LBB131_111>
    3820	b7 02 00 00 00 00 00 00	r2 = 0x0
    3821	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_55>
    3822	05 00 3b 02 00 00 00 00	goto +0x23b <LBB131_144>

0000000000007778 <LBB131_55>
    3823	0f 20 00 00 00 00 00 00	r0 += r2
    3824	b7 01 00 00 0c 00 00 00	r1 = 0xc
    3825	05 00 3c 01 00 00 00 00	goto +0x13c <LBB131_108>

0000000000007790 <LBB131_56>
    3826	b7 06 00 00 00 00 00 00	r6 = 0x0
    3827	b7 02 00 00 00 00 00 00	r2 = 0x0
    3828	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_58>
    3829	bf a1 00 00 00 00 00 00	r1 = r10
    3830	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3831	b7 02 00 00 00 00 00 00	r2 = 0x0
    3832	b7 03 00 00 04 00 00 00	r3 = 0x4
    3833	85 10 00 00 ac fd ff ff	call -0x254 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3834	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3835	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000077e0 <LBB131_58>
    3836	0f 20 00 00 00 00 00 00	r0 += r2
    3837	63 60 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r6
    3838	07 02 00 00 04 00 00 00	r2 += 0x4
    3839	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3840	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3841	1f 21 00 00 00 00 00 00	r1 -= r2
    3842	79 96 28 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x28)
    3843	b7 03 00 00 08 00 00 00	r3 = 0x8
    3844	2d 13 2d 02 00 00 00 00	if r3 > r1 goto +0x22d <LBB131_145>

0000000000007828 <LBB131_59>
    3845	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3846	0f 21 00 00 00 00 00 00	r1 += r2
    3847	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3848	07 02 00 00 08 00 00 00	r2 += 0x8
    3849	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3850	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3851	1f 21 00 00 00 00 00 00	r1 -= r2
    3852	79 96 30 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x30)
    3853	25 01 05 00 07 00 00 00	if r1 > 0x7 goto +0x5 <LBB131_61>
    3854	bf a1 00 00 00 00 00 00	r1 = r10
    3855	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3856	b7 03 00 00 08 00 00 00	r3 = 0x8
    3857	85 10 00 00 94 fd ff ff	call -0x26c ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3858	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007898 <LBB131_61>
    3859	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3860	0f 21 00 00 00 00 00 00	r1 += r2
    3861	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3862	b7 06 00 00 00 00 00 00	r6 = 0x0
    3863	07 09 00 00 01 00 00 00	r9 += 0x1
    3864	07 02 00 00 08 00 00 00	r2 += 0x8
    3865	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3866	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_63>

00000000000078d8 <LBB131_62>
    3867	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3868	0f 21 00 00 00 00 00 00	r1 += r2
    3869	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3870	07 02 00 00 01 00 00 00	r2 += 0x1
    3871	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3872	07 06 00 00 01 00 00 00	r6 += 0x1
    3873	15 06 0f 01 20 00 00 00	if r6 == 0x20 goto +0x10f <LBB131_110>

0000000000007910 <LBB131_63>
    3874	bf 91 00 00 00 00 00 00	r1 = r9
    3875	0f 61 00 00 00 00 00 00	r1 += r6
    3876	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3877	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3878	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_62>
    3879	bf a1 00 00 00 00 00 00	r1 = r10
    3880	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3881	b7 03 00 00 01 00 00 00	r3 = 0x1
    3882	85 10 00 00 7b fd ff ff	call -0x285 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3883	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3884	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_62>

0000000000007968 <LBB131_65>
    3885	b7 06 00 00 00 00 00 00	r6 = 0x0
    3886	b7 02 00 00 00 00 00 00	r2 = 0x0
    3887	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_67>
    3888	bf a1 00 00 00 00 00 00	r1 = r10
    3889	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3890	b7 02 00 00 00 00 00 00	r2 = 0x0
    3891	b7 03 00 00 04 00 00 00	r3 = 0x4
    3892	85 10 00 00 71 fd ff ff	call -0x28f ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3893	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3894	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000079b8 <LBB131_67>
    3895	0f 20 00 00 00 00 00 00	r0 += r2
    3896	b7 01 00 00 01 00 00 00	r1 = 0x1
    3897	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3898	07 09 00 00 01 00 00 00	r9 += 0x1
    3899	07 02 00 00 04 00 00 00	r2 += 0x4
    3900	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3901	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_69>

00000000000079f0 <LBB131_68>
    3902	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3903	0f 21 00 00 00 00 00 00	r1 += r2
    3904	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3905	07 02 00 00 01 00 00 00	r2 += 0x1
    3906	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3907	07 06 00 00 01 00 00 00	r6 += 0x1
    3908	15 06 ec 00 20 00 00 00	if r6 == 0x20 goto +0xec <LBB131_110>

0000000000007a28 <LBB131_69>
    3909	bf 91 00 00 00 00 00 00	r1 = r9
    3910	0f 61 00 00 00 00 00 00	r1 += r6
    3911	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3912	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3913	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_68>
    3914	bf a1 00 00 00 00 00 00	r1 = r10
    3915	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3916	b7 03 00 00 01 00 00 00	r3 = 0x1
    3917	85 10 00 00 58 fd ff ff	call -0x2a8 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3918	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3919	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_68>

0000000000007a80 <LBB131_71>
    3920	b7 06 00 00 00 00 00 00	r6 = 0x0
    3921	b7 02 00 00 00 00 00 00	r2 = 0x0
    3922	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_73>
    3923	bf a1 00 00 00 00 00 00	r1 = r10
    3924	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3925	b7 02 00 00 00 00 00 00	r2 = 0x0
    3926	b7 03 00 00 04 00 00 00	r3 = 0x4
    3927	85 10 00 00 4e fd ff ff	call -0x2b2 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3928	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3929	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007ad0 <LBB131_73>
    3930	0f 20 00 00 00 00 00 00	r0 += r2
    3931	b7 01 00 00 06 00 00 00	r1 = 0x6
    3932	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3933	07 09 00 00 01 00 00 00	r9 += 0x1
    3934	07 02 00 00 04 00 00 00	r2 += 0x4
    3935	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3936	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_75>

0000000000007b08 <LBB131_74>
    3937	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3938	0f 21 00 00 00 00 00 00	r1 += r2
    3939	73 81 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r8
    3940	07 02 00 00 01 00 00 00	r2 += 0x1
    3941	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3942	07 06 00 00 01 00 00 00	r6 += 0x1
    3943	15 06 c9 00 20 00 00 00	if r6 == 0x20 goto +0xc9 <LBB131_110>

0000000000007b40 <LBB131_75>
    3944	bf 91 00 00 00 00 00 00	r1 = r9
    3945	0f 61 00 00 00 00 00 00	r1 += r6
    3946	71 18 00 00 00 00 00 00	r8 = *(u8 *)(r1 + 0x0)
    3947	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3948	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_74>
    3949	bf a1 00 00 00 00 00 00	r1 = r10
    3950	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3951	b7 03 00 00 01 00 00 00	r3 = 0x1
    3952	85 10 00 00 35 fd ff ff	call -0x2cb ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3953	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3954	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_74>

0000000000007b98 <LBB131_77>
    3955	b7 06 00 00 00 00 00 00	r6 = 0x0
    3956	b7 02 00 00 00 00 00 00	r2 = 0x0
    3957	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_79>
    3958	bf a1 00 00 00 00 00 00	r1 = r10
    3959	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3960	b7 02 00 00 00 00 00 00	r2 = 0x0
    3961	b7 03 00 00 04 00 00 00	r3 = 0x4
    3962	85 10 00 00 2b fd ff ff	call -0x2d5 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3963	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3964	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007be8 <LBB131_79>
    3965	0f 20 00 00 00 00 00 00	r0 += r2
    3966	b7 01 00 00 07 00 00 00	r1 = 0x7
    3967	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3968	07 09 00 00 01 00 00 00	r9 += 0x1
    3969	07 02 00 00 04 00 00 00	r2 += 0x4
    3970	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3971	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_81>

0000000000007c20 <LBB131_80>
    3972	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3973	0f 21 00 00 00 00 00 00	r1 += r2
    3974	73 81 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r8
    3975	07 02 00 00 01 00 00 00	r2 += 0x1
    3976	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3977	07 06 00 00 01 00 00 00	r6 += 0x1
    3978	15 06 a6 00 20 00 00 00	if r6 == 0x20 goto +0xa6 <LBB131_110>

0000000000007c58 <LBB131_81>
    3979	bf 91 00 00 00 00 00 00	r1 = r9
    3980	0f 61 00 00 00 00 00 00	r1 += r6
    3981	71 18 00 00 00 00 00 00	r8 = *(u8 *)(r1 + 0x0)
    3982	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3983	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_80>
    3984	bf a1 00 00 00 00 00 00	r1 = r10
    3985	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3986	b7 03 00 00 01 00 00 00	r3 = 0x1
    3987	85 10 00 00 12 fd ff ff	call -0x2ee ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3988	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3989	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_80>

0000000000007cb0 <LBB131_83>
    3990	b7 08 00 00 00 00 00 00	r8 = 0x0
    3991	b7 06 00 00 00 00 00 00	r6 = 0x0
    3992	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_85>
    3993	bf a1 00 00 00 00 00 00	r1 = r10
    3994	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3995	b7 02 00 00 00 00 00 00	r2 = 0x0
    3996	b7 03 00 00 04 00 00 00	r3 = 0x4
    3997	85 10 00 00 08 fd ff ff	call -0x2f8 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3998	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3999	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000007d00 <LBB131_85>
    4000	0f 60 00 00 00 00 00 00	r0 += r6
    4001	b7 01 00 00 09 00 00 00	r1 = 0x9
    4002	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4003	07 09 00 00 01 00 00 00	r9 += 0x1
    4004	07 06 00 00 04 00 00 00	r6 += 0x4
    4005	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4006	05 00 16 00 00 00 00 00	goto +0x16 <LBB131_89>

0000000000007d38 <LBB131_86>
    4007	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4008	0f 61 00 00 00 00 00 00	r1 += r6
    4009	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4010	07 06 00 00 01 00 00 00	r6 += 0x1
    4011	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4012	07 08 00 00 01 00 00 00	r8 += 0x1
    4013	55 08 0f 00 20 00 00 00	if r8 != 0x20 goto +0xf <LBB131_89>
    4014	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4015	1f 61 00 00 00 00 00 00	r1 -= r6
    4016	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    4017	79 27 58 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x58)
    4018	79 22 48 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x48)
    4019	25 01 e5 00 07 00 00 00	if r1 > 0x7 goto +0xe5 <LBB131_122>
    4020	bf a1 00 00 00 00 00 00	r1 = r10
    4021	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4022	bf 28 00 00 00 00 00 00	r8 = r2
    4023	bf 62 00 00 00 00 00 00	r2 = r6
    4024	b7 03 00 00 08 00 00 00	r3 = 0x8
    4025	85 10 00 00 ec fc ff ff	call -0x314 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4026	bf 82 00 00 00 00 00 00	r2 = r8
    4027	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4028	05 00 dc 00 00 00 00 00	goto +0xdc <LBB131_122>

0000000000007de8 <LBB131_89>
    4029	bf 91 00 00 00 00 00 00	r1 = r9
    4030	0f 81 00 00 00 00 00 00	r1 += r8
    4031	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4032	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4033	5d 61 e5 ff 00 00 00 00	if r1 != r6 goto -0x1b <LBB131_86>
    4034	bf a1 00 00 00 00 00 00	r1 = r10
    4035	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4036	bf 62 00 00 00 00 00 00	r2 = r6
    4037	b7 03 00 00 01 00 00 00	r3 = 0x1
    4038	85 10 00 00 df fc ff ff	call -0x321 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4039	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4040	05 00 de ff 00 00 00 00	goto -0x22 <LBB131_86>

0000000000007e48 <LBB131_91>
    4041	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4042	0f 61 00 00 00 00 00 00	r1 += r6
    4043	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4044	07 06 00 00 08 00 00 00	r6 += 0x8
    4045	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4046	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4047	1f 61 00 00 00 00 00 00	r1 -= r6
    4048	3d 81 01 00 00 00 00 00	if r1 >= r8 goto +0x1 <LBB131_93>
    4049	05 00 66 01 00 00 00 00	goto +0x166 <LBB131_92>

0000000000007e90 <LBB131_93>
    4050	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4051	0f 61 00 00 00 00 00 00	r1 += r6
    4052	bf 72 00 00 00 00 00 00	r2 = r7
    4053	bf 83 00 00 00 00 00 00	r3 = r8
    4054	85 10 00 00 10 13 00 00	call 0x1310 ; <memcpy>
    4055	0f 86 00 00 00 00 00 00	r6 += r8
    4056	b7 08 00 00 00 00 00 00	r8 = 0x0
    4057	07 09 00 00 21 00 00 00	r9 += 0x21
    4058	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4059	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_95>

0000000000007ee0 <LBB131_94>
    4060	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4061	0f 61 00 00 00 00 00 00	r1 += r6
    4062	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4063	07 06 00 00 01 00 00 00	r6 += 0x1
    4064	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4065	07 08 00 00 01 00 00 00	r8 += 0x1
    4066	15 08 4e 00 20 00 00 00	if r8 == 0x20 goto +0x4e <LBB131_110>

0000000000007f18 <LBB131_95>
    4067	bf 91 00 00 00 00 00 00	r1 = r9
    4068	0f 81 00 00 00 00 00 00	r1 += r8
    4069	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4070	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4071	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_94>
    4072	bf a1 00 00 00 00 00 00	r1 = r10
    4073	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4074	bf 62 00 00 00 00 00 00	r2 = r6
    4075	b7 03 00 00 01 00 00 00	r3 = 0x1
    4076	85 10 00 00 b9 fc ff ff	call -0x347 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4077	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4078	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_94>

0000000000007f78 <LBB131_97>
    4079	b7 08 00 00 00 00 00 00	r8 = 0x0
    4080	b7 06 00 00 00 00 00 00	r6 = 0x0
    4081	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_99>
    4082	bf a1 00 00 00 00 00 00	r1 = r10
    4083	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4084	b7 02 00 00 00 00 00 00	r2 = 0x0
    4085	b7 03 00 00 04 00 00 00	r3 = 0x4
    4086	85 10 00 00 af fc ff ff	call -0x351 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4087	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4088	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000007fc8 <LBB131_99>
    4089	0f 60 00 00 00 00 00 00	r0 += r6
    4090	b7 01 00 00 03 00 00 00	r1 = 0x3
    4091	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4092	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r9
    4093	07 09 00 00 01 00 00 00	r9 += 0x1
    4094	07 06 00 00 04 00 00 00	r6 += 0x4
    4095	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4096	05 00 16 00 00 00 00 00	goto +0x16 <LBB131_103>

0000000000008008 <LBB131_100>
    4097	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4098	0f 61 00 00 00 00 00 00	r1 += r6
    4099	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4100	07 06 00 00 01 00 00 00	r6 += 0x1
    4101	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4102	07 08 00 00 01 00 00 00	r8 += 0x1
    4103	55 08 0f 00 20 00 00 00	if r8 != 0x20 goto +0xf <LBB131_103>
    4104	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4105	1f 61 00 00 00 00 00 00	r1 -= r6
    4106	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    4107	79 27 58 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x58)
    4108	79 22 48 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x48)
    4109	25 01 c4 00 07 00 00 00	if r1 > 0x7 goto +0xc4 <LBB131_130>
    4110	bf a1 00 00 00 00 00 00	r1 = r10
    4111	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4112	bf 28 00 00 00 00 00 00	r8 = r2
    4113	bf 62 00 00 00 00 00 00	r2 = r6
    4114	b7 03 00 00 08 00 00 00	r3 = 0x8
    4115	85 10 00 00 92 fc ff ff	call -0x36e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4116	bf 82 00 00 00 00 00 00	r2 = r8
    4117	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4118	05 00 bb 00 00 00 00 00	goto +0xbb <LBB131_130>

00000000000080b8 <LBB131_103>
    4119	bf 91 00 00 00 00 00 00	r1 = r9
    4120	0f 81 00 00 00 00 00 00	r1 += r8
    4121	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4122	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4123	5d 61 e5 ff 00 00 00 00	if r1 != r6 goto -0x1b <LBB131_100>
    4124	bf a1 00 00 00 00 00 00	r1 = r10
    4125	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4126	bf 62 00 00 00 00 00 00	r2 = r6
    4127	b7 03 00 00 01 00 00 00	r3 = 0x1
    4128	85 10 00 00 85 fc ff ff	call -0x37b ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4129	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4130	05 00 de ff 00 00 00 00	goto -0x22 <LBB131_100>

0000000000008118 <LBB131_105>
    4131	b7 02 00 00 00 00 00 00	r2 = 0x0
    4132	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_107>
    4133	bf a1 00 00 00 00 00 00	r1 = r10
    4134	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4135	b7 02 00 00 00 00 00 00	r2 = 0x0
    4136	b7 03 00 00 04 00 00 00	r3 = 0x4
    4137	85 10 00 00 7c fc ff ff	call -0x384 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4138	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4139	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000008160 <LBB131_107>
    4140	0f 20 00 00 00 00 00 00	r0 += r2
    4141	b7 01 00 00 04 00 00 00	r1 = 0x4

0000000000008170 <LBB131_108>
    4142	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4143	07 02 00 00 04 00 00 00	r2 += 0x4

0000000000008180 <LBB131_109>
    4144	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2

0000000000008188 <LBB131_110>
    4145	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    4146	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4147	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    4148	79 a4 d0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x30)
    4149	7b 14 28 00 00 00 00 00	*(u64 *)(r4 + 0x28) = r1
    4150	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4151	7b 14 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r1
    4152	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    4153	79 31 18 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x18)
    4154	7b 14 48 00 00 00 00 00	*(u64 *)(r4 + 0x48) = r1
    4155	79 31 10 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x10)
    4156	7b 14 40 00 00 00 00 00	*(u64 *)(r4 + 0x40) = r1
    4157	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4158	7b 14 38 00 00 00 00 00	*(u64 *)(r4 + 0x38) = r1
    4159	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4160	7b 14 30 00 00 00 00 00	*(u64 *)(r4 + 0x30) = r1
    4161	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    4162	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4163	7b 14 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r1
    4164	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4165	7b 14 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r1
    4166	79 31 10 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x10)
    4167	7b 14 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r1
    4168	7b 24 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r2
    4169	95 00 00 00 00 00 00 00	exit

0000000000008250 <LBB131_111>
    4170	b7 06 00 00 00 00 00 00	r6 = 0x0
    4171	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_113>
    4172	bf a1 00 00 00 00 00 00	r1 = r10
    4173	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4174	b7 02 00 00 00 00 00 00	r2 = 0x0
    4175	b7 03 00 00 04 00 00 00	r3 = 0x4
    4176	85 10 00 00 55 fc ff ff	call -0x3ab ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4177	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4178	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008298 <LBB131_113>
    4179	0f 60 00 00 00 00 00 00	r0 += r6
    4180	b7 01 00 00 0b 00 00 00	r1 = 0xb
    4181	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4182	07 06 00 00 04 00 00 00	r6 += 0x4
    4183	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4184	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4185	1f 61 00 00 00 00 00 00	r1 -= r6
    4186	79 98 28 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x28)
    4187	b7 02 00 00 08 00 00 00	r2 = 0x8
    4188	2d 12 e2 00 00 00 00 00	if r2 > r1 goto +0xe2 <LBB131_146>

00000000000082e8 <LBB131_114>
    4189	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4190	0f 61 00 00 00 00 00 00	r1 += r6
    4191	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4192	07 06 00 00 08 00 00 00	r6 += 0x8
    4193	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4194	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4195	1f 61 00 00 00 00 00 00	r1 -= r6
    4196	79 98 40 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x40)
    4197	79 97 30 00 00 00 00 00	r7 = *(u64 *)(r9 + 0x30)
    4198	25 01 06 00 07 00 00 00	if r1 > 0x7 goto +0x6 <LBB131_116>
    4199	bf a1 00 00 00 00 00 00	r1 = r10
    4200	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4201	bf 62 00 00 00 00 00 00	r2 = r6
    4202	b7 03 00 00 08 00 00 00	r3 = 0x8
    4203	85 10 00 00 3a fc ff ff	call -0x3c6 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4204	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008368 <LBB131_116>
    4205	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4206	0f 61 00 00 00 00 00 00	r1 += r6
    4207	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4208	07 06 00 00 08 00 00 00	r6 += 0x8
    4209	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4210	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4211	1f 61 00 00 00 00 00 00	r1 -= r6
    4212	3d 81 06 00 00 00 00 00	if r1 >= r8 goto +0x6 <LBB131_118>
    4213	bf a1 00 00 00 00 00 00	r1 = r10
    4214	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4215	bf 62 00 00 00 00 00 00	r2 = r6
    4216	bf 83 00 00 00 00 00 00	r3 = r8
    4217	85 10 00 00 2c fc ff ff	call -0x3d4 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4218	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000083d8 <LBB131_118>
    4219	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4220	0f 61 00 00 00 00 00 00	r1 += r6
    4221	bf 72 00 00 00 00 00 00	r2 = r7
    4222	bf 83 00 00 00 00 00 00	r3 = r8
    4223	85 10 00 00 67 12 00 00	call 0x1267 ; <memcpy>
    4224	0f 86 00 00 00 00 00 00	r6 += r8
    4225	b7 08 00 00 00 00 00 00	r8 = 0x0
    4226	07 09 00 00 01 00 00 00	r9 += 0x1
    4227	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4228	05 00 08 00 00 00 00 00	goto +0x8 <LBB131_120>

0000000000008428 <LBB131_119>
    4229	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4230	0f 61 00 00 00 00 00 00	r1 += r6
    4231	73 91 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r9
    4232	07 06 00 00 01 00 00 00	r6 += 0x1
    4233	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4234	07 08 00 00 01 00 00 00	r8 += 0x1
    4235	bf 79 00 00 00 00 00 00	r9 = r7
    4236	15 08 a4 ff 20 00 00 00	if r8 == 0x20 goto -0x5c <LBB131_110>

0000000000008468 <LBB131_120>
    4237	bf 97 00 00 00 00 00 00	r7 = r9
    4238	0f 89 00 00 00 00 00 00	r9 += r8
    4239	71 99 00 00 00 00 00 00	r9 = *(u8 *)(r9 + 0x0)
    4240	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4241	5d 61 f3 ff 00 00 00 00	if r1 != r6 goto -0xd <LBB131_119>
    4242	bf a1 00 00 00 00 00 00	r1 = r10
    4243	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4244	bf 62 00 00 00 00 00 00	r2 = r6
    4245	b7 03 00 00 01 00 00 00	r3 = 0x1
    4246	85 10 00 00 0f fc ff ff	call -0x3f1 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4247	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4248	05 00 ec ff 00 00 00 00	goto -0x14 <LBB131_119>

00000000000084c8 <LBB131_122>
    4249	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4250	0f 61 00 00 00 00 00 00	r1 += r6
    4251	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7
    4252	07 06 00 00 08 00 00 00	r6 += 0x8
    4253	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4254	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4255	bf 91 00 00 00 00 00 00	r1 = r9
    4256	1f 61 00 00 00 00 00 00	r1 -= r6
    4257	3d 71 01 00 00 00 00 00	if r1 >= r7 goto +0x1 <LBB131_124>
    4258	05 00 a3 00 00 00 00 00	goto +0xa3 <LBB131_123>

0000000000008518 <LBB131_124>
    4259	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4260	bf 81 00 00 00 00 00 00	r1 = r8
    4261	0f 61 00 00 00 00 00 00	r1 += r6
    4262	bf 73 00 00 00 00 00 00	r3 = r7
    4263	85 10 00 00 3f 12 00 00	call 0x123f ; <memcpy>
    4264	0f 76 00 00 00 00 00 00	r6 += r7
    4265	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4266	1f 69 00 00 00 00 00 00	r9 -= r6
    4267	79 a7 c0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x40)
    4268	79 71 60 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x60)
    4269	25 09 09 00 07 00 00 00	if r9 > 0x7 goto +0x9 <LBB131_126>
    4270	bf 18 00 00 00 00 00 00	r8 = r1
    4271	bf a1 00 00 00 00 00 00	r1 = r10
    4272	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4273	bf 62 00 00 00 00 00 00	r2 = r6
    4274	b7 03 00 00 08 00 00 00	r3 = 0x8
    4275	85 10 00 00 f2 fb ff ff	call -0x40e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4276	bf 81 00 00 00 00 00 00	r1 = r8
    4277	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4278	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000085b8 <LBB131_126>
    4279	0f 68 00 00 00 00 00 00	r8 += r6
    4280	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    4281	b7 08 00 00 00 00 00 00	r8 = 0x0
    4282	07 07 00 00 21 00 00 00	r7 += 0x21
    4283	07 06 00 00 08 00 00 00	r6 += 0x8
    4284	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4285	bf 79 00 00 00 00 00 00	r9 = r7
    4286	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_128>

00000000000085f8 <LBB131_127>
    4287	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4288	0f 61 00 00 00 00 00 00	r1 += r6
    4289	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4290	07 06 00 00 01 00 00 00	r6 += 0x1
    4291	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4292	07 08 00 00 01 00 00 00	r8 += 0x1
    4293	15 08 6b ff 20 00 00 00	if r8 == 0x20 goto -0x95 <LBB131_110>

0000000000008630 <LBB131_128>
    4294	bf 91 00 00 00 00 00 00	r1 = r9
    4295	0f 81 00 00 00 00 00 00	r1 += r8
    4296	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4297	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4298	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_127>
    4299	bf a1 00 00 00 00 00 00	r1 = r10
    4300	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4301	bf 62 00 00 00 00 00 00	r2 = r6
    4302	b7 03 00 00 01 00 00 00	r3 = 0x1
    4303	85 10 00 00 d6 fb ff ff	call -0x42a ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4304	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4305	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_127>

0000000000008690 <LBB131_130>
    4306	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4307	0f 61 00 00 00 00 00 00	r1 += r6
    4308	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7
    4309	07 06 00 00 08 00 00 00	r6 += 0x8
    4310	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4311	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4312	bf 91 00 00 00 00 00 00	r1 = r9
    4313	1f 61 00 00 00 00 00 00	r1 -= r6
    4314	3d 71 01 00 00 00 00 00	if r1 >= r7 goto +0x1 <LBB131_132>
    4315	05 00 74 00 00 00 00 00	goto +0x74 <LBB131_131>

00000000000086e0 <LBB131_132>
    4316	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4317	bf 81 00 00 00 00 00 00	r1 = r8
    4318	0f 61 00 00 00 00 00 00	r1 += r6
    4319	bf 73 00 00 00 00 00 00	r3 = r7
    4320	85 10 00 00 06 12 00 00	call 0x1206 ; <memcpy>
    4321	0f 76 00 00 00 00 00 00	r6 += r7
    4322	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4323	1f 69 00 00 00 00 00 00	r9 -= r6
    4324	79 a7 c0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x40)
    4325	79 71 60 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x60)
    4326	25 09 09 00 07 00 00 00	if r9 > 0x7 goto +0x9 <LBB131_134>
    4327	bf 18 00 00 00 00 00 00	r8 = r1
    4328	bf a1 00 00 00 00 00 00	r1 = r10
    4329	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4330	bf 62 00 00 00 00 00 00	r2 = r6
    4331	b7 03 00 00 08 00 00 00	r3 = 0x8
    4332	85 10 00 00 b9 fb ff ff	call -0x447 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4333	bf 81 00 00 00 00 00 00	r1 = r8
    4334	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4335	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008780 <LBB131_134>
    4336	0f 68 00 00 00 00 00 00	r8 += r6
    4337	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    4338	07 06 00 00 08 00 00 00	r6 += 0x8
    4339	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4340	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4341	1f 61 00 00 00 00 00 00	r1 -= r6
    4342	79 78 68 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x68)
    4343	bf 79 00 00 00 00 00 00	r9 = r7
    4344	25 01 06 00 07 00 00 00	if r1 > 0x7 goto +0x6 <LBB131_136>
    4345	bf a1 00 00 00 00 00 00	r1 = r10
    4346	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4347	bf 62 00 00 00 00 00 00	r2 = r6
    4348	b7 03 00 00 08 00 00 00	r3 = 0x8
    4349	85 10 00 00 a8 fb ff ff	call -0x458 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4350	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000087f8 <LBB131_136>
    4351	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4352	0f 61 00 00 00 00 00 00	r1 += r6
    4353	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4354	b7 08 00 00 00 00 00 00	r8 = 0x0
    4355	07 09 00 00 21 00 00 00	r9 += 0x21
    4356	07 06 00 00 08 00 00 00	r6 += 0x8
    4357	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4358	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_138>

0000000000008838 <LBB131_137>
    4359	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4360	0f 61 00 00 00 00 00 00	r1 += r6
    4361	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4362	07 06 00 00 01 00 00 00	r6 += 0x1
    4363	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4364	07 08 00 00 01 00 00 00	r8 += 0x1
    4365	15 08 23 ff 20 00 00 00	if r8 == 0x20 goto -0xdd <LBB131_110>

0000000000008870 <LBB131_138>
    4366	bf 91 00 00 00 00 00 00	r1 = r9
    4367	0f 81 00 00 00 00 00 00	r1 += r8
    4368	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4369	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4370	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_137>
    4371	bf a1 00 00 00 00 00 00	r1 = r10
    4372	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4373	bf 62 00 00 00 00 00 00	r2 = r6
    4374	b7 03 00 00 01 00 00 00	r3 = 0x1
    4375	85 10 00 00 8e fb ff ff	call -0x472 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4376	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4377	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_137>

00000000000088d0 <LBB131_140>
    4378	bf a1 00 00 00 00 00 00	r1 = r10
    4379	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4380	b7 02 00 00 00 00 00 00	r2 = 0x0
    4381	b7 03 00 00 04 00 00 00	r3 = 0x4
    4382	85 10 00 00 87 fb ff ff	call -0x479 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4383	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4384	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4385	05 00 5c fd 00 00 00 00	goto -0x2a4 <LBB131_32>

0000000000008910 <LBB131_142>
    4386	bf a1 00 00 00 00 00 00	r1 = r10
    4387	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4388	b7 02 00 00 00 00 00 00	r2 = 0x0
    4389	b7 03 00 00 04 00 00 00	r3 = 0x4
    4390	85 10 00 00 7f fb ff ff	call -0x481 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4391	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4392	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4393	05 00 80 fd 00 00 00 00	goto -0x280 <LBB131_42>

0000000000008950 <LBB131_144>
    4394	bf a1 00 00 00 00 00 00	r1 = r10
    4395	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4396	b7 02 00 00 00 00 00 00	r2 = 0x0
    4397	b7 03 00 00 04 00 00 00	r3 = 0x4
    4398	85 10 00 00 77 fb ff ff	call -0x489 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4399	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4400	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4401	05 00 bd fd 00 00 00 00	goto -0x243 <LBB131_55>

0000000000008990 <LBB131_145>
    4402	bf a1 00 00 00 00 00 00	r1 = r10
    4403	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4404	b7 03 00 00 08 00 00 00	r3 = 0x8
    4405	85 10 00 00 70 fb ff ff	call -0x490 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4406	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4407	05 00 cd fd 00 00 00 00	goto -0x233 <LBB131_59>

00000000000089c0 <LBB131_92>
    4408	bf a1 00 00 00 00 00 00	r1 = r10
    4409	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4410	bf 62 00 00 00 00 00 00	r2 = r6
    4411	bf 83 00 00 00 00 00 00	r3 = r8
    4412	85 10 00 00 69 fb ff ff	call -0x497 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4413	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4414	05 00 93 fe 00 00 00 00	goto -0x16d <LBB131_93>

00000000000089f8 <LBB131_146>
    4415	bf a1 00 00 00 00 00 00	r1 = r10
    4416	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4417	bf 62 00 00 00 00 00 00	r2 = r6
    4418	b7 03 00 00 08 00 00 00	r3 = 0x8
    4419	85 10 00 00 62 fb ff ff	call -0x49e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4420	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4421	05 00 17 ff 00 00 00 00	goto -0xe9 <LBB131_114>

0000000000008a30 <LBB131_123>
    4422	bf a1 00 00 00 00 00 00	r1 = r10
    4423	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4424	bf 28 00 00 00 00 00 00	r8 = r2
    4425	bf 62 00 00 00 00 00 00	r2 = r6
    4426	bf 73 00 00 00 00 00 00	r3 = r7
    4427	85 10 00 00 5a fb ff ff	call -0x4a6 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4428	bf 82 00 00 00 00 00 00	r2 = r8
    4429	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4430	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4431	05 00 53 ff 00 00 00 00	goto -0xad <LBB131_124>

0000000000008a80 <LBB131_131>
    4432	bf a1 00 00 00 00 00 00	r1 = r10
    4433	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4434	bf 28 00 00 00 00 00 00	r8 = r2
    4435	bf 62 00 00 00 00 00 00	r2 = r6
    4436	bf 73 00 00 00 00 00 00	r3 = r7
    4437	85 10 00 00 50 fb ff ff	call -0x4b0 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4438	bf 82 00 00 00 00 00 00	r2 = r8
    4439	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4440	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4441	05 00 82 ff 00 00 00 00	goto -0x7e <LBB131_132>

0000000000008ad0 <LBB131_147>
    4442	bf 61 00 00 00 00 00 00	r1 = r6
    4443	b7 02 00 00 01 00 00 00	r2 = 0x1
    4444	85 10 00 00 cf 04 00 00	call 0x4cf ; <alloc::alloc::handle_alloc_error>
    4445	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000008af0 <solana_program::program::invoke>
    4446	18 05 00 00 d8 2b 01 00 00 00 00 00 00 00 00 00	r5 = 0x12bd8 ll
    4448	7b 5a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r5
    4449	b7 05 00 00 00 00 00 00	r5 = 0x0
    4450	7b 5a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r5
    4451	bf a5 00 00 00 00 00 00	r5 = r10
    4452	85 10 00 00 01 00 00 00	call 0x1 ; <solana_program::program::invoke_signed>
    4453	95 00 00 00 00 00 00 00	exit

0000000000008b30 <solana_program::program::invoke_signed>
    4454	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
    4455	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    4456	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    4457	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    4458	79 21 10 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x10)
    4459	79 52 08 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0xff8)
    4460	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
    4461	79 52 00 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0x1000)
    4462	7b 2a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r2
    4463	15 01 4d 00 00 00 00 00	if r1 == 0x0 goto +0x4d <LBB200_4>
    4464	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    4465	79 27 00 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x0)
    4466	27 01 00 00 22 00 00 00	r1 *= 0x22
    4467	bf 72 00 00 00 00 00 00	r2 = r7
    4468	0f 12 00 00 00 00 00 00	r2 += r1
    4469	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    4470	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    4471	27 01 00 00 30 00 00 00	r1 *= 0x30
    4472	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4473	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    4474	07 01 00 00 d8 ff ff ff	r1 += -0x28
    4475	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4476	05 00 3b 00 00 00 00 00	goto +0x3b <LBB200_2>

0000000000008be8 <LBB200_3>
    4477	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB200_7>
    4478	05 00 37 00 00 00 00 00	goto +0x37 <LBB200_14>

0000000000008bf8 <LBB200_7>
    4479	79 92 28 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x28)
    4480	bf 61 00 00 00 00 00 00	r1 = r6
    4481	b7 03 00 00 20 00 00 00	r3 = 0x20
    4482	85 10 00 00 aa 11 00 00	call 0x11aa ; <memcmp>
    4483	07 08 00 00 d0 ff ff ff	r8 += -0x30
    4484	07 09 00 00 30 00 00 00	r9 += 0x30
    4485	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4486	77 00 00 00 20 00 00 00	r0 >>= 0x20
    4487	55 00 f5 ff 00 00 00 00	if r0 != 0x0 goto -0xb <LBB200_3>
    4488	71 61 21 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x21)
    4489	55 01 18 00 00 00 00 00	if r1 != 0x0 goto +0x18 <LBB200_10>
    4490	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4491	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4492	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    4494	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB200_16>
    4495	05 00 4a 00 00 00 00 00	goto +0x4a <LBB200_17>

0000000000008c80 <LBB200_16>
    4496	bf 13 00 00 00 00 00 00	r3 = r1
    4497	07 03 00 00 10 00 00 00	r3 += 0x10
    4498	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    4499	7b 23 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r2
    4500	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4501	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    4502	18 04 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r4 = 0x7fffffffffffffff ll
    4504	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB200_18>
    4505	05 00 47 00 00 00 00 00	goto +0x47 <LBB200_19>

0000000000008cd0 <LBB200_18>
    4506	bf 23 00 00 00 00 00 00	r3 = r2
    4507	07 03 00 00 10 00 00 00	r3 += 0x10
    4508	7b 3a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r3
    4509	07 02 00 00 18 00 00 00	r2 += 0x18
    4510	07 01 00 00 18 00 00 00	r1 += 0x18
    4511	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    4512	7b 2a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r2
    4513	05 00 14 00 00 00 00 00	goto +0x14 <LBB200_14>

0000000000008d10 <LBB200_10>
    4514	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4515	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4516	b7 04 00 00 00 00 00 00	r4 = 0x0
    4517	55 02 26 00 00 00 00 00	if r2 != 0x0 goto +0x26 <LBB200_12>
    4518	bf 12 00 00 00 00 00 00	r2 = r1
    4519	07 02 00 00 10 00 00 00	r2 += 0x10
    4520	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    4521	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    4522	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4523	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    4524	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB200_13>
    4525	05 00 25 00 00 00 00 00	goto +0x25 <LBB200_15>

0000000000008d70 <LBB200_13>
    4526	bf 23 00 00 00 00 00 00	r3 = r2
    4527	07 03 00 00 10 00 00 00	r3 += 0x10
    4528	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    4529	7b 42 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r4
    4530	07 02 00 00 18 00 00 00	r2 += 0x18
    4531	07 01 00 00 18 00 00 00	r1 += 0x18
    4532	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
    4533	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1

0000000000008db0 <LBB200_14>
    4534	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4535	1d 17 05 00 00 00 00 00	if r7 == r1 goto +0x5 <LBB200_4>

0000000000008dc0 <LBB200_2>
    4536	bf 76 00 00 00 00 00 00	r6 = r7
    4537	07 07 00 00 22 00 00 00	r7 += 0x22
    4538	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x8)
    4539	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4540	05 00 c0 ff 00 00 00 00	goto -0x40 <LBB200_3>

0000000000008de8 <LBB200_4>
    4541	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    4542	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    4543	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    4544	79 a4 78 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x88)
    4545	79 a5 80 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x80)
    4546	85 10 00 00 ff ff ff ff	call -0x1 ; sol_invoke_signed_rust
    4547	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB200_6>
    4548	b7 01 00 00 14 00 00 00	r1 = 0x14
    4549	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4550	63 12 00 00 00 00 00 00	*(u32 *)(r2 + 0x0) = r1
    4551	05 00 22 00 00 00 00 00	goto +0x22 <LBB200_21>

0000000000008e40 <LBB200_6>
    4552	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    4553	bf 02 00 00 00 00 00 00	r2 = r0
    4554	85 10 00 00 7b 00 00 00	call 0x7b ; <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    4555	05 00 1e 00 00 00 00 00	goto +0x1e <LBB200_21>

0000000000008e60 <LBB200_12>
    4556	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4557	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    4558	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4559	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4561	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    4562	05 00 14 00 00 00 00 00	goto +0x14 <LBB200_20>

0000000000008e98 <LBB200_15>
    4563	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4564	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4565	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4566	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4568	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    4569	05 00 0d 00 00 00 00 00	goto +0xd <LBB200_20>

0000000000008ed0 <LBB200_17>
    4570	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4571	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    4572	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4573	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4575	79 a3 98 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x68)
    4576	05 00 06 00 00 00 00 00	goto +0x6 <LBB200_20>

0000000000008f08 <LBB200_19>
    4577	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4578	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    4579	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4580	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4582	79 a3 88 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x78)

0000000000008f38 <LBB200_20>
    4583	5f 13 00 00 00 00 00 00	r3 &= r1
    4584	47 03 00 00 0b 00 00 00	r3 |= 0xb
    4585	7b 32 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r3

0000000000008f50 <LBB200_21>
    4586	95 00 00 00 00 00 00 00	exit

0000000000008f58 <solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from>
    4587	61 12 00 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x0)
    4588	65 02 06 00 09 00 00 00	if r2 s> 0x9 goto +0x6 <LBB206_14>
    4589	65 02 0b 00 04 00 00 00	if r2 s> 0x4 goto +0xb <LBB206_8>
    4590	65 02 14 00 01 00 00 00	if r2 s> 0x1 goto +0x14 <LBB206_5>
    4591	15 02 27 00 00 00 00 00	if r2 == 0x0 goto +0x27 <LBB206_27>
    4592	18 06 00 00 00 00 00 00 00 00 00 00 02 00 00 00	r6 = 0x200000000 ll
    4594	05 00 4a 00 00 00 00 00	goto +0x4a <LBB206_39>

0000000000008f98 <LBB206_14>
    4595	65 02 0a 00 0e 00 00 00	if r2 s> 0xe goto +0xa <LBB206_21>
    4596	65 02 13 00 0b 00 00 00	if r2 s> 0xb goto +0x13 <LBB206_18>
    4597	15 02 27 00 0a 00 00 00	if r2 == 0xa goto +0x27 <LBB206_33>
    4598	18 06 00 00 00 00 00 00 00 00 00 00 0c 00 00 00	r6 = 0xc00000000 ll
    4600	05 00 44 00 00 00 00 00	goto +0x44 <LBB206_39>

0000000000008fc8 <LBB206_8>
    4601	65 02 13 00 06 00 00 00	if r2 s> 0x6 goto +0x13 <LBB206_11>
    4602	15 02 25 00 05 00 00 00	if r2 == 0x5 goto +0x25 <LBB206_30>
    4603	18 06 00 00 00 00 00 00 00 00 00 00 07 00 00 00	r6 = 0x700000000 ll
    4605	05 00 3f 00 00 00 00 00	goto +0x3f <LBB206_39>

0000000000008ff0 <LBB206_21>
    4606	65 02 13 00 10 00 00 00	if r2 s> 0x10 goto +0x13 <LBB206_24>
    4607	15 02 23 00 0f 00 00 00	if r2 == 0xf goto +0x23 <LBB206_36>
    4608	18 06 00 00 00 00 00 00 00 00 00 00 11 00 00 00	r6 = 0x1100000000 ll
    4610	05 00 3a 00 00 00 00 00	goto +0x3a <LBB206_39>

0000000000009018 <LBB206_5>
    4611	15 02 22 00 02 00 00 00	if r2 == 0x2 goto +0x22 <LBB206_28>
    4612	15 02 24 00 03 00 00 00	if r2 == 0x3 goto +0x24 <LBB206_29>
    4613	18 06 00 00 00 00 00 00 00 00 00 00 05 00 00 00	r6 = 0x500000000 ll
    4615	05 00 35 00 00 00 00 00	goto +0x35 <LBB206_39>

0000000000009040 <LBB206_18>
    4616	15 02 23 00 0c 00 00 00	if r2 == 0xc goto +0x23 <LBB206_34>
    4617	15 02 25 00 0d 00 00 00	if r2 == 0xd goto +0x25 <LBB206_35>
    4618	18 06 00 00 00 00 00 00 00 00 00 00 0f 00 00 00	r6 = 0xf00000000 ll
    4620	05 00 30 00 00 00 00 00	goto +0x30 <LBB206_39>

0000000000009068 <LBB206_11>
    4621	15 02 24 00 07 00 00 00	if r2 == 0x7 goto +0x24 <LBB206_31>
    4622	15 02 26 00 08 00 00 00	if r2 == 0x8 goto +0x26 <LBB206_32>
    4623	18 06 00 00 00 00 00 00 00 00 00 00 0a 00 00 00	r6 = 0xa00000000 ll
    4625	05 00 2b 00 00 00 00 00	goto +0x2b <LBB206_39>

0000000000009090 <LBB206_24>
    4626	15 02 25 00 11 00 00 00	if r2 == 0x11 goto +0x25 <LBB206_37>
    4627	15 02 27 00 12 00 00 00	if r2 == 0x12 goto +0x27 <LBB206_38>
    4628	18 06 00 00 00 00 00 00 00 00 00 00 14 00 00 00	r6 = 0x1400000000 ll
    4630	05 00 26 00 00 00 00 00	goto +0x26 <LBB206_39>

00000000000090b8 <LBB206_27>
    4631	18 06 00 00 00 00 00 00 00 00 00 00 01 00 00 00	r6 = 0x100000000 ll
    4633	61 13 04 00 00 00 00 00	r3 = *(u32 *)(r1 + 0x4)
    4634	15 03 22 00 00 00 00 00	if r3 == 0x0 goto +0x22 <LBB206_39>
    4635	bf 36 00 00 00 00 00 00	r6 = r3
    4636	05 00 20 00 00 00 00 00	goto +0x20 <LBB206_39>

00000000000090e8 <LBB206_33>
    4637	18 06 00 00 00 00 00 00 00 00 00 00 0b 00 00 00	r6 = 0xb00000000 ll
    4639	05 00 1d 00 00 00 00 00	goto +0x1d <LBB206_39>

0000000000009100 <LBB206_30>
    4640	18 06 00 00 00 00 00 00 00 00 00 00 06 00 00 00	r6 = 0x600000000 ll
    4642	05 00 1a 00 00 00 00 00	goto +0x1a <LBB206_39>

0000000000009118 <LBB206_36>
    4643	18 06 00 00 00 00 00 00 00 00 00 00 10 00 00 00	r6 = 0x1000000000 ll
    4645	05 00 17 00 00 00 00 00	goto +0x17 <LBB206_39>

0000000000009130 <LBB206_28>
    4646	18 06 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r6 = 0x300000000 ll
    4648	05 00 14 00 00 00 00 00	goto +0x14 <LBB206_39>

0000000000009148 <LBB206_29>
    4649	18 06 00 00 00 00 00 00 00 00 00 00 04 00 00 00	r6 = 0x400000000 ll
    4651	05 00 11 00 00 00 00 00	goto +0x11 <LBB206_39>

0000000000009160 <LBB206_34>
    4652	18 06 00 00 00 00 00 00 00 00 00 00 0d 00 00 00	r6 = 0xd00000000 ll
    4654	05 00 0e 00 00 00 00 00	goto +0xe <LBB206_39>

0000000000009178 <LBB206_35>
    4655	18 06 00 00 00 00 00 00 00 00 00 00 0e 00 00 00	r6 = 0xe00000000 ll
    4657	05 00 0b 00 00 00 00 00	goto +0xb <LBB206_39>

0000000000009190 <LBB206_31>
    4658	18 06 00 00 00 00 00 00 00 00 00 00 08 00 00 00	r6 = 0x800000000 ll
    4660	05 00 08 00 00 00 00 00	goto +0x8 <LBB206_39>

00000000000091a8 <LBB206_32>
    4661	18 06 00 00 00 00 00 00 00 00 00 00 09 00 00 00	r6 = 0x900000000 ll
    4663	05 00 05 00 00 00 00 00	goto +0x5 <LBB206_39>

00000000000091c0 <LBB206_37>
    4664	18 06 00 00 00 00 00 00 00 00 00 00 12 00 00 00	r6 = 0x1200000000 ll
    4666	05 00 02 00 00 00 00 00	goto +0x2 <LBB206_39>

00000000000091d8 <LBB206_38>
    4667	18 06 00 00 00 00 00 00 00 00 00 00 13 00 00 00	r6 = 0x1300000000 ll

00000000000091e8 <LBB206_39>
    4669	55 02 06 00 0e 00 00 00	if r2 != 0xe goto +0x6 <LBB206_43>
    4670	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4671	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB206_43>
    4672	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    4673	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB206_43>
    4674	b7 03 00 00 01 00 00 00	r3 = 0x1
    4675	85 10 00 00 fb f9 ff ff	call -0x605 ; <__rust_dealloc>

0000000000009220 <LBB206_43>
    4676	bf 60 00 00 00 00 00 00	r0 = r6
    4677	95 00 00 00 00 00 00 00	exit

0000000000009230 <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    4678	bf 16 00 00 00 00 00 00	r6 = r1
    4679	18 03 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r3 = -0x100000000 ll
    4681	bf 21 00 00 00 00 00 00	r1 = r2
    4682	0f 31 00 00 00 00 00 00	r1 += r3
    4683	bf 13 00 00 00 00 00 00	r3 = r1
    4684	77 03 00 00 20 00 00 00	r3 >>= 0x20
    4685	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4686	4f 31 00 00 00 00 00 00	r1 |= r3
    4687	65 01 06 00 09 00 00 00	if r1 s> 0x9 goto +0x6 <LBB207_14>
    4688	65 01 0c 00 04 00 00 00	if r1 s> 0x4 goto +0xc <LBB207_8>
    4689	65 01 17 00 01 00 00 00	if r1 s> 0x1 goto +0x17 <LBB207_5>
    4690	15 01 35 00 00 00 00 00	if r1 == 0x0 goto +0x35 <LBB207_28>
    4691	b7 03 00 00 01 00 00 00	r3 = 0x1
    4692	15 01 56 00 01 00 00 00	if r1 == 0x1 goto +0x56 <LBB207_49>
    4693	05 00 2f 00 00 00 00 00	goto +0x2f <LBB207_27>

00000000000092b0 <LBB207_14>
    4694	65 01 0c 00 0e 00 00 00	if r1 s> 0xe goto +0xc <LBB207_21>
    4695	65 01 17 00 0b 00 00 00	if r1 s> 0xb goto +0x17 <LBB207_18>
    4696	15 01 32 00 0a 00 00 00	if r1 == 0xa goto +0x32 <LBB207_37>
    4697	15 01 01 00 0b 00 00 00	if r1 == 0xb goto +0x1 <LBB207_38>
    4698	05 00 2a 00 00 00 00 00	goto +0x2a <LBB207_27>

00000000000092d8 <LBB207_38>
    4699	b7 03 00 00 0b 00 00 00	r3 = 0xb
    4700	05 00 4e 00 00 00 00 00	goto +0x4e <LBB207_49>

00000000000092e8 <LBB207_8>
    4701	65 01 1e 00 06 00 00 00	if r1 s> 0x6 goto +0x1e <LBB207_11>
    4702	15 01 2e 00 05 00 00 00	if r1 == 0x5 goto +0x2e <LBB207_32>
    4703	15 01 01 00 06 00 00 00	if r1 == 0x6 goto +0x1 <LBB207_33>
    4704	05 00 24 00 00 00 00 00	goto +0x24 <LBB207_27>

0000000000009308 <LBB207_33>
    4705	b7 03 00 00 06 00 00 00	r3 = 0x6
    4706	05 00 48 00 00 00 00 00	goto +0x48 <LBB207_49>

0000000000009318 <LBB207_21>
    4707	65 01 1e 00 10 00 00 00	if r1 s> 0x10 goto +0x1e <LBB207_24>
    4708	15 01 2a 00 0f 00 00 00	if r1 == 0xf goto +0x2a <LBB207_44>
    4709	15 01 01 00 10 00 00 00	if r1 == 0x10 goto +0x1 <LBB207_45>
    4710	05 00 1e 00 00 00 00 00	goto +0x1e <LBB207_27>

0000000000009338 <LBB207_45>
    4711	b7 03 00 00 10 00 00 00	r3 = 0x10
    4712	05 00 42 00 00 00 00 00	goto +0x42 <LBB207_49>

0000000000009348 <LBB207_5>
    4713	15 01 27 00 02 00 00 00	if r1 == 0x2 goto +0x27 <LBB207_29>
    4714	15 01 28 00 03 00 00 00	if r1 == 0x3 goto +0x28 <LBB207_30>
    4715	15 01 01 00 04 00 00 00	if r1 == 0x4 goto +0x1 <LBB207_31>
    4716	05 00 18 00 00 00 00 00	goto +0x18 <LBB207_27>

0000000000009368 <LBB207_31>
    4717	b7 03 00 00 04 00 00 00	r3 = 0x4
    4718	05 00 3c 00 00 00 00 00	goto +0x3c <LBB207_49>

0000000000009378 <LBB207_18>
    4719	15 01 25 00 0c 00 00 00	if r1 == 0xc goto +0x25 <LBB207_39>
    4720	15 01 26 00 0d 00 00 00	if r1 == 0xd goto +0x26 <LBB207_40>
    4721	15 01 01 00 0e 00 00 00	if r1 == 0xe goto +0x1 <LBB207_41>
    4722	05 00 12 00 00 00 00 00	goto +0x12 <LBB207_27>

0000000000009398 <LBB207_41>
    4723	b7 07 00 00 07 00 00 00	r7 = 0x7
    4724	b7 01 00 00 07 00 00 00	r1 = 0x7
    4725	b7 02 00 00 01 00 00 00	r2 = 0x1
    4726	85 10 00 00 c6 f9 ff ff	call -0x63a ; <__rust_alloc>
    4727	55 00 2b 00 00 00 00 00	if r0 != 0x0 goto +0x2b <LBB207_43>
    4728	b7 01 00 00 07 00 00 00	r1 = 0x7
    4729	b7 02 00 00 01 00 00 00	r2 = 0x1
    4730	85 10 00 00 b1 03 00 00	call 0x3b1 ; <alloc::alloc::handle_alloc_error>
    4731	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000093e0 <LBB207_11>
    4732	15 01 1c 00 07 00 00 00	if r1 == 0x7 goto +0x1c <LBB207_34>
    4733	15 01 1d 00 08 00 00 00	if r1 == 0x8 goto +0x1d <LBB207_35>
    4734	15 01 01 00 09 00 00 00	if r1 == 0x9 goto +0x1 <LBB207_36>
    4735	05 00 05 00 00 00 00 00	goto +0x5 <LBB207_27>

0000000000009400 <LBB207_36>
    4736	b7 03 00 00 09 00 00 00	r3 = 0x9
    4737	05 00 29 00 00 00 00 00	goto +0x29 <LBB207_49>

0000000000009410 <LBB207_24>
    4738	15 01 1a 00 11 00 00 00	if r1 == 0x11 goto +0x1a <LBB207_46>
    4739	15 01 1b 00 12 00 00 00	if r1 == 0x12 goto +0x1b <LBB207_47>
    4740	15 01 1c 00 13 00 00 00	if r1 == 0x13 goto +0x1c <LBB207_48>

0000000000009428 <LBB207_27>
    4741	63 26 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r2
    4742	b7 03 00 00 00 00 00 00	r3 = 0x0
    4743	05 00 23 00 00 00 00 00	goto +0x23 <LBB207_49>

0000000000009440 <LBB207_28>
    4744	b7 03 00 00 00 00 00 00	r3 = 0x0
    4745	63 36 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r3
    4746	05 00 20 00 00 00 00 00	goto +0x20 <LBB207_49>

0000000000009458 <LBB207_37>
    4747	b7 03 00 00 0a 00 00 00	r3 = 0xa
    4748	05 00 1e 00 00 00 00 00	goto +0x1e <LBB207_49>

0000000000009468 <LBB207_32>
    4749	b7 03 00 00 05 00 00 00	r3 = 0x5
    4750	05 00 1c 00 00 00 00 00	goto +0x1c <LBB207_49>

0000000000009478 <LBB207_44>
    4751	b7 03 00 00 0f 00 00 00	r3 = 0xf
    4752	05 00 1a 00 00 00 00 00	goto +0x1a <LBB207_49>

0000000000009488 <LBB207_29>
    4753	b7 03 00 00 02 00 00 00	r3 = 0x2
    4754	05 00 18 00 00 00 00 00	goto +0x18 <LBB207_49>

0000000000009498 <LBB207_30>
    4755	b7 03 00 00 03 00 00 00	r3 = 0x3
    4756	05 00 16 00 00 00 00 00	goto +0x16 <LBB207_49>

00000000000094a8 <LBB207_39>
    4757	b7 03 00 00 0c 00 00 00	r3 = 0xc
    4758	05 00 14 00 00 00 00 00	goto +0x14 <LBB207_49>

00000000000094b8 <LBB207_40>
    4759	b7 03 00 00 0d 00 00 00	r3 = 0xd
    4760	05 00 12 00 00 00 00 00	goto +0x12 <LBB207_49>

00000000000094c8 <LBB207_34>
    4761	b7 03 00 00 07 00 00 00	r3 = 0x7
    4762	05 00 10 00 00 00 00 00	goto +0x10 <LBB207_49>

00000000000094d8 <LBB207_35>
    4763	b7 03 00 00 08 00 00 00	r3 = 0x8
    4764	05 00 0e 00 00 00 00 00	goto +0xe <LBB207_49>

00000000000094e8 <LBB207_46>
    4765	b7 03 00 00 11 00 00 00	r3 = 0x11
    4766	05 00 0c 00 00 00 00 00	goto +0xc <LBB207_49>

00000000000094f8 <LBB207_47>
    4767	b7 03 00 00 12 00 00 00	r3 = 0x12
    4768	05 00 0a 00 00 00 00 00	goto +0xa <LBB207_49>

0000000000009508 <LBB207_48>
    4769	b7 03 00 00 13 00 00 00	r3 = 0x13
    4770	05 00 08 00 00 00 00 00	goto +0x8 <LBB207_49>

0000000000009518 <LBB207_43>
    4771	b7 01 00 00 6e 6f 77 6e	r1 = 0x6e776f6e
    4772	63 10 03 00 00 00 00 00	*(u32 *)(r0 + 0x3) = r1
    4773	b7 01 00 00 55 6e 6b 6e	r1 = 0x6e6b6e55
    4774	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4775	7b 76 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r7
    4776	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    4777	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    4778	b7 03 00 00 0e 00 00 00	r3 = 0xe

0000000000009558 <LBB207_49>
    4779	63 36 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r3
    4780	95 00 00 00 00 00 00 00	exit

0000000000009568 <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    4781	bf 16 00 00 00 00 00 00	r6 = r1
    4782	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    4783	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    4784	bf a1 00 00 00 00 00 00	r1 = r10
    4785	07 01 00 00 f0 ff ff ff	r1 += -0x10
    4786	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4787	b7 01 00 00 00 00 00 00	r1 = 0x0
    4788	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4789	b7 01 00 00 01 00 00 00	r1 = 0x1
    4790	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    4791	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    4792	18 01 00 00 68 3d 01 00 00 00 00 00 00 00 00 00	r1 = 0x13d68 ll
    4794	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    4795	18 01 00 00 d8 a8 00 00 00 00 00 00 00 00 00 00	r1 = 0xa8d8 ll
    4797	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4798	bf a1 00 00 00 00 00 00	r1 = r10
    4799	07 01 00 00 b0 ff ff ff	r1 += -0x50
    4800	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4801	bf 61 00 00 00 00 00 00	r1 = r6
    4802	07 01 00 00 08 00 00 00	r1 += 0x8
    4803	bf a2 00 00 00 00 00 00	r2 = r10
    4804	07 02 00 00 c0 ff ff ff	r2 += -0x40
    4805	85 10 00 00 6e 03 00 00	call 0x36e ; <alloc::fmt::format>
    4806	b7 01 00 00 0e 00 00 00	r1 = 0xe
    4807	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
    4808	71 a1 b0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x50)
    4809	55 01 0f 00 03 00 00 00	if r1 != 0x3 goto +0xf <LBB210_4>
    4810	79 a6 b8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x48)
    4811	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4812	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    4813	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4814	8d 00 00 00 02 00 00 00	callx r2
    4815	79 63 08 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x8)
    4816	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
    4817	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB210_3>
    4818	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4819	79 33 10 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x10)
    4820	85 10 00 00 6a f9 ff ff	call -0x696 ; <__rust_dealloc>

00000000000096a8 <LBB210_3>
    4821	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    4822	b7 02 00 00 18 00 00 00	r2 = 0x18
    4823	b7 03 00 00 08 00 00 00	r3 = 0x8
    4824	85 10 00 00 66 f9 ff ff	call -0x69a ; <__rust_dealloc>

00000000000096c8 <LBB210_4>
    4825	95 00 00 00 00 00 00 00	exit

00000000000096d0 <solana_program::pubkey::Pubkey::find_program_address>
    4826	bf 40 00 00 00 00 00 00	r0 = r4
    4827	bf 16 00 00 00 00 00 00	r6 = r1
    4828	b7 01 00 00 00 00 00 00	r1 = 0x0
    4829	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    4830	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4831	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    4832	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4833	b7 01 00 00 ff 00 00 00	r1 = 0xff
    4834	73 1a cf ff 00 00 00 00	*(u8 *)(r10 - 0x31) = r1
    4835	bf a4 00 00 00 00 00 00	r4 = r10
    4836	07 04 00 00 d0 ff ff ff	r4 += -0x30
    4837	bf a5 00 00 00 00 00 00	r5 = r10
    4838	07 05 00 00 cf ff ff ff	r5 += -0x31
    4839	bf 21 00 00 00 00 00 00	r1 = r2
    4840	bf 32 00 00 00 00 00 00	r2 = r3
    4841	bf 03 00 00 00 00 00 00	r3 = r0
    4842	85 10 00 00 ff ff ff ff	call -0x1 ; sol_try_find_program_address
    4843	55 00 09 00 00 00 00 00	if r0 != 0x0 goto +0x9 <LBB221_2>
    4844	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4845	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    4846	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    4847	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    4848	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4849	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    4850	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    4851	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    4852	71 a1 cf ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x31)

00000000000097a8 <LBB221_2>
    4853	15 00 11 00 00 00 00 00	if r0 == 0x0 goto +0x11 <LBB221_4>
    4854	18 01 00 00 d8 2b 01 00 00 00 00 00 00 00 00 00	r1 = 0x12bd8 ll
    4856	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4857	b7 01 00 00 00 00 00 00	r1 = 0x0
    4858	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4859	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4860	b7 01 00 00 01 00 00 00	r1 = 0x1
    4861	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    4862	18 01 00 00 90 3d 01 00 00 00 00 00 00 00 00 00	r1 = 0x13d90 ll
    4864	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4865	bf a1 00 00 00 00 00 00	r1 = r10
    4866	07 01 00 00 d0 ff ff ff	r1 += -0x30
    4867	18 02 00 00 a0 3d 01 00 00 00 00 00 00 00 00 00	r2 = 0x13da0 ll
    4869	85 10 00 00 7d 05 00 00	call 0x57d ; <core::panicking::panic_fmt>
    4870	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009838 <LBB221_4>
    4871	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    4872	7b 26 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r2
    4873	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    4874	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    4875	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    4876	7b 26 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r2
    4877	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4878	7b 26 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r2
    4879	73 16 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r1
    4880	95 00 00 00 00 00 00 00	exit

0000000000009888 <solana_program::rent::Rent::minimum_balance>
    4881	bf 16 00 00 00 00 00 00	r6 = r1
    4882	07 02 00 00 80 00 00 00	r2 += 0x80
    4883	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4884	2f 21 00 00 00 00 00 00	r1 *= r2
    4885	85 10 00 00 7f 11 00 00	call 0x117f ; <__floatundidf>
    4886	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4887	bf 02 00 00 00 00 00 00	r2 = r0
    4888	85 10 00 00 cc 0e 00 00	call 0xecc ; <__muldf3>
    4889	bf 06 00 00 00 00 00 00	r6 = r0
    4890	bf 61 00 00 00 00 00 00	r1 = r6
    4891	85 10 00 00 66 0e 00 00	call 0xe66 ; <__fixunsdfdi>
    4892	bf 07 00 00 00 00 00 00	r7 = r0
    4893	b7 08 00 00 00 00 00 00	r8 = 0x0
    4894	bf 61 00 00 00 00 00 00	r1 = r6
    4895	b7 02 00 00 00 00 00 00	r2 = 0x0
    4896	85 10 00 00 a0 0e 00 00	call 0xea0 ; <__gedf2>
    4897	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4898	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    4899	6d 08 01 00 00 00 00 00	if r8 s> r0 goto +0x1 <LBB230_2>
    4900	bf 78 00 00 00 00 00 00	r8 = r7

0000000000009928 <LBB230_2>
    4901	bf 61 00 00 00 00 00 00	r1 = r6
    4902	18 02 00 00 ff ff ff ff 00 00 00 00 ff ff ef 43	r2 = 0x43efffffffffffff ll
    4904	85 10 00 00 74 0e 00 00	call 0xe74 ; <__gtdf2>
    4905	bf 01 00 00 00 00 00 00	r1 = r0
    4906	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4907	c7 01 00 00 20 00 00 00	r1 s>>= 0x20
    4908	b7 00 00 00 ff ff ff ff	r0 = -0x1
    4909	65 01 01 00 00 00 00 00	if r1 s> 0x0 goto +0x1 <LBB230_4>
    4910	bf 80 00 00 00 00 00 00	r0 = r8

0000000000009978 <LBB230_4>
    4911	95 00 00 00 00 00 00 00	exit

0000000000009980 <solana_program::system_instruction::assign>
    4912	bf 37 00 00 00 00 00 00	r7 = r3
    4913	bf 28 00 00 00 00 00 00	r8 = r2
    4914	bf 16 00 00 00 00 00 00	r6 = r1
    4915	b7 09 00 00 01 00 00 00	r9 = 0x1
    4916	b7 01 00 00 22 00 00 00	r1 = 0x22
    4917	b7 02 00 00 01 00 00 00	r2 = 0x1
    4918	85 10 00 00 06 f9 ff ff	call -0x6fa ; <__rust_alloc>
    4919	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB332_2>
    4920	b7 01 00 00 22 00 00 00	r1 = 0x22
    4921	b7 02 00 00 01 00 00 00	r2 = 0x1
    4922	85 10 00 00 f1 02 00 00	call 0x2f1 ; <alloc::alloc::handle_alloc_error>
    4923	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000099e0 <LBB332_2>
    4924	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    4925	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    4926	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    4927	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    4928	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    4929	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    4930	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    4931	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    4932	b7 01 00 00 01 01 00 00	r1 = 0x101
    4933	6b 10 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r1
    4934	b7 01 00 00 00 00 00 00	r1 = 0x0
    4935	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    4936	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    4937	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    4938	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    4939	79 71 18 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x18)
    4940	7b 1a 91 ff 00 00 00 00	*(u64 *)(r10 - 0x6f) = r1
    4941	79 71 10 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x10)
    4942	7b 1a 89 ff 00 00 00 00	*(u64 *)(r10 - 0x77) = r1
    4943	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    4944	7b 1a 81 ff 00 00 00 00	*(u64 *)(r10 - 0x7f) = r1
    4945	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    4946	7b 1a 79 ff 00 00 00 00	*(u64 *)(r10 - 0x87) = r1
    4947	73 9a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r9
    4948	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    4949	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    4950	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    4951	bf a2 00 00 00 00 00 00	r2 = r10
    4952	07 02 00 00 58 ff ff ff	r2 += -0xa8
    4953	bf a7 00 00 00 00 00 00	r7 = r10
    4954	07 07 00 00 78 ff ff ff	r7 += -0x88
    4955	bf a4 00 00 00 00 00 00	r4 = r10
    4956	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4957	bf 61 00 00 00 00 00 00	r1 = r6
    4958	bf 73 00 00 00 00 00 00	r3 = r7
    4959	85 10 00 00 dc fa ff ff	call -0x524 ; <solana_program::instruction::Instruction::new_with_bincode>
    4960	bf 71 00 00 00 00 00 00	r1 = r7
    4961	85 10 00 00 eb f8 ff ff	call -0x715 ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    4962	95 00 00 00 00 00 00 00	exit

0000000000009b18 <solana_program::system_instruction::transfer>
    4963	bf 47 00 00 00 00 00 00	r7 = r4
    4964	bf 38 00 00 00 00 00 00	r8 = r3
    4965	bf 29 00 00 00 00 00 00	r9 = r2
    4966	bf 16 00 00 00 00 00 00	r6 = r1
    4967	b7 01 00 00 44 00 00 00	r1 = 0x44
    4968	b7 02 00 00 01 00 00 00	r2 = 0x1
    4969	85 10 00 00 d3 f8 ff ff	call -0x72d ; <__rust_alloc>
    4970	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB334_2>
    4971	b7 01 00 00 44 00 00 00	r1 = 0x44
    4972	b7 02 00 00 01 00 00 00	r2 = 0x1
    4973	85 10 00 00 be 02 00 00	call 0x2be ; <alloc::alloc::handle_alloc_error>
    4974	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009b78 <LBB334_2>
    4975	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4976	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4977	79 93 10 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x10)
    4978	79 94 18 00 00 00 00 00	r4 = *(u64 *)(r9 + 0x18)
    4979	b7 05 00 00 01 01 00 00	r5 = 0x101
    4980	6b 50 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r5
    4981	7b 40 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r4
    4982	7b 30 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r3
    4983	7b 20 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r2
    4984	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    4985	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    4986	7b 10 22 00 00 00 00 00	*(u64 *)(r0 + 0x22) = r1
    4987	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    4988	7b 10 2a 00 00 00 00 00	*(u64 *)(r0 + 0x2a) = r1
    4989	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    4990	7b 10 32 00 00 00 00 00	*(u64 *)(r0 + 0x32) = r1
    4991	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    4992	7b 10 3a 00 00 00 00 00	*(u64 *)(r0 + 0x3a) = r1
    4993	b7 01 00 00 00 01 00 00	r1 = 0x100
    4994	6b 10 42 00 00 00 00 00	*(u16 *)(r0 + 0x42) = r1
    4995	b7 01 00 00 00 00 00 00	r1 = 0x0
    4996	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    4997	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    4998	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    4999	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    5000	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    5001	b7 01 00 00 02 00 00 00	r1 = 0x2
    5002	73 1a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r1
    5003	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    5004	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5005	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    5006	bf a2 00 00 00 00 00 00	r2 = r10
    5007	07 02 00 00 58 ff ff ff	r2 += -0xa8
    5008	bf a7 00 00 00 00 00 00	r7 = r10
    5009	07 07 00 00 78 ff ff ff	r7 += -0x88
    5010	bf a4 00 00 00 00 00 00	r4 = r10
    5011	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5012	bf 61 00 00 00 00 00 00	r1 = r6
    5013	bf 73 00 00 00 00 00 00	r3 = r7
    5014	85 10 00 00 a5 fa ff ff	call -0x55b ; <solana_program::instruction::Instruction::new_with_bincode>
    5015	bf 71 00 00 00 00 00 00	r1 = r7
    5016	85 10 00 00 b4 f8 ff ff	call -0x74c ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    5017	95 00 00 00 00 00 00 00	exit

0000000000009cd0 <solana_program::system_instruction::allocate>
    5018	bf 37 00 00 00 00 00 00	r7 = r3
    5019	bf 28 00 00 00 00 00 00	r8 = r2
    5020	bf 16 00 00 00 00 00 00	r6 = r1
    5021	b7 09 00 00 01 00 00 00	r9 = 0x1
    5022	b7 01 00 00 22 00 00 00	r1 = 0x22
    5023	b7 02 00 00 01 00 00 00	r2 = 0x1
    5024	85 10 00 00 9c f8 ff ff	call -0x764 ; <__rust_alloc>
    5025	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB336_2>
    5026	b7 01 00 00 22 00 00 00	r1 = 0x22
    5027	b7 02 00 00 01 00 00 00	r2 = 0x1
    5028	85 10 00 00 87 02 00 00	call 0x287 ; <alloc::alloc::handle_alloc_error>
    5029	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009d30 <LBB336_2>
    5030	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    5031	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    5032	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    5033	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    5034	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    5035	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5036	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    5037	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    5038	b7 01 00 00 01 01 00 00	r1 = 0x101
    5039	6b 10 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r1
    5040	b7 01 00 00 00 00 00 00	r1 = 0x0
    5041	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    5042	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    5043	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    5044	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    5045	b7 01 00 00 08 00 00 00	r1 = 0x8
    5046	73 1a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r1
    5047	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    5048	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    5049	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    5050	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    5051	bf a2 00 00 00 00 00 00	r2 = r10
    5052	07 02 00 00 58 ff ff ff	r2 += -0xa8
    5053	bf a7 00 00 00 00 00 00	r7 = r10
    5054	07 07 00 00 78 ff ff ff	r7 += -0x88
    5055	bf a4 00 00 00 00 00 00	r4 = r10
    5056	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5057	bf 61 00 00 00 00 00 00	r1 = r6
    5058	bf 73 00 00 00 00 00 00	r3 = r7
    5059	85 10 00 00 78 fa ff ff	call -0x588 ; <solana_program::instruction::Instruction::new_with_bincode>
    5060	bf 71 00 00 00 00 00 00	r1 = r7
    5061	85 10 00 00 87 f8 ff ff	call -0x779 ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    5062	95 00 00 00 00 00 00 00	exit

0000000000009e38 <std::error::Error::type_id>
    5063	18 00 00 00 ed d3 f7 ec 00 00 00 00 03 94 b8 10	r0 = 0x10b89403ecf7d3ed ll
    5065	95 00 00 00 00 00 00 00	exit

0000000000009e50 <std::error::Error::backtrace>
    5066	b7 00 00 00 00 00 00 00	r0 = 0x0
    5067	95 00 00 00 00 00 00 00	exit

0000000000009e60 <std::error::Error::cause>
    5068	b7 02 00 00 00 00 00 00	r2 = 0x0
    5069	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5070	95 00 00 00 00 00 00 00	exit

0000000000009e78 <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
    5071	bf 16 00 00 00 00 00 00	r6 = r1
    5072	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    5073	25 01 09 00 1f 00 00 00	if r1 > 0x1f goto +0x9 <LBB408_5>
    5074	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5075	b7 02 00 00 01 00 00 00	r2 = 0x1
    5076	85 10 00 00 68 f8 ff ff	call -0x798 ; <__rust_alloc>
    5077	bf 07 00 00 00 00 00 00	r7 = r0
    5078	55 07 18 00 00 00 00 00	if r7 != 0x0 goto +0x18 <LBB408_3>
    5079	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5080	b7 02 00 00 01 00 00 00	r2 = 0x1
    5081	85 10 00 00 52 02 00 00	call 0x252 ; <alloc::alloc::handle_alloc_error>
    5082	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009ed8 <LBB408_5>
    5083	07 01 00 00 e0 ff ff ff	r1 += -0x20
    5084	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    5085	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    5086	bf 13 00 00 00 00 00 00	r3 = r1
    5087	07 03 00 00 20 00 00 00	r3 += 0x20
    5088	7b 32 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r3
    5089	79 12 0f 00 00 00 00 00	r2 = *(u64 *)(r1 + 0xf)
    5090	79 13 07 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x7)
    5091	61 14 03 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x3)
    5092	63 46 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r4
    5093	61 14 00 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x0)
    5094	63 46 01 00 00 00 00 00	*(u32 *)(r6 + 0x1) = r4
    5095	71 14 1f 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x1f)
    5096	73 46 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r4
    5097	79 11 17 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x17)
    5098	7b 16 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r1
    5099	7b 36 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r3
    5100	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5101	b7 01 00 00 00 00 00 00	r1 = 0x0
    5102	05 00 23 00 00 00 00 00	goto +0x23 <LBB408_7>

0000000000009f78 <LBB408_3>
    5103	b7 01 00 00 75 74 00 00	r1 = 0x7475
    5104	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    5105	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    5107	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    5108	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    5110	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    5111	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    5113	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    5114	b7 01 00 00 18 00 00 00	r1 = 0x18
    5115	b7 02 00 00 08 00 00 00	r2 = 0x8
    5116	85 10 00 00 40 f8 ff ff	call -0x7c0 ; <__rust_alloc>
    5117	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB408_6>
    5118	b7 01 00 00 18 00 00 00	r1 = 0x18
    5119	b7 02 00 00 08 00 00 00	r2 = 0x8
    5120	85 10 00 00 2b 02 00 00	call 0x22b ; <alloc::alloc::handle_alloc_error>
    5121	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a010 <LBB408_6>
    5122	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5123	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    5124	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5125	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    5126	bf a1 00 00 00 00 00 00	r1 = r10
    5127	07 01 00 00 f0 ff ff ff	r1 += -0x10
    5128	b7 02 00 00 14 00 00 00	r2 = 0x14
    5129	bf 03 00 00 00 00 00 00	r3 = r0
    5130	18 04 00 00 d8 3d 01 00 00 00 00 00 00 00 00 00	r4 = 0x13dd8 ll
    5132	85 10 00 00 fb 00 00 00	call 0xfb ; <std::io::error::Error::_new>
    5133	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    5134	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5135	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5136	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    5137	b7 01 00 00 01 00 00 00	r1 = 0x1

000000000000a090 <LBB408_7>
    5138	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    5139	95 00 00 00 00 00 00 00	exit

000000000000a0a0 <solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get>
    5140	bf 16 00 00 00 00 00 00	r6 = r1
    5141	b7 01 00 00 32 00 00 00	r1 = 0x32
    5142	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
    5143	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 40	r1 = 0x4000000000000000 ll
    5145	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5146	b7 01 00 00 98 0d 00 00	r1 = 0xd98
    5147	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    5148	bf a1 00 00 00 00 00 00	r1 = r10
    5149	07 01 00 00 e8 ff ff ff	r1 += -0x18
    5150	85 10 00 00 ff ff ff ff	call -0x1 ; sol_get_rent_sysvar
    5151	bf 61 00 00 00 00 00 00	r1 = r6
    5152	07 01 00 00 08 00 00 00	r1 += 0x8
    5153	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB623_2>
    5154	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5155	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    5156	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    5157	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    5158	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    5159	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5160	b7 01 00 00 00 00 00 00	r1 = 0x0
    5161	05 00 03 00 00 00 00 00	goto +0x3 <LBB623_3>

000000000000a150 <LBB623_2>
    5162	bf 02 00 00 00 00 00 00	r2 = r0
    5163	85 10 00 00 1a fe ff ff	call -0x1e6 ; <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    5164	b7 01 00 00 01 00 00 00	r1 = 0x1

000000000000a168 <LBB623_3>
    5165	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5166	95 00 00 00 00 00 00 00	exit

000000000000a178 <bincode::config::DefaultOptions::new>
    5167	95 00 00 00 00 00 00 00	exit

000000000000a180 <<std::sys_common::wtf8::Wtf8Buf as core::ops::deref::DerefMut>::deref_mut>
    5168	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    5169	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    5170	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
    5171	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5172	95 00 00 00 00 00 00 00	exit

000000000000a1a8 <<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Display>::fmt>
    5173	bf 23 00 00 00 00 00 00	r3 = r2
    5174	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5175	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5176	85 10 00 00 32 08 00 00	call 0x832 ; <<str as core::fmt::Display>::fmt>
    5177	95 00 00 00 00 00 00 00	exit

000000000000a1d0 <<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Debug>::fmt>
    5178	bf 23 00 00 00 00 00 00	r3 = r2
    5179	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5180	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5181	85 10 00 00 e8 06 00 00	call 0x6e8 ; <<str as core::fmt::Debug>::fmt>
    5182	95 00 00 00 00 00 00 00	exit

000000000000a1f8 <std::io::error::ErrorKind::as_str>
    5183	b7 03 00 00 10 00 00 00	r3 = 0x10
    5184	57 02 00 00 ff 00 00 00	r2 &= 0xff
    5185	65 02 0a 00 13 00 00 00	if r2 s> 0x13 goto +0xa <LBB213_28>
    5186	65 02 18 00 09 00 00 00	if r2 s> 0x9 goto +0x18 <LBB213_15>
    5187	65 02 24 00 04 00 00 00	if r2 s> 0x4 goto +0x24 <LBB213_9>
    5188	65 02 35 00 01 00 00 00	if r2 s> 0x1 goto +0x35 <LBB213_6>
    5189	18 04 00 00 00 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c00 ll
    5191	15 02 bd 00 00 00 00 00	if r2 == 0x0 goto +0xbd <LBB213_82>
    5192	18 04 00 00 e5 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ee5 ll
    5194	b7 03 00 00 11 00 00 00	r3 = 0x11
    5195	05 00 b9 00 00 00 00 00	goto +0xb9 <LBB213_82>

000000000000a260 <LBB213_28>
    5196	65 02 07 00 1d 00 00 00	if r2 s> 0x1d goto +0x7 <LBB213_42>
    5197	65 02 20 00 18 00 00 00	if r2 s> 0x18 goto +0x20 <LBB213_36>
    5198	65 02 30 00 15 00 00 00	if r2 s> 0x15 goto +0x30 <LBB213_33>
    5199	15 02 58 00 14 00 00 00	if r2 == 0x14 goto +0x58 <LBB213_68>
    5200	18 04 00 00 73 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d73 ll
    5202	b7 03 00 00 0c 00 00 00	r3 = 0xc
    5203	05 00 b1 00 00 00 00 00	goto +0xb1 <LBB213_82>

000000000000a2a0 <LBB213_42>
    5204	65 02 0c 00 22 00 00 00	if r2 s> 0x22 goto +0xc <LBB213_49>
    5205	65 02 2e 00 1f 00 00 00	if r2 s> 0x1f goto +0x2e <LBB213_46>
    5206	15 02 55 00 1e 00 00 00	if r2 == 0x1e goto +0x55 <LBB213_74>
    5207	18 04 00 00 e6 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ce6 ll
    5209	b7 03 00 00 1b 00 00 00	r3 = 0x1b
    5210	05 00 aa 00 00 00 00 00	goto +0xaa <LBB213_82>

000000000000a2d8 <LBB213_15>
    5211	65 02 18 00 0e 00 00 00	if r2 s> 0xe goto +0x18 <LBB213_22>
    5212	65 02 2d 00 0b 00 00 00	if r2 s> 0xb goto +0x2d <LBB213_19>
    5213	15 02 52 00 0a 00 00 00	if r2 == 0xa goto +0x52 <LBB213_62>
    5214	18 04 00 00 67 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e67 ll
    5216	05 00 8b 00 00 00 00 00	goto +0x8b <LBB213_81>

000000000000a308 <LBB213_49>
    5217	65 02 2e 00 25 00 00 00	if r2 s> 0x25 goto +0x2e <LBB213_53>
    5218	15 02 51 00 23 00 00 00	if r2 == 0x23 goto +0x51 <LBB213_77>
    5219	15 02 54 00 24 00 00 00	if r2 == 0x24 goto +0x54 <LBB213_78>
    5220	18 04 00 00 7b 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c7b ll
    5222	b7 03 00 00 16 00 00 00	r3 = 0x16
    5223	05 00 9d 00 00 00 00 00	goto +0x9d <LBB213_82>

000000000000a340 <LBB213_9>
    5224	65 02 2d 00 06 00 00 00	if r2 s> 0x6 goto +0x2d <LBB213_12>
    5225	15 02 51 00 05 00 00 00	if r2 == 0x5 goto +0x51 <LBB213_58>
    5226	18 04 00 00 ae 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12eae ll
    5228	b7 03 00 00 12 00 00 00	r3 = 0x12
    5229	05 00 97 00 00 00 00 00	goto +0x97 <LBB213_82>

000000000000a370 <LBB213_36>
    5230	65 02 2d 00 1a 00 00 00	if r2 s> 0x1a goto +0x2d <LBB213_39>
    5231	15 02 4f 00 19 00 00 00	if r2 == 0x19 goto +0x4f <LBB213_71>
    5232	18 04 00 00 30 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d30 ll
    5234	b7 03 00 00 19 00 00 00	r3 = 0x19
    5235	05 00 91 00 00 00 00 00	goto +0x91 <LBB213_82>

000000000000a3a0 <LBB213_22>
    5236	65 02 2d 00 10 00 00 00	if r2 s> 0x10 goto +0x2d <LBB213_25>
    5237	15 02 4d 00 0f 00 00 00	if r2 == 0xf goto +0x4d <LBB213_65>
    5238	18 04 00 00 0d 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e0d ll
    5240	b7 03 00 00 13 00 00 00	r3 = 0x13
    5241	05 00 8b 00 00 00 00 00	goto +0x8b <LBB213_82>

000000000000a3d0 <LBB213_6>
    5242	15 02 4c 00 02 00 00 00	if r2 == 0x2 goto +0x4c <LBB213_56>
    5243	15 02 4f 00 03 00 00 00	if r2 == 0x3 goto +0x4f <LBB213_57>
    5244	18 04 00 00 30 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c30 ll
    5246	05 00 86 00 00 00 00 00	goto +0x86 <LBB213_82>

000000000000a3f8 <LBB213_33>
    5247	15 02 4e 00 16 00 00 00	if r2 == 0x16 goto +0x4e <LBB213_69>
    5248	15 02 51 00 17 00 00 00	if r2 == 0x17 goto +0x51 <LBB213_70>
    5249	18 04 00 00 f0 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bf0 ll
    5251	05 00 81 00 00 00 00 00	goto +0x81 <LBB213_82>

000000000000a420 <LBB213_46>
    5252	15 02 51 00 20 00 00 00	if r2 == 0x20 goto +0x51 <LBB213_75>
    5253	15 02 54 00 21 00 00 00	if r2 == 0x21 goto +0x54 <LBB213_76>
    5254	18 04 00 00 b1 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cb1 ll
    5256	b7 03 00 00 16 00 00 00	r3 = 0x16
    5257	05 00 7b 00 00 00 00 00	goto +0x7b <LBB213_82>

000000000000a450 <LBB213_19>
    5258	15 02 53 00 0c 00 00 00	if r2 == 0xc goto +0x53 <LBB213_63>
    5259	15 02 56 00 0d 00 00 00	if r2 == 0xd goto +0x56 <LBB213_64>
    5260	18 04 00 00 2e 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e2e ll
    5262	b7 03 00 00 0f 00 00 00	r3 = 0xf
    5263	05 00 75 00 00 00 00 00	goto +0x75 <LBB213_82>

000000000000a480 <LBB213_53>
    5264	15 02 55 00 26 00 00 00	if r2 == 0x26 goto +0x55 <LBB213_79>
    5265	15 02 58 00 27 00 00 00	if r2 == 0x27 goto +0x58 <LBB213_80>
    5266	18 04 00 00 50 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c50 ll
    5268	b7 03 00 00 13 00 00 00	r3 = 0x13
    5269	05 00 6f 00 00 00 00 00	goto +0x6f <LBB213_82>

000000000000a4b0 <LBB213_12>
    5270	15 02 57 00 07 00 00 00	if r2 == 0x7 goto +0x57 <LBB213_60>
    5271	15 02 5a 00 08 00 00 00	if r2 == 0x8 goto +0x5a <LBB213_61>
    5272	18 04 00 00 7e 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e7e ll
    5274	b7 03 00 00 15 00 00 00	r3 = 0x15
    5275	05 00 69 00 00 00 00 00	goto +0x69 <LBB213_82>

000000000000a4e0 <LBB213_39>
    5276	15 02 59 00 1b 00 00 00	if r2 == 0x1b goto +0x59 <LBB213_72>
    5277	15 02 5c 00 1c 00 00 00	if r2 == 0x1c goto +0x5c <LBB213_73>
    5278	18 04 00 00 01 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d01 ll
    5280	b7 03 00 00 14 00 00 00	r3 = 0x14
    5281	05 00 63 00 00 00 00 00	goto +0x63 <LBB213_82>

000000000000a510 <LBB213_25>
    5282	15 02 5b 00 11 00 00 00	if r2 == 0x11 goto +0x5b <LBB213_66>
    5283	15 02 5e 00 12 00 00 00	if r2 == 0x12 goto +0x5e <LBB213_67>
    5284	18 04 00 00 96 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d96 ll
    5286	b7 03 00 00 19 00 00 00	r3 = 0x19
    5287	05 00 5d 00 00 00 00 00	goto +0x5d <LBB213_82>

000000000000a540 <LBB213_68>
    5288	18 04 00 00 7f 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d7f ll
    5290	b7 03 00 00 17 00 00 00	r3 = 0x17
    5291	05 00 59 00 00 00 00 00	goto +0x59 <LBB213_82>

000000000000a560 <LBB213_74>
    5292	18 04 00 00 80 27 01 00 00 00 00 00 00 00 00 00	r4 = 0x12780 ll
    5294	b7 03 00 00 08 00 00 00	r3 = 0x8
    5295	05 00 55 00 00 00 00 00	goto +0x55 <LBB213_82>

000000000000a580 <LBB213_62>
    5296	18 04 00 00 72 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e72 ll
    5298	b7 03 00 00 0c 00 00 00	r3 = 0xc
    5299	05 00 51 00 00 00 00 00	goto +0x51 <LBB213_82>

000000000000a5a0 <LBB213_77>
    5300	18 04 00 00 9c 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c9c ll
    5302	b7 03 00 00 15 00 00 00	r3 = 0x15
    5303	05 00 4d 00 00 00 00 00	goto +0x4d <LBB213_82>

000000000000a5c0 <LBB213_78>
    5304	18 04 00 00 91 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c91 ll
    5306	05 00 31 00 00 00 00 00	goto +0x31 <LBB213_81>

000000000000a5d8 <LBB213_58>
    5307	18 04 00 00 c0 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ec0 ll
    5309	b7 03 00 00 13 00 00 00	r3 = 0x13
    5310	05 00 46 00 00 00 00 00	goto +0x46 <LBB213_82>

000000000000a5f8 <LBB213_71>
    5311	18 04 00 00 49 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d49 ll
    5313	b7 03 00 00 17 00 00 00	r3 = 0x17
    5314	05 00 42 00 00 00 00 00	goto +0x42 <LBB213_82>

000000000000a618 <LBB213_65>
    5315	18 04 00 00 20 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e20 ll
    5317	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5318	05 00 3e 00 00 00 00 00	goto +0x3e <LBB213_82>

000000000000a638 <LBB213_56>
    5319	18 04 00 00 d3 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ed3 ll
    5321	b7 03 00 00 12 00 00 00	r3 = 0x12
    5322	05 00 3a 00 00 00 00 00	goto +0x3a <LBB213_82>

000000000000a658 <LBB213_57>
    5323	18 04 00 00 20 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c20 ll
    5325	05 00 37 00 00 00 00 00	goto +0x37 <LBB213_82>

000000000000a670 <LBB213_69>
    5326	18 04 00 00 6a 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d6a ll
    5328	b7 03 00 00 09 00 00 00	r3 = 0x9
    5329	05 00 33 00 00 00 00 00	goto +0x33 <LBB213_82>

000000000000a690 <LBB213_70>
    5330	18 04 00 00 60 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d60 ll
    5332	b7 03 00 00 0a 00 00 00	r3 = 0xa
    5333	05 00 2f 00 00 00 00 00	goto +0x2f <LBB213_82>

000000000000a6b0 <LBB213_75>
    5334	18 04 00 00 d8 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cd8 ll
    5336	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5337	05 00 2b 00 00 00 00 00	goto +0x2b <LBB213_82>

000000000000a6d0 <LBB213_76>
    5338	18 04 00 00 c7 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cc7 ll
    5340	b7 03 00 00 11 00 00 00	r3 = 0x11
    5341	05 00 27 00 00 00 00 00	goto +0x27 <LBB213_82>

000000000000a6f0 <LBB213_63>
    5342	18 04 00 00 52 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e52 ll
    5344	b7 03 00 00 15 00 00 00	r3 = 0x15
    5345	05 00 23 00 00 00 00 00	goto +0x23 <LBB213_82>

000000000000a710 <LBB213_64>
    5346	18 04 00 00 3d 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e3d ll
    5348	b7 03 00 00 15 00 00 00	r3 = 0x15
    5349	05 00 1f 00 00 00 00 00	goto +0x1f <LBB213_82>

000000000000a730 <LBB213_79>
    5350	18 04 00 00 6e 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c6e ll
    5352	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5353	05 00 1b 00 00 00 00 00	goto +0x1b <LBB213_82>

000000000000a750 <LBB213_80>
    5354	18 04 00 00 63 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c63 ll

000000000000a760 <LBB213_81>
    5356	b7 03 00 00 0b 00 00 00	r3 = 0xb
    5357	05 00 17 00 00 00 00 00	goto +0x17 <LBB213_82>

000000000000a770 <LBB213_60>
    5358	18 04 00 00 a1 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ea1 ll
    5360	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5361	05 00 13 00 00 00 00 00	goto +0x13 <LBB213_82>

000000000000a790 <LBB213_61>
    5362	18 04 00 00 93 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e93 ll
    5364	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5365	05 00 0f 00 00 00 00 00	goto +0xf <LBB213_82>

000000000000a7b0 <LBB213_72>
    5366	18 04 00 00 22 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d22 ll
    5368	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5369	05 00 0b 00 00 00 00 00	goto +0xb <LBB213_82>

000000000000a7d0 <LBB213_73>
    5370	18 04 00 00 15 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d15 ll
    5372	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5373	05 00 07 00 00 00 00 00	goto +0x7 <LBB213_82>

000000000000a7f0 <LBB213_66>
    5374	18 04 00 00 e7 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12de7 ll
    5376	b7 03 00 00 26 00 00 00	r3 = 0x26
    5377	05 00 03 00 00 00 00 00	goto +0x3 <LBB213_82>

000000000000a810 <LBB213_67>
    5378	18 04 00 00 af 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12daf ll
    5380	b7 03 00 00 38 00 00 00	r3 = 0x38

000000000000a828 <LBB213_82>
    5381	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    5382	7b 41 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r4
    5383	95 00 00 00 00 00 00 00	exit

000000000000a840 <std::io::error::Error::_new>
    5384	bf 48 00 00 00 00 00 00	r8 = r4
    5385	bf 37 00 00 00 00 00 00	r7 = r3
    5386	bf 29 00 00 00 00 00 00	r9 = r2
    5387	bf 16 00 00 00 00 00 00	r6 = r1
    5388	b7 01 00 00 18 00 00 00	r1 = 0x18
    5389	b7 02 00 00 08 00 00 00	r2 = 0x8
    5390	85 10 00 00 2e f7 ff ff	call -0x8d2 ; <__rust_alloc>
    5391	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB214_2>
    5392	b7 01 00 00 18 00 00 00	r1 = 0x18
    5393	b7 02 00 00 08 00 00 00	r2 = 0x8
    5394	85 10 00 00 19 01 00 00	call 0x119 ; <alloc::alloc::handle_alloc_error>
    5395	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a8a0 <LBB214_2>
    5396	73 90 10 00 00 00 00 00	*(u8 *)(r0 + 0x10) = r9
    5397	7b 80 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r8
    5398	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    5399	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    5400	b7 01 00 00 03 00 00 00	r1 = 0x3
    5401	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5402	95 00 00 00 00 00 00 00	exit

000000000000a8d8 <<std::io::error::Error as core::fmt::Display>::fmt>
    5403	bf 26 00 00 00 00 00 00	r6 = r2
    5404	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    5405	65 02 1f 00 01 00 00 00	if r2 s> 0x1 goto +0x1f <LBB216_3>
    5406	15 02 26 00 00 00 00 00	if r2 == 0x0 goto +0x26 <LBB216_5>
    5407	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x1)
    5408	bf a1 00 00 00 00 00 00	r1 = r10
    5409	07 01 00 00 80 ff ff ff	r1 += -0x80
    5410	85 10 00 00 1c ff ff ff	call -0xe4 ; <std::io::error::ErrorKind::as_str>
    5411	18 01 00 00 e8 ac 00 00 00 00 00 00 00 00 00 00	r1 = 0xace8 ll
    5413	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    5414	bf a1 00 00 00 00 00 00	r1 = r10
    5415	07 01 00 00 b0 ff ff ff	r1 += -0x50
    5416	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    5417	bf a1 00 00 00 00 00 00	r1 = r10
    5418	07 01 00 00 98 ff ff ff	r1 += -0x68
    5419	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5420	b7 01 00 00 00 00 00 00	r1 = 0x0
    5421	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    5422	b7 01 00 00 01 00 00 00	r1 = 0x1
    5423	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    5424	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    5425	18 01 00 00 50 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e50 ll
    5427	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    5428	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
    5429	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    5430	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    5431	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    5432	bf a2 00 00 00 00 00 00	r2 = r10
    5433	07 02 00 00 d0 ff ff ff	r2 += -0x30
    5434	bf 61 00 00 00 00 00 00	r1 = r6
    5435	85 10 00 00 d6 05 00 00	call 0x5d6 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    5436	05 00 18 00 00 00 00 00	goto +0x18 <LBB216_11>

000000000000a9e8 <LBB216_3>
    5437	15 02 12 00 02 00 00 00	if r2 == 0x2 goto +0x12 <LBB216_10>
    5438	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5439	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    5440	79 22 08 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x8)
    5441	79 23 20 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x20)
    5442	bf 62 00 00 00 00 00 00	r2 = r6
    5443	8d 00 00 00 03 00 00 00	callx r3
    5444	05 00 10 00 00 00 00 00	goto +0x10 <LBB216_11>

000000000000aa28 <LBB216_5>
    5445	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x4)
    5446	63 1a 94 ff 00 00 00 00	*(u32 *)(r10 - 0x6c) = r1
    5447	b7 07 00 00 14 00 00 00	r7 = 0x14
    5448	b7 01 00 00 14 00 00 00	r1 = 0x14
    5449	b7 02 00 00 01 00 00 00	r2 = 0x1
    5450	85 10 00 00 f2 f6 ff ff	call -0x90e ; <__rust_alloc>
    5451	55 00 0c 00 00 00 00 00	if r0 != 0x0 goto +0xc <LBB216_7>
    5452	b7 01 00 00 14 00 00 00	r1 = 0x14
    5453	b7 02 00 00 01 00 00 00	r2 = 0x1
    5454	85 10 00 00 dd 00 00 00	call 0xdd ; <alloc::alloc::handle_alloc_error>
    5455	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000aa80 <LBB216_10>
    5456	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    5457	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5458	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5459	bf 63 00 00 00 00 00 00	r3 = r6
    5460	85 10 00 00 16 07 00 00	call 0x716 ; <<str as core::fmt::Display>::fmt>

000000000000aaa8 <LBB216_11>
    5461	bf 06 00 00 00 00 00 00	r6 = r0

000000000000aab0 <LBB216_12>
    5462	bf 60 00 00 00 00 00 00	r0 = r6
    5463	95 00 00 00 00 00 00 00	exit

000000000000aac0 <LBB216_7>
    5464	b7 01 00 00 73 66 75 6c	r1 = 0x6c756673
    5465	63 10 10 00 00 00 00 00	*(u32 *)(r0 + 0x10) = r1
    5466	18 01 00 00 6e 20 73 75 00 00 00 00 63 63 65 73	r1 = 0x736563637573206e ll
    5468	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5469	18 01 00 00 6f 70 65 72 00 00 00 00 61 74 69 6f	r1 = 0x6f6974617265706f ll
    5471	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    5472	7b 7a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r7
    5473	7b 7a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r7
    5474	7b 0a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r0
    5475	b7 01 00 00 02 00 00 00	r1 = 0x2
    5476	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    5477	bf a1 00 00 00 00 00 00	r1 = r10
    5478	07 01 00 00 b0 ff ff ff	r1 += -0x50
    5479	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5480	b7 01 00 00 00 00 00 00	r1 = 0x0
    5481	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    5482	b7 01 00 00 03 00 00 00	r1 = 0x3
    5483	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    5484	18 01 00 00 60 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e60 ll
    5486	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    5487	18 01 00 00 88 fe 00 00 00 00 00 00 00 00 00 00	r1 = 0xfe88 ll
    5489	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    5490	bf a1 00 00 00 00 00 00	r1 = r10
    5491	07 01 00 00 94 ff ff ff	r1 += -0x6c
    5492	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    5493	18 01 00 00 38 ac 00 00 00 00 00 00 00 00 00 00	r1 = 0xac38 ll
    5495	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    5496	bf a1 00 00 00 00 00 00	r1 = r10
    5497	07 01 00 00 98 ff ff ff	r1 += -0x68
    5498	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    5499	bf a2 00 00 00 00 00 00	r2 = r10
    5500	07 02 00 00 d0 ff ff ff	r2 += -0x30
    5501	bf 61 00 00 00 00 00 00	r1 = r6
    5502	85 10 00 00 93 05 00 00	call 0x593 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    5503	bf 06 00 00 00 00 00 00	r6 = r0
    5504	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
    5505	15 02 d4 ff 00 00 00 00	if r2 == 0x0 goto -0x2c <LBB216_12>
    5506	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    5507	15 01 d2 ff 00 00 00 00	if r1 == 0x0 goto -0x2e <LBB216_12>
    5508	b7 03 00 00 01 00 00 00	r3 = 0x1
    5509	85 10 00 00 b9 f6 ff ff	call -0x947 ; <__rust_dealloc>
    5510	05 00 cf ff 00 00 00 00	goto -0x31 <LBB216_12>

000000000000ac38 <<alloc::string::String as core::fmt::Display>::fmt>
    5511	bf 23 00 00 00 00 00 00	r3 = r2
    5512	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5513	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5514	85 10 00 00 e0 06 00 00	call 0x6e0 ; <<str as core::fmt::Display>::fmt>
    5515	95 00 00 00 00 00 00 00	exit

000000000000ac60 <std::process::abort>
    5516	85 10 00 00 0e 00 00 00	call 0xe ; <std::sys::sbf::abort_internal>
    5517	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ac70 <rust_oom>
    5518	18 01 00 00 02 2f 01 00 00 00 00 00 00 00 00 00	r1 = 0x12f02 ll
    5520	b7 02 00 00 2e 00 00 00	r2 = 0x2e
    5521	85 10 00 00 04 00 00 00	call 0x4 ; <std::sys::sbf::sol_log>
    5522	85 10 00 00 f9 ff ff ff	call -0x7 ; <std::process::abort>
    5523	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000aca0 <rust_begin_unwind>
    5524	85 10 00 00 03 00 00 00	call 0x3 ; <std::sys::sbf::panic>
    5525	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000acb0 <std::sys::sbf::sol_log>
    5526	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    5527	95 00 00 00 00 00 00 00	exit

000000000000acc0 <std::sys::sbf::panic>
    5528	85 10 00 00 ff ff ff ff	call -0x1 ; <std::sys::sbf::panic>
    5529	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5530	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000acd8 <std::sys::sbf::abort_internal>
    5531	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5532	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ace8 <<&T as core::fmt::Display>::fmt>
    5533	bf 23 00 00 00 00 00 00	r3 = r2
    5534	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5535	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5536	85 10 00 00 ca 06 00 00	call 0x6ca ; <<str as core::fmt::Display>::fmt>
    5537	95 00 00 00 00 00 00 00	exit

000000000000ad10 <core::ops::function::FnOnce::call_once>
    5538	85 10 00 00 8b 00 00 00	call 0x8b ; <alloc::alloc::handle_alloc_error::rt_error>
    5539	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ad20 <core::ptr::drop_in_place<&u8>>
    5540	95 00 00 00 00 00 00 00	exit

000000000000ad28 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5541	bf 16 00 00 00 00 00 00	r6 = r1
    5542	bf 24 00 00 00 00 00 00	r4 = r2
    5543	0f 34 00 00 00 00 00 00	r4 += r3
    5544	b7 01 00 00 01 00 00 00	r1 = 0x1
    5545	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB2_2>
    5546	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000ad58 <LBB2_2>
    5547	57 01 00 00 01 00 00 00	r1 &= 0x1
    5548	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB2_12>
    5549	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5550	bf 17 00 00 00 00 00 00	r7 = r1
    5551	67 07 00 00 01 00 00 00	r7 <<= 0x1
    5552	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB2_5>
    5553	bf 47 00 00 00 00 00 00	r7 = r4

000000000000ad90 <LBB2_5>
    5554	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB2_7>
    5555	b7 07 00 00 08 00 00 00	r7 = 0x8

000000000000ada0 <LBB2_7>
    5556	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB2_9>
    5557	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    5558	b7 03 00 00 01 00 00 00	r3 = 0x1
    5559	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5560	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5561	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    5562	05 00 02 00 00 00 00 00	goto +0x2 <LBB2_10>

000000000000add8 <LBB2_9>
    5563	b7 01 00 00 00 00 00 00	r1 = 0x0
    5564	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

000000000000ade8 <LBB2_10>
    5565	bf a1 00 00 00 00 00 00	r1 = r10
    5566	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5567	bf a4 00 00 00 00 00 00	r4 = r10
    5568	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5569	bf 72 00 00 00 00 00 00	r2 = r7
    5570	b7 03 00 00 01 00 00 00	r3 = 0x1
    5571	85 10 00 00 39 00 00 00	call 0x39 ; <alloc::raw_vec::finish_grow>
    5572	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    5573	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB2_14>
    5574	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    5575	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB2_13>

000000000000ae40 <LBB2_12>
    5576	85 10 00 00 5c 00 00 00	call 0x5c ; <alloc::raw_vec::capacity_overflow>
    5577	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ae50 <LBB2_14>
    5578	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5579	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5580	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5581	95 00 00 00 00 00 00 00	exit

000000000000ae70 <LBB2_13>
    5582	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5583	85 10 00 00 5c 00 00 00	call 0x5c ; <alloc::alloc::handle_alloc_error>
    5584	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ae88 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    5585	bf 16 00 00 00 00 00 00	r6 = r1
    5586	bf 23 00 00 00 00 00 00	r3 = r2
    5587	07 03 00 00 01 00 00 00	r3 += 0x1
    5588	b7 01 00 00 01 00 00 00	r1 = 0x1
    5589	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB3_2>
    5590	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000aeb8 <LBB3_2>
    5591	57 01 00 00 01 00 00 00	r1 &= 0x1
    5592	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB3_12>
    5593	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5594	bf 17 00 00 00 00 00 00	r7 = r1
    5595	67 07 00 00 01 00 00 00	r7 <<= 0x1
    5596	2d 37 01 00 00 00 00 00	if r7 > r3 goto +0x1 <LBB3_5>
    5597	bf 37 00 00 00 00 00 00	r7 = r3

000000000000aef0 <LBB3_5>
    5598	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB3_7>
    5599	b7 07 00 00 08 00 00 00	r7 = 0x8

000000000000af00 <LBB3_7>
    5600	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB3_9>
    5601	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    5602	b7 03 00 00 01 00 00 00	r3 = 0x1
    5603	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5604	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5605	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    5606	05 00 02 00 00 00 00 00	goto +0x2 <LBB3_10>

000000000000af38 <LBB3_9>
    5607	b7 01 00 00 00 00 00 00	r1 = 0x0
    5608	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

000000000000af48 <LBB3_10>
    5609	bf a1 00 00 00 00 00 00	r1 = r10
    5610	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5611	bf a4 00 00 00 00 00 00	r4 = r10
    5612	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5613	bf 72 00 00 00 00 00 00	r2 = r7
    5614	b7 03 00 00 01 00 00 00	r3 = 0x1
    5615	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
    5616	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    5617	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB3_14>
    5618	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    5619	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB3_13>

000000000000afa0 <LBB3_12>
    5620	85 10 00 00 30 00 00 00	call 0x30 ; <alloc::raw_vec::capacity_overflow>
    5621	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000afb0 <LBB3_14>
    5622	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5623	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5624	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5625	95 00 00 00 00 00 00 00	exit

000000000000afd0 <LBB3_13>
    5626	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5627	85 10 00 00 30 00 00 00	call 0x30 ; <alloc::alloc::handle_alloc_error>
    5628	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000afe8 <alloc::raw_vec::finish_grow>
    5629	bf 38 00 00 00 00 00 00	r8 = r3
    5630	bf 27 00 00 00 00 00 00	r7 = r2
    5631	bf 16 00 00 00 00 00 00	r6 = r1
    5632	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB4_12>
    5633	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5634	b7 01 00 00 01 00 00 00	r1 = 0x1
    5635	b7 07 00 00 00 00 00 00	r7 = 0x0
    5636	05 00 1d 00 00 00 00 00	goto +0x1d <LBB4_2>

000000000000b028 <LBB4_12>
    5637	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    5638	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB4_7>
    5639	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    5640	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB4_6>
    5641	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB4_9>
    5642	bf 71 00 00 00 00 00 00	r1 = r7
    5643	bf 82 00 00 00 00 00 00	r2 = r8
    5644	85 10 00 00 30 f6 ff ff	call -0x9d0 ; <__rust_alloc>
    5645	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB4_11>
    5646	05 00 11 00 00 00 00 00	goto +0x11 <LBB4_10>

000000000000b078 <LBB4_6>
    5647	bf 83 00 00 00 00 00 00	r3 = r8
    5648	bf 74 00 00 00 00 00 00	r4 = r7
    5649	85 10 00 00 2f f6 ff ff	call -0x9d1 ; <__rust_realloc>
    5650	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB4_11>
    5651	05 00 0c 00 00 00 00 00	goto +0xc <LBB4_10>

000000000000b0a0 <LBB4_7>
    5652	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB4_9>
    5653	bf 71 00 00 00 00 00 00	r1 = r7
    5654	bf 82 00 00 00 00 00 00	r2 = r8
    5655	85 10 00 00 25 f6 ff ff	call -0x9db ; <__rust_alloc>
    5656	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB4_11>
    5657	05 00 06 00 00 00 00 00	goto +0x6 <LBB4_10>

000000000000b0d0 <LBB4_11>
    5658	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5659	b7 01 00 00 01 00 00 00	r1 = 0x1
    5660	bf 87 00 00 00 00 00 00	r7 = r8
    5661	05 00 04 00 00 00 00 00	goto +0x4 <LBB4_2>

000000000000b0f0 <LBB4_9>
    5662	b7 07 00 00 00 00 00 00	r7 = 0x0
    5663	bf 80 00 00 00 00 00 00	r0 = r8

000000000000b100 <LBB4_10>
    5664	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    5665	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000b110 <LBB4_2>
    5666	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5667	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    5668	95 00 00 00 00 00 00 00	exit

000000000000b128 <alloc::raw_vec::capacity_overflow>
    5669	18 01 00 00 4c 2f 01 00 00 00 00 00 00 00 00 00	r1 = 0x12f4c ll
    5671	b7 02 00 00 11 00 00 00	r2 = 0x11
    5672	18 03 00 00 90 3e 01 00 00 00 00 00 00 00 00 00	r3 = 0x13e90 ll
    5674	85 10 00 00 2a 02 00 00	call 0x22a ; <core::panicking::panic>
    5675	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b160 <alloc::alloc::handle_alloc_error>
    5676	85 10 00 00 05 00 00 00	call 0x5 ; <core::intrinsics::const_eval_select>
    5677	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b170 <alloc::alloc::handle_alloc_error::rt_error>
    5678	85 10 00 00 14 f6 ff ff	call -0x9ec ; <__rust_alloc_error_handler>
    5679	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b180 <__rg_oom>
    5680	85 10 00 00 5d ff ff ff	call -0xa3 ; <rust_oom>
    5681	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b190 <core::intrinsics::const_eval_select>
    5682	85 10 00 00 6f ff ff ff	call -0x91 ; <core::ops::function::FnOnce::call_once>
    5683	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b1a0 <alloc::fmt::format>
    5684	bf 26 00 00 00 00 00 00	r6 = r2
    5685	bf 17 00 00 00 00 00 00	r7 = r1
    5686	b7 08 00 00 00 00 00 00	r8 = 0x0
    5687	79 63 28 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x28)
    5688	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5689	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x8)
    5690	bf 24 00 00 00 00 00 00	r4 = r2
    5691	67 04 00 00 04 00 00 00	r4 <<= 0x4
    5692	15 04 09 00 00 00 00 00	if r4 == 0x0 goto +0x9 <LBB20_3>
    5693	b7 00 00 00 00 00 00 00	r0 = 0x0
    5694	bf 15 00 00 00 00 00 00	r5 = r1
    5695	07 05 00 00 08 00 00 00	r5 += 0x8

000000000000b200 <LBB20_2>
    5696	79 58 00 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x0)
    5697	0f 08 00 00 00 00 00 00	r8 += r0
    5698	07 05 00 00 10 00 00 00	r5 += 0x10
    5699	07 04 00 00 f0 ff ff ff	r4 += -0x10
    5700	bf 80 00 00 00 00 00 00	r0 = r8
    5701	55 04 fa ff 00 00 00 00	if r4 != 0x0 goto -0x6 <LBB20_2>

000000000000b230 <LBB20_3>
    5702	15 03 11 00 00 00 00 00	if r3 == 0x0 goto +0x11 <LBB20_10>
    5703	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB20_7>
    5704	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    5705	55 01 04 00 00 00 00 00	if r1 != 0x0 goto +0x4 <LBB20_7>
    5706	b7 00 00 00 01 00 00 00	r0 = 0x1
    5707	b7 01 00 00 00 00 00 00	r1 = 0x0
    5708	b7 02 00 00 10 00 00 00	r2 = 0x10
    5709	2d 82 16 00 00 00 00 00	if r2 > r8 goto +0x16 <LBB20_13>

000000000000b270 <LBB20_7>
    5710	bf 82 00 00 00 00 00 00	r2 = r8
    5711	0f 22 00 00 00 00 00 00	r2 += r2
    5712	b7 01 00 00 00 00 00 00	r1 = 0x0
    5713	b7 00 00 00 01 00 00 00	r0 = 0x1
    5714	b7 03 00 00 01 00 00 00	r3 = 0x1
    5715	2d 28 01 00 00 00 00 00	if r8 > r2 goto +0x1 <LBB20_9>
    5716	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000b2a8 <LBB20_9>
    5717	57 03 00 00 01 00 00 00	r3 &= 0x1
    5718	bf 28 00 00 00 00 00 00	r8 = r2
    5719	55 03 0c 00 00 00 00 00	if r3 != 0x0 goto +0xc <LBB20_13>

000000000000b2c0 <LBB20_10>
    5720	b7 00 00 00 01 00 00 00	r0 = 0x1
    5721	b7 01 00 00 00 00 00 00	r1 = 0x0
    5722	15 08 09 00 00 00 00 00	if r8 == 0x0 goto +0x9 <LBB20_13>
    5723	bf 81 00 00 00 00 00 00	r1 = r8
    5724	b7 02 00 00 01 00 00 00	r2 = 0x1
    5725	85 10 00 00 df f5 ff ff	call -0xa21 ; <__rust_alloc>
    5726	bf 81 00 00 00 00 00 00	r1 = r8
    5727	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB20_13>
    5728	bf 81 00 00 00 00 00 00	r1 = r8
    5729	b7 02 00 00 01 00 00 00	r2 = 0x1
    5730	85 10 00 00 c9 ff ff ff	call -0x37 ; <alloc::alloc::handle_alloc_error>
    5731	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b320 <LBB20_13>
    5732	b7 02 00 00 00 00 00 00	r2 = 0x0
    5733	7b 27 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r2
    5734	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    5735	7b 07 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r0
    5736	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    5737	bf a7 00 00 00 00 00 00	r7 = r10
    5738	07 07 00 00 d0 ff ff ff	r7 += -0x30
    5739	bf 71 00 00 00 00 00 00	r1 = r7
    5740	bf 62 00 00 00 00 00 00	r2 = r6
    5741	b7 03 00 00 30 00 00 00	r3 = 0x30
    5742	85 10 00 00 78 0c 00 00	call 0xc78 ; <memcpy>
    5743	bf a1 00 00 00 00 00 00	r1 = r10
    5744	07 01 00 00 c8 ff ff ff	r1 += -0x38
    5745	18 02 00 00 e0 3e 01 00 00 00 00 00 00 00 00 00	r2 = 0x13ee0 ll
    5747	bf 73 00 00 00 00 00 00	r3 = r7
    5748	85 10 00 00 45 02 00 00	call 0x245 ; <core::fmt::write>
    5749	15 00 0b 00 00 00 00 00	if r0 == 0x0 goto +0xb <LBB20_15>
    5750	bf a3 00 00 00 00 00 00	r3 = r10
    5751	07 03 00 00 d0 ff ff ff	r3 += -0x30
    5752	18 01 00 00 5d 2f 01 00 00 00 00 00 00 00 00 00	r1 = 0x12f5d ll
    5754	b7 02 00 00 33 00 00 00	r2 = 0x33
    5755	18 04 00 00 c0 3e 01 00 00 00 00 00 00 00 00 00	r4 = 0x13ec0 ll
    5757	18 05 00 00 a8 3e 01 00 00 00 00 00 00 00 00 00	r5 = 0x13ea8 ll
    5759	85 10 00 00 0f 02 00 00	call 0x20f ; <core::result::unwrap_failed>
    5760	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b408 <LBB20_15>
    5761	95 00 00 00 00 00 00 00	exit

000000000000b410 <alloc::string::String::push>
    5762	bf 27 00 00 00 00 00 00	r7 = r2
    5763	bf 16 00 00 00 00 00 00	r6 = r1
    5764	bf 71 00 00 00 00 00 00	r1 = r7
    5765	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5766	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5767	25 01 0c 00 7f 00 00 00	if r1 > 0x7f goto +0xc <LBB30_4>
    5768	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    5769	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5770	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB30_3>
    5771	bf 61 00 00 00 00 00 00	r1 = r6
    5772	85 10 00 00 44 ff ff ff	call -0xbc ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    5773	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

000000000000b470 <LBB30_3>
    5774	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5775	0f 21 00 00 00 00 00 00	r1 += r2
    5776	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    5777	07 02 00 00 01 00 00 00	r2 += 0x1
    5778	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5779	05 00 42 00 00 00 00 00	goto +0x42 <LBB30_12>

000000000000b4a0 <LBB30_4>
    5780	b7 02 00 00 00 00 00 00	r2 = 0x0
    5781	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    5782	b7 02 00 00 00 08 00 00	r2 = 0x800
    5783	2d 12 13 00 00 00 00 00	if r2 > r1 goto +0x13 <LBB30_6>
    5784	bf 71 00 00 00 00 00 00	r1 = r7
    5785	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5786	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5787	b7 02 00 00 00 00 01 00	r2 = 0x10000
    5788	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB30_7>
    5789	05 00 16 00 00 00 00 00	goto +0x16 <LBB30_8>

000000000000b4f0 <LBB30_7>
    5790	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    5791	47 07 00 00 80 00 00 00	r7 |= 0x80
    5792	73 7a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r7
    5793	bf 12 00 00 00 00 00 00	r2 = r1
    5794	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    5795	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    5796	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    5797	77 01 00 00 06 00 00 00	r1 >>= 0x6
    5798	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5799	47 01 00 00 80 00 00 00	r1 |= 0x80
    5800	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5801	b7 07 00 00 03 00 00 00	r7 = 0x3
    5802	05 00 1a 00 00 00 00 00	goto +0x1a <LBB30_9>

000000000000b558 <LBB30_6>
    5803	bf 71 00 00 00 00 00 00	r1 = r7
    5804	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5805	47 01 00 00 80 00 00 00	r1 |= 0x80
    5806	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5807	77 07 00 00 06 00 00 00	r7 >>= 0x6
    5808	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    5809	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    5810	b7 07 00 00 02 00 00 00	r7 = 0x2
    5811	05 00 11 00 00 00 00 00	goto +0x11 <LBB30_9>

000000000000b5a0 <LBB30_8>
    5812	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    5813	47 07 00 00 80 00 00 00	r7 |= 0x80
    5814	73 7a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r7
    5815	bf 12 00 00 00 00 00 00	r2 = r1
    5816	77 02 00 00 12 00 00 00	r2 >>= 0x12
    5817	47 02 00 00 f0 00 00 00	r2 |= 0xf0
    5818	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    5819	bf 12 00 00 00 00 00 00	r2 = r1
    5820	77 02 00 00 06 00 00 00	r2 >>= 0x6
    5821	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    5822	47 02 00 00 80 00 00 00	r2 |= 0x80
    5823	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    5824	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    5825	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5826	47 01 00 00 80 00 00 00	r1 |= 0x80
    5827	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5828	b7 07 00 00 04 00 00 00	r7 = 0x4

000000000000b628 <LBB30_9>
    5829	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    5830	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5831	1f 81 00 00 00 00 00 00	r1 -= r8
    5832	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB30_11>
    5833	bf 61 00 00 00 00 00 00	r1 = r6
    5834	bf 82 00 00 00 00 00 00	r2 = r8
    5835	bf 73 00 00 00 00 00 00	r3 = r7
    5836	85 10 00 00 d8 fe ff ff	call -0x128 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5837	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

000000000000b670 <LBB30_11>
    5838	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5839	0f 81 00 00 00 00 00 00	r1 += r8
    5840	bf a2 00 00 00 00 00 00	r2 = r10
    5841	07 02 00 00 fc ff ff ff	r2 += -0x4
    5842	bf 73 00 00 00 00 00 00	r3 = r7
    5843	85 10 00 00 13 0c 00 00	call 0xc13 ; <memcpy>
    5844	0f 78 00 00 00 00 00 00	r8 += r7
    5845	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

000000000000b6b0 <LBB30_12>
    5846	95 00 00 00 00 00 00 00	exit

000000000000b6b8 <<&mut W as core::fmt::Write>::write_str>
    5847	bf 36 00 00 00 00 00 00	r6 = r3
    5848	bf 28 00 00 00 00 00 00	r8 = r2
    5849	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    5850	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    5851	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    5852	1f 91 00 00 00 00 00 00	r1 -= r9
    5853	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB60_2>
    5854	bf 71 00 00 00 00 00 00	r1 = r7
    5855	bf 92 00 00 00 00 00 00	r2 = r9
    5856	bf 63 00 00 00 00 00 00	r3 = r6
    5857	85 10 00 00 c3 fe ff ff	call -0x13d ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5858	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

000000000000b718 <LBB60_2>
    5859	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    5860	0f 91 00 00 00 00 00 00	r1 += r9
    5861	bf 82 00 00 00 00 00 00	r2 = r8
    5862	bf 63 00 00 00 00 00 00	r3 = r6
    5863	85 10 00 00 ff 0b 00 00	call 0xbff ; <memcpy>
    5864	0f 69 00 00 00 00 00 00	r9 += r6
    5865	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    5866	b7 00 00 00 00 00 00 00	r0 = 0x0
    5867	95 00 00 00 00 00 00 00	exit

000000000000b760 <<&mut W as core::fmt::Write>::write_char>
    5868	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5869	85 10 00 00 94 ff ff ff	call -0x6c ; <alloc::string::String::push>
    5870	b7 00 00 00 00 00 00 00	r0 = 0x0
    5871	95 00 00 00 00 00 00 00	exit

000000000000b780 <<&mut W as core::fmt::Write>::write_fmt>
    5872	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5873	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    5874	bf a6 00 00 00 00 00 00	r6 = r10
    5875	07 06 00 00 d0 ff ff ff	r6 += -0x30
    5876	bf 61 00 00 00 00 00 00	r1 = r6
    5877	b7 03 00 00 30 00 00 00	r3 = 0x30
    5878	85 10 00 00 f0 0b 00 00	call 0xbf0 ; <memcpy>
    5879	bf a1 00 00 00 00 00 00	r1 = r10
    5880	07 01 00 00 c8 ff ff ff	r1 += -0x38
    5881	18 02 00 00 e0 3e 01 00 00 00 00 00 00 00 00 00	r2 = 0x13ee0 ll
    5883	bf 63 00 00 00 00 00 00	r3 = r6
    5884	85 10 00 00 bd 01 00 00	call 0x1bd ; <core::fmt::write>
    5885	95 00 00 00 00 00 00 00	exit

000000000000b7f0 <core::ops::function::FnOnce::call_once>
    5886	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5887	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5888	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b808 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>>
    5889	95 00 00 00 00 00 00 00	exit

000000000000b810 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt>
    5890	bf 26 00 00 00 00 00 00	r6 = r2
    5891	bf 17 00 00 00 00 00 00	r7 = r1
    5892	85 10 00 00 f6 07 00 00	call 0x7f6 ; <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    5893	bf 01 00 00 00 00 00 00	r1 = r0
    5894	b7 00 00 00 01 00 00 00	r0 = 0x1
    5895	55 01 13 00 00 00 00 00	if r1 != 0x0 goto +0x13 <LBB70_2>
    5896	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    5897	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    5898	18 03 00 00 a8 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12fa8 ll
    5900	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
    5901	b7 03 00 00 00 00 00 00	r3 = 0x0
    5902	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5903	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    5904	18 03 00 00 10 3f 01 00 00 00 00 00 00 00 00 00	r3 = 0x13f10 ll
    5906	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    5907	b7 03 00 00 01 00 00 00	r3 = 0x1
    5908	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    5909	bf a3 00 00 00 00 00 00	r3 = r10
    5910	07 03 00 00 d0 ff ff ff	r3 += -0x30
    5911	85 10 00 00 a2 01 00 00	call 0x1a2 ; <core::fmt::write>
    5912	bf 01 00 00 00 00 00 00	r1 = r0
    5913	b7 00 00 00 01 00 00 00	r0 = 0x1
    5914	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB70_3>

000000000000b8d8 <LBB70_2>
    5915	95 00 00 00 00 00 00 00	exit

000000000000b8e0 <LBB70_3>
    5916	07 07 00 00 08 00 00 00	r7 += 0x8
    5917	bf 71 00 00 00 00 00 00	r1 = r7
    5918	bf 62 00 00 00 00 00 00	r2 = r6
    5919	85 10 00 00 db 07 00 00	call 0x7db ; <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    5920	bf 01 00 00 00 00 00 00	r1 = r0
    5921	b7 00 00 00 00 00 00 00	r0 = 0x0
    5922	15 01 f8 ff 00 00 00 00	if r1 == 0x0 goto -0x8 <LBB70_2>
    5923	b7 00 00 00 01 00 00 00	r0 = 0x1
    5924	05 00 f6 ff 00 00 00 00	goto -0xa <LBB70_2>

000000000000b928 <<T as core::any::Any>::type_id>
    5925	18 00 00 00 24 5c 34 ae 00 00 00 00 4d b3 17 4e	r0 = 0x4e17b34dae345c24 ll
    5927	95 00 00 00 00 00 00 00	exit

000000000000b940 <<core::cell::BorrowError as core::fmt::Debug>::fmt>
    5928	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    5929	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    5930	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    5931	18 02 00 00 aa 2f 01 00 00 00 00 00 00 00 00 00	r2 = 0x12faa ll
    5933	b7 03 00 00 0b 00 00 00	r3 = 0xb
    5934	8d 00 00 00 04 00 00 00	callx r4
    5935	95 00 00 00 00 00 00 00	exit

000000000000b980 <core::char::methods::<impl char>::escape_debug_ext>
    5936	bf 27 00 00 00 00 00 00	r7 = r2
    5937	bf 16 00 00 00 00 00 00	r6 = r1
    5938	b7 01 00 00 02 00 00 00	r1 = 0x2
    5939	bf 75 00 00 00 00 00 00	r5 = r7
    5940	67 05 00 00 20 00 00 00	r5 <<= 0x20
    5941	77 05 00 00 20 00 00 00	r5 >>= 0x20
    5942	65 05 09 00 21 00 00 00	if r5 s> 0x21 goto +0x9 <LBB91_4>
    5943	b7 04 00 00 74 00 00 00	r4 = 0x74
    5944	15 05 ad 00 09 00 00 00	if r5 == 0x9 goto +0xad <LBB91_14>
    5945	15 05 04 00 0a 00 00 00	if r5 == 0xa goto +0x4 <LBB91_10>
    5946	15 05 01 00 0d 00 00 00	if r5 == 0xd goto +0x1 <LBB91_8>
    5947	05 00 07 00 00 00 00 00	goto +0x7 <LBB91_7>

000000000000b9e0 <LBB91_8>
    5948	b7 04 00 00 72 00 00 00	r4 = 0x72
    5949	05 00 a8 00 00 00 00 00	goto +0xa8 <LBB91_14>

000000000000b9f0 <LBB91_10>
    5950	b7 04 00 00 6e 00 00 00	r4 = 0x6e
    5951	05 00 a6 00 00 00 00 00	goto +0xa6 <LBB91_14>

000000000000ba00 <LBB91_4>
    5952	15 05 5c 00 22 00 00 00	if r5 == 0x22 goto +0x5c <LBB91_12>
    5953	15 05 a0 00 27 00 00 00	if r5 == 0x27 goto +0xa0 <LBB91_13>
    5954	15 05 5f 00 5c 00 00 00	if r5 == 0x5c goto +0x5f <LBB91_11>

000000000000ba18 <LBB91_7>
    5955	57 03 00 00 01 00 00 00	r3 &= 0x1
    5956	15 03 03 00 00 00 00 00	if r3 == 0x0 goto +0x3 <LBB91_16>
    5957	bf 71 00 00 00 00 00 00	r1 = r7
    5958	85 10 00 00 cd 09 00 00	call 0x9cd ; <core::unicode::unicode_data::grapheme_extend::lookup>
    5959	55 00 1a 00 00 00 00 00	if r0 != 0x0 goto +0x1a <LBB91_28>

000000000000ba40 <LBB91_16>
    5960	bf 71 00 00 00 00 00 00	r1 = r7
    5961	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5962	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5963	b7 02 00 00 00 00 01 00	r2 = 0x10000
    5964	2d 12 57 00 00 00 00 00	if r2 > r1 goto +0x57 <LBB91_18>
    5965	b7 02 00 00 00 00 02 00	r2 = 0x20000
    5966	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB91_27>
    5967	05 00 67 00 00 00 00 00	goto +0x67 <LBB91_19>

000000000000ba80 <LBB91_27>
    5968	18 01 00 00 b8 35 01 00 00 00 00 00 00 00 00 00	r1 = 0x135b8 ll
    5970	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    5971	b7 01 00 00 b6 01 00 00	r1 = 0x1b6
    5972	7b 1a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r1
    5973	b7 01 00 00 c0 00 00 00	r1 = 0xc0
    5974	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    5975	bf a5 00 00 00 00 00 00	r5 = r10
    5976	bf 71 00 00 00 00 00 00	r1 = r7
    5977	18 02 00 00 a4 34 01 00 00 00 00 00 00 00 00 00	r2 = 0x134a4 ll
    5979	b7 03 00 00 2a 00 00 00	r3 = 0x2a
    5980	18 04 00 00 f8 34 01 00 00 00 00 00 00 00 00 00	r4 = 0x134f8 ll
    5982	85 10 00 00 de 06 00 00	call 0x6de ; <core::unicode::printable::check>
    5983	b7 01 00 00 01 00 00 00	r1 = 0x1
    5984	bf 74 00 00 00 00 00 00	r4 = r7
    5985	55 00 84 00 00 00 00 00	if r0 != 0x0 goto +0x84 <LBB91_14>

000000000000bb10 <LBB91_28>
    5986	bf 71 00 00 00 00 00 00	r1 = r7
    5987	47 01 00 00 01 00 00 00	r1 |= 0x1
    5988	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5989	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5990	bf 12 00 00 00 00 00 00	r2 = r1
    5991	77 02 00 00 01 00 00 00	r2 >>= 0x1
    5992	4f 21 00 00 00 00 00 00	r1 |= r2
    5993	bf 12 00 00 00 00 00 00	r2 = r1
    5994	77 02 00 00 02 00 00 00	r2 >>= 0x2
    5995	4f 21 00 00 00 00 00 00	r1 |= r2
    5996	bf 12 00 00 00 00 00 00	r2 = r1
    5997	77 02 00 00 04 00 00 00	r2 >>= 0x4
    5998	4f 21 00 00 00 00 00 00	r1 |= r2
    5999	67 07 00 00 20 00 00 00	r7 <<= 0x20
    6000	77 07 00 00 20 00 00 00	r7 >>= 0x20
    6001	18 02 00 00 00 00 00 00 00 00 00 00 05 00 00 00	r2 = 0x500000000 ll
    6003	4f 27 00 00 00 00 00 00	r7 |= r2
    6004	bf 12 00 00 00 00 00 00	r2 = r1
    6005	77 02 00 00 08 00 00 00	r2 >>= 0x8
    6006	4f 21 00 00 00 00 00 00	r1 |= r2
    6007	bf 12 00 00 00 00 00 00	r2 = r1
    6008	77 02 00 00 10 00 00 00	r2 >>= 0x10
    6009	4f 21 00 00 00 00 00 00	r1 |= r2
    6010	bf 12 00 00 00 00 00 00	r2 = r1
    6011	77 02 00 00 20 00 00 00	r2 >>= 0x20
    6012	4f 21 00 00 00 00 00 00	r1 |= r2
    6013	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    6014	18 02 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r2 = 0x5555555555555555 ll
    6016	bf 13 00 00 00 00 00 00	r3 = r1
    6017	77 03 00 00 01 00 00 00	r3 >>= 0x1
    6018	5f 23 00 00 00 00 00 00	r3 &= r2
    6019	1f 31 00 00 00 00 00 00	r1 -= r3
    6020	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    6022	bf 12 00 00 00 00 00 00	r2 = r1
    6023	5f 32 00 00 00 00 00 00	r2 &= r3
    6024	77 01 00 00 02 00 00 00	r1 >>= 0x2
    6025	5f 31 00 00 00 00 00 00	r1 &= r3
    6026	0f 12 00 00 00 00 00 00	r2 += r1
    6027	bf 21 00 00 00 00 00 00	r1 = r2
    6028	77 01 00 00 04 00 00 00	r1 >>= 0x4
    6029	0f 12 00 00 00 00 00 00	r2 += r1
    6030	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    6032	5f 12 00 00 00 00 00 00	r2 &= r1
    6033	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    6035	2f 12 00 00 00 00 00 00	r2 *= r1
    6036	77 02 00 00 38 00 00 00	r2 >>= 0x38
    6037	07 02 00 00 e0 ff ff ff	r2 += -0x20
    6038	18 01 00 00 fc ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xfffffffc ll
    6040	5f 12 00 00 00 00 00 00	r2 &= r1
    6041	b7 01 00 00 03 00 00 00	r1 = 0x3
    6042	77 02 00 00 02 00 00 00	r2 >>= 0x2
    6043	a7 02 00 00 07 00 00 00	r2 ^= 0x7
    6044	05 00 49 00 00 00 00 00	goto +0x49 <LBB91_14>

000000000000bce8 <LBB91_12>
    6045	b7 04 00 00 22 00 00 00	r4 = 0x22
    6046	bf 35 00 00 00 00 00 00	r5 = r3
    6047	57 05 00 00 00 00 01 00	r5 &= 0x10000
    6048	15 05 a2 ff 00 00 00 00	if r5 == 0x0 goto -0x5e <LBB91_7>
    6049	05 00 44 00 00 00 00 00	goto +0x44 <LBB91_14>

000000000000bd10 <LBB91_11>
    6050	b7 04 00 00 5c 00 00 00	r4 = 0x5c
    6051	05 00 42 00 00 00 00 00	goto +0x42 <LBB91_14>

000000000000bd20 <LBB91_18>
    6052	18 01 00 00 75 33 01 00 00 00 00 00 00 00 00 00	r1 = 0x13375 ll
    6054	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    6055	b7 01 00 00 2f 01 00 00	r1 = 0x12f
    6056	7b 1a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r1
    6057	b7 01 00 00 20 01 00 00	r1 = 0x120
    6058	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    6059	bf a5 00 00 00 00 00 00	r5 = r10
    6060	bf 71 00 00 00 00 00 00	r1 = r7
    6061	18 02 00 00 05 32 01 00 00 00 00 00 00 00 00 00	r2 = 0x13205 ll
    6063	b7 03 00 00 28 00 00 00	r3 = 0x28
    6064	18 04 00 00 55 32 01 00 00 00 00 00 00 00 00 00	r4 = 0x13255 ll
    6066	85 10 00 00 8a 06 00 00	call 0x68a ; <core::unicode::printable::check>
    6067	b7 01 00 00 01 00 00 00	r1 = 0x1
    6068	bf 74 00 00 00 00 00 00	r4 = r7
    6069	55 00 30 00 00 00 00 00	if r0 != 0x0 goto +0x30 <LBB91_14>
    6070	05 00 ab ff 00 00 00 00	goto -0x55 <LBB91_28>

000000000000bdb8 <LBB91_19>
    6071	bf 71 00 00 00 00 00 00	r1 = r7
    6072	57 01 00 00 e0 ff 1f 00	r1 &= 0x1fffe0
    6073	15 01 a8 ff e0 a6 02 00	if r1 == 0x2a6e0 goto -0x58 <LBB91_28>
    6074	bf 71 00 00 00 00 00 00	r1 = r7
    6075	07 01 00 00 c7 48 fd ff	r1 += -0x2b739
    6076	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6077	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6078	b7 02 00 00 07 00 00 00	r2 = 0x7
    6079	2d 12 a2 ff 00 00 00 00	if r2 > r1 goto -0x5e <LBB91_28>
    6080	bf 71 00 00 00 00 00 00	r1 = r7
    6081	57 01 00 00 fe ff 1f 00	r1 &= 0x1ffffe
    6082	15 01 9f ff 1e b8 02 00	if r1 == 0x2b81e goto -0x61 <LBB91_28>
    6083	bf 71 00 00 00 00 00 00	r1 = r7
    6084	07 01 00 00 5e 31 fd ff	r1 += -0x2cea2
    6085	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6086	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6087	b7 02 00 00 0e 00 00 00	r2 = 0xe
    6088	2d 12 99 ff 00 00 00 00	if r2 > r1 goto -0x67 <LBB91_28>
    6089	bf 71 00 00 00 00 00 00	r1 = r7
    6090	07 01 00 00 1f 14 fd ff	r1 += -0x2ebe1
    6091	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6092	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6093	b7 02 00 00 1f 0c 00 00	r2 = 0xc1f
    6094	2d 12 93 ff 00 00 00 00	if r2 > r1 goto -0x6d <LBB91_28>
    6095	bf 71 00 00 00 00 00 00	r1 = r7
    6096	07 01 00 00 e2 05 fd ff	r1 += -0x2fa1e
    6097	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6098	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6099	b7 02 00 00 e2 05 00 00	r2 = 0x5e2
    6100	2d 12 8d ff 00 00 00 00	if r2 > r1 goto -0x73 <LBB91_28>
    6101	bf 71 00 00 00 00 00 00	r1 = r7
    6102	07 01 00 00 b5 ec fc ff	r1 += -0x3134b
    6103	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6104	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6105	b7 02 00 00 b5 ed 0a 00	r2 = 0xaedb5
    6106	2d 12 87 ff 00 00 00 00	if r2 > r1 goto -0x79 <LBB91_28>
    6107	b7 01 00 00 01 00 00 00	r1 = 0x1
    6108	bf 73 00 00 00 00 00 00	r3 = r7
    6109	67 03 00 00 20 00 00 00	r3 <<= 0x20
    6110	77 03 00 00 20 00 00 00	r3 >>= 0x20
    6111	bf 74 00 00 00 00 00 00	r4 = r7
    6112	25 03 81 ff ef 01 0e 00	if r3 > 0xe01ef goto -0x7f <LBB91_28>
    6113	05 00 04 00 00 00 00 00	goto +0x4 <LBB91_14>

000000000000bf10 <LBB91_13>
    6114	b7 04 00 00 27 00 00 00	r4 = 0x27
    6115	bf 35 00 00 00 00 00 00	r5 = r3
    6116	57 05 00 00 00 01 00 00	r5 &= 0x100
    6117	15 05 5d ff 00 00 00 00	if r5 == 0x0 goto -0xa3 <LBB91_7>

000000000000bf30 <LBB91_14>
    6118	7b 26 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r2
    6119	63 46 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r4
    6120	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
    6121	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    6122	95 00 00 00 00 00 00 00	exit

000000000000bf58 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt>
    6123	bf 18 00 00 00 00 00 00	r8 = r1
    6124	79 26 20 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x20)
    6125	79 27 28 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x28)
    6126	79 74 18 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x18)
    6127	bf 61 00 00 00 00 00 00	r1 = r6
    6128	18 02 00 00 e1 2f 01 00 00 00 00 00 00 00 00 00	r2 = 0x12fe1 ll
    6130	b7 03 00 00 0c 00 00 00	r3 = 0xc
    6131	8d 00 00 00 04 00 00 00	callx r4
    6132	b7 09 00 00 01 00 00 00	r9 = 0x1
    6133	55 00 5d 00 00 00 00 00	if r0 != 0x0 goto +0x5d <LBB125_6>
    6134	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    6135	15 01 1a 00 00 00 00 00	if r1 == 0x0 goto +0x1a <LBB125_3>
    6136	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    6137	18 01 00 00 08 08 01 00 00 00 00 00 00 00 00 00	r1 = 0x10808 ll
    6139	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    6140	bf a1 00 00 00 00 00 00	r1 = r10
    6141	07 01 00 00 98 ff ff ff	r1 += -0x68
    6142	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6143	bf a1 00 00 00 00 00 00	r1 = r10
    6144	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6145	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6146	b7 01 00 00 00 00 00 00	r1 = 0x0
    6147	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6148	b7 01 00 00 02 00 00 00	r1 = 0x2
    6149	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6150	18 01 00 00 70 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f70 ll
    6152	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6153	b7 09 00 00 01 00 00 00	r9 = 0x1
    6154	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    6155	bf a3 00 00 00 00 00 00	r3 = r10
    6156	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6157	bf 61 00 00 00 00 00 00	r1 = r6
    6158	bf 72 00 00 00 00 00 00	r2 = r7
    6159	85 10 00 00 aa 00 00 00	call 0xaa ; <core::fmt::write>
    6160	55 00 42 00 00 00 00 00	if r0 != 0x0 goto +0x42 <LBB125_6>
    6161	05 00 21 00 00 00 00 00	goto +0x21 <LBB125_5>

000000000000c090 <LBB125_3>
    6162	79 89 00 00 00 00 00 00	r9 = *(u64 *)(r8 + 0x0)
    6163	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    6164	79 12 18 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x18)
    6165	bf 91 00 00 00 00 00 00	r1 = r9
    6166	8d 00 00 00 02 00 00 00	callx r2
    6167	18 01 00 00 f4 bc c7 ec 00 00 00 00 1e a9 f2 7e	r1 = 0x7ef2a91eecc7bcf4 ll
    6169	5d 10 19 00 00 00 00 00	if r0 != r1 goto +0x19 <LBB125_5>
    6170	7b 9a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r9
    6171	18 01 00 00 d0 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x107d0 ll
    6173	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    6174	bf a1 00 00 00 00 00 00	r1 = r10
    6175	07 01 00 00 98 ff ff ff	r1 += -0x68
    6176	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6177	bf a1 00 00 00 00 00 00	r1 = r10
    6178	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6179	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6180	b7 01 00 00 00 00 00 00	r1 = 0x0
    6181	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6182	b7 01 00 00 02 00 00 00	r1 = 0x2
    6183	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6184	18 01 00 00 70 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f70 ll
    6186	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6187	b7 09 00 00 01 00 00 00	r9 = 0x1
    6188	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    6189	bf a3 00 00 00 00 00 00	r3 = r10
    6190	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6191	bf 61 00 00 00 00 00 00	r1 = r6
    6192	bf 72 00 00 00 00 00 00	r2 = r7
    6193	85 10 00 00 88 00 00 00	call 0x88 ; <core::fmt::write>
    6194	55 00 20 00 00 00 00 00	if r0 != 0x0 goto +0x20 <LBB125_6>

000000000000c198 <LBB125_5>
    6195	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    6196	bf 12 00 00 00 00 00 00	r2 = r1
    6197	07 02 00 00 14 00 00 00	r2 += 0x14
    6198	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    6199	18 02 00 00 b0 01 01 00 00 00 00 00 00 00 00 00	r2 = 0x101b0 ll
    6201	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    6202	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    6203	bf 12 00 00 00 00 00 00	r2 = r1
    6204	07 02 00 00 10 00 00 00	r2 += 0x10
    6205	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    6206	18 02 00 00 70 08 01 00 00 00 00 00 00 00 00 00	r2 = 0x10870 ll
    6208	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    6209	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6210	bf a1 00 00 00 00 00 00	r1 = r10
    6211	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6212	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6213	b7 01 00 00 00 00 00 00	r1 = 0x0
    6214	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6215	b7 01 00 00 03 00 00 00	r1 = 0x3
    6216	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6217	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6218	18 01 00 00 20 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f20 ll
    6220	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6221	bf a3 00 00 00 00 00 00	r3 = r10
    6222	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6223	bf 61 00 00 00 00 00 00	r1 = r6
    6224	bf 72 00 00 00 00 00 00	r2 = r7
    6225	85 10 00 00 68 00 00 00	call 0x68 ; <core::fmt::write>
    6226	bf 09 00 00 00 00 00 00	r9 = r0

000000000000c298 <LBB125_6>
    6227	bf 90 00 00 00 00 00 00	r0 = r9
    6228	95 00 00 00 00 00 00 00	exit

000000000000c2a8 <core::panicking::panic>
    6229	18 04 00 00 a8 2f 01 00 00 00 00 00 00 00 00 00	r4 = 0x12fa8 ll
    6231	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    6232	b7 04 00 00 00 00 00 00	r4 = 0x0
    6233	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
    6234	7b 4a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r4
    6235	b7 04 00 00 01 00 00 00	r4 = 0x1
    6236	7b 4a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r4
    6237	bf a4 00 00 00 00 00 00	r4 = r10
    6238	07 04 00 00 f0 ff ff ff	r4 += -0x10
    6239	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
    6240	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6241	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6242	bf a1 00 00 00 00 00 00	r1 = r10
    6243	07 01 00 00 c0 ff ff ff	r1 += -0x40
    6244	bf 32 00 00 00 00 00 00	r2 = r3
    6245	85 10 00 00 1d 00 00 00	call 0x1d ; <core::panicking::panic_fmt>
    6246	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c338 <core::panicking::panic_bounds_check>
    6247	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    6248	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6249	bf a1 00 00 00 00 00 00	r1 = r10
    6250	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6251	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6252	b7 01 00 00 00 00 00 00	r1 = 0x0
    6253	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    6254	b7 01 00 00 02 00 00 00	r1 = 0x2
    6255	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6256	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    6257	18 01 00 00 90 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f90 ll
    6259	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    6260	bf a1 00 00 00 00 00 00	r1 = r10
    6261	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6262	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6263	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    6265	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6266	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6267	bf a1 00 00 00 00 00 00	r1 = r10
    6268	07 01 00 00 a8 ff ff ff	r1 += -0x58
    6269	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6270	bf a1 00 00 00 00 00 00	r1 = r10
    6271	07 01 00 00 b0 ff ff ff	r1 += -0x50
    6272	bf 32 00 00 00 00 00 00	r2 = r3
    6273	85 10 00 00 01 00 00 00	call 0x1 ; <core::panicking::panic_fmt>
    6274	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c418 <core::panicking::panic_fmt>
    6275	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6276	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6277	18 01 00 00 50 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f50 ll
    6279	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6280	18 01 00 00 a8 2f 01 00 00 00 00 00 00 00 00 00	r1 = 0x12fa8 ll
    6282	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6283	bf a1 00 00 00 00 00 00	r1 = r10
    6284	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6285	85 10 00 00 06 fd ff ff	call -0x2fa ; <rust_begin_unwind>
    6286	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c478 <core::result::unwrap_failed>
    6287	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    6288	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    6289	7b 4a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r4
    6290	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    6291	bf a1 00 00 00 00 00 00	r1 = r10
    6292	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6293	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6294	b7 01 00 00 00 00 00 00	r1 = 0x0
    6295	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    6296	b7 01 00 00 02 00 00 00	r1 = 0x2
    6297	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6298	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    6299	18 01 00 00 b0 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13fb0 ll
    6301	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    6302	18 01 00 00 a0 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x107a0 ll
    6304	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6305	bf a1 00 00 00 00 00 00	r1 = r10
    6306	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6307	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6308	18 01 00 00 70 08 01 00 00 00 00 00 00 00 00 00	r1 = 0x10870 ll
    6310	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6311	bf a1 00 00 00 00 00 00	r1 = r10
    6312	07 01 00 00 90 ff ff ff	r1 += -0x70
    6313	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6314	bf a1 00 00 00 00 00 00	r1 = r10
    6315	07 01 00 00 b0 ff ff ff	r1 += -0x50
    6316	bf 52 00 00 00 00 00 00	r2 = r5
    6317	85 10 00 00 d5 ff ff ff	call -0x2b ; <core::panicking::panic_fmt>
    6318	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c578 <core::fmt::Formatter::new>
    6319	b7 04 00 00 03 00 00 00	r4 = 0x3
    6320	73 41 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r4
    6321	18 04 00 00 00 00 00 00 00 00 00 00 20 00 00 00	r4 = 0x2000000000 ll
    6323	7b 41 30 00 00 00 00 00	*(u64 *)(r1 + 0x30) = r4
    6324	7b 31 28 00 00 00 00 00	*(u64 *)(r1 + 0x28) = r3
    6325	7b 21 20 00 00 00 00 00	*(u64 *)(r1 + 0x20) = r2
    6326	b7 02 00 00 00 00 00 00	r2 = 0x0
    6327	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    6328	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    6329	95 00 00 00 00 00 00 00	exit

000000000000c5d0 <core::fmt::write>
    6330	b7 04 00 00 03 00 00 00	r4 = 0x3
    6331	73 4a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r4
    6332	18 04 00 00 00 00 00 00 00 00 00 00 20 00 00 00	r4 = 0x2000000000 ll
    6334	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6335	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    6336	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6337	b7 07 00 00 00 00 00 00	r7 = 0x0
    6338	7b 7a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r7
    6339	7b 7a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r7
    6340	79 38 10 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x10)
    6341	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    6342	55 08 1e 00 00 00 00 00	if r8 != 0x0 goto +0x1e <LBB172_4>
    6343	79 36 28 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x28)
    6344	15 06 6b 00 00 00 00 00	if r6 == 0x0 goto +0x6b <LBB172_22>
    6345	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6346	79 18 20 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x20)
    6347	b7 07 00 00 00 00 00 00	r7 = 0x0
    6348	67 06 00 00 04 00 00 00	r6 <<= 0x4
    6349	07 08 00 00 08 00 00 00	r8 += 0x8
    6350	79 19 00 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x0)
    6351	07 09 00 00 08 00 00 00	r9 += 0x8

000000000000c680 <LBB172_3>
    6352	79 93 00 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x0)
    6353	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB172_26>
    6354	05 00 06 00 00 00 00 00	goto +0x6 <LBB172_25>

000000000000c698 <LBB172_26>
    6355	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6356	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6357	79 92 f8 ff 00 00 00 00	r2 = *(u64 *)(r9 - 0x8)
    6358	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6359	8d 00 00 00 04 00 00 00	callx r4
    6360	55 00 6e 00 00 00 00 00	if r0 != 0x0 goto +0x6e <LBB172_28>

000000000000c6c8 <LBB172_25>
    6361	79 81 f8 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x8)
    6362	79 83 00 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x0)
    6363	bf a2 00 00 00 00 00 00	r2 = r10
    6364	07 02 00 00 c0 ff ff ff	r2 += -0x40
    6365	8d 00 00 00 03 00 00 00	callx r3
    6366	55 00 68 00 00 00 00 00	if r0 != 0x0 goto +0x68 <LBB172_28>
    6367	07 07 00 00 01 00 00 00	r7 += 0x1
    6368	07 08 00 00 10 00 00 00	r8 += 0x10
    6369	07 09 00 00 10 00 00 00	r9 += 0x10
    6370	07 06 00 00 f0 ff ff ff	r6 += -0x10
    6371	15 06 50 00 00 00 00 00	if r6 == 0x0 goto +0x50 <LBB172_22>
    6372	05 00 eb ff 00 00 00 00	goto -0x15 <LBB172_3>

000000000000c728 <LBB172_4>
    6373	79 39 18 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x18)
    6374	15 09 4d 00 00 00 00 00	if r9 == 0x0 goto +0x4d <LBB172_22>
    6375	b7 07 00 00 00 00 00 00	r7 = 0x0
    6376	07 08 00 00 30 00 00 00	r8 += 0x30
    6377	27 09 00 00 38 00 00 00	r9 *= 0x38
    6378	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6379	79 16 00 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x0)
    6380	07 06 00 00 08 00 00 00	r6 += 0x8

000000000000c768 <LBB172_6>
    6381	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
    6382	55 03 0e 00 00 00 00 00	if r3 != 0x0 goto +0xe <LBB172_20>

000000000000c778 <LBB172_7>
    6383	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6384	79 12 20 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x20)
    6385	61 81 f8 ff 00 00 00 00	r1 = *(u32 *)(r8 - 0x8)
    6386	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 0xc) = r1
    6387	71 81 00 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x0)
    6388	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
    6389	61 81 fc ff 00 00 00 00	r1 = *(u32 *)(r8 - 0x4)
    6390	63 1a f0 ff 00 00 00 00	*(u32 *)(r10 - 0x10) = r1
    6391	79 81 f0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x10)
    6392	79 84 e8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x18)
    6393	15 04 0a 00 00 00 00 00	if r4 == 0x0 goto +0xa <LBB172_10>
    6394	b7 03 00 00 00 00 00 00	r3 = 0x0
    6395	15 04 0a 00 01 00 00 00	if r4 == 0x1 goto +0xa <LBB172_11>
    6396	05 00 13 00 00 00 00 00	goto +0x13 <LBB172_13>

000000000000c7e8 <LBB172_20>
    6397	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6398	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6399	79 62 f8 ff 00 00 00 00	r2 = *(u64 *)(r6 - 0x8)
    6400	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6401	8d 00 00 00 04 00 00 00	callx r4
    6402	55 00 44 00 00 00 00 00	if r0 != 0x0 goto +0x44 <LBB172_28>
    6403	05 00 eb ff 00 00 00 00	goto -0x15 <LBB172_7>

000000000000c820 <LBB172_10>
    6404	b7 03 00 00 01 00 00 00	r3 = 0x1
    6405	05 00 0a 00 00 00 00 00	goto +0xa <LBB172_13>

000000000000c830 <LBB172_11>
    6406	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6407	bf 24 00 00 00 00 00 00	r4 = r2
    6408	0f 14 00 00 00 00 00 00	r4 += r1
    6409	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
    6410	18 00 00 00 f0 b7 00 00 00 00 00 00 00 00 00 00	r0 = 0xb7f0 ll
    6412	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB172_13>
    6413	b7 03 00 00 01 00 00 00	r3 = 0x1
    6414	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    6415	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

000000000000c880 <LBB172_13>
    6416	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6417	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
    6418	79 81 e0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x20)
    6419	79 84 d8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x28)
    6420	15 04 03 00 00 00 00 00	if r4 == 0x0 goto +0x3 <LBB172_16>
    6421	b7 03 00 00 00 00 00 00	r3 = 0x0
    6422	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB172_17>
    6423	05 00 0c 00 00 00 00 00	goto +0xc <LBB172_19>

000000000000c8c0 <LBB172_16>
    6424	b7 03 00 00 01 00 00 00	r3 = 0x1
    6425	05 00 0a 00 00 00 00 00	goto +0xa <LBB172_19>

000000000000c8d0 <LBB172_17>
    6426	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6427	bf 24 00 00 00 00 00 00	r4 = r2
    6428	0f 14 00 00 00 00 00 00	r4 += r1
    6429	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
    6430	18 00 00 00 f0 b7 00 00 00 00 00 00 00 00 00 00	r0 = 0xb7f0 ll
    6432	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB172_19>
    6433	b7 03 00 00 01 00 00 00	r3 = 0x1
    6434	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    6435	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

000000000000c920 <LBB172_19>
    6436	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6437	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    6438	79 81 d0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x30)
    6439	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6440	0f 12 00 00 00 00 00 00	r2 += r1
    6441	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    6442	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
    6443	bf a2 00 00 00 00 00 00	r2 = r10
    6444	07 02 00 00 c0 ff ff ff	r2 += -0x40
    6445	8d 00 00 00 03 00 00 00	callx r3
    6446	55 00 18 00 00 00 00 00	if r0 != 0x0 goto +0x18 <LBB172_28>
    6447	07 07 00 00 01 00 00 00	r7 += 0x1
    6448	07 08 00 00 38 00 00 00	r8 += 0x38
    6449	07 06 00 00 10 00 00 00	r6 += 0x10
    6450	07 09 00 00 c8 ff ff ff	r9 += -0x38
    6451	55 09 b9 ff 00 00 00 00	if r9 != 0x0 goto -0x47 <LBB172_6>

000000000000c9a0 <LBB172_22>
    6452	bf 72 00 00 00 00 00 00	r2 = r7
    6453	67 02 00 00 04 00 00 00	r2 <<= 0x4
    6454	79 a3 b8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x48)
    6455	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    6456	0f 21 00 00 00 00 00 00	r1 += r2
    6457	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
    6458	2d 72 01 00 00 00 00 00	if r2 > r7 goto +0x1 <LBB172_24>
    6459	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000c9e0 <LBB172_24>
    6460	2d 72 01 00 00 00 00 00	if r2 > r7 goto +0x1 <LBB172_29>
    6461	05 00 07 00 00 00 00 00	goto +0x7 <LBB172_30>

000000000000c9f0 <LBB172_29>
    6462	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    6463	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6464	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    6465	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    6466	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6467	8d 00 00 00 04 00 00 00	callx r4
    6468	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB172_28>

000000000000ca28 <LBB172_30>
    6469	b7 00 00 00 00 00 00 00	r0 = 0x0
    6470	05 00 01 00 00 00 00 00	goto +0x1 <LBB172_31>

000000000000ca38 <LBB172_28>
    6471	b7 00 00 00 01 00 00 00	r0 = 0x1

000000000000ca40 <LBB172_31>
    6472	95 00 00 00 00 00 00 00	exit

000000000000ca48 <core::fmt::Formatter::pad_integral>
    6473	79 50 08 f0 00 00 00 00	r0 = *(u64 *)(r5 - 0xff8)
    6474	15 02 09 00 00 00 00 00	if r2 == 0x0 goto +0x9 <LBB173_2>
    6475	bf 38 00 00 00 00 00 00	r8 = r3
    6476	b7 07 00 00 00 00 11 00	r7 = 0x110000
    6477	61 19 30 00 00 00 00 00	r9 = *(u32 *)(r1 + 0x30)
    6478	bf 92 00 00 00 00 00 00	r2 = r9
    6479	57 02 00 00 01 00 00 00	r2 &= 0x1
    6480	bf 06 00 00 00 00 00 00	r6 = r0
    6481	15 02 07 00 00 00 00 00	if r2 == 0x0 goto +0x7 <LBB173_4>
    6482	b7 07 00 00 2b 00 00 00	r7 = 0x2b
    6483	05 00 03 00 00 00 00 00	goto +0x3 <LBB173_3>

000000000000caa0 <LBB173_2>
    6484	bf 38 00 00 00 00 00 00	r8 = r3
    6485	b7 07 00 00 2d 00 00 00	r7 = 0x2d
    6486	61 19 30 00 00 00 00 00	r9 = *(u32 *)(r1 + 0x30)

000000000000cab8 <LBB173_3>
    6487	bf 06 00 00 00 00 00 00	r6 = r0
    6488	07 06 00 00 01 00 00 00	r6 += 0x1

000000000000cac8 <LBB173_4>
    6489	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    6490	b7 03 00 00 00 00 00 00	r3 = 0x0
    6491	bf 92 00 00 00 00 00 00	r2 = r9
    6492	57 02 00 00 04 00 00 00	r2 &= 0x4
    6493	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB173_12>
    6494	05 00 0a 00 00 00 00 00	goto +0xa <LBB173_6>

000000000000caf8 <LBB173_12>
    6495	79 52 00 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0x1000)
    6496	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6497	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    6498	15 02 1f 00 01 00 00 00	if r2 == 0x1 goto +0x1f <LBB173_14>
    6499	bf 16 00 00 00 00 00 00	r6 = r1
    6500	bf 72 00 00 00 00 00 00	r2 = r7
    6501	85 10 00 00 c8 00 00 00	call 0xc8 ; <core::fmt::Formatter::pad_integral::write_prefix>
    6502	b7 07 00 00 01 00 00 00	r7 = 0x1
    6503	55 00 3e 00 00 00 00 00	if r0 != 0x0 goto +0x3e <LBB173_51>
    6504	05 00 36 00 00 00 00 00	goto +0x36 <LBB173_17>

000000000000cb48 <LBB173_6>
    6505	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    6506	b7 02 00 00 00 00 00 00	r2 = 0x0
    6507	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6508	bf 83 00 00 00 00 00 00	r3 = r8
    6509	15 04 08 00 00 00 00 00	if r4 == 0x0 goto +0x8 <LBB173_11>
    6510	b7 02 00 00 00 00 00 00	r2 = 0x0
    6511	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6512	bf 30 00 00 00 00 00 00	r0 = r3
    6513	05 00 09 00 00 00 00 00	goto +0x9 <LBB173_8>

000000000000cb90 <LBB173_10>
    6514	0f 72 00 00 00 00 00 00	r2 += r7
    6515	07 00 00 00 01 00 00 00	r0 += 0x1
    6516	07 04 00 00 ff ff ff ff	r4 += -0x1
    6517	55 04 05 00 00 00 00 00	if r4 != 0x0 goto +0x5 <LBB173_8>

000000000000cbb0 <LBB173_11>
    6518	0f 62 00 00 00 00 00 00	r2 += r6
    6519	bf 26 00 00 00 00 00 00	r6 = r2
    6520	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6521	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x28)
    6522	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB173_12>

000000000000cbd8 <LBB173_8>
    6523	71 08 00 00 00 00 00 00	r8 = *(u8 *)(r0 + 0x0)
    6524	67 08 00 00 38 00 00 00	r8 <<= 0x38
    6525	c7 08 00 00 38 00 00 00	r8 s>>= 0x38
    6526	b7 07 00 00 01 00 00 00	r7 = 0x1
    6527	65 08 f2 ff bf ff ff ff	if r8 s> -0x41 goto -0xe <LBB173_10>
    6528	b7 07 00 00 00 00 00 00	r7 = 0x0
    6529	05 00 f0 ff 00 00 00 00	goto -0x10 <LBB173_10>

000000000000cc10 <LBB173_14>
    6530	79 18 08 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x8)
    6531	3d 86 16 00 00 00 00 00	if r6 >= r8 goto +0x16 <LBB173_16>
    6532	57 09 00 00 08 00 00 00	r9 &= 0x8
    6533	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6534	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB173_18>
    6535	05 00 21 00 00 00 00 00	goto +0x21 <LBB173_27>

000000000000cc40 <LBB173_18>
    6536	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
    6537	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6538	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6539	b7 01 00 00 01 00 00 00	r1 = 0x1
    6540	15 02 01 00 03 00 00 00	if r2 == 0x3 goto +0x1 <LBB173_20>
    6541	bf 21 00 00 00 00 00 00	r1 = r2

000000000000cc70 <LBB173_20>
    6542	1f 68 00 00 00 00 00 00	r8 -= r6
    6543	b7 09 00 00 00 00 00 00	r9 = 0x0
    6544	57 01 00 00 03 00 00 00	r1 &= 0x3
    6545	7b 8a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r8
    6546	15 01 35 00 00 00 00 00	if r1 == 0x0 goto +0x35 <LBB173_23>
    6547	15 01 31 00 01 00 00 00	if r1 == 0x1 goto +0x31 <LBB173_52>
    6548	bf 89 00 00 00 00 00 00	r9 = r8
    6549	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6550	07 08 00 00 01 00 00 00	r8 += 0x1
    6551	77 08 00 00 01 00 00 00	r8 >>= 0x1
    6552	7b 8a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r8
    6553	05 00 2e 00 00 00 00 00	goto +0x2e <LBB173_23>

000000000000ccd0 <LBB173_16>
    6554	bf 16 00 00 00 00 00 00	r6 = r1
    6555	bf 72 00 00 00 00 00 00	r2 = r7
    6556	85 10 00 00 91 00 00 00	call 0x91 ; <core::fmt::Formatter::pad_integral::write_prefix>
    6557	b7 07 00 00 01 00 00 00	r7 = 0x1
    6558	55 00 07 00 00 00 00 00	if r0 != 0x0 goto +0x7 <LBB173_51>

000000000000ccf8 <LBB173_17>
    6559	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    6560	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    6561	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6562	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6563	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6564	8d 00 00 00 04 00 00 00	callx r4
    6565	bf 07 00 00 00 00 00 00	r7 = r0

000000000000cd30 <LBB173_51>
    6566	57 07 00 00 01 00 00 00	r7 &= 0x1
    6567	bf 70 00 00 00 00 00 00	r0 = r7
    6568	95 00 00 00 00 00 00 00	exit

000000000000cd48 <LBB173_27>
    6569	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6570	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
    6571	b7 02 00 00 30 00 00 00	r2 = 0x30
    6572	63 21 34 00 00 00 00 00	*(u32 *)(r1 + 0x34) = r2
    6573	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6574	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    6575	bf 72 00 00 00 00 00 00	r2 = r7
    6576	b7 07 00 00 01 00 00 00	r7 = 0x1
    6577	73 71 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r7
    6578	85 10 00 00 7b 00 00 00	call 0x7b ; <core::fmt::Formatter::pad_integral::write_prefix>
    6579	55 00 f2 ff 00 00 00 00	if r0 != 0x0 goto -0xe <LBB173_51>
    6580	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6581	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6582	b7 01 00 00 01 00 00 00	r1 = 0x1
    6583	15 02 01 00 03 00 00 00	if r2 == 0x3 goto +0x1 <LBB173_30>
    6584	bf 21 00 00 00 00 00 00	r1 = r2

000000000000cdc8 <LBB173_30>
    6585	1f 68 00 00 00 00 00 00	r8 -= r6
    6586	b7 09 00 00 00 00 00 00	r9 = 0x0
    6587	57 01 00 00 03 00 00 00	r1 &= 0x3
    6588	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r8
    6589	15 01 41 00 00 00 00 00	if r1 == 0x0 goto +0x41 <LBB173_33>
    6590	15 01 3d 00 01 00 00 00	if r1 == 0x1 goto +0x3d <LBB173_53>
    6591	bf 89 00 00 00 00 00 00	r9 = r8
    6592	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6593	07 08 00 00 01 00 00 00	r8 += 0x1
    6594	77 08 00 00 01 00 00 00	r8 >>= 0x1
    6595	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r8
    6596	05 00 3a 00 00 00 00 00	goto +0x3a <LBB173_33>

000000000000ce28 <LBB173_52>
    6597	b7 01 00 00 00 00 00 00	r1 = 0x0
    6598	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6599	bf 89 00 00 00 00 00 00	r9 = r8

000000000000ce40 <LBB173_23>
    6600	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    6601	07 09 00 00 01 00 00 00	r9 += 0x1
    6602	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6603	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6604	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6605	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6606	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6607	b7 07 00 00 01 00 00 00	r7 = 0x1

000000000000ce80 <LBB173_24>
    6608	07 09 00 00 ff ff ff ff	r9 += -0x1
    6609	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB173_26>
    6610	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6611	bf 61 00 00 00 00 00 00	r1 = r6
    6612	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6613	8d 00 00 00 03 00 00 00	callx r3
    6614	55 00 cf ff 00 00 00 00	if r0 != 0x0 goto -0x31 <LBB173_51>
    6615	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB173_24>

000000000000cec0 <LBB173_26>
    6616	b7 07 00 00 01 00 00 00	r7 = 0x1
    6617	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6618	15 01 cb ff 00 00 11 00	if r1 == 0x110000 goto -0x35 <LBB173_51>
    6619	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6620	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    6621	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    6622	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6623	85 10 00 00 4e 00 00 00	call 0x4e ; <core::fmt::Formatter::pad_integral::write_prefix>
    6624	55 00 c5 ff 00 00 00 00	if r0 != 0x0 goto -0x3b <LBB173_51>
    6625	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    6626	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    6627	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    6628	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6629	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6630	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6631	8d 00 00 00 04 00 00 00	callx r4
    6632	55 00 bd ff 00 00 00 00	if r0 != 0x0 goto -0x43 <LBB173_51>
    6633	b7 07 00 00 00 00 00 00	r7 = 0x0
    6634	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6635	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6636	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6637	79 a9 c8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x38)

000000000000cf70 <LBB173_46>
    6638	bf 91 00 00 00 00 00 00	r1 = r9
    6639	1d 79 08 00 00 00 00 00	if r9 == r7 goto +0x8 <LBB173_49>
    6640	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6641	bf 61 00 00 00 00 00 00	r1 = r6
    6642	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6643	8d 00 00 00 03 00 00 00	callx r3
    6644	07 07 00 00 01 00 00 00	r7 += 0x1
    6645	15 00 f8 ff 00 00 00 00	if r0 == 0x0 goto -0x8 <LBB173_46>
    6646	07 07 00 00 ff ff ff ff	r7 += -0x1
    6647	bf 71 00 00 00 00 00 00	r1 = r7

000000000000cfc0 <LBB173_49>
    6648	b7 07 00 00 01 00 00 00	r7 = 0x1
    6649	2d 19 ac ff 00 00 00 00	if r9 > r1 goto -0x54 <LBB173_51>

000000000000cfd0 <LBB173_50>
    6650	b7 07 00 00 00 00 00 00	r7 = 0x0
    6651	05 00 aa ff 00 00 00 00	goto -0x56 <LBB173_51>

000000000000cfe0 <LBB173_53>
    6652	b7 01 00 00 00 00 00 00	r1 = 0x0
    6653	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6654	bf 89 00 00 00 00 00 00	r9 = r8

000000000000cff8 <LBB173_33>
    6655	07 09 00 00 01 00 00 00	r9 += 0x1
    6656	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6657	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6658	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6659	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6660	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6661	b7 07 00 00 01 00 00 00	r7 = 0x1

000000000000d030 <LBB173_34>
    6662	07 09 00 00 ff ff ff ff	r9 += -0x1
    6663	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB173_36>
    6664	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6665	bf 61 00 00 00 00 00 00	r1 = r6
    6666	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6667	8d 00 00 00 03 00 00 00	callx r3
    6668	55 00 99 ff 00 00 00 00	if r0 != 0x0 goto -0x67 <LBB173_51>
    6669	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB173_34>

000000000000d070 <LBB173_36>
    6670	b7 07 00 00 01 00 00 00	r7 = 0x1
    6671	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6672	15 01 95 ff 00 00 11 00	if r1 == 0x110000 goto -0x6b <LBB173_51>
    6673	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    6674	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    6675	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    6676	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6677	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6678	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6679	8d 00 00 00 04 00 00 00	callx r4
    6680	55 00 8d ff 00 00 00 00	if r0 != 0x0 goto -0x73 <LBB173_51>
    6681	b7 09 00 00 00 00 00 00	r9 = 0x0
    6682	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6683	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6684	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)

000000000000d0e8 <LBB173_39>
    6685	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    6686	1d 91 09 00 00 00 00 00	if r1 == r9 goto +0x9 <LBB173_42>
    6687	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6688	bf 61 00 00 00 00 00 00	r1 = r6
    6689	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6690	8d 00 00 00 03 00 00 00	callx r3
    6691	07 09 00 00 01 00 00 00	r9 += 0x1
    6692	15 00 f8 ff 00 00 00 00	if r0 == 0x0 goto -0x8 <LBB173_39>
    6693	07 09 00 00 ff ff ff ff	r9 += -0x1
    6694	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    6695	2d 91 7e ff 00 00 00 00	if r1 > r9 goto -0x82 <LBB173_51>

000000000000d140 <LBB173_42>
    6696	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6697	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
    6698	73 21 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r2
    6699	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    6700	63 21 34 00 00 00 00 00	*(u32 *)(r1 + 0x34) = r2
    6701	05 00 cc ff 00 00 00 00	goto -0x34 <LBB173_50>

000000000000d170 <core::fmt::Formatter::pad_integral::write_prefix>
    6702	bf 46 00 00 00 00 00 00	r6 = r4
    6703	bf 37 00 00 00 00 00 00	r7 = r3
    6704	bf 18 00 00 00 00 00 00	r8 = r1
    6705	bf 21 00 00 00 00 00 00	r1 = r2
    6706	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6707	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6708	15 01 07 00 00 00 11 00	if r1 == 0x110000 goto +0x7 <LBB174_2>
    6709	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
    6710	79 83 28 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x28)
    6711	79 33 20 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x20)
    6712	8d 00 00 00 03 00 00 00	callx r3
    6713	bf 01 00 00 00 00 00 00	r1 = r0
    6714	b7 00 00 00 01 00 00 00	r0 = 0x1
    6715	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB174_3>

000000000000d1e0 <LBB174_2>
    6716	b7 00 00 00 00 00 00 00	r0 = 0x0
    6717	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB174_4>

000000000000d1f0 <LBB174_3>
    6718	95 00 00 00 00 00 00 00	exit

000000000000d1f8 <LBB174_4>
    6719	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
    6720	79 82 28 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x28)
    6721	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6722	bf 72 00 00 00 00 00 00	r2 = r7
    6723	bf 63 00 00 00 00 00 00	r3 = r6
    6724	8d 00 00 00 04 00 00 00	callx r4
    6725	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB174_3>

000000000000d230 <core::fmt::Formatter::pad>
    6726	79 14 10 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x10)
    6727	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    6728	15 05 02 00 01 00 00 00	if r5 == 0x1 goto +0x2 <LBB175_2>
    6729	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB175_5>
    6730	05 00 65 00 00 00 00 00	goto +0x65 <LBB175_3>

000000000000d258 <LBB175_2>
    6731	15 04 01 00 01 00 00 00	if r4 == 0x1 goto +0x1 <LBB175_5>
    6732	05 00 48 00 00 00 00 00	goto +0x48 <LBB175_27>

000000000000d268 <LBB175_5>
    6733	7b 5a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r5
    6734	b7 05 00 00 00 00 00 00	r5 = 0x0
    6735	bf 24 00 00 00 00 00 00	r4 = r2
    6736	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    6737	0f 34 00 00 00 00 00 00	r4 += r3
    6738	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    6739	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    6740	bf 28 00 00 00 00 00 00	r8 = r2
    6741	15 03 28 00 00 00 00 00	if r3 == 0x0 goto +0x28 <LBB175_13>
    6742	b7 05 00 00 00 00 00 00	r5 = 0x0
    6743	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    6744	b7 07 00 00 00 00 00 00	r7 = 0x0

000000000000d2c8 <LBB175_7>
    6745	bf 89 00 00 00 00 00 00	r9 = r8
    6746	1d 49 35 00 00 00 00 00	if r9 == r4 goto +0x35 <LBB175_16>
    6747	bf 98 00 00 00 00 00 00	r8 = r9
    6748	07 08 00 00 01 00 00 00	r8 += 0x1
    6749	71 90 00 00 00 00 00 00	r0 = *(u8 *)(r9 + 0x0)
    6750	bf 06 00 00 00 00 00 00	r6 = r0
    6751	67 06 00 00 38 00 00 00	r6 <<= 0x38
    6752	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    6753	65 06 18 00 ff ff ff ff	if r6 s> -0x1 goto +0x18 <LBB175_12>
    6754	bf 98 00 00 00 00 00 00	r8 = r9
    6755	07 08 00 00 02 00 00 00	r8 += 0x2
    6756	b7 02 00 00 e0 00 00 00	r2 = 0xe0
    6757	2d 02 14 00 00 00 00 00	if r2 > r0 goto +0x14 <LBB175_12>
    6758	bf 98 00 00 00 00 00 00	r8 = r9
    6759	07 08 00 00 03 00 00 00	r8 += 0x3
    6760	b7 02 00 00 f0 00 00 00	r2 = 0xf0
    6761	2d 02 10 00 00 00 00 00	if r2 > r0 goto +0x10 <LBB175_12>
    6762	71 96 01 00 00 00 00 00	r6 = *(u8 *)(r9 + 0x1)
    6763	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    6764	67 06 00 00 0c 00 00 00	r6 <<= 0xc
    6765	71 92 02 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x2)
    6766	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6767	67 02 00 00 06 00 00 00	r2 <<= 0x6
    6768	4f 62 00 00 00 00 00 00	r2 |= r6
    6769	71 96 03 00 00 00 00 00	r6 = *(u8 *)(r9 + 0x3)
    6770	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    6771	4f 62 00 00 00 00 00 00	r2 |= r6
    6772	67 00 00 00 12 00 00 00	r0 <<= 0x12
    6773	57 00 00 00 00 00 1c 00	r0 &= 0x1c0000
    6774	4f 02 00 00 00 00 00 00	r2 |= r0
    6775	bf 98 00 00 00 00 00 00	r8 = r9
    6776	07 08 00 00 04 00 00 00	r8 += 0x4
    6777	15 02 16 00 00 00 11 00	if r2 == 0x110000 goto +0x16 <LBB175_16>

000000000000d3d0 <LBB175_12>
    6778	07 07 00 00 01 00 00 00	r7 += 0x1
    6779	1f 95 00 00 00 00 00 00	r5 -= r9
    6780	0f 85 00 00 00 00 00 00	r5 += r8
    6781	2d 73 db ff 00 00 00 00	if r3 > r7 goto -0x25 <LBB175_7>

000000000000d3f0 <LBB175_13>
    6782	1d 48 11 00 00 00 00 00	if r8 == r4 goto +0x11 <LBB175_16>
    6783	71 84 00 00 00 00 00 00	r4 = *(u8 *)(r8 + 0x0)
    6784	b7 02 00 00 f0 00 00 00	r2 = 0xf0
    6785	2d 42 42 00 00 00 00 00	if r2 > r4 goto +0x42 <LBB175_17>
    6786	71 82 01 00 00 00 00 00	r2 = *(u8 *)(r8 + 0x1)
    6787	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6788	67 02 00 00 0c 00 00 00	r2 <<= 0xc
    6789	71 83 02 00 00 00 00 00	r3 = *(u8 *)(r8 + 0x2)
    6790	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    6791	67 03 00 00 06 00 00 00	r3 <<= 0x6
    6792	4f 23 00 00 00 00 00 00	r3 |= r2
    6793	71 82 03 00 00 00 00 00	r2 = *(u8 *)(r8 + 0x3)
    6794	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6795	4f 23 00 00 00 00 00 00	r3 |= r2
    6796	67 04 00 00 12 00 00 00	r4 <<= 0x12
    6797	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    6798	4f 43 00 00 00 00 00 00	r3 |= r4
    6799	55 03 34 00 00 00 11 00	if r3 != 0x110000 goto +0x34 <LBB175_17>

000000000000d480 <LBB175_16>
    6800	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6801	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    6802	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    6803	15 04 01 00 01 00 00 00	if r4 == 0x1 goto +0x1 <LBB175_27>
    6804	05 00 1b 00 00 00 00 00	goto +0x1b <LBB175_3>

000000000000d4a8 <LBB175_27>
    6805	b7 08 00 00 00 00 00 00	r8 = 0x0
    6806	79 19 08 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x8)
    6807	15 03 08 00 00 00 00 00	if r3 == 0x0 goto +0x8 <LBB175_32>
    6808	b7 08 00 00 00 00 00 00	r8 = 0x0
    6809	bf 34 00 00 00 00 00 00	r4 = r3
    6810	bf 25 00 00 00 00 00 00	r5 = r2
    6811	05 00 0d 00 00 00 00 00	goto +0xd <LBB175_29>

000000000000d4e0 <LBB175_31>
    6812	0f 08 00 00 00 00 00 00	r8 += r0
    6813	07 05 00 00 01 00 00 00	r5 += 0x1
    6814	07 04 00 00 ff ff ff ff	r4 += -0x1
    6815	55 04 09 00 00 00 00 00	if r4 != 0x0 goto +0x9 <LBB175_29>

000000000000d500 <LBB175_32>
    6816	3d 98 0f 00 00 00 00 00	if r8 >= r9 goto +0xf <LBB175_3>
    6817	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    6818	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    6819	71 15 38 00 00 00 00 00	r5 = *(u8 *)(r1 + 0x38)
    6820	b7 07 00 00 00 00 00 00	r7 = 0x0
    6821	b7 04 00 00 00 00 00 00	r4 = 0x0
    6822	15 05 12 00 03 00 00 00	if r5 == 0x3 goto +0x12 <LBB175_35>
    6823	bf 54 00 00 00 00 00 00	r4 = r5
    6824	05 00 10 00 00 00 00 00	goto +0x10 <LBB175_35>

000000000000d548 <LBB175_29>
    6825	71 56 00 00 00 00 00 00	r6 = *(u8 *)(r5 + 0x0)
    6826	67 06 00 00 38 00 00 00	r6 <<= 0x38
    6827	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    6828	b7 00 00 00 01 00 00 00	r0 = 0x1
    6829	65 06 ee ff bf ff ff ff	if r6 s> -0x41 goto -0x12 <LBB175_31>
    6830	b7 00 00 00 00 00 00 00	r0 = 0x0
    6831	05 00 ec ff 00 00 00 00	goto -0x14 <LBB175_31>

000000000000d580 <LBB175_3>
    6832	79 15 20 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x20)
    6833	79 11 28 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x28)
    6834	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6835	bf 51 00 00 00 00 00 00	r1 = r5
    6836	8d 00 00 00 04 00 00 00	callx r4
    6837	bf 06 00 00 00 00 00 00	r6 = r0

000000000000d5b0 <LBB175_4>
    6838	57 06 00 00 01 00 00 00	r6 &= 0x1
    6839	bf 60 00 00 00 00 00 00	r0 = r6
    6840	95 00 00 00 00 00 00 00	exit

000000000000d5c8 <LBB175_35>
    6841	1f 89 00 00 00 00 00 00	r9 -= r8
    6842	57 04 00 00 03 00 00 00	r4 &= 0x3
    6843	7b 9a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r9
    6844	15 04 13 00 00 00 00 00	if r4 == 0x0 goto +0x13 <LBB175_38>
    6845	15 04 0f 00 01 00 00 00	if r4 == 0x1 goto +0xf <LBB175_49>
    6846	bf 97 00 00 00 00 00 00	r7 = r9
    6847	77 07 00 00 01 00 00 00	r7 >>= 0x1
    6848	07 09 00 00 01 00 00 00	r9 += 0x1
    6849	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6850	7b 9a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r9
    6851	05 00 0c 00 00 00 00 00	goto +0xc <LBB175_38>

000000000000d620 <LBB175_17>
    6852	b7 03 00 00 00 00 00 00	r3 = 0x0
    6853	79 a6 e8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x18)
    6854	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)
    6855	15 05 3b 00 00 00 00 00	if r5 == 0x0 goto +0x3b <LBB175_21>
    6856	2d 56 31 00 00 00 00 00	if r6 > r5 goto +0x31 <LBB175_20>
    6857	b7 04 00 00 00 00 00 00	r4 = 0x0
    6858	bf 63 00 00 00 00 00 00	r3 = r6
    6859	1d 65 37 00 00 00 00 00	if r5 == r6 goto +0x37 <LBB175_21>
    6860	05 00 38 00 00 00 00 00	goto +0x38 <LBB175_22>

000000000000d668 <LBB175_49>
    6861	b7 02 00 00 00 00 00 00	r2 = 0x0
    6862	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6863	bf 97 00 00 00 00 00 00	r7 = r9

000000000000d680 <LBB175_38>
    6864	07 07 00 00 01 00 00 00	r7 += 0x1
    6865	61 18 34 00 00 00 00 00	r8 = *(u32 *)(r1 + 0x34)
    6866	79 12 28 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x28)
    6867	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6868	79 19 20 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x20)
    6869	b7 06 00 00 01 00 00 00	r6 = 0x1

000000000000d6b0 <LBB175_39>
    6870	07 07 00 00 ff ff ff ff	r7 += -0x1
    6871	15 07 07 00 00 00 00 00	if r7 == 0x0 goto +0x7 <LBB175_41>
    6872	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6873	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6874	bf 91 00 00 00 00 00 00	r1 = r9
    6875	bf 82 00 00 00 00 00 00	r2 = r8
    6876	8d 00 00 00 03 00 00 00	callx r3
    6877	55 00 d8 ff 00 00 00 00	if r0 != 0x0 goto -0x28 <LBB175_4>
    6878	05 00 f7 ff 00 00 00 00	goto -0x9 <LBB175_39>

000000000000d6f8 <LBB175_41>
    6879	b7 06 00 00 01 00 00 00	r6 = 0x1
    6880	bf 81 00 00 00 00 00 00	r1 = r8
    6881	15 01 d4 ff 00 00 11 00	if r1 == 0x110000 goto -0x2c <LBB175_4>
    6882	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6883	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6884	bf 91 00 00 00 00 00 00	r1 = r9
    6885	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    6886	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6887	8d 00 00 00 04 00 00 00	callx r4
    6888	55 00 cd ff 00 00 00 00	if r0 != 0x0 goto -0x33 <LBB175_4>
    6889	b7 06 00 00 00 00 00 00	r6 = 0x0
    6890	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x20)

000000000000d758 <LBB175_44>
    6891	bf 71 00 00 00 00 00 00	r1 = r7
    6892	1d 67 09 00 00 00 00 00	if r7 == r6 goto +0x9 <LBB175_47>
    6893	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6894	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6895	bf 91 00 00 00 00 00 00	r1 = r9
    6896	bf 82 00 00 00 00 00 00	r2 = r8
    6897	8d 00 00 00 03 00 00 00	callx r3
    6898	07 06 00 00 01 00 00 00	r6 += 0x1
    6899	15 00 f7 ff 00 00 00 00	if r0 == 0x0 goto -0x9 <LBB175_44>
    6900	07 06 00 00 ff ff ff ff	r6 += -0x1
    6901	bf 61 00 00 00 00 00 00	r1 = r6

000000000000d7b0 <LBB175_47>
    6902	b7 06 00 00 01 00 00 00	r6 = 0x1
    6903	2d 17 be ff 00 00 00 00	if r7 > r1 goto -0x42 <LBB175_4>
    6904	b7 06 00 00 00 00 00 00	r6 = 0x0
    6905	05 00 bc ff 00 00 00 00	goto -0x44 <LBB175_4>

000000000000d7d0 <LBB175_20>
    6906	bf 72 00 00 00 00 00 00	r2 = r7
    6907	0f 52 00 00 00 00 00 00	r2 += r5
    6908	b7 04 00 00 00 00 00 00	r4 = 0x0
    6909	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    6910	67 02 00 00 38 00 00 00	r2 <<= 0x38
    6911	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    6912	b7 00 00 00 c0 ff ff ff	r0 = -0x40
    6913	bf 53 00 00 00 00 00 00	r3 = r5
    6914	6d 20 02 00 00 00 00 00	if r0 s> r2 goto +0x2 <LBB175_22>

000000000000d818 <LBB175_21>
    6915	bf 35 00 00 00 00 00 00	r5 = r3
    6916	bf 74 00 00 00 00 00 00	r4 = r7

000000000000d828 <LBB175_22>
    6917	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB175_24>
    6918	bf 56 00 00 00 00 00 00	r6 = r5

000000000000d838 <LBB175_24>
    6919	7b 6a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r6
    6920	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB175_26>
    6921	bf 47 00 00 00 00 00 00	r7 = r4

000000000000d850 <LBB175_26>
    6922	7b 7a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r7
    6923	05 00 84 ff 00 00 00 00	goto -0x7c <LBB175_16>

000000000000d860 <<core::fmt::Formatter as core::fmt::Write>::write_str>
    6924	79 14 20 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x20)
    6925	79 11 28 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x28)
    6926	79 15 18 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x18)
    6927	bf 41 00 00 00 00 00 00	r1 = r4
    6928	8d 00 00 00 05 00 00 00	callx r5
    6929	95 00 00 00 00 00 00 00	exit

000000000000d890 <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    6930	79 16 28 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x28)
    6931	79 17 20 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x20)
    6932	bf a8 00 00 00 00 00 00	r8 = r10
    6933	07 08 00 00 d0 ff ff ff	r8 += -0x30
    6934	bf 81 00 00 00 00 00 00	r1 = r8
    6935	b7 03 00 00 30 00 00 00	r3 = 0x30
    6936	85 10 00 00 ce 07 00 00	call 0x7ce ; <memcpy>
    6937	bf 71 00 00 00 00 00 00	r1 = r7
    6938	bf 62 00 00 00 00 00 00	r2 = r6
    6939	bf 83 00 00 00 00 00 00	r3 = r8
    6940	85 10 00 00 9d fd ff ff	call -0x263 ; <core::fmt::write>
    6941	95 00 00 00 00 00 00 00	exit

000000000000d8f0 <core::fmt::Formatter::debug_lower_hex>
    6942	61 10 30 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x30)
    6943	57 00 00 00 10 00 00 00	r0 &= 0x10
    6944	77 00 00 00 04 00 00 00	r0 >>= 0x4
    6945	95 00 00 00 00 00 00 00	exit

000000000000d910 <core::fmt::Formatter::debug_upper_hex>
    6946	61 10 30 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x30)
    6947	57 00 00 00 20 00 00 00	r0 &= 0x20
    6948	77 00 00 00 05 00 00 00	r0 >>= 0x5
    6949	95 00 00 00 00 00 00 00	exit

000000000000d930 <<str as core::fmt::Debug>::fmt>
    6950	bf 28 00 00 00 00 00 00	r8 = r2
    6951	bf 16 00 00 00 00 00 00	r6 = r1
    6952	79 37 20 00 00 00 00 00	r7 = *(u64 *)(r3 + 0x20)
    6953	79 31 28 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x28)
    6954	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6955	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6956	bf 71 00 00 00 00 00 00	r1 = r7
    6957	b7 02 00 00 22 00 00 00	r2 = 0x22
    6958	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    6959	8d 00 00 00 03 00 00 00	callx r3
    6960	b7 01 00 00 01 00 00 00	r1 = 0x1
    6961	55 00 37 01 00 00 00 00	if r0 != 0x0 goto +0x137 <LBB201_61>
    6962	b7 01 00 00 00 00 00 00	r1 = 0x0
    6963	15 08 26 01 00 00 00 00	if r8 == 0x0 goto +0x126 <LBB201_12>
    6964	bf 61 00 00 00 00 00 00	r1 = r6
    6965	7b 8a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r8
    6966	0f 81 00 00 00 00 00 00	r1 += r8
    6967	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    6968	b7 01 00 00 00 00 00 00	r1 = 0x0
    6969	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6970	bf 68 00 00 00 00 00 00	r8 = r6
    6971	bf 60 00 00 00 00 00 00	r0 = r6
    6972	b7 01 00 00 00 00 00 00	r1 = 0x0
    6973	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6974	7b 8a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r8

000000000000d9f8 <LBB201_3>
    6975	bf 01 00 00 00 00 00 00	r1 = r0
    6976	71 13 00 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x0)
    6977	bf 32 00 00 00 00 00 00	r2 = r3
    6978	67 02 00 00 38 00 00 00	r2 <<= 0x38
    6979	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    6980	65 02 2b 00 ff ff ff ff	if r2 s> -0x1 goto +0x2b <LBB201_13>
    6981	bf 16 00 00 00 00 00 00	r6 = r1
    6982	07 06 00 00 02 00 00 00	r6 += 0x2
    6983	71 19 01 00 00 00 00 00	r9 = *(u8 *)(r1 + 0x1)
    6984	57 09 00 00 3f 00 00 00	r9 &= 0x3f
    6985	bf 34 00 00 00 00 00 00	r4 = r3
    6986	57 04 00 00 1f 00 00 00	r4 &= 0x1f
    6987	bf 42 00 00 00 00 00 00	r2 = r4
    6988	67 02 00 00 06 00 00 00	r2 <<= 0x6
    6989	4f 92 00 00 00 00 00 00	r2 |= r9
    6990	25 03 01 00 df 00 00 00	if r3 > 0xdf goto +0x1 <LBB201_5>
    6991	05 00 23 00 00 00 00 00	goto +0x23 <LBB201_14>

000000000000da80 <LBB201_5>
    6992	67 09 00 00 06 00 00 00	r9 <<= 0x6
    6993	71 15 02 00 00 00 00 00	r5 = *(u8 *)(r1 + 0x2)
    6994	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    6995	4f 59 00 00 00 00 00 00	r9 |= r5
    6996	bf 16 00 00 00 00 00 00	r6 = r1
    6997	07 06 00 00 03 00 00 00	r6 += 0x3
    6998	bf 45 00 00 00 00 00 00	r5 = r4
    6999	67 05 00 00 0c 00 00 00	r5 <<= 0xc
    7000	bf 92 00 00 00 00 00 00	r2 = r9
    7001	4f 52 00 00 00 00 00 00	r2 |= r5
    7002	b7 05 00 00 f0 00 00 00	r5 = 0xf0
    7003	2d 35 17 00 00 00 00 00	if r5 > r3 goto +0x17 <LBB201_14>
    7004	67 09 00 00 06 00 00 00	r9 <<= 0x6
    7005	71 13 03 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x3)
    7006	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    7007	4f 39 00 00 00 00 00 00	r9 |= r3
    7008	67 04 00 00 12 00 00 00	r4 <<= 0x12
    7009	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    7010	4f 49 00 00 00 00 00 00	r9 |= r4
    7011	07 01 00 00 04 00 00 00	r1 += 0x4
    7012	bf 16 00 00 00 00 00 00	r6 = r1
    7013	bf 92 00 00 00 00 00 00	r2 = r9
    7014	55 09 0c 00 00 00 11 00	if r9 != 0x110000 goto +0xc <LBB201_14>

000000000000db38 <LBB201_7>
    7015	b7 01 00 00 00 00 00 00	r1 = 0x0
    7016	bf 86 00 00 00 00 00 00	r6 = r8
    7017	79 a8 a8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x58)
    7018	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7019	15 03 ee 00 00 00 00 00	if r3 == 0x0 goto +0xee <LBB201_12>
    7020	2d 38 df 00 00 00 00 00	if r8 > r3 goto +0xdf <LBB201_10>
    7021	bf 31 00 00 00 00 00 00	r1 = r3
    7022	1d 83 eb 00 00 00 00 00	if r3 == r8 goto +0xeb <LBB201_12>
    7023	05 00 e3 00 00 00 00 00	goto +0xe3 <LBB201_11>

000000000000db80 <LBB201_13>
    7024	07 01 00 00 01 00 00 00	r1 += 0x1
    7025	bf 16 00 00 00 00 00 00	r6 = r1
    7026	bf 32 00 00 00 00 00 00	r2 = r3

000000000000db98 <LBB201_14>
    7027	7b 6a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r6
    7028	7b 0a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r0
    7029	bf a1 00 00 00 00 00 00	r1 = r10
    7030	07 01 00 00 e8 ff ff ff	r1 += -0x18
    7031	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    7032	b7 03 00 00 01 00 01 00	r3 = 0x10001
    7033	85 10 00 00 b6 fb ff ff	call -0x44a ; <core::char::methods::<impl char>::escape_debug_ext>
    7034	61 a6 e8 ff 00 00 00 00	r6 = *(u32 *)(r10 - 0x18)
    7035	65 06 0a 00 01 00 00 00	if r6 s> 0x1 goto +0xa <LBB201_17>
    7036	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7037	15 06 1d 00 00 00 00 00	if r6 == 0x0 goto +0x1d <LBB201_29>

000000000000dbf0 <LBB201_16>
    7038	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    7039	1f 13 00 00 00 00 00 00	r3 -= r1
    7040	79 a0 b8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x48)
    7041	0f 03 00 00 00 00 00 00	r3 += r0
    7042	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    7043	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    7044	1d 10 e2 ff 00 00 00 00	if r0 == r1 goto -0x1e <LBB201_7>
    7045	05 00 b9 ff 00 00 00 00	goto -0x47 <LBB201_3>

000000000000dc30 <LBB201_17>
    7046	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7047	15 06 13 00 02 00 00 00	if r6 == 0x2 goto +0x13 <LBB201_29>
    7048	71 a2 fc ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x4)
    7049	65 02 05 00 02 00 00 00	if r2 s> 0x2 goto +0x5 <LBB201_22>
    7050	b7 01 00 00 00 00 00 00	r1 = 0x0
    7051	15 02 0c 00 00 00 00 00	if r2 == 0x0 goto +0xc <LBB201_28>
    7052	15 02 06 00 01 00 00 00	if r2 == 0x1 goto +0x6 <LBB201_25>
    7053	b7 01 00 00 02 00 00 00	r1 = 0x2
    7054	05 00 09 00 00 00 00 00	goto +0x9 <LBB201_28>

000000000000dc78 <LBB201_22>
    7055	15 02 05 00 03 00 00 00	if r2 == 0x3 goto +0x5 <LBB201_26>
    7056	15 02 06 00 04 00 00 00	if r2 == 0x4 goto +0x6 <LBB201_27>
    7057	b7 01 00 00 05 00 00 00	r1 = 0x5
    7058	05 00 05 00 00 00 00 00	goto +0x5 <LBB201_28>

000000000000dc98 <LBB201_25>
    7059	b7 01 00 00 01 00 00 00	r1 = 0x1
    7060	05 00 03 00 00 00 00 00	goto +0x3 <LBB201_28>

000000000000dca8 <LBB201_26>
    7061	b7 01 00 00 03 00 00 00	r1 = 0x3
    7062	05 00 01 00 00 00 00 00	goto +0x1 <LBB201_28>

000000000000dcb8 <LBB201_27>
    7063	b7 01 00 00 04 00 00 00	r1 = 0x4

000000000000dcc0 <LBB201_28>
    7064	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    7065	0f 21 00 00 00 00 00 00	r1 += r2
    7066	15 01 e3 ff 01 00 00 00	if r1 == 0x1 goto -0x1d <LBB201_16>

000000000000dcd8 <LBB201_29>
    7067	79 a5 a8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x58)
    7068	79 a0 d8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x28)
    7069	2d 30 5f 00 00 00 00 00	if r0 > r3 goto +0x5f <LBB201_38>
    7070	15 00 0a 00 00 00 00 00	if r0 == 0x0 goto +0xa <LBB201_34>
    7071	2d 05 02 00 00 00 00 00	if r5 > r0 goto +0x2 <LBB201_33>
    7072	1d 50 08 00 00 00 00 00	if r0 == r5 goto +0x8 <LBB201_34>
    7073	05 00 5b 00 00 00 00 00	goto +0x5b <LBB201_38>

000000000000dd10 <LBB201_33>
    7074	bf 81 00 00 00 00 00 00	r1 = r8
    7075	0f 01 00 00 00 00 00 00	r1 += r0
    7076	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    7077	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7078	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7079	b7 02 00 00 c0 ff ff ff	r2 = -0x40
    7080	6d 12 54 00 00 00 00 00	if r2 s> r1 goto +0x54 <LBB201_38>

000000000000dd48 <LBB201_34>
    7081	15 03 03 00 00 00 00 00	if r3 == 0x0 goto +0x3 <LBB201_39>
    7082	2d 35 4c 00 00 00 00 00	if r5 > r3 goto +0x4c <LBB201_37>
    7083	1d 53 01 00 00 00 00 00	if r3 == r5 goto +0x1 <LBB201_39>
    7084	05 00 50 00 00 00 00 00	goto +0x50 <LBB201_38>

000000000000dd68 <LBB201_39>
    7085	0f 08 00 00 00 00 00 00	r8 += r0
    7086	1f 03 00 00 00 00 00 00	r3 -= r0
    7087	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    7088	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    7089	bf 71 00 00 00 00 00 00	r1 = r7
    7090	bf 82 00 00 00 00 00 00	r2 = r8
    7091	8d 00 00 00 04 00 00 00	callx r4
    7092	55 00 57 00 00 00 00 00	if r0 != 0x0 goto +0x57 <LBB201_60>
    7093	71 a9 fc ff 00 00 00 00	r9 = *(u8 *)(r10 - 0x4)
    7094	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x8)
    7095	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7096	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    7097	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x14)
    7098	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7099	15 01 52 00 00 00 11 00	if r1 == 0x110000 goto +0x52 <LBB201_42>

000000000000dde0 <LBB201_41>
    7100	bf 81 00 00 00 00 00 00	r1 = r8
    7101	67 06 00 00 20 00 00 00	r6 <<= 0x20
    7102	bf 63 00 00 00 00 00 00	r3 = r6
    7103	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7104	65 03 01 00 01 00 00 00	if r3 s> 0x1 goto +0x1 <LBB201_64>
    7105	05 00 0e 00 00 00 00 00	goto +0xe <LBB201_62>

000000000000de10 <LBB201_64>
    7106	b7 06 00 00 01 00 00 00	r6 = 0x1
    7107	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7108	bf 18 00 00 00 00 00 00	r8 = r1
    7109	15 03 0f 00 02 00 00 00	if r3 == 0x2 goto +0xf <LBB201_84>
    7110	b7 06 00 00 03 00 00 00	r6 = 0x3
    7111	bf 93 00 00 00 00 00 00	r3 = r9
    7112	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7113	65 03 10 00 02 00 00 00	if r3 s> 0x2 goto +0x10 <LBB201_69>
    7114	b7 09 00 00 00 00 00 00	r9 = 0x0
    7115	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7116	bf 18 00 00 00 00 00 00	r8 = r1
    7117	15 03 07 00 01 00 00 00	if r3 == 0x1 goto +0x7 <LBB201_84>
    7118	15 03 0f 00 02 00 00 00	if r3 == 0x2 goto +0xf <LBB201_72>
    7119	05 00 46 00 00 00 00 00	goto +0x46 <LBB201_44>

000000000000de80 <LBB201_62>
    7120	15 03 01 00 01 00 00 00	if r3 == 0x1 goto +0x1 <LBB201_77>
    7121	05 00 44 00 00 00 00 00	goto +0x44 <LBB201_44>

000000000000de90 <LBB201_77>
    7122	b7 06 00 00 00 00 00 00	r6 = 0x0
    7123	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)

000000000000dea0 <LBB201_83>
    7124	bf 18 00 00 00 00 00 00	r8 = r1

000000000000dea8 <LBB201_84>
    7125	bf 71 00 00 00 00 00 00	r1 = r7
    7126	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7127	8d 00 00 00 03 00 00 00	callx r3
    7128	55 00 33 00 00 00 00 00	if r0 != 0x0 goto +0x33 <LBB201_60>
    7129	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB201_41>

000000000000ded0 <LBB201_69>
    7130	15 03 14 00 03 00 00 00	if r3 == 0x3 goto +0x14 <LBB201_82>
    7131	15 03 16 00 04 00 00 00	if r3 == 0x4 goto +0x16 <LBB201_75>
    7132	b7 09 00 00 04 00 00 00	r9 = 0x4
    7133	05 00 f6 ff 00 00 00 00	goto -0xa <LBB201_83>

000000000000def0 <LBB201_72>
    7134	bf 12 00 00 00 00 00 00	r2 = r1
    7135	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7136	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7137	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    7138	7f 23 00 00 00 00 00 00	r3 >>= r2
    7139	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7140	b7 02 00 00 30 00 00 00	r2 = 0x30
    7141	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7142	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB201_74>
    7143	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000df40 <LBB201_74>
    7144	0f 32 00 00 00 00 00 00	r2 += r3
    7145	b7 08 00 00 00 00 00 00	r8 = 0x0
    7146	b7 09 00 00 01 00 00 00	r9 = 0x1
    7147	15 01 e9 ff 00 00 00 00	if r1 == 0x0 goto -0x17 <LBB201_84>
    7148	b7 09 00 00 02 00 00 00	r9 = 0x2
    7149	07 01 00 00 ff ff ff ff	r1 += -0x1
    7150	05 00 e5 ff 00 00 00 00	goto -0x1b <LBB201_83>

000000000000df78 <LBB201_82>
    7151	b7 09 00 00 02 00 00 00	r9 = 0x2
    7152	b7 02 00 00 7b 00 00 00	r2 = 0x7b
    7153	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB201_83>

000000000000df90 <LBB201_75>
    7154	b7 09 00 00 03 00 00 00	r9 = 0x3
    7155	b7 02 00 00 75 00 00 00	r2 = 0x75
    7156	bf 18 00 00 00 00 00 00	r8 = r1
    7157	b7 06 00 00 03 00 00 00	r6 = 0x3
    7158	05 00 de ff 00 00 00 00	goto -0x22 <LBB201_84>

000000000000dfb8 <LBB201_37>
    7159	bf 81 00 00 00 00 00 00	r1 = r8
    7160	0f 31 00 00 00 00 00 00	r1 += r3
    7161	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    7162	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7163	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7164	65 01 b0 ff bf ff ff ff	if r1 s> -0x41 goto -0x50 <LBB201_39>

000000000000dfe8 <LBB201_38>
    7165	bf 81 00 00 00 00 00 00	r1 = r8
    7166	bf 52 00 00 00 00 00 00	r2 = r5
    7167	bf 34 00 00 00 00 00 00	r4 = r3
    7168	bf 03 00 00 00 00 00 00	r3 = r0
    7169	18 05 00 00 e8 3f 01 00 00 00 00 00 00 00 00 00	r5 = 0x13fe8 ll
    7171	85 10 00 00 4f 01 00 00	call 0x14f ; <core::str::slice_error_fail>
    7172	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e028 <LBB201_53>
    7173	b7 09 00 00 02 00 00 00	r9 = 0x2
    7174	b7 02 00 00 7b 00 00 00	r2 = 0x7b

000000000000e038 <LBB201_58>
    7175	bf 18 00 00 00 00 00 00	r8 = r1

000000000000e040 <LBB201_59>
    7176	bf 71 00 00 00 00 00 00	r1 = r7
    7177	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7178	8d 00 00 00 03 00 00 00	callx r3
    7179	15 00 02 00 00 00 00 00	if r0 == 0x0 goto +0x2 <LBB201_42>

000000000000e060 <LBB201_60>
    7180	b7 01 00 00 01 00 00 00	r1 = 0x1
    7181	05 00 5b 00 00 00 00 00	goto +0x5b <LBB201_61>

000000000000e070 <LBB201_42>
    7182	bf 81 00 00 00 00 00 00	r1 = r8
    7183	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7184	67 06 00 00 20 00 00 00	r6 <<= 0x20
    7185	bf 63 00 00 00 00 00 00	r3 = r6
    7186	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7187	b7 06 00 00 01 00 00 00	r6 = 0x1
    7188	15 03 f3 ff 02 00 00 00	if r3 == 0x2 goto -0xd <LBB201_59>
    7189	15 03 08 00 03 00 00 00	if r3 == 0x3 goto +0x8 <LBB201_45>

000000000000e0b0 <LBB201_44>
    7190	79 a5 a8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x58)
    7191	79 a8 90 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x70)
    7192	b7 00 00 00 01 00 00 00	r0 = 0x1
    7193	b7 01 00 00 80 00 00 00	r1 = 0x80
    7194	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7195	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
    7196	2d 21 2c 00 00 00 00 00	if r1 > r2 goto +0x2c <LBB201_81>
    7197	05 00 24 00 00 00 00 00	goto +0x24 <LBB201_78>

000000000000e0f0 <LBB201_45>
    7198	b7 06 00 00 03 00 00 00	r6 = 0x3
    7199	bf 93 00 00 00 00 00 00	r3 = r9
    7200	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7201	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB201_49>
    7202	b7 09 00 00 00 00 00 00	r9 = 0x0
    7203	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7204	bf 18 00 00 00 00 00 00	r8 = r1
    7205	15 03 e2 ff 01 00 00 00	if r3 == 0x1 goto -0x1e <LBB201_59>
    7206	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB201_54>
    7207	05 00 ee ff 00 00 00 00	goto -0x12 <LBB201_44>

000000000000e140 <LBB201_49>
    7208	15 03 dc ff 03 00 00 00	if r3 == 0x3 goto -0x24 <LBB201_53>
    7209	15 03 13 00 04 00 00 00	if r3 == 0x4 goto +0x13 <LBB201_52>
    7210	b7 09 00 00 04 00 00 00	r9 = 0x4
    7211	05 00 db ff 00 00 00 00	goto -0x25 <LBB201_58>

000000000000e160 <LBB201_54>
    7212	bf 12 00 00 00 00 00 00	r2 = r1
    7213	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7214	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7215	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    7216	7f 23 00 00 00 00 00 00	r3 >>= r2
    7217	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7218	b7 02 00 00 30 00 00 00	r2 = 0x30
    7219	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7220	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB201_56>
    7221	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e1b0 <LBB201_56>
    7222	0f 32 00 00 00 00 00 00	r2 += r3
    7223	b7 08 00 00 00 00 00 00	r8 = 0x0
    7224	b7 09 00 00 01 00 00 00	r9 = 0x1
    7225	15 01 ce ff 00 00 00 00	if r1 == 0x0 goto -0x32 <LBB201_59>
    7226	b7 09 00 00 02 00 00 00	r9 = 0x2
    7227	07 01 00 00 ff ff ff ff	r1 += -0x1
    7228	05 00 ca ff 00 00 00 00	goto -0x36 <LBB201_58>

000000000000e1e8 <LBB201_52>
    7229	b7 09 00 00 03 00 00 00	r9 = 0x3
    7230	b7 02 00 00 75 00 00 00	r2 = 0x75
    7231	bf 18 00 00 00 00 00 00	r8 = r1
    7232	b7 06 00 00 03 00 00 00	r6 = 0x3
    7233	05 00 c6 ff 00 00 00 00	goto -0x3a <LBB201_59>

000000000000e210 <LBB201_78>
    7234	b7 00 00 00 02 00 00 00	r0 = 0x2
    7235	b7 01 00 00 00 08 00 00	r1 = 0x800
    7236	2d 21 04 00 00 00 00 00	if r1 > r2 goto +0x4 <LBB201_81>
    7237	b7 00 00 00 03 00 00 00	r0 = 0x3
    7238	b7 01 00 00 00 00 01 00	r1 = 0x10000
    7239	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB201_81>
    7240	b7 00 00 00 04 00 00 00	r0 = 0x4

000000000000e248 <LBB201_81>
    7241	0f 30 00 00 00 00 00 00	r0 += r3
    7242	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r0
    7243	05 00 32 ff 00 00 00 00	goto -0xce <LBB201_16>

000000000000e260 <LBB201_10>
    7244	bf 61 00 00 00 00 00 00	r1 = r6
    7245	0f 31 00 00 00 00 00 00	r1 += r3
    7246	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    7247	67 02 00 00 38 00 00 00	r2 <<= 0x38
    7248	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    7249	bf 31 00 00 00 00 00 00	r1 = r3
    7250	65 02 07 00 bf ff ff ff	if r2 s> -0x41 goto +0x7 <LBB201_12>

000000000000e298 <LBB201_11>
    7251	bf 61 00 00 00 00 00 00	r1 = r6
    7252	bf 82 00 00 00 00 00 00	r2 = r8
    7253	bf 84 00 00 00 00 00 00	r4 = r8
    7254	18 05 00 00 00 40 01 00 00 00 00 00 00 00 00 00	r5 = 0x14000 ll
    7256	85 10 00 00 fa 00 00 00	call 0xfa ; <core::str::slice_error_fail>
    7257	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e2d0 <LBB201_12>
    7258	0f 16 00 00 00 00 00 00	r6 += r1
    7259	1f 18 00 00 00 00 00 00	r8 -= r1
    7260	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    7261	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    7262	bf 71 00 00 00 00 00 00	r1 = r7
    7263	bf 62 00 00 00 00 00 00	r2 = r6
    7264	bf 83 00 00 00 00 00 00	r3 = r8
    7265	8d 00 00 00 04 00 00 00	callx r4
    7266	b7 01 00 00 01 00 00 00	r1 = 0x1
    7267	55 00 05 00 00 00 00 00	if r0 != 0x0 goto +0x5 <LBB201_61>
    7268	bf 71 00 00 00 00 00 00	r1 = r7
    7269	b7 02 00 00 22 00 00 00	r2 = 0x22
    7270	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7271	8d 00 00 00 03 00 00 00	callx r3
    7272	bf 01 00 00 00 00 00 00	r1 = r0

000000000000e348 <LBB201_61>
    7273	bf 10 00 00 00 00 00 00	r0 = r1
    7274	95 00 00 00 00 00 00 00	exit

000000000000e358 <<str as core::fmt::Display>::fmt>
    7275	bf 24 00 00 00 00 00 00	r4 = r2
    7276	bf 12 00 00 00 00 00 00	r2 = r1
    7277	bf 31 00 00 00 00 00 00	r1 = r3
    7278	bf 43 00 00 00 00 00 00	r3 = r4
    7279	85 10 00 00 d6 fd ff ff	call -0x22a ; <core::fmt::Formatter::pad>
    7280	95 00 00 00 00 00 00 00	exit

000000000000e388 <<char as core::fmt::Debug>::fmt>
    7281	bf 18 00 00 00 00 00 00	r8 = r1
    7282	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    7283	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    7284	79 23 20 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x20)
    7285	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7286	b7 02 00 00 27 00 00 00	r2 = 0x27
    7287	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    7288	8d 00 00 00 03 00 00 00	callx r3
    7289	b7 07 00 00 01 00 00 00	r7 = 0x1
    7290	55 00 56 00 00 00 00 00	if r0 != 0x0 goto +0x56 <LBB203_23>
    7291	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0x0)
    7292	bf a1 00 00 00 00 00 00	r1 = r10
    7293	07 01 00 00 e8 ff ff ff	r1 += -0x18
    7294	b7 03 00 00 01 01 00 00	r3 = 0x101
    7295	85 10 00 00 b0 fa ff ff	call -0x550 ; <core::char::methods::<impl char>::escape_debug_ext>
    7296	71 a9 fc ff 00 00 00 00	r9 = *(u8 *)(r10 - 0x4)
    7297	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x8)
    7298	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7299	79 a6 f0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x10)
    7300	61 a8 e8 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x18)
    7301	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x14)
    7302	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7303	15 01 02 00 00 00 11 00	if r1 == 0x110000 goto +0x2 <LBB203_4>
    7304	b7 07 00 00 01 00 00 00	r7 = 0x1
    7305	05 00 10 00 00 00 00 00	goto +0x10 <LBB203_3>

000000000000e450 <LBB203_4>
    7306	b7 07 00 00 01 00 00 00	r7 = 0x1
    7307	05 00 47 00 00 00 00 00	goto +0x47 <LBB203_5>

000000000000e460 <LBB203_24>
    7308	15 03 06 00 01 00 00 00	if r3 == 0x1 goto +0x6 <LBB203_39>

000000000000e468 <LBB203_25>
    7309	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7310	b7 02 00 00 27 00 00 00	r2 = 0x27
    7311	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7312	8d 00 00 00 03 00 00 00	callx r3
    7313	bf 07 00 00 00 00 00 00	r7 = r0
    7314	05 00 3e 00 00 00 00 00	goto +0x3e <LBB203_23>

000000000000e498 <LBB203_39>
    7315	b7 08 00 00 00 00 00 00	r8 = 0x0
    7316	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)

000000000000e4a8 <LBB203_41>
    7317	bf 16 00 00 00 00 00 00	r6 = r1

000000000000e4b0 <LBB203_42>
    7318	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7319	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7320	8d 00 00 00 03 00 00 00	callx r3
    7321	55 00 37 00 00 00 00 00	if r0 != 0x0 goto +0x37 <LBB203_23>

000000000000e4d0 <LBB203_3>
    7322	bf 61 00 00 00 00 00 00	r1 = r6
    7323	67 08 00 00 20 00 00 00	r8 <<= 0x20
    7324	bf 83 00 00 00 00 00 00	r3 = r8
    7325	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7326	65 03 01 00 01 00 00 00	if r3 s> 0x1 goto +0x1 <LBB203_26>
    7327	05 00 ec ff 00 00 00 00	goto -0x14 <LBB203_24>

000000000000e500 <LBB203_26>
    7328	b7 08 00 00 01 00 00 00	r8 = 0x1
    7329	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7330	bf 16 00 00 00 00 00 00	r6 = r1
    7331	15 03 f2 ff 02 00 00 00	if r3 == 0x2 goto -0xe <LBB203_42>
    7332	b7 08 00 00 03 00 00 00	r8 = 0x3
    7333	bf 93 00 00 00 00 00 00	r3 = r9
    7334	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7335	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB203_31>
    7336	b7 09 00 00 00 00 00 00	r9 = 0x0
    7337	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7338	bf 16 00 00 00 00 00 00	r6 = r1
    7339	15 03 ea ff 01 00 00 00	if r3 == 0x1 goto -0x16 <LBB203_42>
    7340	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB203_34>
    7341	05 00 df ff 00 00 00 00	goto -0x21 <LBB203_25>

000000000000e570 <LBB203_31>
    7342	15 03 14 00 03 00 00 00	if r3 == 0x3 goto +0x14 <LBB203_40>
    7343	15 03 16 00 04 00 00 00	if r3 == 0x4 goto +0x16 <LBB203_37>
    7344	b7 09 00 00 04 00 00 00	r9 = 0x4
    7345	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB203_41>

000000000000e590 <LBB203_34>
    7346	bf 12 00 00 00 00 00 00	r2 = r1
    7347	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7348	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7349	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    7350	7f 23 00 00 00 00 00 00	r3 >>= r2
    7351	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7352	b7 02 00 00 30 00 00 00	r2 = 0x30
    7353	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7354	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB203_36>
    7355	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e5e0 <LBB203_36>
    7356	0f 32 00 00 00 00 00 00	r2 += r3
    7357	b7 06 00 00 00 00 00 00	r6 = 0x0
    7358	b7 09 00 00 01 00 00 00	r9 = 0x1
    7359	15 01 d6 ff 00 00 00 00	if r1 == 0x0 goto -0x2a <LBB203_42>
    7360	b7 09 00 00 02 00 00 00	r9 = 0x2
    7361	07 01 00 00 ff ff ff ff	r1 += -0x1
    7362	05 00 d2 ff 00 00 00 00	goto -0x2e <LBB203_41>

000000000000e618 <LBB203_40>
    7363	b7 09 00 00 02 00 00 00	r9 = 0x2
    7364	b7 02 00 00 7b 00 00 00	r2 = 0x7b
    7365	05 00 cf ff 00 00 00 00	goto -0x31 <LBB203_41>

000000000000e630 <LBB203_37>
    7366	b7 08 00 00 03 00 00 00	r8 = 0x3
    7367	b7 02 00 00 75 00 00 00	r2 = 0x75
    7368	b7 09 00 00 03 00 00 00	r9 = 0x3
    7369	05 00 cb ff 00 00 00 00	goto -0x35 <LBB203_41>

000000000000e650 <LBB203_16>
    7370	b7 09 00 00 02 00 00 00	r9 = 0x2
    7371	b7 02 00 00 7b 00 00 00	r2 = 0x7b

000000000000e660 <LBB203_21>
    7372	bf 16 00 00 00 00 00 00	r6 = r1

000000000000e668 <LBB203_22>
    7373	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7374	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7375	8d 00 00 00 03 00 00 00	callx r3
    7376	15 00 02 00 00 00 00 00	if r0 == 0x0 goto +0x2 <LBB203_5>

000000000000e688 <LBB203_23>
    7377	bf 70 00 00 00 00 00 00	r0 = r7
    7378	95 00 00 00 00 00 00 00	exit

000000000000e698 <LBB203_5>
    7379	bf 61 00 00 00 00 00 00	r1 = r6
    7380	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7381	67 08 00 00 20 00 00 00	r8 <<= 0x20
    7382	bf 83 00 00 00 00 00 00	r3 = r8
    7383	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7384	b7 08 00 00 01 00 00 00	r8 = 0x1
    7385	15 03 f3 ff 02 00 00 00	if r3 == 0x2 goto -0xd <LBB203_22>
    7386	15 03 01 00 03 00 00 00	if r3 == 0x3 goto +0x1 <LBB203_8>
    7387	05 00 b1 ff 00 00 00 00	goto -0x4f <LBB203_25>

000000000000e6e0 <LBB203_8>
    7388	b7 08 00 00 03 00 00 00	r8 = 0x3
    7389	bf 93 00 00 00 00 00 00	r3 = r9
    7390	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7391	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB203_12>
    7392	b7 09 00 00 00 00 00 00	r9 = 0x0
    7393	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7394	bf 16 00 00 00 00 00 00	r6 = r1
    7395	15 03 e9 ff 01 00 00 00	if r3 == 0x1 goto -0x17 <LBB203_22>
    7396	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB203_17>
    7397	05 00 a7 ff 00 00 00 00	goto -0x59 <LBB203_25>

000000000000e730 <LBB203_12>
    7398	15 03 e3 ff 03 00 00 00	if r3 == 0x3 goto -0x1d <LBB203_16>
    7399	15 03 13 00 04 00 00 00	if r3 == 0x4 goto +0x13 <LBB203_15>
    7400	b7 09 00 00 04 00 00 00	r9 = 0x4
    7401	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB203_21>

000000000000e750 <LBB203_17>
    7402	bf 12 00 00 00 00 00 00	r2 = r1
    7403	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7404	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7405	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    7406	7f 23 00 00 00 00 00 00	r3 >>= r2
    7407	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7408	b7 02 00 00 30 00 00 00	r2 = 0x30
    7409	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7410	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB203_19>
    7411	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e7a0 <LBB203_19>
    7412	0f 32 00 00 00 00 00 00	r2 += r3
    7413	b7 06 00 00 00 00 00 00	r6 = 0x0
    7414	b7 09 00 00 01 00 00 00	r9 = 0x1
    7415	15 01 d5 ff 00 00 00 00	if r1 == 0x0 goto -0x2b <LBB203_22>
    7416	b7 09 00 00 02 00 00 00	r9 = 0x2
    7417	07 01 00 00 ff ff ff ff	r1 += -0x1
    7418	05 00 d1 ff 00 00 00 00	goto -0x2f <LBB203_21>

000000000000e7d8 <LBB203_15>
    7419	b7 08 00 00 03 00 00 00	r8 = 0x3
    7420	b7 02 00 00 75 00 00 00	r2 = 0x75
    7421	b7 09 00 00 03 00 00 00	r9 = 0x3
    7422	05 00 cd ff 00 00 00 00	goto -0x33 <LBB203_21>

000000000000e7f8 <core::slice::index::slice_start_index_len_fail>
    7423	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7424	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7425	bf a1 00 00 00 00 00 00	r1 = r10
    7426	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7427	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7428	b7 01 00 00 00 00 00 00	r1 = 0x0
    7429	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7430	b7 01 00 00 02 00 00 00	r1 = 0x2
    7431	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7432	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7433	18 01 00 00 18 40 01 00 00 00 00 00 00 00 00 00	r1 = 0x14018 ll
    7435	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7436	bf a1 00 00 00 00 00 00	r1 = r10
    7437	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7438	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7439	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    7441	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7442	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7443	bf a1 00 00 00 00 00 00	r1 = r10
    7444	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7445	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7446	bf a1 00 00 00 00 00 00	r1 = r10
    7447	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7448	bf 32 00 00 00 00 00 00	r2 = r3
    7449	85 10 00 00 69 fb ff ff	call -0x497 ; <core::panicking::panic_fmt>
    7450	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e8d8 <core::slice::index::slice_end_index_len_fail>
    7451	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7452	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7453	bf a1 00 00 00 00 00 00	r1 = r10
    7454	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7455	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7456	b7 01 00 00 00 00 00 00	r1 = 0x0
    7457	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7458	b7 01 00 00 02 00 00 00	r1 = 0x2
    7459	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7460	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7461	18 01 00 00 38 40 01 00 00 00 00 00 00 00 00 00	r1 = 0x14038 ll
    7463	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7464	bf a1 00 00 00 00 00 00	r1 = r10
    7465	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7466	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7467	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    7469	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7470	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7471	bf a1 00 00 00 00 00 00	r1 = r10
    7472	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7473	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7474	bf a1 00 00 00 00 00 00	r1 = r10
    7475	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7476	bf 32 00 00 00 00 00 00	r2 = r3
    7477	85 10 00 00 4d fb ff ff	call -0x4b3 ; <core::panicking::panic_fmt>
    7478	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e9b8 <core::slice::index::slice_index_order_fail>
    7479	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7480	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7481	bf a1 00 00 00 00 00 00	r1 = r10
    7482	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7483	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7484	b7 01 00 00 00 00 00 00	r1 = 0x0
    7485	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7486	b7 01 00 00 02 00 00 00	r1 = 0x2
    7487	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7488	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7489	18 01 00 00 58 40 01 00 00 00 00 00 00 00 00 00	r1 = 0x14058 ll
    7491	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7492	bf a1 00 00 00 00 00 00	r1 = r10
    7493	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7494	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7495	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    7497	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7498	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7499	bf a1 00 00 00 00 00 00	r1 = r10
    7500	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7501	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7502	bf a1 00 00 00 00 00 00	r1 = r10
    7503	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7504	bf 32 00 00 00 00 00 00	r2 = r3
    7505	85 10 00 00 31 fb ff ff	call -0x4cf ; <core::panicking::panic_fmt>
    7506	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ea98 <core::str::slice_error_fail>
    7507	7b 4a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r4
    7508	7b 3a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r3
    7509	18 06 00 00 a8 2f 01 00 00 00 00 00 00 00 00 00	r6 = 0x12fa8 ll
    7511	b7 07 00 00 00 00 00 00	r7 = 0x0
    7512	b7 00 00 00 01 01 00 00	r0 = 0x101
    7513	bf 29 00 00 00 00 00 00	r9 = r2
    7514	2d 20 09 00 00 00 00 00	if r0 > r2 goto +0x9 <LBB242_7>
    7515	b7 00 00 00 00 01 00 00	r0 = 0x100
    7516	b7 08 00 00 c0 ff ff ff	r8 = -0x40
    7517	b7 09 00 00 00 00 00 00	r9 = 0x0
    7518	b7 07 00 00 05 00 00 00	r7 = 0x5
    7519	05 00 0c 00 00 00 00 00	goto +0xc <LBB242_2>

000000000000eb00 <LBB242_6>
    7520	18 06 00 00 80 31 01 00 00 00 00 00 00 00 00 00	r6 = 0x13180 ll
    7522	07 00 00 00 ff ff ff ff	r0 += -0x1
    7523	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB242_2>

000000000000eb20 <LBB242_7>
    7524	7b 9a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r9
    7525	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    7526	7b 7a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r7
    7527	7b 6a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r6
    7528	2d 23 16 00 00 00 00 00	if r3 > r2 goto +0x16 <LBB242_10>
    7529	2d 24 15 00 00 00 00 00	if r4 > r2 goto +0x15 <LBB242_10>
    7530	2d 43 32 00 00 00 00 00	if r3 > r4 goto +0x32 <LBB242_37>
    7531	05 00 50 00 00 00 00 00	goto +0x50 <LBB242_14>

000000000000eb60 <LBB242_2>
    7532	bf 16 00 00 00 00 00 00	r6 = r1
    7533	0f 06 00 00 00 00 00 00	r6 += r0
    7534	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    7535	67 06 00 00 38 00 00 00	r6 <<= 0x38
    7536	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    7537	6d 68 ee ff 00 00 00 00	if r8 s> r6 goto -0x12 <LBB242_6>
    7538	18 06 00 00 80 31 01 00 00 00 00 00 00 00 00 00	r6 = 0x13180 ll
    7540	b7 07 00 00 05 00 00 00	r7 = 0x5
    7541	bf 09 00 00 00 00 00 00	r9 = r0
    7542	2d 02 ed ff 00 00 00 00	if r2 > r0 goto -0x13 <LBB242_7>
    7543	bf 29 00 00 00 00 00 00	r9 = r2
    7544	1d 02 eb ff 00 00 00 00	if r2 == r0 goto -0x15 <LBB242_7>
    7545	b7 03 00 00 00 00 00 00	r3 = 0x0
    7546	bf 04 00 00 00 00 00 00	r4 = r0
    7547	18 05 00 00 78 40 01 00 00 00 00 00 00 00 00 00	r5 = 0x14078 ll
    7549	85 10 00 00 d5 ff ff ff	call -0x2b ; <core::str::slice_error_fail>
    7550	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ebf8 <LBB242_10>
    7551	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB242_12>
    7552	bf 43 00 00 00 00 00 00	r3 = r4

000000000000ec08 <LBB242_12>
    7553	7b 3a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r3
    7554	bf a1 00 00 00 00 00 00	r1 = r10
    7555	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7556	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7557	b7 01 00 00 00 00 00 00	r1 = 0x0
    7558	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7559	b7 01 00 00 03 00 00 00	r1 = 0x3
    7560	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7561	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7562	18 01 00 00 90 40 01 00 00 00 00 00 00 00 00 00	r1 = 0x14090 ll
    7564	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7565	bf a1 00 00 00 00 00 00	r1 = r10
    7566	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7567	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7568	18 01 00 00 70 08 01 00 00 00 00 00 00 00 00 00	r1 = 0x10870 ll
    7570	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7571	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7572	bf a1 00 00 00 00 00 00	r1 = r10
    7573	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7574	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7575	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    7577	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7578	bf a1 00 00 00 00 00 00	r1 = r10
    7579	07 01 00 00 70 ff ff ff	r1 += -0x90
    7580	05 00 8e 00 00 00 00 00	goto +0x8e <LBB242_13>

000000000000ece8 <LBB242_37>
    7581	bf a1 00 00 00 00 00 00	r1 = r10
    7582	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7583	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7584	b7 01 00 00 00 00 00 00	r1 = 0x0
    7585	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7586	b7 01 00 00 04 00 00 00	r1 = 0x4
    7587	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7588	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7589	18 01 00 00 c0 40 01 00 00 00 00 00 00 00 00 00	r1 = 0x140c0 ll
    7591	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7592	bf a1 00 00 00 00 00 00	r1 = r10
    7593	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7594	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7595	18 01 00 00 70 08 01 00 00 00 00 00 00 00 00 00	r1 = 0x10870 ll
    7597	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7598	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7599	bf a1 00 00 00 00 00 00	r1 = r10
    7600	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7601	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7602	bf a1 00 00 00 00 00 00	r1 = r10
    7603	07 01 00 00 38 ff ff ff	r1 += -0xc8
    7604	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7605	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    7607	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7608	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7609	bf a1 00 00 00 00 00 00	r1 = r10
    7610	07 01 00 00 30 ff ff ff	r1 += -0xd0
    7611	05 00 6f 00 00 00 00 00	goto +0x6f <LBB242_13>

000000000000ede0 <LBB242_14>
    7612	15 03 0a 00 00 00 00 00	if r3 == 0x0 goto +0xa <LBB242_18>
    7613	2d 32 02 00 00 00 00 00	if r2 > r3 goto +0x2 <LBB242_17>
    7614	1d 32 08 00 00 00 00 00	if r2 == r3 goto +0x8 <LBB242_18>
    7615	05 00 08 00 00 00 00 00	goto +0x8 <LBB242_19>

000000000000ee00 <LBB242_17>
    7616	bf 10 00 00 00 00 00 00	r0 = r1
    7617	0f 30 00 00 00 00 00 00	r0 += r3
    7618	71 00 00 00 00 00 00 00	r0 = *(u8 *)(r0 + 0x0)
    7619	67 00 00 00 38 00 00 00	r0 <<= 0x38
    7620	c7 00 00 00 38 00 00 00	r0 s>>= 0x38
    7621	b7 06 00 00 c0 ff ff ff	r6 = -0x40
    7622	6d 06 01 00 00 00 00 00	if r6 s> r0 goto +0x1 <LBB242_19>

000000000000ee38 <LBB242_18>
    7623	bf 43 00 00 00 00 00 00	r3 = r4

000000000000ee40 <LBB242_19>
    7624	7b 3a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r3
    7625	15 03 0c 00 00 00 00 00	if r3 == 0x0 goto +0xc <LBB242_23>

000000000000ee50 <LBB242_20>
    7626	2d 32 02 00 00 00 00 00	if r2 > r3 goto +0x2 <LBB242_22>
    7627	1d 32 2e 00 00 00 00 00	if r2 == r3 goto +0x2e <LBB242_30>
    7628	05 00 06 00 00 00 00 00	goto +0x6 <LBB242_36>

000000000000ee68 <LBB242_22>
    7629	bf 14 00 00 00 00 00 00	r4 = r1
    7630	0f 34 00 00 00 00 00 00	r4 += r3
    7631	71 44 00 00 00 00 00 00	r4 = *(u8 *)(r4 + 0x0)
    7632	67 04 00 00 38 00 00 00	r4 <<= 0x38
    7633	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
    7634	65 04 04 00 bf ff ff ff	if r4 s> -0x41 goto +0x4 <LBB242_24>

000000000000ee98 <LBB242_36>
    7635	07 03 00 00 ff ff ff ff	r3 += -0x1
    7636	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB242_23>
    7637	05 00 f4 ff 00 00 00 00	goto -0xc <LBB242_20>

000000000000eeb0 <LBB242_23>
    7638	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000eeb8 <LBB242_24>
    7639	1d 23 22 00 00 00 00 00	if r3 == r2 goto +0x22 <LBB242_30>
    7640	0f 31 00 00 00 00 00 00	r1 += r3
    7641	71 10 00 00 00 00 00 00	r0 = *(u8 *)(r1 + 0x0)
    7642	bf 02 00 00 00 00 00 00	r2 = r0
    7643	67 02 00 00 38 00 00 00	r2 <<= 0x38
    7644	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    7645	65 02 22 00 ff ff ff ff	if r2 s> -0x1 goto +0x22 <LBB242_27>
    7646	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x1)
    7647	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    7648	bf 04 00 00 00 00 00 00	r4 = r0
    7649	57 04 00 00 1f 00 00 00	r4 &= 0x1f
    7650	bf 46 00 00 00 00 00 00	r6 = r4
    7651	67 06 00 00 06 00 00 00	r6 <<= 0x6
    7652	4f 26 00 00 00 00 00 00	r6 |= r2
    7653	25 00 01 00 df 00 00 00	if r0 > 0xdf goto +0x1 <LBB242_28>
    7654	05 00 4a 00 00 00 00 00	goto +0x4a <LBB242_31>

000000000000ef38 <LBB242_28>
    7655	67 02 00 00 06 00 00 00	r2 <<= 0x6
    7656	71 16 02 00 00 00 00 00	r6 = *(u8 *)(r1 + 0x2)
    7657	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    7658	4f 62 00 00 00 00 00 00	r2 |= r6
    7659	bf 47 00 00 00 00 00 00	r7 = r4
    7660	67 07 00 00 0c 00 00 00	r7 <<= 0xc
    7661	bf 26 00 00 00 00 00 00	r6 = r2
    7662	4f 76 00 00 00 00 00 00	r6 |= r7
    7663	b7 07 00 00 f0 00 00 00	r7 = 0xf0
    7664	2d 07 40 00 00 00 00 00	if r7 > r0 goto +0x40 <LBB242_31>
    7665	67 02 00 00 06 00 00 00	r2 <<= 0x6
    7666	71 11 03 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x3)
    7667	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    7668	4f 12 00 00 00 00 00 00	r2 |= r1
    7669	67 04 00 00 12 00 00 00	r4 <<= 0x12
    7670	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    7671	4f 42 00 00 00 00 00 00	r2 |= r4
    7672	bf 26 00 00 00 00 00 00	r6 = r2
    7673	55 02 37 00 00 00 11 00	if r2 != 0x110000 goto +0x37 <LBB242_31>

000000000000efd0 <LBB242_30>
    7674	18 01 00 00 b5 2f 01 00 00 00 00 00 00 00 00 00	r1 = 0x12fb5 ll
    7676	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    7677	bf 53 00 00 00 00 00 00	r3 = r5
    7678	85 10 00 00 56 fa ff ff	call -0x5aa ; <core::panicking::panic>
    7679	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f000 <LBB242_27>
    7680	63 0a 6c ff 00 00 00 00	*(u32 *)(r10 - 0x94) = r0
    7681	b7 01 00 00 01 00 00 00	r1 = 0x1

000000000000f010 <LBB242_35>
    7682	7b 3a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r3
    7683	0f 31 00 00 00 00 00 00	r1 += r3
    7684	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r1
    7685	bf a1 00 00 00 00 00 00	r1 = r10
    7686	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7687	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7688	b7 01 00 00 00 00 00 00	r1 = 0x0
    7689	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7690	b7 01 00 00 05 00 00 00	r1 = 0x5
    7691	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7692	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7693	18 01 00 00 00 41 01 00 00 00 00 00 00 00 00 00	r1 = 0x14100 ll
    7695	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7696	bf a1 00 00 00 00 00 00	r1 = r10
    7697	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7698	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7699	18 01 00 00 70 08 01 00 00 00 00 00 00 00 00 00	r1 = 0x10870 ll
    7701	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7702	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7703	bf a1 00 00 00 00 00 00	r1 = r10
    7704	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7705	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7706	18 01 00 00 10 b8 00 00 00 00 00 00 00 00 00 00	r1 = 0xb810 ll
    7708	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7709	bf a1 00 00 00 00 00 00	r1 = r10
    7710	07 01 00 00 70 ff ff ff	r1 += -0x90
    7711	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7712	18 01 00 00 88 e3 00 00 00 00 00 00 00 00 00 00	r1 = 0xe388 ll
    7714	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7715	bf a1 00 00 00 00 00 00	r1 = r10
    7716	07 01 00 00 6c ff ff ff	r1 += -0x94
    7717	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7718	18 01 00 00 88 04 01 00 00 00 00 00 00 00 00 00	r1 = 0x10488 ll
    7720	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7721	bf a1 00 00 00 00 00 00	r1 = r10
    7722	07 01 00 00 60 ff ff ff	r1 += -0xa0

000000000000f158 <LBB242_13>
    7723	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7724	bf a1 00 00 00 00 00 00	r1 = r10
    7725	07 01 00 00 80 ff ff ff	r1 += -0x80
    7726	bf 52 00 00 00 00 00 00	r2 = r5
    7727	85 10 00 00 53 fa ff ff	call -0x5ad ; <core::panicking::panic_fmt>
    7728	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f188 <LBB242_31>
    7729	b7 01 00 00 01 00 00 00	r1 = 0x1
    7730	63 6a 6c ff 00 00 00 00	*(u32 *)(r10 - 0x94) = r6
    7731	b7 02 00 00 80 00 00 00	r2 = 0x80
    7732	2d 62 cd ff 00 00 00 00	if r2 > r6 goto -0x33 <LBB242_35>
    7733	b7 01 00 00 02 00 00 00	r1 = 0x2
    7734	b7 02 00 00 00 08 00 00	r2 = 0x800
    7735	2d 62 ca ff 00 00 00 00	if r2 > r6 goto -0x36 <LBB242_35>
    7736	b7 01 00 00 03 00 00 00	r1 = 0x3
    7737	b7 02 00 00 00 00 01 00	r2 = 0x10000
    7738	2d 62 c7 ff 00 00 00 00	if r2 > r6 goto -0x39 <LBB242_35>
    7739	b7 01 00 00 04 00 00 00	r1 = 0x4
    7740	05 00 c5 ff 00 00 00 00	goto -0x3b <LBB242_35>

000000000000f1e8 <core::unicode::printable::check>
    7741	bf 19 00 00 00 00 00 00	r9 = r1
    7742	79 51 10 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0xff0)
    7743	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7744	79 56 08 f0 00 00 00 00	r6 = *(u64 *)(r5 - 0xff8)
    7745	15 03 2a 00 00 00 00 00	if r3 == 0x0 goto +0x2a <LBB261_3>
    7746	67 03 00 00 01 00 00 00	r3 <<= 0x1
    7747	bf 21 00 00 00 00 00 00	r1 = r2
    7748	0f 31 00 00 00 00 00 00	r1 += r3
    7749	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7750	79 58 00 f0 00 00 00 00	r8 = *(u64 *)(r5 - 0x1000)
    7751	bf 93 00 00 00 00 00 00	r3 = r9
    7752	57 03 00 00 00 ff 00 00	r3 &= 0xff00
    7753	77 03 00 00 08 00 00 00	r3 >>= 0x8
    7754	b7 00 00 00 00 00 00 00	r0 = 0x0
    7755	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    7756	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8
    7757	05 00 04 00 00 00 00 00	goto +0x4 <LBB261_2>

000000000000f270 <LBB261_6>
    7758	2d 31 1d 00 00 00 00 00	if r1 > r3 goto +0x1d <LBB261_3>
    7759	bf 50 00 00 00 00 00 00	r0 = r5
    7760	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    7761	1d 12 1a 00 00 00 00 00	if r2 == r1 goto +0x1a <LBB261_3>

000000000000f290 <LBB261_2>
    7762	71 27 01 00 00 00 00 00	r7 = *(u8 *)(r2 + 0x1)
    7763	bf 05 00 00 00 00 00 00	r5 = r0
    7764	0f 75 00 00 00 00 00 00	r5 += r7
    7765	71 21 00 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x0)
    7766	07 02 00 00 02 00 00 00	r2 += 0x2
    7767	1d 31 01 00 00 00 00 00	if r1 == r3 goto +0x1 <LBB261_8>
    7768	05 00 f5 ff 00 00 00 00	goto -0xb <LBB261_6>

000000000000f2c8 <LBB261_8>
    7769	2d 50 39 00 00 00 00 00	if r0 > r5 goto +0x39 <LBB261_10>
    7770	2d 85 3e 00 00 00 00 00	if r5 > r8 goto +0x3e <LBB261_11>
    7771	0f 04 00 00 00 00 00 00	r4 += r0

000000000000f2e0 <LBB261_13>
    7772	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB261_16>
    7773	b7 00 00 00 00 00 00 00	r0 = 0x0
    7774	07 07 00 00 ff ff ff ff	r7 += -0x1
    7775	bf 91 00 00 00 00 00 00	r1 = r9
    7776	57 01 00 00 ff 00 00 00	r1 &= 0xff
    7777	71 48 00 00 00 00 00 00	r8 = *(u8 *)(r4 + 0x0)
    7778	07 04 00 00 01 00 00 00	r4 += 0x1
    7779	5d 18 f8 ff 00 00 00 00	if r8 != r1 goto -0x8 <LBB261_13>

000000000000f320 <LBB261_15>
    7780	57 00 00 00 01 00 00 00	r0 &= 0x1
    7781	95 00 00 00 00 00 00 00	exit

000000000000f330 <LBB261_16>
    7782	bf 50 00 00 00 00 00 00	r0 = r5
    7783	79 a4 e0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x20)
    7784	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    7785	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    7786	1d 12 01 00 00 00 00 00	if r2 == r1 goto +0x1 <LBB261_3>
    7787	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB261_2>

000000000000f360 <LBB261_3>
    7788	b7 00 00 00 01 00 00 00	r0 = 0x1
    7789	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    7790	15 01 f5 ff 00 00 00 00	if r1 == 0x0 goto -0xb <LBB261_15>
    7791	bf 62 00 00 00 00 00 00	r2 = r6
    7792	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    7793	0f 12 00 00 00 00 00 00	r2 += r1
    7794	b7 00 00 00 01 00 00 00	r0 = 0x1
    7795	57 09 00 00 ff ff 00 00	r9 &= 0xffff
    7796	b7 03 00 00 00 00 00 00	r3 = 0x0
    7797	05 00 07 00 00 00 00 00	goto +0x7 <LBB261_5>

000000000000f3b0 <LBB261_17>
    7798	bf 56 00 00 00 00 00 00	r6 = r5

000000000000f3b8 <LBB261_21>
    7799	1f 49 00 00 00 00 00 00	r9 -= r4
    7800	67 09 00 00 20 00 00 00	r9 <<= 0x20
    7801	c7 09 00 00 20 00 00 00	r9 s>>= 0x20
    7802	6d 93 e9 ff 00 00 00 00	if r3 s> r9 goto -0x17 <LBB261_15>
    7803	a7 00 00 00 01 00 00 00	r0 ^= 0x1
    7804	1d 26 e7 ff 00 00 00 00	if r6 == r2 goto -0x19 <LBB261_15>

000000000000f3e8 <LBB261_5>
    7805	bf 65 00 00 00 00 00 00	r5 = r6
    7806	07 05 00 00 01 00 00 00	r5 += 0x1
    7807	71 64 00 00 00 00 00 00	r4 = *(u8 *)(r6 + 0x0)
    7808	bf 41 00 00 00 00 00 00	r1 = r4
    7809	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7810	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7811	6d 13 01 00 00 00 00 00	if r3 s> r1 goto +0x1 <LBB261_18>
    7812	05 00 f1 ff 00 00 00 00	goto -0xf <LBB261_17>

000000000000f428 <LBB261_18>
    7813	5d 25 07 00 00 00 00 00	if r5 != r2 goto +0x7 <LBB261_20>
    7814	18 01 00 00 b5 2f 01 00 00 00 00 00 00 00 00 00	r1 = 0x12fb5 ll
    7816	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    7817	18 03 00 00 68 41 01 00 00 00 00 00 00 00 00 00	r3 = 0x14168 ll
    7819	85 10 00 00 c9 f9 ff ff	call -0x637 ; <core::panicking::panic>
    7820	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f468 <LBB261_20>
    7821	57 04 00 00 7f 00 00 00	r4 &= 0x7f
    7822	67 04 00 00 08 00 00 00	r4 <<= 0x8
    7823	71 61 01 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x1)
    7824	4f 14 00 00 00 00 00 00	r4 |= r1
    7825	07 06 00 00 02 00 00 00	r6 += 0x2
    7826	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB261_21>

000000000000f498 <LBB261_10>
    7827	bf 01 00 00 00 00 00 00	r1 = r0
    7828	bf 52 00 00 00 00 00 00	r2 = r5
    7829	18 03 00 00 50 41 01 00 00 00 00 00 00 00 00 00	r3 = 0x14150 ll
    7831	85 10 00 00 9f fe ff ff	call -0x161 ; <core::slice::index::slice_index_order_fail>
    7832	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f4c8 <LBB261_11>
    7833	bf 51 00 00 00 00 00 00	r1 = r5
    7834	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    7835	18 03 00 00 50 41 01 00 00 00 00 00 00 00 00 00	r3 = 0x14150 ll
    7837	85 10 00 00 7d fe ff ff	call -0x183 ; <core::slice::index::slice_end_index_len_fail>
    7838	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f4f8 <core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt>
    7839	b7 03 00 00 00 00 00 00	r3 = 0x0
    7840	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
    7841	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7842	05 00 14 00 00 00 00 00	goto +0x14 <LBB466_1>

000000000000f518 <LBB466_3>
    7843	0f 05 00 00 00 00 00 00	r5 += r0
    7844	bf a0 00 00 00 00 00 00	r0 = r10
    7845	07 00 00 00 80 ff ff ff	r0 += -0x80
    7846	0f 30 00 00 00 00 00 00	r0 += r3
    7847	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7848	07 03 00 00 ff ff ff ff	r3 += -0x1
    7849	bf 45 00 00 00 00 00 00	r5 = r4
    7850	57 05 00 00 ff 00 00 00	r5 &= 0xff
    7851	bf 54 00 00 00 00 00 00	r4 = r5
    7852	77 04 00 00 04 00 00 00	r4 >>= 0x4
    7853	25 05 09 00 0f 00 00 00	if r5 > 0xf goto +0x9 <LBB466_1>
    7854	bf 31 00 00 00 00 00 00	r1 = r3
    7855	07 01 00 00 80 00 00 00	r1 += 0x80
    7856	b7 04 00 00 81 00 00 00	r4 = 0x81
    7857	2d 14 0b 00 00 00 00 00	if r4 > r1 goto +0xb <LBB466_6>
    7858	b7 02 00 00 80 00 00 00	r2 = 0x80
    7859	18 03 00 00 d0 3f 01 00 00 00 00 00 00 00 00 00	r3 = 0x13fd0 ll
    7861	85 10 00 00 49 fe ff ff	call -0x1b7 ; <core::slice::index::slice_start_index_len_fail>
    7862	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f5b8 <LBB466_1>
    7863	bf 40 00 00 00 00 00 00	r0 = r4
    7864	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7865	b7 05 00 00 30 00 00 00	r5 = 0x30
    7866	2d 01 e8 ff 00 00 00 00	if r1 > r0 goto -0x18 <LBB466_3>
    7867	b7 05 00 00 57 00 00 00	r5 = 0x57
    7868	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB466_3>

000000000000f5e8 <LBB466_6>
    7869	bf 31 00 00 00 00 00 00	r1 = r3
    7870	87 01 00 00 00 00 00 00	r1 = -r1
    7871	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    7872	bf a1 00 00 00 00 00 00	r1 = r10
    7873	07 01 00 00 80 ff ff ff	r1 += -0x80
    7874	0f 31 00 00 00 00 00 00	r1 += r3
    7875	07 01 00 00 80 00 00 00	r1 += 0x80
    7876	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    7877	bf a5 00 00 00 00 00 00	r5 = r10
    7878	bf 21 00 00 00 00 00 00	r1 = r2
    7879	b7 02 00 00 01 00 00 00	r2 = 0x1
    7880	18 03 00 00 21 30 01 00 00 00 00 00 00 00 00 00	r3 = 0x13021 ll
    7882	b7 04 00 00 02 00 00 00	r4 = 0x2
    7883	85 10 00 00 7d fa ff ff	call -0x583 ; <core::fmt::Formatter::pad_integral>
    7884	95 00 00 00 00 00 00 00	exit

000000000000f668 <core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt>
    7885	b7 03 00 00 00 00 00 00	r3 = 0x0
    7886	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
    7887	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7888	05 00 14 00 00 00 00 00	goto +0x14 <LBB467_1>

000000000000f688 <LBB467_3>
    7889	0f 05 00 00 00 00 00 00	r5 += r0
    7890	bf a0 00 00 00 00 00 00	r0 = r10
    7891	07 00 00 00 80 ff ff ff	r0 += -0x80
    7892	0f 30 00 00 00 00 00 00	r0 += r3
    7893	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7894	07 03 00 00 ff ff ff ff	r3 += -0x1
    7895	bf 45 00 00 00 00 00 00	r5 = r4
    7896	57 05 00 00 ff 00 00 00	r5 &= 0xff
    7897	bf 54 00 00 00 00 00 00	r4 = r5
    7898	77 04 00 00 04 00 00 00	r4 >>= 0x4
    7899	25 05 09 00 0f 00 00 00	if r5 > 0xf goto +0x9 <LBB467_1>
    7900	bf 31 00 00 00 00 00 00	r1 = r3
    7901	07 01 00 00 80 00 00 00	r1 += 0x80
    7902	b7 04 00 00 81 00 00 00	r4 = 0x81
    7903	2d 14 0b 00 00 00 00 00	if r4 > r1 goto +0xb <LBB467_6>
    7904	b7 02 00 00 80 00 00 00	r2 = 0x80
    7905	18 03 00 00 d0 3f 01 00 00 00 00 00 00 00 00 00	r3 = 0x13fd0 ll
    7907	85 10 00 00 1b fe ff ff	call -0x1e5 ; <core::slice::index::slice_start_index_len_fail>
    7908	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f728 <LBB467_1>
    7909	bf 40 00 00 00 00 00 00	r0 = r4
    7910	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7911	b7 05 00 00 30 00 00 00	r5 = 0x30
    7912	2d 01 e8 ff 00 00 00 00	if r1 > r0 goto -0x18 <LBB467_3>
    7913	b7 05 00 00 37 00 00 00	r5 = 0x37
    7914	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB467_3>

000000000000f758 <LBB467_6>
    7915	bf 31 00 00 00 00 00 00	r1 = r3
    7916	87 01 00 00 00 00 00 00	r1 = -r1
    7917	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    7918	bf a1 00 00 00 00 00 00	r1 = r10
    7919	07 01 00 00 80 ff ff ff	r1 += -0x80
    7920	0f 31 00 00 00 00 00 00	r1 += r3
    7921	07 01 00 00 80 00 00 00	r1 += 0x80
    7922	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    7923	bf a5 00 00 00 00 00 00	r5 = r10
    7924	bf 21 00 00 00 00 00 00	r1 = r2
    7925	b7 02 00 00 01 00 00 00	r2 = 0x1
    7926	18 03 00 00 21 30 01 00 00 00 00 00 00 00 00 00	r3 = 0x13021 ll
    7928	b7 04 00 00 02 00 00 00	r4 = 0x2
    7929	85 10 00 00 4f fa ff ff	call -0x5b1 ; <core::fmt::Formatter::pad_integral>
    7930	95 00 00 00 00 00 00 00	exit

000000000000f7d8 <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    7931	61 23 30 00 00 00 00 00	r3 = *(u32 *)(r2 + 0x30)
    7932	bf 34 00 00 00 00 00 00	r4 = r3
    7933	57 04 00 00 10 00 00 00	r4 &= 0x10
    7934	55 04 32 00 00 00 00 00	if r4 != 0x0 goto +0x32 <LBB492_2>
    7935	57 03 00 00 20 00 00 00	r3 &= 0x20
    7936	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB492_10>
    7937	05 00 33 00 00 00 00 00	goto +0x33 <LBB492_20>

000000000000f810 <LBB492_10>
    7938	b7 03 00 00 27 00 00 00	r3 = 0x27
    7939	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    7940	b7 04 00 00 10 27 00 00	r4 = 0x2710
    7941	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB492_14>
    7942	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000f838 <LBB492_12>
    7943	bf 14 00 00 00 00 00 00	r4 = r1
    7944	37 01 00 00 10 27 00 00	r1 /= 0x2710
    7945	bf 15 00 00 00 00 00 00	r5 = r1
    7946	27 05 00 00 10 27 00 00	r5 *= 0x2710
    7947	bf 40 00 00 00 00 00 00	r0 = r4
    7948	1f 50 00 00 00 00 00 00	r0 -= r5
    7949	bf 05 00 00 00 00 00 00	r5 = r0
    7950	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    7951	37 05 00 00 64 00 00 00	r5 /= 0x64
    7952	bf 56 00 00 00 00 00 00	r6 = r5
    7953	27 06 00 00 64 00 00 00	r6 *= 0x64
    7954	1f 60 00 00 00 00 00 00	r0 -= r6
    7955	bf a6 00 00 00 00 00 00	r6 = r10
    7956	07 06 00 00 80 ff ff ff	r6 += -0x80
    7957	0f 36 00 00 00 00 00 00	r6 += r3
    7958	67 05 00 00 01 00 00 00	r5 <<= 0x1
    7959	18 07 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r7 = 0x13023 ll
    7961	0f 57 00 00 00 00 00 00	r7 += r5
    7962	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    7963	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    7964	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    7965	67 00 00 00 01 00 00 00	r0 <<= 0x1
    7966	18 05 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r5 = 0x13023 ll
    7968	0f 05 00 00 00 00 00 00	r5 += r0
    7969	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    7970	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    7971	07 03 00 00 fc ff ff ff	r3 += -0x4
    7972	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB492_12>
    7973	07 03 00 00 27 00 00 00	r3 += 0x27

000000000000f930 <LBB492_14>
    7974	65 01 4f 00 63 00 00 00	if r1 s> 0x63 goto +0x4f <LBB492_16>

000000000000f938 <LBB492_15>
    7975	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7976	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB492_18>
    7977	05 00 5f 00 00 00 00 00	goto +0x5f <LBB492_17>

000000000000f950 <LBB492_18>
    7978	07 03 00 00 ff ff ff ff	r3 += -0x1
    7979	bf a4 00 00 00 00 00 00	r4 = r10
    7980	07 04 00 00 80 ff ff ff	r4 += -0x80
    7981	0f 34 00 00 00 00 00 00	r4 += r3
    7982	07 01 00 00 30 00 00 00	r1 += 0x30
    7983	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    7984	05 00 62 00 00 00 00 00	goto +0x62 <LBB492_19>

000000000000f988 <LBB492_2>
    7985	b7 03 00 00 00 00 00 00	r3 = 0x0
    7986	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    7987	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7988	05 00 2b 00 00 00 00 00	goto +0x2b <LBB492_3>

000000000000f9a8 <LBB492_20>
    7989	b7 03 00 00 00 00 00 00	r3 = 0x0
    7990	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    7991	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7992	05 00 0e 00 00 00 00 00	goto +0xe <LBB492_21>

000000000000f9c8 <LBB492_23>
    7993	0f 05 00 00 00 00 00 00	r5 += r0
    7994	bf a0 00 00 00 00 00 00	r0 = r10
    7995	07 00 00 00 80 ff ff ff	r0 += -0x80
    7996	0f 30 00 00 00 00 00 00	r0 += r3
    7997	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7998	07 03 00 00 ff ff ff ff	r3 += -0x1
    7999	bf 45 00 00 00 00 00 00	r5 = r4
    8000	77 05 00 00 04 00 00 00	r5 >>= 0x4
    8001	25 04 05 00 0f 00 00 00	if r4 > 0xf goto +0x5 <LBB492_21>
    8002	bf 31 00 00 00 00 00 00	r1 = r3
    8003	07 01 00 00 80 00 00 00	r1 += 0x80
    8004	b7 04 00 00 81 00 00 00	r4 = 0x81
    8005	2d 14 21 00 00 00 00 00	if r4 > r1 goto +0x21 <LBB492_8>
    8006	05 00 14 00 00 00 00 00	goto +0x14 <LBB492_7>

000000000000fa38 <LBB492_21>
    8007	bf 54 00 00 00 00 00 00	r4 = r5
    8008	bf 40 00 00 00 00 00 00	r0 = r4
    8009	57 00 00 00 0f 00 00 00	r0 &= 0xf
    8010	b7 05 00 00 30 00 00 00	r5 = 0x30
    8011	2d 01 ed ff 00 00 00 00	if r1 > r0 goto -0x13 <LBB492_23>
    8012	b7 05 00 00 37 00 00 00	r5 = 0x37
    8013	05 00 eb ff 00 00 00 00	goto -0x15 <LBB492_23>

000000000000fa70 <LBB492_5>
    8014	0f 05 00 00 00 00 00 00	r5 += r0
    8015	bf a0 00 00 00 00 00 00	r0 = r10
    8016	07 00 00 00 80 ff ff ff	r0 += -0x80
    8017	0f 30 00 00 00 00 00 00	r0 += r3
    8018	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    8019	07 03 00 00 ff ff ff ff	r3 += -0x1
    8020	bf 45 00 00 00 00 00 00	r5 = r4
    8021	77 05 00 00 04 00 00 00	r5 >>= 0x4
    8022	25 04 09 00 0f 00 00 00	if r4 > 0xf goto +0x9 <LBB492_3>
    8023	bf 31 00 00 00 00 00 00	r1 = r3
    8024	07 01 00 00 80 00 00 00	r1 += 0x80
    8025	b7 04 00 00 81 00 00 00	r4 = 0x81
    8026	2d 14 0c 00 00 00 00 00	if r4 > r1 goto +0xc <LBB492_8>

000000000000fad8 <LBB492_7>
    8027	b7 02 00 00 80 00 00 00	r2 = 0x80
    8028	18 03 00 00 d0 3f 01 00 00 00 00 00 00 00 00 00	r3 = 0x13fd0 ll
    8030	85 10 00 00 a0 fd ff ff	call -0x260 ; <core::slice::index::slice_start_index_len_fail>
    8031	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000fb00 <LBB492_3>
    8032	bf 54 00 00 00 00 00 00	r4 = r5
    8033	bf 40 00 00 00 00 00 00	r0 = r4
    8034	57 00 00 00 0f 00 00 00	r0 &= 0xf
    8035	b7 05 00 00 30 00 00 00	r5 = 0x30
    8036	2d 01 e9 ff 00 00 00 00	if r1 > r0 goto -0x17 <LBB492_5>
    8037	b7 05 00 00 57 00 00 00	r5 = 0x57
    8038	05 00 e7 ff 00 00 00 00	goto -0x19 <LBB492_5>

000000000000fb38 <LBB492_8>
    8039	bf 31 00 00 00 00 00 00	r1 = r3
    8040	87 01 00 00 00 00 00 00	r1 = -r1
    8041	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8042	bf a1 00 00 00 00 00 00	r1 = r10
    8043	07 01 00 00 80 ff ff ff	r1 += -0x80
    8044	0f 31 00 00 00 00 00 00	r1 += r3
    8045	07 01 00 00 80 00 00 00	r1 += 0x80
    8046	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8047	bf a5 00 00 00 00 00 00	r5 = r10
    8048	bf 21 00 00 00 00 00 00	r1 = r2
    8049	b7 02 00 00 01 00 00 00	r2 = 0x1
    8050	18 03 00 00 21 30 01 00 00 00 00 00 00 00 00 00	r3 = 0x13021 ll
    8052	b7 04 00 00 02 00 00 00	r4 = 0x2
    8053	05 00 2a 00 00 00 00 00	goto +0x2a <LBB492_9>

000000000000fbb0 <LBB492_16>
    8054	bf 14 00 00 00 00 00 00	r4 = r1
    8055	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8056	37 04 00 00 64 00 00 00	r4 /= 0x64
    8057	bf 45 00 00 00 00 00 00	r5 = r4
    8058	27 05 00 00 64 00 00 00	r5 *= 0x64
    8059	1f 51 00 00 00 00 00 00	r1 -= r5
    8060	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8061	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8062	18 05 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r5 = 0x13023 ll
    8064	0f 15 00 00 00 00 00 00	r5 += r1
    8065	07 03 00 00 fe ff ff ff	r3 += -0x2
    8066	bf a1 00 00 00 00 00 00	r1 = r10
    8067	07 01 00 00 80 ff ff ff	r1 += -0x80
    8068	0f 31 00 00 00 00 00 00	r1 += r3
    8069	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8070	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8071	bf 41 00 00 00 00 00 00	r1 = r4
    8072	05 00 9e ff 00 00 00 00	goto -0x62 <LBB492_15>

000000000000fc48 <LBB492_17>
    8073	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8074	18 04 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r4 = 0x13023 ll
    8076	0f 14 00 00 00 00 00 00	r4 += r1
    8077	07 03 00 00 fe ff ff ff	r3 += -0x2
    8078	bf a1 00 00 00 00 00 00	r1 = r10
    8079	07 01 00 00 80 ff ff ff	r1 += -0x80
    8080	0f 31 00 00 00 00 00 00	r1 += r3
    8081	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8082	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

000000000000fc98 <LBB492_19>
    8083	bf a1 00 00 00 00 00 00	r1 = r10
    8084	07 01 00 00 80 ff ff ff	r1 += -0x80
    8085	0f 31 00 00 00 00 00 00	r1 += r3
    8086	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8087	b7 01 00 00 27 00 00 00	r1 = 0x27
    8088	1f 31 00 00 00 00 00 00	r1 -= r3
    8089	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8090	bf a5 00 00 00 00 00 00	r5 = r10
    8091	bf 21 00 00 00 00 00 00	r1 = r2
    8092	b7 02 00 00 01 00 00 00	r2 = 0x1
    8093	18 03 00 00 a8 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12fa8 ll
    8095	b7 04 00 00 00 00 00 00	r4 = 0x0

000000000000fd00 <LBB492_9>
    8096	85 10 00 00 a8 f9 ff ff	call -0x658 ; <core::fmt::Formatter::pad_integral>
    8097	95 00 00 00 00 00 00 00	exit

000000000000fd10 <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>
    8098	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    8099	25 01 0b 00 63 00 00 00	if r1 > 0x63 goto +0xb <LBB494_3>
    8100	b7 03 00 00 26 00 00 00	r3 = 0x26
    8101	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8102	2d 14 16 00 00 00 00 00	if r4 > r1 goto +0x16 <LBB494_4>
    8103	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8104	18 03 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r3 = 0x13023 ll
    8106	0f 13 00 00 00 00 00 00	r3 += r1
    8107	69 31 00 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x0)
    8108	6b 1a fe ff 00 00 00 00	*(u16 *)(r10 - 0x2) = r1
    8109	b7 03 00 00 25 00 00 00	r3 = 0x25
    8110	05 00 13 00 00 00 00 00	goto +0x13 <LBB494_5>

000000000000fd78 <LBB494_3>
    8111	bf 14 00 00 00 00 00 00	r4 = r1
    8112	37 04 00 00 64 00 00 00	r4 /= 0x64
    8113	bf 43 00 00 00 00 00 00	r3 = r4
    8114	27 03 00 00 64 00 00 00	r3 *= 0x64
    8115	1f 31 00 00 00 00 00 00	r1 -= r3
    8116	57 01 00 00 ff 00 00 00	r1 &= 0xff
    8117	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8118	18 03 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r3 = 0x13023 ll
    8120	0f 13 00 00 00 00 00 00	r3 += r1
    8121	69 31 00 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x0)
    8122	6b 1a fe ff 00 00 00 00	*(u16 *)(r10 - 0x2) = r1
    8123	b7 03 00 00 24 00 00 00	r3 = 0x24
    8124	bf 41 00 00 00 00 00 00	r1 = r4

000000000000fde8 <LBB494_4>
    8125	bf a4 00 00 00 00 00 00	r4 = r10
    8126	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8127	0f 34 00 00 00 00 00 00	r4 += r3
    8128	07 01 00 00 30 00 00 00	r1 += 0x30
    8129	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1

000000000000fe10 <LBB494_5>
    8130	bf a1 00 00 00 00 00 00	r1 = r10
    8131	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8132	0f 31 00 00 00 00 00 00	r1 += r3
    8133	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8134	b7 01 00 00 27 00 00 00	r1 = 0x27
    8135	1f 31 00 00 00 00 00 00	r1 -= r3
    8136	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8137	bf a5 00 00 00 00 00 00	r5 = r10
    8138	bf 21 00 00 00 00 00 00	r1 = r2
    8139	b7 02 00 00 01 00 00 00	r2 = 0x1
    8140	18 03 00 00 a8 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12fa8 ll
    8142	b7 04 00 00 00 00 00 00	r4 = 0x0
    8143	85 10 00 00 79 f9 ff ff	call -0x687 ; <core::fmt::Formatter::pad_integral>
    8144	95 00 00 00 00 00 00 00	exit

000000000000fe88 <core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt>
    8145	bf 23 00 00 00 00 00 00	r3 = r2
    8146	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    8147	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8148	bf 12 00 00 00 00 00 00	r2 = r1
    8149	c7 02 00 00 3f 00 00 00	r2 s>>= 0x3f
    8150	c7 01 00 00 20 00 00 00	r1 s>>= 0x20
    8151	bf 14 00 00 00 00 00 00	r4 = r1
    8152	0f 24 00 00 00 00 00 00	r4 += r2
    8153	af 24 00 00 00 00 00 00	r4 ^= r2
    8154	b7 02 00 00 27 00 00 00	r2 = 0x27
    8155	b7 05 00 00 10 27 00 00	r5 = 0x2710
    8156	2d 45 20 00 00 00 00 00	if r5 > r4 goto +0x20 <LBB497_4>
    8157	b7 02 00 00 00 00 00 00	r2 = 0x0

000000000000fef0 <LBB497_2>
    8158	bf 45 00 00 00 00 00 00	r5 = r4
    8159	37 04 00 00 10 27 00 00	r4 /= 0x2710
    8160	bf 40 00 00 00 00 00 00	r0 = r4
    8161	27 00 00 00 10 27 00 00	r0 *= 0x2710
    8162	bf 56 00 00 00 00 00 00	r6 = r5
    8163	1f 06 00 00 00 00 00 00	r6 -= r0
    8164	bf 60 00 00 00 00 00 00	r0 = r6
    8165	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8166	37 00 00 00 64 00 00 00	r0 /= 0x64
    8167	bf 07 00 00 00 00 00 00	r7 = r0
    8168	27 07 00 00 64 00 00 00	r7 *= 0x64
    8169	1f 76 00 00 00 00 00 00	r6 -= r7
    8170	bf a7 00 00 00 00 00 00	r7 = r10
    8171	07 07 00 00 d9 ff ff ff	r7 += -0x27
    8172	0f 27 00 00 00 00 00 00	r7 += r2
    8173	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8174	18 08 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r8 = 0x13023 ll
    8176	0f 08 00 00 00 00 00 00	r8 += r0
    8177	69 80 00 00 00 00 00 00	r0 = *(u16 *)(r8 + 0x0)
    8178	6b 07 23 00 00 00 00 00	*(u16 *)(r7 + 0x23) = r0
    8179	57 06 00 00 ff ff 00 00	r6 &= 0xffff
    8180	67 06 00 00 01 00 00 00	r6 <<= 0x1
    8181	18 00 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r0 = 0x13023 ll
    8183	0f 60 00 00 00 00 00 00	r0 += r6
    8184	69 00 00 00 00 00 00 00	r0 = *(u16 *)(r0 + 0x0)
    8185	6b 07 25 00 00 00 00 00	*(u16 *)(r7 + 0x25) = r0
    8186	07 02 00 00 fc ff ff ff	r2 += -0x4
    8187	25 05 e2 ff ff e0 f5 05	if r5 > 0x5f5e0ff goto -0x1e <LBB497_2>
    8188	07 02 00 00 27 00 00 00	r2 += 0x27

000000000000ffe8 <LBB497_4>
    8189	25 04 0a 00 63 00 00 00	if r4 > 0x63 goto +0xa <LBB497_6>

000000000000fff0 <LBB497_5>
    8190	b7 05 00 00 0a 00 00 00	r5 = 0xa
    8191	6d 45 01 00 00 00 00 00	if r5 s> r4 goto +0x1 <LBB497_8>
    8192	05 00 1a 00 00 00 00 00	goto +0x1a <LBB497_7>

0000000000010008 <LBB497_8>
    8193	07 02 00 00 ff ff ff ff	r2 += -0x1
    8194	bf a5 00 00 00 00 00 00	r5 = r10
    8195	07 05 00 00 d9 ff ff ff	r5 += -0x27
    8196	0f 25 00 00 00 00 00 00	r5 += r2
    8197	07 04 00 00 30 00 00 00	r4 += 0x30
    8198	73 45 00 00 00 00 00 00	*(u8 *)(r5 + 0x0) = r4
    8199	05 00 1d 00 00 00 00 00	goto +0x1d <LBB497_9>

0000000000010040 <LBB497_6>
    8200	bf 45 00 00 00 00 00 00	r5 = r4
    8201	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8202	37 05 00 00 64 00 00 00	r5 /= 0x64
    8203	bf 50 00 00 00 00 00 00	r0 = r5
    8204	27 00 00 00 64 00 00 00	r0 *= 0x64
    8205	1f 04 00 00 00 00 00 00	r4 -= r0
    8206	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8207	67 04 00 00 01 00 00 00	r4 <<= 0x1
    8208	18 00 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r0 = 0x13023 ll
    8210	0f 40 00 00 00 00 00 00	r0 += r4
    8211	07 02 00 00 fe ff ff ff	r2 += -0x2
    8212	bf a4 00 00 00 00 00 00	r4 = r10
    8213	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8214	0f 24 00 00 00 00 00 00	r4 += r2
    8215	69 00 00 00 00 00 00 00	r0 = *(u16 *)(r0 + 0x0)
    8216	6b 04 00 00 00 00 00 00	*(u16 *)(r4 + 0x0) = r0
    8217	bf 54 00 00 00 00 00 00	r4 = r5
    8218	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB497_5>

00000000000100d8 <LBB497_7>
    8219	67 04 00 00 01 00 00 00	r4 <<= 0x1
    8220	18 05 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r5 = 0x13023 ll
    8222	0f 45 00 00 00 00 00 00	r5 += r4
    8223	07 02 00 00 fe ff ff ff	r2 += -0x2
    8224	bf a4 00 00 00 00 00 00	r4 = r10
    8225	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8226	0f 24 00 00 00 00 00 00	r4 += r2
    8227	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8228	6b 54 00 00 00 00 00 00	*(u16 *)(r4 + 0x0) = r5

0000000000010128 <LBB497_9>
    8229	b7 04 00 00 27 00 00 00	r4 = 0x27
    8230	1f 24 00 00 00 00 00 00	r4 -= r2
    8231	bf a5 00 00 00 00 00 00	r5 = r10
    8232	07 05 00 00 d9 ff ff ff	r5 += -0x27
    8233	0f 25 00 00 00 00 00 00	r5 += r2
    8234	7b 5a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r5
    8235	7b 4a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r4
    8236	b7 02 00 00 01 00 00 00	r2 = 0x1
    8237	65 01 01 00 ff ff ff ff	if r1 s> -0x1 goto +0x1 <LBB497_11>
    8238	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000010178 <LBB497_11>
    8239	bf a5 00 00 00 00 00 00	r5 = r10
    8240	bf 31 00 00 00 00 00 00	r1 = r3
    8241	18 03 00 00 a8 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12fa8 ll
    8243	b7 04 00 00 00 00 00 00	r4 = 0x0
    8244	85 10 00 00 14 f9 ff ff	call -0x6ec ; <core::fmt::Formatter::pad_integral>
    8245	95 00 00 00 00 00 00 00	exit

00000000000101b0 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>
    8246	b7 03 00 00 27 00 00 00	r3 = 0x27
    8247	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    8248	b7 04 00 00 10 27 00 00	r4 = 0x2710
    8249	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB498_4>
    8250	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000101d8 <LBB498_2>
    8251	bf 14 00 00 00 00 00 00	r4 = r1
    8252	37 01 00 00 10 27 00 00	r1 /= 0x2710
    8253	bf 15 00 00 00 00 00 00	r5 = r1
    8254	27 05 00 00 10 27 00 00	r5 *= 0x2710
    8255	bf 40 00 00 00 00 00 00	r0 = r4
    8256	1f 50 00 00 00 00 00 00	r0 -= r5
    8257	bf 05 00 00 00 00 00 00	r5 = r0
    8258	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8259	37 05 00 00 64 00 00 00	r5 /= 0x64
    8260	bf 56 00 00 00 00 00 00	r6 = r5
    8261	27 06 00 00 64 00 00 00	r6 *= 0x64
    8262	1f 60 00 00 00 00 00 00	r0 -= r6
    8263	bf a6 00 00 00 00 00 00	r6 = r10
    8264	07 06 00 00 d9 ff ff ff	r6 += -0x27
    8265	0f 36 00 00 00 00 00 00	r6 += r3
    8266	67 05 00 00 01 00 00 00	r5 <<= 0x1
    8267	18 07 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r7 = 0x13023 ll
    8269	0f 57 00 00 00 00 00 00	r7 += r5
    8270	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    8271	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    8272	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8273	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8274	18 05 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r5 = 0x13023 ll
    8276	0f 05 00 00 00 00 00 00	r5 += r0
    8277	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8278	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    8279	07 03 00 00 fc ff ff ff	r3 += -0x4
    8280	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB498_2>
    8281	07 03 00 00 27 00 00 00	r3 += 0x27

00000000000102d0 <LBB498_4>
    8282	25 01 0a 00 63 00 00 00	if r1 > 0x63 goto +0xa <LBB498_6>

00000000000102d8 <LBB498_5>
    8283	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8284	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB498_8>
    8285	05 00 1a 00 00 00 00 00	goto +0x1a <LBB498_7>

00000000000102f0 <LBB498_8>
    8286	07 03 00 00 ff ff ff ff	r3 += -0x1
    8287	bf a4 00 00 00 00 00 00	r4 = r10
    8288	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8289	0f 34 00 00 00 00 00 00	r4 += r3
    8290	07 01 00 00 30 00 00 00	r1 += 0x30
    8291	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    8292	05 00 1d 00 00 00 00 00	goto +0x1d <LBB498_9>

0000000000010328 <LBB498_6>
    8293	bf 14 00 00 00 00 00 00	r4 = r1
    8294	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8295	37 04 00 00 64 00 00 00	r4 /= 0x64
    8296	bf 45 00 00 00 00 00 00	r5 = r4
    8297	27 05 00 00 64 00 00 00	r5 *= 0x64
    8298	1f 51 00 00 00 00 00 00	r1 -= r5
    8299	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8300	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8301	18 05 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r5 = 0x13023 ll
    8303	0f 15 00 00 00 00 00 00	r5 += r1
    8304	07 03 00 00 fe ff ff ff	r3 += -0x2
    8305	bf a1 00 00 00 00 00 00	r1 = r10
    8306	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8307	0f 31 00 00 00 00 00 00	r1 += r3
    8308	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8309	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8310	bf 41 00 00 00 00 00 00	r1 = r4
    8311	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB498_5>

00000000000103c0 <LBB498_7>
    8312	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8313	18 04 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r4 = 0x13023 ll
    8315	0f 14 00 00 00 00 00 00	r4 += r1
    8316	07 03 00 00 fe ff ff ff	r3 += -0x2
    8317	bf a1 00 00 00 00 00 00	r1 = r10
    8318	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8319	0f 31 00 00 00 00 00 00	r1 += r3
    8320	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8321	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

0000000000010410 <LBB498_9>
    8322	bf a1 00 00 00 00 00 00	r1 = r10
    8323	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8324	0f 31 00 00 00 00 00 00	r1 += r3
    8325	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8326	b7 01 00 00 27 00 00 00	r1 = 0x27
    8327	1f 31 00 00 00 00 00 00	r1 -= r3
    8328	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8329	bf a5 00 00 00 00 00 00	r5 = r10
    8330	bf 21 00 00 00 00 00 00	r1 = r2
    8331	b7 02 00 00 01 00 00 00	r2 = 0x1
    8332	18 03 00 00 a8 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12fa8 ll
    8334	b7 04 00 00 00 00 00 00	r4 = 0x0
    8335	85 10 00 00 b9 f8 ff ff	call -0x747 ; <core::fmt::Formatter::pad_integral>
    8336	95 00 00 00 00 00 00 00	exit

0000000000010488 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt>
    8337	b7 03 00 00 27 00 00 00	r3 = 0x27
    8338	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8339	b7 04 00 00 10 27 00 00	r4 = 0x2710
    8340	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB500_4>
    8341	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000104b0 <LBB500_2>
    8342	bf 14 00 00 00 00 00 00	r4 = r1
    8343	37 01 00 00 10 27 00 00	r1 /= 0x2710
    8344	bf 15 00 00 00 00 00 00	r5 = r1
    8345	27 05 00 00 10 27 00 00	r5 *= 0x2710
    8346	bf 40 00 00 00 00 00 00	r0 = r4
    8347	1f 50 00 00 00 00 00 00	r0 -= r5
    8348	bf 05 00 00 00 00 00 00	r5 = r0
    8349	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8350	37 05 00 00 64 00 00 00	r5 /= 0x64
    8351	bf 56 00 00 00 00 00 00	r6 = r5
    8352	27 06 00 00 64 00 00 00	r6 *= 0x64
    8353	1f 60 00 00 00 00 00 00	r0 -= r6
    8354	bf a6 00 00 00 00 00 00	r6 = r10
    8355	07 06 00 00 d9 ff ff ff	r6 += -0x27
    8356	0f 36 00 00 00 00 00 00	r6 += r3
    8357	67 05 00 00 01 00 00 00	r5 <<= 0x1
    8358	18 07 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r7 = 0x13023 ll
    8360	0f 57 00 00 00 00 00 00	r7 += r5
    8361	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    8362	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    8363	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8364	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8365	18 05 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r5 = 0x13023 ll
    8367	0f 05 00 00 00 00 00 00	r5 += r0
    8368	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8369	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    8370	07 03 00 00 fc ff ff ff	r3 += -0x4
    8371	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB500_2>
    8372	07 03 00 00 27 00 00 00	r3 += 0x27

00000000000105a8 <LBB500_4>
    8373	65 01 0a 00 63 00 00 00	if r1 s> 0x63 goto +0xa <LBB500_6>

00000000000105b0 <LBB500_5>
    8374	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8375	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB500_8>
    8376	05 00 1a 00 00 00 00 00	goto +0x1a <LBB500_7>

00000000000105c8 <LBB500_8>
    8377	07 03 00 00 ff ff ff ff	r3 += -0x1
    8378	bf a4 00 00 00 00 00 00	r4 = r10
    8379	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8380	0f 34 00 00 00 00 00 00	r4 += r3
    8381	07 01 00 00 30 00 00 00	r1 += 0x30
    8382	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    8383	05 00 1d 00 00 00 00 00	goto +0x1d <LBB500_9>

0000000000010600 <LBB500_6>
    8384	bf 14 00 00 00 00 00 00	r4 = r1
    8385	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8386	37 04 00 00 64 00 00 00	r4 /= 0x64
    8387	bf 45 00 00 00 00 00 00	r5 = r4
    8388	27 05 00 00 64 00 00 00	r5 *= 0x64
    8389	1f 51 00 00 00 00 00 00	r1 -= r5
    8390	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8391	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8392	18 05 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r5 = 0x13023 ll
    8394	0f 15 00 00 00 00 00 00	r5 += r1
    8395	07 03 00 00 fe ff ff ff	r3 += -0x2
    8396	bf a1 00 00 00 00 00 00	r1 = r10
    8397	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8398	0f 31 00 00 00 00 00 00	r1 += r3
    8399	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8400	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8401	bf 41 00 00 00 00 00 00	r1 = r4
    8402	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB500_5>

0000000000010698 <LBB500_7>
    8403	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8404	18 04 00 00 23 30 01 00 00 00 00 00 00 00 00 00	r4 = 0x13023 ll
    8406	0f 14 00 00 00 00 00 00	r4 += r1
    8407	07 03 00 00 fe ff ff ff	r3 += -0x2
    8408	bf a1 00 00 00 00 00 00	r1 = r10
    8409	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8410	0f 31 00 00 00 00 00 00	r1 += r3
    8411	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8412	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

00000000000106e8 <LBB500_9>
    8413	bf a1 00 00 00 00 00 00	r1 = r10
    8414	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8415	0f 31 00 00 00 00 00 00	r1 += r3
    8416	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8417	b7 01 00 00 27 00 00 00	r1 = 0x27
    8418	1f 31 00 00 00 00 00 00	r1 -= r3
    8419	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8420	bf a5 00 00 00 00 00 00	r5 = r10
    8421	bf 21 00 00 00 00 00 00	r1 = r2
    8422	b7 02 00 00 01 00 00 00	r2 = 0x1
    8423	18 03 00 00 a8 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12fa8 ll
    8425	b7 04 00 00 00 00 00 00	r4 = 0x0
    8426	85 10 00 00 5e f8 ff ff	call -0x7a2 ; <core::fmt::Formatter::pad_integral>
    8427	95 00 00 00 00 00 00 00	exit

0000000000010760 <<core::fmt::Error as core::fmt::Debug>::fmt>
    8428	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    8429	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    8430	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    8431	18 02 00 00 96 37 01 00 00 00 00 00 00 00 00 00	r2 = 0x13796 ll
    8433	b7 03 00 00 05 00 00 00	r3 = 0x5
    8434	8d 00 00 00 04 00 00 00	callx r4
    8435	95 00 00 00 00 00 00 00	exit

00000000000107a0 <<&T as core::fmt::Debug>::fmt>
    8436	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    8437	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    8438	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    8439	bf 31 00 00 00 00 00 00	r1 = r3
    8440	8d 00 00 00 04 00 00 00	callx r4
    8441	95 00 00 00 00 00 00 00	exit

00000000000107d0 <<&T as core::fmt::Display>::fmt>
    8442	bf 24 00 00 00 00 00 00	r4 = r2
    8443	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8444	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    8445	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8446	bf 41 00 00 00 00 00 00	r1 = r4
    8447	85 10 00 00 46 f9 ff ff	call -0x6ba ; <core::fmt::Formatter::pad>
    8448	95 00 00 00 00 00 00 00	exit

0000000000010808 <<&T as core::fmt::Display>::fmt>
    8449	79 26 28 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x28)
    8450	79 27 20 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x20)
    8451	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8452	bf a8 00 00 00 00 00 00	r8 = r10
    8453	07 08 00 00 d0 ff ff ff	r8 += -0x30
    8454	bf 81 00 00 00 00 00 00	r1 = r8
    8455	b7 03 00 00 30 00 00 00	r3 = 0x30
    8456	85 10 00 00 de 01 00 00	call 0x1de ; <memcpy>
    8457	bf 71 00 00 00 00 00 00	r1 = r7
    8458	bf 62 00 00 00 00 00 00	r2 = r6
    8459	bf 83 00 00 00 00 00 00	r3 = r8
    8460	85 10 00 00 ad f7 ff ff	call -0x853 ; <core::fmt::write>
    8461	95 00 00 00 00 00 00 00	exit

0000000000010870 <<&T as core::fmt::Display>::fmt>
    8462	bf 24 00 00 00 00 00 00	r4 = r2
    8463	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    8464	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8465	bf 41 00 00 00 00 00 00	r1 = r4
    8466	85 10 00 00 33 f9 ff ff	call -0x6cd ; <core::fmt::Formatter::pad>
    8467	95 00 00 00 00 00 00 00	exit

00000000000108a0 <core::unicode::unicode_data::grapheme_extend::lookup>
    8468	b7 02 00 00 00 00 00 00	r2 = 0x0
    8469	b7 03 00 00 20 00 00 00	r3 = 0x20
    8470	bf 14 00 00 00 00 00 00	r4 = r1
    8471	67 04 00 00 0b 00 00 00	r4 <<= 0xb
    8472	b7 05 00 00 20 00 00 00	r5 = 0x20
    8473	05 00 06 00 00 00 00 00	goto +0x6 <LBB646_1>

00000000000108d0 <LBB646_3>
    8474	07 03 00 00 01 00 00 00	r3 += 0x1
    8475	bf 32 00 00 00 00 00 00	r2 = r3
    8476	bf 53 00 00 00 00 00 00	r3 = r5

00000000000108e8 <LBB646_4>
    8477	1f 23 00 00 00 00 00 00	r3 -= r2
    8478	2d 25 01 00 00 00 00 00	if r5 > r2 goto +0x1 <LBB646_1>
    8479	05 00 14 00 00 00 00 00	goto +0x14 <LBB646_6>

0000000000010900 <LBB646_1>
    8480	77 03 00 00 01 00 00 00	r3 >>= 0x1
    8481	0f 23 00 00 00 00 00 00	r3 += r2
    8482	bf 30 00 00 00 00 00 00	r0 = r3
    8483	67 00 00 00 02 00 00 00	r0 <<= 0x2
    8484	18 06 00 00 9c 37 01 00 00 00 00 00 00 00 00 00	r6 = 0x1379c ll
    8486	0f 06 00 00 00 00 00 00	r6 += r0
    8487	61 60 00 00 00 00 00 00	r0 = *(u32 *)(r6 + 0x0)
    8488	67 00 00 00 0b 00 00 00	r0 <<= 0xb
    8489	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8490	bf 46 00 00 00 00 00 00	r6 = r4
    8491	67 06 00 00 20 00 00 00	r6 <<= 0x20
    8492	77 00 00 00 20 00 00 00	r0 >>= 0x20
    8493	77 06 00 00 20 00 00 00	r6 >>= 0x20
    8494	2d 06 eb ff 00 00 00 00	if r6 > r0 goto -0x15 <LBB646_3>
    8495	bf 35 00 00 00 00 00 00	r5 = r3
    8496	1d 60 01 00 00 00 00 00	if r0 == r6 goto +0x1 <LBB646_5>
    8497	05 00 eb ff 00 00 00 00	goto -0x15 <LBB646_4>

0000000000010990 <LBB646_5>
    8498	07 03 00 00 01 00 00 00	r3 += 0x1
    8499	bf 32 00 00 00 00 00 00	r2 = r3

00000000000109a0 <LBB646_6>
    8500	25 02 45 00 1f 00 00 00	if r2 > 0x1f goto +0x45 <LBB646_8>
    8501	bf 25 00 00 00 00 00 00	r5 = r2
    8502	67 05 00 00 02 00 00 00	r5 <<= 0x2
    8503	18 00 00 00 9c 37 01 00 00 00 00 00 00 00 00 00	r0 = 0x1379c ll
    8505	b7 04 00 00 c3 02 00 00	r4 = 0x2c3
    8506	15 02 04 00 1f 00 00 00	if r2 == 0x1f goto +0x4 <LBB646_10>
    8507	bf 53 00 00 00 00 00 00	r3 = r5
    8508	0f 03 00 00 00 00 00 00	r3 += r0
    8509	61 34 04 00 00 00 00 00	r4 = *(u32 *)(r3 + 0x4)
    8510	77 04 00 00 15 00 00 00	r4 >>= 0x15

00000000000109f8 <LBB646_10>
    8511	bf 23 00 00 00 00 00 00	r3 = r2
    8512	07 03 00 00 ff ff ff ff	r3 += -0x1
    8513	b7 06 00 00 00 00 00 00	r6 = 0x0
    8514	b7 07 00 00 01 00 00 00	r7 = 0x1
    8515	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB646_12>
    8516	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000010a28 <LBB646_12>
    8517	57 07 00 00 01 00 00 00	r7 &= 0x1
    8518	55 07 0e 00 00 00 00 00	if r7 != 0x0 goto +0xe <LBB646_16>
    8519	b7 02 00 00 20 00 00 00	r2 = 0x20
    8520	2d 32 06 00 00 00 00 00	if r2 > r3 goto +0x6 <LBB646_15>
    8521	bf 31 00 00 00 00 00 00	r1 = r3
    8522	b7 02 00 00 20 00 00 00	r2 = 0x20
    8523	18 03 00 00 b0 41 01 00 00 00 00 00 00 00 00 00	r3 = 0x141b0 ll
    8525	85 10 00 00 19 f7 ff ff	call -0x8e7 ; <core::panicking::panic_bounds_check>
    8526	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010a78 <LBB646_15>
    8527	67 03 00 00 02 00 00 00	r3 <<= 0x2
    8528	18 02 00 00 9c 37 01 00 00 00 00 00 00 00 00 00	r2 = 0x1379c ll
    8530	0f 32 00 00 00 00 00 00	r2 += r3
    8531	61 26 00 00 00 00 00 00	r6 = *(u32 *)(r2 + 0x0)
    8532	57 06 00 00 ff ff 1f 00	r6 &= 0x1fffff

0000000000010aa8 <LBB646_16>
    8533	0f 50 00 00 00 00 00 00	r0 += r5
    8534	61 00 00 00 00 00 00 00	r0 = *(u32 *)(r0 + 0x0)
    8535	77 00 00 00 15 00 00 00	r0 >>= 0x15
    8536	bf 02 00 00 00 00 00 00	r2 = r0
    8537	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    8538	0f 24 00 00 00 00 00 00	r4 += r2
    8539	15 04 16 00 00 00 00 00	if r4 == 0x0 goto +0x16 <LBB646_23>
    8540	1f 61 00 00 00 00 00 00	r1 -= r6
    8541	18 03 00 00 1c 38 01 00 00 00 00 00 00 00 00 00	r3 = 0x1381c ll
    8543	0f 03 00 00 00 00 00 00	r3 += r0
    8544	b7 05 00 00 00 00 00 00	r5 = 0x0
    8545	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8546	77 01 00 00 20 00 00 00	r1 >>= 0x20
    8547	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000010b20 <LBB646_18>
    8548	bf 02 00 00 00 00 00 00	r2 = r0
    8549	0f 62 00 00 00 00 00 00	r2 += r6
    8550	25 02 0d 00 c2 02 00 00	if r2 > 0x2c2 goto +0xd <LBB646_20>
    8551	bf 32 00 00 00 00 00 00	r2 = r3
    8552	0f 62 00 00 00 00 00 00	r2 += r6
    8553	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    8554	0f 25 00 00 00 00 00 00	r5 += r2
    8555	bf 52 00 00 00 00 00 00	r2 = r5
    8556	67 02 00 00 20 00 00 00	r2 <<= 0x20
    8557	77 02 00 00 20 00 00 00	r2 >>= 0x20
    8558	2d 12 02 00 00 00 00 00	if r2 > r1 goto +0x2 <LBB646_22>
    8559	07 06 00 00 01 00 00 00	r6 += 0x1
    8560	2d 64 f3 ff 00 00 00 00	if r4 > r6 goto -0xd <LBB646_18>

0000000000010b88 <LBB646_22>
    8561	0f 60 00 00 00 00 00 00	r0 += r6

0000000000010b90 <LBB646_23>
    8562	57 00 00 00 01 00 00 00	r0 &= 0x1
    8563	95 00 00 00 00 00 00 00	exit

0000000000010ba0 <LBB646_20>
    8564	bf 21 00 00 00 00 00 00	r1 = r2
    8565	b7 02 00 00 c3 02 00 00	r2 = 0x2c3
    8566	18 03 00 00 98 41 01 00 00 00 00 00 00 00 00 00	r3 = 0x14198 ll
    8568	85 10 00 00 ee f6 ff ff	call -0x912 ; <core::panicking::panic_bounds_check>
    8569	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010bd0 <LBB646_8>
    8570	bf 21 00 00 00 00 00 00	r1 = r2
    8571	b7 02 00 00 20 00 00 00	r2 = 0x20
    8572	18 03 00 00 80 41 01 00 00 00 00 00 00 00 00 00	r3 = 0x14180 ll
    8574	85 10 00 00 e8 f6 ff ff	call -0x918 ; <core::panicking::panic_bounds_check>
    8575	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010c00 <__adddf3>
    8576	85 10 00 00 d8 01 00 00	call 0x1d8 ; <compiler_builtins::float::add::__adddf3>
    8577	95 00 00 00 00 00 00 00	exit

0000000000010c10 <__fixunsdfdi>
    8578	b7 00 00 00 00 00 00 00	r0 = 0x0
    8579	bf 12 00 00 00 00 00 00	r2 = r1
    8580	77 02 00 00 34 00 00 00	r2 >>= 0x34
    8581	57 02 00 00 ff 07 00 00	r2 &= 0x7ff
    8582	b7 03 00 00 ff 03 00 00	r3 = 0x3ff
    8583	2d 23 14 00 00 00 00 00	if r3 > r2 goto +0x14 <LBB0_7>
    8584	b7 03 00 00 00 00 00 00	r3 = 0x0
    8585	6d 13 12 00 00 00 00 00	if r3 s> r1 goto +0x12 <LBB0_7>
    8586	b7 00 00 00 ff ff ff ff	r0 = -0x1
    8587	25 02 10 00 3e 04 00 00	if r2 > 0x43e goto +0x10 <LBB0_7>
    8588	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r3 = 0xfffffffffffff ll
    8590	5f 31 00 00 00 00 00 00	r1 &= r3
    8591	18 03 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r3 = 0x10000000000000 ll
    8593	4f 31 00 00 00 00 00 00	r1 |= r3
    8594	b7 03 00 00 33 04 00 00	r3 = 0x433
    8595	2d 23 04 00 00 00 00 00	if r3 > r2 goto +0x4 <LBB0_5>
    8596	07 02 00 00 cd fb ff ff	r2 += -0x433
    8597	57 02 00 00 ff ff 00 00	r2 &= 0xffff
    8598	6f 21 00 00 00 00 00 00	r1 <<= r2
    8599	05 00 03 00 00 00 00 00	goto +0x3 <LBB0_6>

0000000000010cc0 <LBB0_5>
    8600	1f 23 00 00 00 00 00 00	r3 -= r2
    8601	57 03 00 00 ff ff 00 00	r3 &= 0xffff
    8602	7f 31 00 00 00 00 00 00	r1 >>= r3

0000000000010cd8 <LBB0_6>
    8603	bf 10 00 00 00 00 00 00	r0 = r1

0000000000010ce0 <LBB0_7>
    8604	95 00 00 00 00 00 00 00	exit

0000000000010ce8 <__gtdf2>
    8605	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8607	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r5 = 0x7fffffffffffffff ll
    8609	bf 13 00 00 00 00 00 00	r3 = r1
    8610	5f 53 00 00 00 00 00 00	r3 &= r5
    8611	18 06 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r6 = 0x7ff0000000000000 ll
    8613	2d 63 18 00 00 00 00 00	if r3 > r6 goto +0x18 <LBB0_9>
    8614	bf 24 00 00 00 00 00 00	r4 = r2
    8615	5f 54 00 00 00 00 00 00	r4 &= r5
    8616	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8618	2d 64 13 00 00 00 00 00	if r4 > r6 goto +0x13 <LBB0_9>
    8619	4f 34 00 00 00 00 00 00	r4 |= r3
    8620	b7 00 00 00 00 00 00 00	r0 = 0x0
    8621	15 04 10 00 00 00 00 00	if r4 == 0x0 goto +0x10 <LBB0_9>
    8622	bf 23 00 00 00 00 00 00	r3 = r2
    8623	5f 13 00 00 00 00 00 00	r3 &= r1
    8624	65 03 06 00 ff ff ff ff	if r3 s> -0x1 goto +0x6 <LBB0_5>
    8625	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8627	6d 21 0a 00 00 00 00 00	if r1 s> r2 goto +0xa <LBB0_9>
    8628	b7 00 00 00 01 00 00 00	r0 = 0x1
    8629	1d 21 07 00 00 00 00 00	if r1 == r2 goto +0x7 <LBB0_8>
    8630	05 00 07 00 00 00 00 00	goto +0x7 <LBB0_9>

0000000000010db8 <LBB0_5>
    8631	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8633	6d 12 04 00 00 00 00 00	if r2 s> r1 goto +0x4 <LBB0_9>
    8634	b7 00 00 00 01 00 00 00	r0 = 0x1
    8635	1d 21 01 00 00 00 00 00	if r1 == r2 goto +0x1 <LBB0_8>
    8636	05 00 01 00 00 00 00 00	goto +0x1 <LBB0_9>

0000000000010de8 <LBB0_8>
    8637	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000010df0 <LBB0_9>
    8638	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8639	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    8640	95 00 00 00 00 00 00 00	exit

0000000000010e08 <__gedf2>
    8641	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8643	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r5 = 0x7fffffffffffffff ll
    8645	bf 13 00 00 00 00 00 00	r3 = r1
    8646	5f 53 00 00 00 00 00 00	r3 &= r5
    8647	18 06 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r6 = 0x7ff0000000000000 ll
    8649	2d 63 18 00 00 00 00 00	if r3 > r6 goto +0x18 <LBB0_9>
    8650	bf 24 00 00 00 00 00 00	r4 = r2
    8651	5f 54 00 00 00 00 00 00	r4 &= r5
    8652	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8654	2d 64 13 00 00 00 00 00	if r4 > r6 goto +0x13 <LBB0_9>
    8655	4f 34 00 00 00 00 00 00	r4 |= r3
    8656	b7 00 00 00 00 00 00 00	r0 = 0x0
    8657	15 04 10 00 00 00 00 00	if r4 == 0x0 goto +0x10 <LBB0_9>
    8658	bf 23 00 00 00 00 00 00	r3 = r2
    8659	5f 13 00 00 00 00 00 00	r3 &= r1
    8660	65 03 06 00 ff ff ff ff	if r3 s> -0x1 goto +0x6 <LBB0_5>
    8661	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8663	6d 21 0a 00 00 00 00 00	if r1 s> r2 goto +0xa <LBB0_9>
    8664	b7 00 00 00 01 00 00 00	r0 = 0x1
    8665	1d 21 07 00 00 00 00 00	if r1 == r2 goto +0x7 <LBB0_8>
    8666	05 00 07 00 00 00 00 00	goto +0x7 <LBB0_9>

0000000000010ed8 <LBB0_5>
    8667	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8669	6d 12 04 00 00 00 00 00	if r2 s> r1 goto +0x4 <LBB0_9>
    8670	b7 00 00 00 01 00 00 00	r0 = 0x1
    8671	1d 21 01 00 00 00 00 00	if r1 == r2 goto +0x1 <LBB0_8>
    8672	05 00 01 00 00 00 00 00	goto +0x1 <LBB0_9>

0000000000010f08 <LBB0_8>
    8673	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000010f10 <LBB0_9>
    8674	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8675	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    8676	95 00 00 00 00 00 00 00	exit

0000000000010f28 <__muldf3>
    8677	85 10 00 00 01 00 00 00	call 0x1 ; <compiler_builtins::float::mul::__muldf3>
    8678	95 00 00 00 00 00 00 00	exit

0000000000010f38 <compiler_builtins::float::mul::__muldf3>
    8679	bf 26 00 00 00 00 00 00	r6 = r2
    8680	bf 63 00 00 00 00 00 00	r3 = r6
    8681	af 13 00 00 00 00 00 00	r3 ^= r1
    8682	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8684	5f 23 00 00 00 00 00 00	r3 &= r2
    8685	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    8686	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r5 = 0xfffffffffffff ll
    8688	bf 62 00 00 00 00 00 00	r2 = r6
    8689	5f 52 00 00 00 00 00 00	r2 &= r5
    8690	bf 14 00 00 00 00 00 00	r4 = r1
    8691	5f 54 00 00 00 00 00 00	r4 &= r5
    8692	bf 67 00 00 00 00 00 00	r7 = r6
    8693	77 07 00 00 34 00 00 00	r7 >>= 0x34
    8694	57 07 00 00 ff 07 00 00	r7 &= 0x7ff
    8695	bf 18 00 00 00 00 00 00	r8 = r1
    8696	77 08 00 00 34 00 00 00	r8 >>= 0x34
    8697	57 08 00 00 ff 07 00 00	r8 &= 0x7ff
    8698	bf 85 00 00 00 00 00 00	r5 = r8
    8699	07 05 00 00 ff ff ff ff	r5 += -0x1
    8700	25 05 25 00 fd 07 00 00	if r5 > 0x7fd goto +0x25 <LBB1_3>
    8701	b7 09 00 00 00 00 00 00	r9 = 0x0
    8702	bf 75 00 00 00 00 00 00	r5 = r7
    8703	07 05 00 00 ff ff ff ff	r5 += -0x1
    8704	25 05 21 00 fd 07 00 00	if r5 > 0x7fd goto +0x21 <LBB1_3>

0000000000011008 <LBB1_2>
    8705	67 02 00 00 0b 00 00 00	r2 <<= 0xb
    8706	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r1 = -0x8000000000000000 ll
    8708	4f 12 00 00 00 00 00 00	r2 |= r1
    8709	18 06 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r6 = 0x10000000000000 ll
    8711	4f 64 00 00 00 00 00 00	r4 |= r6
    8712	bf a1 00 00 00 00 00 00	r1 = r10
    8713	07 01 00 00 f0 ff ff ff	r1 += -0x10
    8714	b7 03 00 00 00 00 00 00	r3 = 0x0
    8715	b7 05 00 00 00 00 00 00	r5 = 0x0
    8716	85 10 00 00 99 02 00 00	call 0x299 ; <__multi3>
    8717	0f 87 00 00 00 00 00 00	r7 += r8
    8718	0f 97 00 00 00 00 00 00	r7 += r9
    8719	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    8720	bf 23 00 00 00 00 00 00	r3 = r2
    8721	5f 63 00 00 00 00 00 00	r3 &= r6
    8722	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    8723	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB1_23>
    8724	05 00 1d 00 00 00 00 00	goto +0x1d <LBB1_24>

00000000000110a8 <LBB1_23>
    8725	67 02 00 00 01 00 00 00	r2 <<= 0x1
    8726	bf 13 00 00 00 00 00 00	r3 = r1
    8727	77 03 00 00 3f 00 00 00	r3 >>= 0x3f
    8728	4f 32 00 00 00 00 00 00	r2 |= r3
    8729	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8730	07 07 00 00 01 fc ff ff	r7 += -0x3ff
    8731	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8732	65 07 01 00 fe 07 00 00	if r7 s> 0x7fe goto +0x1 <LBB1_26>
    8733	05 00 17 00 00 00 00 00	goto +0x17 <LBB1_25>

00000000000110f0 <LBB1_26>
    8734	18 01 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r1 = 0x7ff0000000000000 ll
    8736	4f 10 00 00 00 00 00 00	r0 |= r1
    8737	05 00 48 00 00 00 00 00	goto +0x48 <LBB1_35>

0000000000011110 <LBB1_3>
    8738	18 09 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r9 = 0x7fffffffffffffff ll
    8740	bf 15 00 00 00 00 00 00	r5 = r1
    8741	5f 95 00 00 00 00 00 00	r5 &= r9
    8742	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r0 = 0x7ff0000000000000 ll
    8744	2d 05 14 00 00 00 00 00	if r5 > r0 goto +0x14 <LBB1_5>
    8745	bf 63 00 00 00 00 00 00	r3 = r6
    8746	5f 93 00 00 00 00 00 00	r3 &= r9
    8747	2d 03 01 00 00 00 00 00	if r3 > r0 goto +0x1 <LBB1_7>
    8748	05 00 15 00 00 00 00 00	goto +0x15 <LBB1_6>

0000000000011168 <LBB1_7>
    8749	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    8751	4f 16 00 00 00 00 00 00	r6 |= r1
    8752	bf 60 00 00 00 00 00 00	r0 = r6
    8753	05 00 38 00 00 00 00 00	goto +0x38 <LBB1_35>

0000000000011190 <LBB1_24>
    8754	07 07 00 00 02 fc ff ff	r7 += -0x3fe
    8755	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8756	65 07 e9 ff fe 07 00 00	if r7 s> 0x7fe goto -0x17 <LBB1_26>

00000000000111a8 <LBB1_25>
    8757	b7 03 00 00 01 00 00 00	r3 = 0x1
    8758	6d 73 18 00 00 00 00 00	if r3 s> r7 goto +0x18 <LBB1_28>
    8759	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r3 = 0xfffffffffffff ll
    8761	5f 32 00 00 00 00 00 00	r2 &= r3
    8762	67 07 00 00 34 00 00 00	r7 <<= 0x34
    8763	4f 27 00 00 00 00 00 00	r7 |= r2
    8764	05 00 20 00 00 00 00 00	goto +0x20 <LBB1_30>

00000000000111e8 <LBB1_5>
    8765	18 02 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r2 = 0x8000000000000 ll
    8767	4f 21 00 00 00 00 00 00	r1 |= r2
    8768	bf 10 00 00 00 00 00 00	r0 = r1
    8769	05 00 28 00 00 00 00 00	goto +0x28 <LBB1_35>

0000000000011210 <LBB1_6>
    8770	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r0 = 0x7ff0000000000000 ll
    8772	1d 05 01 00 00 00 00 00	if r5 == r0 goto +0x1 <LBB1_9>
    8773	05 00 25 00 00 00 00 00	goto +0x25 <LBB1_8>

0000000000011230 <LBB1_9>
    8774	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r0 = 0x7ff8000000000000 ll
    8776	15 03 21 00 00 00 00 00	if r3 == 0x0 goto +0x21 <LBB1_35>
    8777	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8779	5f 26 00 00 00 00 00 00	r6 &= r2
    8780	af 16 00 00 00 00 00 00	r6 ^= r1
    8781	bf 60 00 00 00 00 00 00	r0 = r6
    8782	05 00 1b 00 00 00 00 00	goto +0x1b <LBB1_35>

0000000000011278 <LBB1_28>
    8783	1f 73 00 00 00 00 00 00	r3 -= r7
    8784	67 03 00 00 20 00 00 00	r3 <<= 0x20
    8785	77 03 00 00 20 00 00 00	r3 >>= 0x20
    8786	25 03 17 00 3f 00 00 00	if r3 > 0x3f goto +0x17 <LBB1_35>
    8787	07 07 00 00 ff ff ff ff	r7 += -0x1
    8788	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    8789	bf 14 00 00 00 00 00 00	r4 = r1
    8790	4f 24 00 00 00 00 00 00	r4 |= r2
    8791	6f 74 00 00 00 00 00 00	r4 <<= r7
    8792	7f 31 00 00 00 00 00 00	r1 >>= r3
    8793	4f 14 00 00 00 00 00 00	r4 |= r1
    8794	7f 32 00 00 00 00 00 00	r2 >>= r3
    8795	bf 41 00 00 00 00 00 00	r1 = r4
    8796	bf 27 00 00 00 00 00 00	r7 = r2

00000000000112e8 <LBB1_30>
    8797	bf 72 00 00 00 00 00 00	r2 = r7
    8798	4f 02 00 00 00 00 00 00	r2 |= r0
    8799	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x8000000000000000 ll
    8801	2d 31 06 00 00 00 00 00	if r1 > r3 goto +0x6 <LBB1_32>
    8802	bf 20 00 00 00 00 00 00	r0 = r2
    8803	1d 31 01 00 00 00 00 00	if r1 == r3 goto +0x1 <LBB1_33>
    8804	05 00 05 00 00 00 00 00	goto +0x5 <LBB1_35>

0000000000011328 <LBB1_33>
    8805	57 07 00 00 01 00 00 00	r7 &= 0x1
    8806	0f 72 00 00 00 00 00 00	r2 += r7
    8807	05 00 01 00 00 00 00 00	goto +0x1 <LBB1_34>

0000000000011340 <LBB1_32>
    8808	07 02 00 00 01 00 00 00	r2 += 0x1

0000000000011348 <LBB1_34>
    8809	bf 20 00 00 00 00 00 00	r0 = r2

0000000000011350 <LBB1_35>
    8810	95 00 00 00 00 00 00 00	exit

0000000000011358 <LBB1_8>
    8811	1d 03 01 00 00 00 00 00	if r3 == r0 goto +0x1 <LBB1_13>
    8812	05 00 09 00 00 00 00 00	goto +0x9 <LBB1_11>

0000000000011368 <LBB1_13>
    8813	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r0 = 0x7ff8000000000000 ll
    8815	15 05 fa ff 00 00 00 00	if r5 == 0x0 goto -0x6 <LBB1_35>
    8816	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8818	5f 21 00 00 00 00 00 00	r1 &= r2
    8819	af 61 00 00 00 00 00 00	r1 ^= r6
    8820	bf 10 00 00 00 00 00 00	r0 = r1
    8821	05 00 f4 ff 00 00 00 00	goto -0xc <LBB1_35>

00000000000113b0 <LBB1_11>
    8822	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8823	15 05 f2 ff 00 00 00 00	if r5 == 0x0 goto -0xe <LBB1_35>
    8824	15 03 f1 ff 00 00 00 00	if r3 == 0x0 goto -0xf <LBB1_35>
    8825	bf 36 00 00 00 00 00 00	r6 = r3
    8826	b7 09 00 00 00 00 00 00	r9 = 0x0
    8827	18 01 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r1 = 0x10000000000000 ll
    8829	2d 51 02 00 00 00 00 00	if r1 > r5 goto +0x2 <LBB1_17>
    8830	2d 61 35 00 00 00 00 00	if r1 > r6 goto +0x35 <LBB1_20>
    8831	05 00 81 ff 00 00 00 00	goto -0x7f <LBB1_2>

0000000000011400 <LBB1_17>
    8832	b7 00 00 00 40 00 00 00	r0 = 0x40
    8833	15 04 2b 00 00 00 00 00	if r4 == 0x0 goto +0x2b <LBB1_19>
    8834	bf 45 00 00 00 00 00 00	r5 = r4
    8835	77 05 00 00 01 00 00 00	r5 >>= 0x1
    8836	bf 43 00 00 00 00 00 00	r3 = r4
    8837	4f 53 00 00 00 00 00 00	r3 |= r5
    8838	bf 35 00 00 00 00 00 00	r5 = r3
    8839	77 05 00 00 02 00 00 00	r5 >>= 0x2
    8840	4f 53 00 00 00 00 00 00	r3 |= r5
    8841	bf 35 00 00 00 00 00 00	r5 = r3
    8842	77 05 00 00 04 00 00 00	r5 >>= 0x4
    8843	4f 53 00 00 00 00 00 00	r3 |= r5
    8844	bf 35 00 00 00 00 00 00	r5 = r3
    8845	77 05 00 00 08 00 00 00	r5 >>= 0x8
    8846	4f 53 00 00 00 00 00 00	r3 |= r5
    8847	bf 35 00 00 00 00 00 00	r5 = r3
    8848	77 05 00 00 10 00 00 00	r5 >>= 0x10
    8849	4f 53 00 00 00 00 00 00	r3 |= r5
    8850	bf 35 00 00 00 00 00 00	r5 = r3
    8851	77 05 00 00 20 00 00 00	r5 >>= 0x20
    8852	4f 53 00 00 00 00 00 00	r3 |= r5
    8853	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    8854	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    8856	bf 30 00 00 00 00 00 00	r0 = r3
    8857	77 00 00 00 01 00 00 00	r0 >>= 0x1
    8858	5f 50 00 00 00 00 00 00	r0 &= r5
    8859	1f 03 00 00 00 00 00 00	r3 -= r0
    8860	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    8862	bf 30 00 00 00 00 00 00	r0 = r3
    8863	5f 50 00 00 00 00 00 00	r0 &= r5
    8864	77 03 00 00 02 00 00 00	r3 >>= 0x2
    8865	5f 53 00 00 00 00 00 00	r3 &= r5
    8866	0f 30 00 00 00 00 00 00	r0 += r3
    8867	bf 03 00 00 00 00 00 00	r3 = r0
    8868	77 03 00 00 04 00 00 00	r3 >>= 0x4
    8869	0f 30 00 00 00 00 00 00	r0 += r3
    8870	18 03 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r3 = 0xf0f0f0f0f0f0f0f ll
    8872	5f 30 00 00 00 00 00 00	r0 &= r3
    8873	18 03 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r3 = 0x101010101010101 ll
    8875	2f 30 00 00 00 00 00 00	r0 *= r3
    8876	77 00 00 00 38 00 00 00	r0 >>= 0x38

0000000000011568 <LBB1_19>
    8877	b7 09 00 00 0c 00 00 00	r9 = 0xc
    8878	1f 09 00 00 00 00 00 00	r9 -= r0
    8879	07 00 00 00 35 00 00 00	r0 += 0x35
    8880	57 00 00 00 3f 00 00 00	r0 &= 0x3f
    8881	6f 04 00 00 00 00 00 00	r4 <<= r0
    8882	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB1_20>
    8883	05 00 4d ff 00 00 00 00	goto -0xb3 <LBB1_2>

00000000000115a0 <LBB1_20>
    8884	b7 03 00 00 40 00 00 00	r3 = 0x40
    8885	15 02 2b 00 00 00 00 00	if r2 == 0x0 goto +0x2b <LBB1_22>
    8886	bf 23 00 00 00 00 00 00	r3 = r2
    8887	77 03 00 00 01 00 00 00	r3 >>= 0x1
    8888	bf 21 00 00 00 00 00 00	r1 = r2
    8889	4f 31 00 00 00 00 00 00	r1 |= r3
    8890	bf 13 00 00 00 00 00 00	r3 = r1
    8891	77 03 00 00 02 00 00 00	r3 >>= 0x2
    8892	4f 31 00 00 00 00 00 00	r1 |= r3
    8893	bf 13 00 00 00 00 00 00	r3 = r1
    8894	77 03 00 00 04 00 00 00	r3 >>= 0x4
    8895	4f 31 00 00 00 00 00 00	r1 |= r3
    8896	bf 13 00 00 00 00 00 00	r3 = r1
    8897	77 03 00 00 08 00 00 00	r3 >>= 0x8
    8898	4f 31 00 00 00 00 00 00	r1 |= r3
    8899	bf 13 00 00 00 00 00 00	r3 = r1
    8900	77 03 00 00 10 00 00 00	r3 >>= 0x10
    8901	4f 31 00 00 00 00 00 00	r1 |= r3
    8902	bf 13 00 00 00 00 00 00	r3 = r1
    8903	77 03 00 00 20 00 00 00	r3 >>= 0x20
    8904	4f 31 00 00 00 00 00 00	r1 |= r3
    8905	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    8906	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    8908	bf 15 00 00 00 00 00 00	r5 = r1
    8909	77 05 00 00 01 00 00 00	r5 >>= 0x1
    8910	5f 35 00 00 00 00 00 00	r5 &= r3
    8911	1f 51 00 00 00 00 00 00	r1 -= r5
    8912	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    8914	bf 13 00 00 00 00 00 00	r3 = r1
    8915	5f 53 00 00 00 00 00 00	r3 &= r5
    8916	77 01 00 00 02 00 00 00	r1 >>= 0x2
    8917	5f 51 00 00 00 00 00 00	r1 &= r5
    8918	0f 13 00 00 00 00 00 00	r3 += r1
    8919	bf 31 00 00 00 00 00 00	r1 = r3
    8920	77 01 00 00 04 00 00 00	r1 >>= 0x4
    8921	0f 13 00 00 00 00 00 00	r3 += r1
    8922	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    8924	5f 13 00 00 00 00 00 00	r3 &= r1
    8925	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    8927	2f 13 00 00 00 00 00 00	r3 *= r1
    8928	77 03 00 00 38 00 00 00	r3 >>= 0x38

0000000000011708 <LBB1_22>
    8929	1f 39 00 00 00 00 00 00	r9 -= r3
    8930	07 03 00 00 35 00 00 00	r3 += 0x35
    8931	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    8932	6f 32 00 00 00 00 00 00	r2 <<= r3
    8933	07 09 00 00 0c 00 00 00	r9 += 0xc
    8934	05 00 1a ff 00 00 00 00	goto -0xe6 <LBB1_2>

0000000000011738 <memcpy>
    8935	bf 16 00 00 00 00 00 00	r6 = r1
    8936	bf 34 00 00 00 00 00 00	r4 = r3
    8937	77 04 00 00 03 00 00 00	r4 >>= 0x3
    8938	bf 41 00 00 00 00 00 00	r1 = r4
    8939	27 01 00 00 f9 ff ff ff	r1 *= -0x7
    8940	0f 31 00 00 00 00 00 00	r1 += r3
    8941	25 01 18 00 0f 00 00 00	if r1 > 0xf goto +0x18 <LBB0_2>
    8942	b7 01 00 00 00 00 00 00	r1 = 0x0
    8943	b7 05 00 00 08 00 00 00	r5 = 0x8
    8944	2d 35 0b 00 00 00 00 00	if r5 > r3 goto +0xb <LBB0_6>
    8945	b7 01 00 00 00 00 00 00	r1 = 0x0
    8946	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000011798 <LBB0_5>
    8947	bf 60 00 00 00 00 00 00	r0 = r6
    8948	0f 10 00 00 00 00 00 00	r0 += r1
    8949	bf 27 00 00 00 00 00 00	r7 = r2
    8950	0f 17 00 00 00 00 00 00	r7 += r1
    8951	79 77 00 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x0)
    8952	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    8953	07 01 00 00 08 00 00 00	r1 += 0x8
    8954	07 05 00 00 01 00 00 00	r5 += 0x1
    8955	2d 54 f7 ff 00 00 00 00	if r4 > r5 goto -0x9 <LBB0_5>

00000000000117e0 <LBB0_6>
    8956	7d 31 0b 00 00 00 00 00	if r1 s>= r3 goto +0xb <LBB0_3>

00000000000117e8 <LBB0_7>
    8957	bf 64 00 00 00 00 00 00	r4 = r6
    8958	0f 14 00 00 00 00 00 00	r4 += r1
    8959	bf 25 00 00 00 00 00 00	r5 = r2
    8960	0f 15 00 00 00 00 00 00	r5 += r1
    8961	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
    8962	73 54 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r5
    8963	07 01 00 00 01 00 00 00	r1 += 0x1
    8964	6d 13 f8 ff 00 00 00 00	if r3 s> r1 goto -0x8 <LBB0_7>
    8965	05 00 02 00 00 00 00 00	goto +0x2 <LBB0_3>

0000000000011830 <LBB0_2>
    8966	bf 61 00 00 00 00 00 00	r1 = r6
    8967	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcpy_

0000000000011840 <LBB0_3>
    8968	bf 60 00 00 00 00 00 00	r0 = r6
    8969	95 00 00 00 00 00 00 00	exit

0000000000011850 <memset>
    8970	bf 16 00 00 00 00 00 00	r6 = r1
    8971	bf 34 00 00 00 00 00 00	r4 = r3
    8972	77 04 00 00 03 00 00 00	r4 >>= 0x3
    8973	bf 41 00 00 00 00 00 00	r1 = r4
    8974	27 01 00 00 f9 ff ff ff	r1 *= -0x7
    8975	0f 31 00 00 00 00 00 00	r1 += r3
    8976	25 01 17 00 0f 00 00 00	if r1 > 0xf goto +0x17 <LBB2_2>
    8977	b7 01 00 00 00 00 00 00	r1 = 0x0
    8978	b7 05 00 00 08 00 00 00	r5 = 0x8
    8979	2d 35 0d 00 00 00 00 00	if r5 > r3 goto +0xd <LBB2_6>
    8980	bf 25 00 00 00 00 00 00	r5 = r2
    8981	57 05 00 00 ff 00 00 00	r5 &= 0xff
    8982	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    8984	2f 15 00 00 00 00 00 00	r5 *= r1
    8985	b7 01 00 00 00 00 00 00	r1 = 0x0
    8986	b7 00 00 00 00 00 00 00	r0 = 0x0

00000000000118d8 <LBB2_5>
    8987	bf 67 00 00 00 00 00 00	r7 = r6
    8988	0f 17 00 00 00 00 00 00	r7 += r1
    8989	7b 57 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r5
    8990	07 01 00 00 08 00 00 00	r1 += 0x8
    8991	07 00 00 00 01 00 00 00	r0 += 0x1
    8992	2d 04 fa ff 00 00 00 00	if r4 > r0 goto -0x6 <LBB2_5>

0000000000011908 <LBB2_6>
    8993	7d 31 09 00 00 00 00 00	if r1 s>= r3 goto +0x9 <LBB2_3>

0000000000011910 <LBB2_7>
    8994	bf 64 00 00 00 00 00 00	r4 = r6
    8995	0f 14 00 00 00 00 00 00	r4 += r1
    8996	73 24 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r2
    8997	07 01 00 00 01 00 00 00	r1 += 0x1
    8998	6d 13 fb ff 00 00 00 00	if r3 s> r1 goto -0x5 <LBB2_7>
    8999	05 00 03 00 00 00 00 00	goto +0x3 <LBB2_3>

0000000000011940 <LBB2_2>
    9000	57 02 00 00 ff 00 00 00	r2 &= 0xff
    9001	bf 61 00 00 00 00 00 00	r1 = r6
    9002	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memset_

0000000000011958 <LBB2_3>
    9003	bf 60 00 00 00 00 00 00	r0 = r6
    9004	95 00 00 00 00 00 00 00	exit

0000000000011968 <memcmp>
    9005	bf 35 00 00 00 00 00 00	r5 = r3
    9006	77 05 00 00 03 00 00 00	r5 >>= 0x3
    9007	bf 54 00 00 00 00 00 00	r4 = r5
    9008	27 04 00 00 f9 ff ff ff	r4 *= -0x7
    9009	0f 34 00 00 00 00 00 00	r4 += r3
    9010	25 04 1d 00 0f 00 00 00	if r4 > 0xf goto +0x1d <LBB3_2>
    9011	b7 00 00 00 00 00 00 00	r0 = 0x0
    9012	b7 06 00 00 08 00 00 00	r6 = 0x8
    9013	b7 04 00 00 00 00 00 00	r4 = 0x0
    9014	2d 36 0b 00 00 00 00 00	if r6 > r3 goto +0xb <LBB3_7>
    9015	b7 04 00 00 00 00 00 00	r4 = 0x0
    9016	bf 16 00 00 00 00 00 00	r6 = r1
    9017	bf 27 00 00 00 00 00 00	r7 = r2

00000000000119d0 <LBB3_4>
    9018	79 78 00 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x0)
    9019	79 69 00 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x0)
    9020	5d 89 04 00 00 00 00 00	if r9 != r8 goto +0x4 <LBB3_6>
    9021	07 06 00 00 08 00 00 00	r6 += 0x8
    9022	07 07 00 00 08 00 00 00	r7 += 0x8
    9023	07 04 00 00 01 00 00 00	r4 += 0x1
    9024	2d 45 f9 ff 00 00 00 00	if r5 > r4 goto -0x7 <LBB3_4>

0000000000011a08 <LBB3_6>
    9025	67 04 00 00 03 00 00 00	r4 <<= 0x3

0000000000011a10 <LBB3_7>
    9026	7d 34 13 00 00 00 00 00	if r4 s>= r3 goto +0x13 <LBB3_12>
    9027	05 00 02 00 00 00 00 00	goto +0x2 <LBB3_10>

0000000000011a20 <LBB3_9>
    9028	07 04 00 00 01 00 00 00	r4 += 0x1
    9029	7d 34 10 00 00 00 00 00	if r4 s>= r3 goto +0x10 <LBB3_12>

0000000000011a30 <LBB3_10>
    9030	bf 16 00 00 00 00 00 00	r6 = r1
    9031	0f 46 00 00 00 00 00 00	r6 += r4
    9032	bf 25 00 00 00 00 00 00	r5 = r2
    9033	0f 45 00 00 00 00 00 00	r5 += r4
    9034	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
    9035	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    9036	1d 56 f7 ff 00 00 00 00	if r6 == r5 goto -0x9 <LBB3_9>
    9037	1f 56 00 00 00 00 00 00	r6 -= r5
    9038	bf 60 00 00 00 00 00 00	r0 = r6
    9039	05 00 06 00 00 00 00 00	goto +0x6 <LBB3_12>

0000000000011a80 <LBB3_2>
    9040	b7 04 00 00 00 00 00 00	r4 = 0x0
    9041	63 4a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r4
    9042	bf a4 00 00 00 00 00 00	r4 = r10
    9043	07 04 00 00 fc ff ff ff	r4 += -0x4
    9044	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcmp_
    9045	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 0x4)

0000000000011ab0 <LBB3_12>
    9046	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9047	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    9048	95 00 00 00 00 00 00 00	exit

0000000000011ac8 <compiler_builtins::float::add::__adddf3>
    9049	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    9051	bf 24 00 00 00 00 00 00	r4 = r2
    9052	5f 34 00 00 00 00 00 00	r4 &= r3
    9053	bf 15 00 00 00 00 00 00	r5 = r1
    9054	5f 35 00 00 00 00 00 00	r5 &= r3
    9055	bf 50 00 00 00 00 00 00	r0 = r5
    9056	07 00 00 00 ff ff ff ff	r0 += -0x1
    9057	18 03 00 00 fe ff ff ff 00 00 00 00 ff ff ef 7f	r3 = 0x7feffffffffffffe ll
    9059	2d 30 94 00 00 00 00 00	if r0 > r3 goto +0x94 <LBB1_18>
    9060	bf 40 00 00 00 00 00 00	r0 = r4
    9061	07 00 00 00 ff ff ff ff	r0 += -0x1
    9062	2d 30 91 00 00 00 00 00	if r0 > r3 goto +0x91 <LBB1_18>

0000000000011b38 <LBB1_2>
    9063	bf 23 00 00 00 00 00 00	r3 = r2
    9064	2d 54 01 00 00 00 00 00	if r4 > r5 goto +0x1 <LBB1_4>
    9065	bf 13 00 00 00 00 00 00	r3 = r1

0000000000011b50 <LBB1_4>
    9066	2d 54 01 00 00 00 00 00	if r4 > r5 goto +0x1 <LBB1_6>
    9067	bf 21 00 00 00 00 00 00	r1 = r2

0000000000011b60 <LBB1_6>
    9068	18 06 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r6 = 0xfffffffffffff ll
    9070	bf 34 00 00 00 00 00 00	r4 = r3
    9071	5f 64 00 00 00 00 00 00	r4 &= r6
    9072	bf 10 00 00 00 00 00 00	r0 = r1
    9073	77 00 00 00 34 00 00 00	r0 >>= 0x34
    9074	57 00 00 00 ff 07 00 00	r0 &= 0x7ff
    9075	bf 32 00 00 00 00 00 00	r2 = r3
    9076	77 02 00 00 34 00 00 00	r2 >>= 0x34
    9077	57 02 00 00 ff 07 00 00	r2 &= 0x7ff
    9078	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB1_7>
    9079	05 00 32 00 00 00 00 00	goto +0x32 <LBB1_10>

0000000000011bc0 <LBB1_7>
    9080	b7 05 00 00 40 00 00 00	r5 = 0x40
    9081	15 04 2b 00 00 00 00 00	if r4 == 0x0 goto +0x2b <LBB1_9>
    9082	bf 45 00 00 00 00 00 00	r5 = r4
    9083	77 05 00 00 01 00 00 00	r5 >>= 0x1
    9084	bf 42 00 00 00 00 00 00	r2 = r4
    9085	4f 52 00 00 00 00 00 00	r2 |= r5
    9086	bf 25 00 00 00 00 00 00	r5 = r2
    9087	77 05 00 00 02 00 00 00	r5 >>= 0x2
    9088	4f 52 00 00 00 00 00 00	r2 |= r5
    9089	bf 25 00 00 00 00 00 00	r5 = r2
    9090	77 05 00 00 04 00 00 00	r5 >>= 0x4
    9091	4f 52 00 00 00 00 00 00	r2 |= r5
    9092	bf 25 00 00 00 00 00 00	r5 = r2
    9093	77 05 00 00 08 00 00 00	r5 >>= 0x8
    9094	4f 52 00 00 00 00 00 00	r2 |= r5
    9095	bf 25 00 00 00 00 00 00	r5 = r2
    9096	77 05 00 00 10 00 00 00	r5 >>= 0x10
    9097	4f 52 00 00 00 00 00 00	r2 |= r5
    9098	bf 25 00 00 00 00 00 00	r5 = r2
    9099	77 05 00 00 20 00 00 00	r5 >>= 0x20
    9100	4f 52 00 00 00 00 00 00	r2 |= r5
    9101	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    9102	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    9104	bf 27 00 00 00 00 00 00	r7 = r2
    9105	77 07 00 00 01 00 00 00	r7 >>= 0x1
    9106	5f 57 00 00 00 00 00 00	r7 &= r5
    9107	1f 72 00 00 00 00 00 00	r2 -= r7
    9108	18 07 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r7 = 0x3333333333333333 ll
    9110	bf 25 00 00 00 00 00 00	r5 = r2
    9111	5f 75 00 00 00 00 00 00	r5 &= r7
    9112	77 02 00 00 02 00 00 00	r2 >>= 0x2
    9113	5f 72 00 00 00 00 00 00	r2 &= r7
    9114	0f 25 00 00 00 00 00 00	r5 += r2
    9115	bf 52 00 00 00 00 00 00	r2 = r5
    9116	77 02 00 00 04 00 00 00	r2 >>= 0x4
    9117	0f 25 00 00 00 00 00 00	r5 += r2
    9118	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    9120	5f 25 00 00 00 00 00 00	r5 &= r2
    9121	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    9123	2f 25 00 00 00 00 00 00	r5 *= r2
    9124	77 05 00 00 38 00 00 00	r5 >>= 0x38

0000000000011d28 <LBB1_9>
    9125	b7 02 00 00 0c 00 00 00	r2 = 0xc
    9126	1f 52 00 00 00 00 00 00	r2 -= r5
    9127	07 05 00 00 35 00 00 00	r5 += 0x35
    9128	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    9129	6f 54 00 00 00 00 00 00	r4 <<= r5

0000000000011d50 <LBB1_10>
    9130	bf 15 00 00 00 00 00 00	r5 = r1
    9131	5f 65 00 00 00 00 00 00	r5 &= r6
    9132	55 00 32 00 00 00 00 00	if r0 != 0x0 goto +0x32 <LBB1_14>
    9133	b7 06 00 00 40 00 00 00	r6 = 0x40
    9134	15 05 2b 00 00 00 00 00	if r5 == 0x0 goto +0x2b <LBB1_13>
    9135	bf 56 00 00 00 00 00 00	r6 = r5
    9136	77 06 00 00 01 00 00 00	r6 >>= 0x1
    9137	bf 50 00 00 00 00 00 00	r0 = r5
    9138	4f 60 00 00 00 00 00 00	r0 |= r6
    9139	bf 06 00 00 00 00 00 00	r6 = r0
    9140	77 06 00 00 02 00 00 00	r6 >>= 0x2
    9141	4f 60 00 00 00 00 00 00	r0 |= r6
    9142	bf 06 00 00 00 00 00 00	r6 = r0
    9143	77 06 00 00 04 00 00 00	r6 >>= 0x4
    9144	4f 60 00 00 00 00 00 00	r0 |= r6
    9145	bf 06 00 00 00 00 00 00	r6 = r0
    9146	77 06 00 00 08 00 00 00	r6 >>= 0x8
    9147	4f 60 00 00 00 00 00 00	r0 |= r6
    9148	bf 06 00 00 00 00 00 00	r6 = r0
    9149	77 06 00 00 10 00 00 00	r6 >>= 0x10
    9150	4f 60 00 00 00 00 00 00	r0 |= r6
    9151	bf 06 00 00 00 00 00 00	r6 = r0
    9152	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9153	4f 60 00 00 00 00 00 00	r0 |= r6
    9154	a7 00 00 00 ff ff ff ff	r0 ^= -0x1
    9155	18 06 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r6 = 0x5555555555555555 ll
    9157	bf 07 00 00 00 00 00 00	r7 = r0
    9158	77 07 00 00 01 00 00 00	r7 >>= 0x1
    9159	5f 67 00 00 00 00 00 00	r7 &= r6
    9160	1f 70 00 00 00 00 00 00	r0 -= r7
    9161	18 07 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r7 = 0x3333333333333333 ll
    9163	bf 06 00 00 00 00 00 00	r6 = r0
    9164	5f 76 00 00 00 00 00 00	r6 &= r7
    9165	77 00 00 00 02 00 00 00	r0 >>= 0x2
    9166	5f 70 00 00 00 00 00 00	r0 &= r7
    9167	0f 06 00 00 00 00 00 00	r6 += r0
    9168	bf 60 00 00 00 00 00 00	r0 = r6
    9169	77 00 00 00 04 00 00 00	r0 >>= 0x4
    9170	0f 06 00 00 00 00 00 00	r6 += r0
    9171	18 00 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r0 = 0xf0f0f0f0f0f0f0f ll
    9173	5f 06 00 00 00 00 00 00	r6 &= r0
    9174	18 00 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r0 = 0x101010101010101 ll
    9176	2f 06 00 00 00 00 00 00	r6 *= r0
    9177	77 06 00 00 38 00 00 00	r6 >>= 0x38

0000000000011ed0 <LBB1_13>
    9178	b7 00 00 00 0c 00 00 00	r0 = 0xc
    9179	1f 60 00 00 00 00 00 00	r0 -= r6
    9180	07 06 00 00 35 00 00 00	r6 += 0x35
    9181	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    9182	6f 65 00 00 00 00 00 00	r5 <<= r6

0000000000011ef8 <LBB1_14>
    9183	af 31 00 00 00 00 00 00	r1 ^= r3
    9184	67 05 00 00 03 00 00 00	r5 <<= 0x3
    9185	18 06 00 00 00 00 00 00 00 00 00 00 00 00 80 00	r6 = 0x80000000000000 ll
    9187	4f 65 00 00 00 00 00 00	r5 |= r6
    9188	67 04 00 00 03 00 00 00	r4 <<= 0x3
    9189	bf 27 00 00 00 00 00 00	r7 = r2
    9190	1f 07 00 00 00 00 00 00	r7 -= r0
    9191	bf 50 00 00 00 00 00 00	r0 = r5
    9192	55 07 19 00 00 00 00 00	if r7 != 0x0 goto +0x19 <LBB1_21>

0000000000011f48 <LBB1_15>
    9193	4f 64 00 00 00 00 00 00	r4 |= r6
    9194	65 01 01 00 ff ff ff ff	if r1 s> -0x1 goto +0x1 <LBB1_16>
    9195	05 00 2d 00 00 00 00 00	goto +0x2d <LBB1_26>

0000000000011f60 <LBB1_16>
    9196	0f 40 00 00 00 00 00 00	r0 += r4
    9197	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01	r1 = 0x100000000000000 ll
    9199	bf 04 00 00 00 00 00 00	r4 = r0
    9200	5f 14 00 00 00 00 00 00	r4 &= r1
    9201	15 04 5e 00 00 00 00 00	if r4 == 0x0 goto +0x5e <LBB1_29>
    9202	bf 01 00 00 00 00 00 00	r1 = r0
    9203	77 01 00 00 01 00 00 00	r1 >>= 0x1
    9204	57 00 00 00 01 00 00 00	r0 &= 0x1
    9205	4f 10 00 00 00 00 00 00	r0 |= r1
    9206	07 02 00 00 01 00 00 00	r2 += 0x1
    9207	05 00 58 00 00 00 00 00	goto +0x58 <LBB1_29>

0000000000011fc0 <LBB1_18>
    9208	18 03 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r3 = 0x7ff0000000000000 ll
    9210	2d 35 1a 00 00 00 00 00	if r5 > r3 goto +0x1a <LBB1_25>
    9211	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB1_20>
    9212	05 00 7e 00 00 00 00 00	goto +0x7e <LBB1_38>

0000000000011fe8 <LBB1_20>
    9213	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    9215	4f 14 00 00 00 00 00 00	r4 |= r1
    9216	bf 45 00 00 00 00 00 00	r5 = r4
    9217	05 00 87 00 00 00 00 00	goto +0x87 <LBB1_42>

0000000000012010 <LBB1_21>
    9218	b7 00 00 00 01 00 00 00	r0 = 0x1
    9219	bf 78 00 00 00 00 00 00	r8 = r7
    9220	67 08 00 00 20 00 00 00	r8 <<= 0x20
    9221	77 08 00 00 20 00 00 00	r8 >>= 0x20
    9222	25 08 e2 ff 3f 00 00 00	if r8 > 0x3f goto -0x1e <LBB1_15>
    9223	bf 70 00 00 00 00 00 00	r0 = r7
    9224	87 00 00 00 00 00 00 00	r0 = -r0
    9225	57 00 00 00 3f 00 00 00	r0 &= 0x3f
    9226	bf 58 00 00 00 00 00 00	r8 = r5
    9227	6f 08 00 00 00 00 00 00	r8 <<= r0
    9228	b7 00 00 00 01 00 00 00	r0 = 0x1
    9229	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB1_24>
    9230	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000012078 <LBB1_24>
    9231	67 07 00 00 20 00 00 00	r7 <<= 0x20
    9232	77 07 00 00 20 00 00 00	r7 >>= 0x20
    9233	7f 75 00 00 00 00 00 00	r5 >>= r7
    9234	4f 05 00 00 00 00 00 00	r5 |= r0
    9235	bf 50 00 00 00 00 00 00	r0 = r5
    9236	05 00 d4 ff 00 00 00 00	goto -0x2c <LBB1_15>

00000000000120a8 <LBB1_25>
    9237	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    9239	4f 15 00 00 00 00 00 00	r5 |= r1
    9240	05 00 70 00 00 00 00 00	goto +0x70 <LBB1_42>

00000000000120c8 <LBB1_26>
    9241	1f 04 00 00 00 00 00 00	r4 -= r0
    9242	b7 05 00 00 00 00 00 00	r5 = 0x0
    9243	15 04 6d 00 00 00 00 00	if r4 == 0x0 goto +0x6d <LBB1_42>
    9244	18 01 00 00 ff ff ff ff 00 00 00 00 ff ff 7f 00	r1 = 0x7fffffffffffff ll
    9246	bf 40 00 00 00 00 00 00	r0 = r4
    9247	2d 14 30 00 00 00 00 00	if r4 > r1 goto +0x30 <LBB1_29>
    9248	bf 45 00 00 00 00 00 00	r5 = r4
    9249	77 05 00 00 01 00 00 00	r5 >>= 0x1
    9250	bf 41 00 00 00 00 00 00	r1 = r4
    9251	4f 51 00 00 00 00 00 00	r1 |= r5
    9252	bf 15 00 00 00 00 00 00	r5 = r1
    9253	77 05 00 00 02 00 00 00	r5 >>= 0x2
    9254	4f 51 00 00 00 00 00 00	r1 |= r5
    9255	bf 15 00 00 00 00 00 00	r5 = r1
    9256	77 05 00 00 04 00 00 00	r5 >>= 0x4
    9257	4f 51 00 00 00 00 00 00	r1 |= r5
    9258	bf 15 00 00 00 00 00 00	r5 = r1
    9259	77 05 00 00 08 00 00 00	r5 >>= 0x8
    9260	4f 51 00 00 00 00 00 00	r1 |= r5
    9261	bf 15 00 00 00 00 00 00	r5 = r1
    9262	77 05 00 00 10 00 00 00	r5 >>= 0x10
    9263	4f 51 00 00 00 00 00 00	r1 |= r5
    9264	bf 15 00 00 00 00 00 00	r5 = r1
    9265	77 05 00 00 20 00 00 00	r5 >>= 0x20
    9266	4f 51 00 00 00 00 00 00	r1 |= r5
    9267	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    9268	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    9270	bf 10 00 00 00 00 00 00	r0 = r1
    9271	77 00 00 00 01 00 00 00	r0 >>= 0x1
    9272	5f 50 00 00 00 00 00 00	r0 &= r5
    9273	1f 01 00 00 00 00 00 00	r1 -= r0
    9274	18 00 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r0 = 0x3333333333333333 ll
    9276	bf 15 00 00 00 00 00 00	r5 = r1
    9277	5f 05 00 00 00 00 00 00	r5 &= r0
    9278	77 01 00 00 02 00 00 00	r1 >>= 0x2
    9279	5f 01 00 00 00 00 00 00	r1 &= r0
    9280	0f 15 00 00 00 00 00 00	r5 += r1
    9281	bf 51 00 00 00 00 00 00	r1 = r5
    9282	77 01 00 00 04 00 00 00	r1 >>= 0x4
    9283	0f 15 00 00 00 00 00 00	r5 += r1
    9284	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    9286	5f 15 00 00 00 00 00 00	r5 &= r1
    9287	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    9289	2f 15 00 00 00 00 00 00	r5 *= r1
    9290	77 05 00 00 38 00 00 00	r5 >>= 0x38
    9291	07 05 00 00 f8 ff ff ff	r5 += -0x8
    9292	1f 52 00 00 00 00 00 00	r2 -= r5
    9293	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    9294	6f 54 00 00 00 00 00 00	r4 <<= r5
    9295	bf 40 00 00 00 00 00 00	r0 = r4

0000000000012280 <LBB1_29>
    9296	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r1 = -0x8000000000000000 ll
    9298	5f 13 00 00 00 00 00 00	r3 &= r1
    9299	65 02 01 00 fe 07 00 00	if r2 s> 0x7fe goto +0x1 <LBB1_30>
    9300	05 00 05 00 00 00 00 00	goto +0x5 <LBB1_31>

00000000000122a8 <LBB1_30>
    9301	18 01 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r1 = 0x7ff0000000000000 ll
    9303	4f 13 00 00 00 00 00 00	r3 |= r1
    9304	bf 35 00 00 00 00 00 00	r5 = r3
    9305	05 00 2f 00 00 00 00 00	goto +0x2f <LBB1_42>

00000000000122d0 <LBB1_31>
    9306	b7 01 00 00 01 00 00 00	r1 = 0x1
    9307	6d 21 01 00 00 00 00 00	if r1 s> r2 goto +0x1 <LBB1_32>
    9308	05 00 0d 00 00 00 00 00	goto +0xd <LBB1_35>

00000000000122e8 <LBB1_32>
    9309	bf 24 00 00 00 00 00 00	r4 = r2
    9310	07 04 00 00 ff ff ff ff	r4 += -0x1
    9311	57 04 00 00 3f 00 00 00	r4 &= 0x3f
    9312	bf 05 00 00 00 00 00 00	r5 = r0
    9313	6f 45 00 00 00 00 00 00	r5 <<= r4
    9314	b7 04 00 00 01 00 00 00	r4 = 0x1
    9315	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB1_34>
    9316	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000012328 <LBB1_34>
    9317	1f 21 00 00 00 00 00 00	r1 -= r2
    9318	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    9319	7f 10 00 00 00 00 00 00	r0 >>= r1
    9320	4f 40 00 00 00 00 00 00	r0 |= r4
    9321	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000012350 <LBB1_35>
    9322	bf 01 00 00 00 00 00 00	r1 = r0
    9323	77 01 00 00 03 00 00 00	r1 >>= 0x3
    9324	18 04 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r4 = 0xfffffffffffff ll
    9326	bf 15 00 00 00 00 00 00	r5 = r1
    9327	5f 45 00 00 00 00 00 00	r5 &= r4
    9328	67 02 00 00 34 00 00 00	r2 <<= 0x34
    9329	4f 52 00 00 00 00 00 00	r2 |= r5
    9330	4f 32 00 00 00 00 00 00	r2 |= r3
    9331	57 00 00 00 07 00 00 00	r0 &= 0x7
    9332	25 00 12 00 04 00 00 00	if r0 > 0x4 goto +0x12 <LBB1_40>
    9333	bf 25 00 00 00 00 00 00	r5 = r2
    9334	15 00 01 00 04 00 00 00	if r0 == 0x4 goto +0x1 <LBB1_37>
    9335	05 00 11 00 00 00 00 00	goto +0x11 <LBB1_42>

00000000000123c0 <LBB1_37>
    9336	57 01 00 00 01 00 00 00	r1 &= 0x1
    9337	0f 12 00 00 00 00 00 00	r2 += r1
    9338	05 00 0d 00 00 00 00 00	goto +0xd <LBB1_41>

00000000000123d8 <LBB1_38>
    9339	18 03 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r3 = 0x7ff0000000000000 ll
    9341	1d 35 01 00 00 00 00 00	if r5 == r3 goto +0x1 <LBB1_39>
    9342	05 00 0c 00 00 00 00 00	goto +0xc <LBB1_44>

00000000000123f8 <LBB1_39>
    9343	af 12 00 00 00 00 00 00	r2 ^= r1
    9344	18 05 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r5 = 0x7ff8000000000000 ll
    9346	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x8000000000000000 ll
    9348	bf 10 00 00 00 00 00 00	r0 = r1
    9349	1d 32 03 00 00 00 00 00	if r2 == r3 goto +0x3 <LBB1_42>
    9350	05 00 03 00 00 00 00 00	goto +0x3 <LBB1_43>

0000000000012438 <LBB1_40>
    9351	07 02 00 00 01 00 00 00	r2 += 0x1

0000000000012440 <LBB1_41>
    9352	bf 25 00 00 00 00 00 00	r5 = r2

0000000000012448 <LBB1_42>
    9353	bf 50 00 00 00 00 00 00	r0 = r5

0000000000012450 <LBB1_43>
    9354	95 00 00 00 00 00 00 00	exit

0000000000012458 <LBB1_44>
    9355	bf 20 00 00 00 00 00 00	r0 = r2
    9356	1d 34 fd ff 00 00 00 00	if r4 == r3 goto -0x3 <LBB1_43>
    9357	15 05 03 00 00 00 00 00	if r5 == 0x0 goto +0x3 <LBB1_47>
    9358	bf 10 00 00 00 00 00 00	r0 = r1
    9359	15 04 fa ff 00 00 00 00	if r4 == 0x0 goto -0x6 <LBB1_43>
    9360	05 00 d6 fe 00 00 00 00	goto -0x12a <LBB1_2>

0000000000012488 <LBB1_47>
    9361	bf 20 00 00 00 00 00 00	r0 = r2
    9362	55 04 f7 ff 00 00 00 00	if r4 != 0x0 goto -0x9 <LBB1_43>
    9363	5f 12 00 00 00 00 00 00	r2 &= r1
    9364	05 00 f3 ff 00 00 00 00	goto -0xd <LBB1_41>

00000000000124a8 <__floatundidf>
    9365	bf 16 00 00 00 00 00 00	r6 = r1
    9366	77 01 00 00 20 00 00 00	r1 >>= 0x20
    9367	18 02 00 00 00 00 00 00 00 00 00 00 00 00 30 45	r2 = 0x4530000000000000 ll
    9369	4f 21 00 00 00 00 00 00	r1 |= r2
    9370	18 02 00 00 00 00 10 00 00 00 00 00 00 00 30 c5	r2 = -0x3acffffffff00000 ll
    9372	85 10 00 00 e3 fc ff ff	call -0x31d ; <__adddf3>
    9373	67 06 00 00 20 00 00 00	r6 <<= 0x20
    9374	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9375	18 01 00 00 00 00 00 00 00 00 00 00 00 00 30 43	r1 = 0x4330000000000000 ll
    9377	4f 16 00 00 00 00 00 00	r6 |= r1
    9378	bf 01 00 00 00 00 00 00	r1 = r0
    9379	bf 62 00 00 00 00 00 00	r2 = r6
    9380	85 10 00 00 db fc ff ff	call -0x325 ; <__adddf3>
    9381	95 00 00 00 00 00 00 00	exit

0000000000012530 <__multi3>
    9382	2f 43 00 00 00 00 00 00	r3 *= r4
    9383	2f 25 00 00 00 00 00 00	r5 *= r2
    9384	0f 35 00 00 00 00 00 00	r5 += r3
    9385	bf 20 00 00 00 00 00 00	r0 = r2
    9386	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9387	bf 43 00 00 00 00 00 00	r3 = r4
    9388	77 03 00 00 20 00 00 00	r3 >>= 0x20
    9389	bf 36 00 00 00 00 00 00	r6 = r3
    9390	2f 06 00 00 00 00 00 00	r6 *= r0
    9391	0f 65 00 00 00 00 00 00	r5 += r6
    9392	67 04 00 00 20 00 00 00	r4 <<= 0x20
    9393	77 04 00 00 20 00 00 00	r4 >>= 0x20
    9394	bf 46 00 00 00 00 00 00	r6 = r4
    9395	2f 06 00 00 00 00 00 00	r6 *= r0
    9396	67 02 00 00 20 00 00 00	r2 <<= 0x20
    9397	77 02 00 00 20 00 00 00	r2 >>= 0x20
    9398	2f 24 00 00 00 00 00 00	r4 *= r2
    9399	bf 40 00 00 00 00 00 00	r0 = r4
    9400	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9401	0f 60 00 00 00 00 00 00	r0 += r6
    9402	bf 06 00 00 00 00 00 00	r6 = r0
    9403	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9404	0f 65 00 00 00 00 00 00	r5 += r6
    9405	2f 23 00 00 00 00 00 00	r3 *= r2
    9406	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9407	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9408	0f 30 00 00 00 00 00 00	r0 += r3
    9409	bf 02 00 00 00 00 00 00	r2 = r0
    9410	77 02 00 00 20 00 00 00	r2 >>= 0x20
    9411	0f 25 00 00 00 00 00 00	r5 += r2
    9412	7b 51 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r5
    9413	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9414	67 04 00 00 20 00 00 00	r4 <<= 0x20
    9415	77 04 00 00 20 00 00 00	r4 >>= 0x20
    9416	4f 40 00 00 00 00 00 00	r0 |= r4
    9417	7b 01 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r0
    9418	95 00 00 00 00 00 00 00	exit
