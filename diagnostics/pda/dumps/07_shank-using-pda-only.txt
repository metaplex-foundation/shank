-rwxr-xr-x  1 thlorenz  admin  150456 Nov 17 1229 /Volumes/d/dev/mp/projects/breakpoint/tictactoe/program/target/bpfel-unknown-unknown/release/tictactoe.so
ELF Header
  Magic   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class                             ELF64
  Data                              2's complement, little endian
  Version                           1 (current)
  OS/ABI                            UNIX - System V
  ABI Version                       0
  Type                              DYN (Shared object file)
  Machine                           EM_BPF
  Version                           0x1
  Entry point address               0x19E8
  Start of program headers          64 (bytes into file)
  Start of section headers          149688 (bytes into file)
  Flags                             0x0
  Size of this header               64 (bytes)
  Size of program headers           56 (bytes)
  Number of program headers         4
  Size of section headers           64 (bytes)
  Number of section headers         12
  Section header string table index 10
There are 12 section headers, starting at offset 0x248b8

Section Headers
  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
  [ 1] .text             PROGBITS        0000000000000120 000120 012428 00  AX  0   0  8
  [ 2] .rodata           PROGBITS        0000000000012548 012548 001487 00  AM  0   0  8
  [ 3] .data.rel.ro      PROGBITS        00000000000139d0 0139d0 0006e8 00  WA  0   0  8
  [ 4] .dynamic          DYNAMIC         00000000000140b8 0140b8 0000b0 10  WA  6   0  8
  [ 5] .dynsym           DYNSYM          0000000000014168 014168 000108 18   A  6   1  8
  [ 6] .dynstr           STRTAB          0000000000014270 014270 000094 00   A  0   0  1
  [ 7] .rel.dyn          REL             0000000000014308 014308 001ca0 10   A  5   0  8
  [ 8] .comment          PROGBITS        0000000000000000 015fa8 00006e 01  MS  0   0  1
  [ 9] .symtab           SYMTAB          0000000000000000 016018 007c50 18     11 1316  8
  [10] .shstrtab         STRTAB          0000000000000000 01dc68 000061 00      0   0  1
  [11] .strtab           STRTAB          0000000000000000 01dcc9 006bee 00      0   0  1
Key to Flags
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  R (retain), p (processor specific)

Elf file type is DYN (Shared object file)
Entry point 0x19e8
There are 4 program headers, starting at offset 64

Program Headers
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  LOAD           0x000120 0x0000000000000120 0x0000000000000120 0x012428 0x012428 R E 0x1000
  LOAD           0x012548 0x0000000000012548 0x0000000000012548 0x001b70 0x001b70 RW  0x1000
  LOAD           0x014168 0x0000000000014168 0x0000000000014168 0x001e40 0x001e40 R   0x1000
  DYNAMIC        0x0140b8 0x00000000000140b8 0x00000000000140b8 0x0000b0 0x0000b0 RW  0x8

 Section to Segment mapping
  Segment Sections...
   00     .text
   01     .rodata .data.rel.ro
   02     .dynsym .dynstr .rel.dyn
   03     .dynamic
   None   .comment .symtab .shstrtab .strtab
Dynamic section at offset 0x140b8 contains 11 entries
  Tag                Type       Name/Value
  0x000000000000001e (FLAGS)    TEXTREL
  0x0000000000000011 (REL)      0x14308
  0x0000000000000012 (RELSZ)    7328 (bytes)
  0x0000000000000013 (RELENT)   16 (bytes)
  0x000000006ffffffa (RELCOUNT) 355
  0x0000000000000006 (SYMTAB)   0x14168
  0x000000000000000b (SYMENT)   24 (bytes)
  0x0000000000000005 (STRTAB)   0x14270
  0x000000000000000a (STRSZ)    148 (bytes)
  0x0000000000000016 (TEXTREL)  0x0
  0x0000000000000000 (NULL)     0x0

Relocation section '.rel.dyn' at offset 0x14308 contains 458 entries
    Offset             Info             Type               Symbol's Value  Symbol's Name
0000000000000930  0000000000000008 R_BPF_64_RELATIVE
0000000000000960  0000000000000008 R_BPF_64_RELATIVE
0000000000000988  0000000000000008 R_BPF_64_RELATIVE
00000000000009b0  0000000000000008 R_BPF_64_RELATIVE
0000000000000ae8  0000000000000008 R_BPF_64_RELATIVE
0000000000000b00  0000000000000008 R_BPF_64_RELATIVE
0000000000000c58  0000000000000008 R_BPF_64_RELATIVE
0000000000000cf8  0000000000000008 R_BPF_64_RELATIVE
0000000000000e38  0000000000000008 R_BPF_64_RELATIVE
0000000000000e50  0000000000000008 R_BPF_64_RELATIVE
0000000000000fa8  0000000000000008 R_BPF_64_RELATIVE
0000000000001068  0000000000000008 R_BPF_64_RELATIVE
0000000000001208  0000000000000008 R_BPF_64_RELATIVE
0000000000001228  0000000000000008 R_BPF_64_RELATIVE
00000000000014e0  0000000000000008 R_BPF_64_RELATIVE
0000000000001500  0000000000000008 R_BPF_64_RELATIVE
0000000000001848  0000000000000008 R_BPF_64_RELATIVE
0000000000001bd8  0000000000000008 R_BPF_64_RELATIVE
0000000000001c80  0000000000000008 R_BPF_64_RELATIVE
0000000000001cd0  0000000000000008 R_BPF_64_RELATIVE
0000000000001da8  0000000000000008 R_BPF_64_RELATIVE
0000000000001dc0  0000000000000008 R_BPF_64_RELATIVE
0000000000002178  0000000000000008 R_BPF_64_RELATIVE
00000000000021a8  0000000000000008 R_BPF_64_RELATIVE
00000000000021d8  0000000000000008 R_BPF_64_RELATIVE
0000000000002208  0000000000000008 R_BPF_64_RELATIVE
0000000000002238  0000000000000008 R_BPF_64_RELATIVE
0000000000002268  0000000000000008 R_BPF_64_RELATIVE
00000000000022d0  0000000000000008 R_BPF_64_RELATIVE
00000000000022e8  0000000000000008 R_BPF_64_RELATIVE
00000000000024e8  0000000000000008 R_BPF_64_RELATIVE
0000000000002500  0000000000000008 R_BPF_64_RELATIVE
0000000000002688  0000000000000008 R_BPF_64_RELATIVE
0000000000002850  0000000000000008 R_BPF_64_RELATIVE
00000000000028a0  0000000000000008 R_BPF_64_RELATIVE
00000000000028b8  0000000000000008 R_BPF_64_RELATIVE
00000000000028c8  0000000000000008 R_BPF_64_RELATIVE
00000000000028e8  0000000000000008 R_BPF_64_RELATIVE
0000000000002908  0000000000000008 R_BPF_64_RELATIVE
0000000000002928  0000000000000008 R_BPF_64_RELATIVE
0000000000002948  0000000000000008 R_BPF_64_RELATIVE
0000000000002968  0000000000000008 R_BPF_64_RELATIVE
0000000000002988  0000000000000008 R_BPF_64_RELATIVE
00000000000029a8  0000000000000008 R_BPF_64_RELATIVE
00000000000029c8  0000000000000008 R_BPF_64_RELATIVE
00000000000029e8  0000000000000008 R_BPF_64_RELATIVE
0000000000002a08  0000000000000008 R_BPF_64_RELATIVE
0000000000002a28  0000000000000008 R_BPF_64_RELATIVE
0000000000002a48  0000000000000008 R_BPF_64_RELATIVE
0000000000002ea0  0000000000000008 R_BPF_64_RELATIVE
0000000000002eb8  0000000000000008 R_BPF_64_RELATIVE
0000000000003080  0000000000000008 R_BPF_64_RELATIVE
0000000000003188  0000000000000008 R_BPF_64_RELATIVE
0000000000003918  0000000000000008 R_BPF_64_RELATIVE
0000000000003a20  0000000000000008 R_BPF_64_RELATIVE
0000000000003a38  0000000000000008 R_BPF_64_RELATIVE
0000000000004068  0000000000000008 R_BPF_64_RELATIVE
00000000000040e0  0000000000000008 R_BPF_64_RELATIVE
0000000000004ce8  0000000000000008 R_BPF_64_RELATIVE
0000000000004d00  0000000000000008 R_BPF_64_RELATIVE
0000000000004de0  0000000000000008 R_BPF_64_RELATIVE
0000000000004e20  0000000000000008 R_BPF_64_RELATIVE
0000000000004e48  0000000000000008 R_BPF_64_RELATIVE
0000000000004e88  0000000000000008 R_BPF_64_RELATIVE
0000000000004ea8  0000000000000008 R_BPF_64_RELATIVE
0000000000004ee8  0000000000000008 R_BPF_64_RELATIVE
0000000000004f00  0000000000000008 R_BPF_64_RELATIVE
0000000000004f40  0000000000000008 R_BPF_64_RELATIVE
0000000000004f58  0000000000000008 R_BPF_64_RELATIVE
0000000000004f98  0000000000000008 R_BPF_64_RELATIVE
0000000000004fb0  0000000000000008 R_BPF_64_RELATIVE
0000000000004ff0  0000000000000008 R_BPF_64_RELATIVE
0000000000005008  0000000000000008 R_BPF_64_RELATIVE
0000000000005048  0000000000000008 R_BPF_64_RELATIVE
0000000000005210  0000000000000008 R_BPF_64_RELATIVE
0000000000005228  0000000000000008 R_BPF_64_RELATIVE
0000000000005380  0000000000000008 R_BPF_64_RELATIVE
0000000000005418  0000000000000008 R_BPF_64_RELATIVE
0000000000005638  0000000000000008 R_BPF_64_RELATIVE
0000000000005650  0000000000000008 R_BPF_64_RELATIVE
00000000000057a8  0000000000000008 R_BPF_64_RELATIVE
0000000000005870  0000000000000008 R_BPF_64_RELATIVE
0000000000005a90  0000000000000008 R_BPF_64_RELATIVE
0000000000005eb8  0000000000000008 R_BPF_64_RELATIVE
0000000000005ff0  0000000000000008 R_BPF_64_RELATIVE
0000000000006280  0000000000000008 R_BPF_64_RELATIVE
0000000000006298  0000000000000008 R_BPF_64_RELATIVE
00000000000062a8  0000000000000008 R_BPF_64_RELATIVE
0000000000006bb0  0000000000000008 R_BPF_64_RELATIVE
00000000000089e0  0000000000000008 R_BPF_64_RELATIVE
00000000000094b0  0000000000000008 R_BPF_64_RELATIVE
00000000000094c8  0000000000000008 R_BPF_64_RELATIVE
00000000000096a0  0000000000000008 R_BPF_64_RELATIVE
00000000000096e0  0000000000000008 R_BPF_64_RELATIVE
0000000000009708  0000000000000008 R_BPF_64_RELATIVE
0000000000009f40  0000000000000008 R_BPF_64_RELATIVE
000000000000a118  0000000000000008 R_BPF_64_RELATIVE
000000000000a130  0000000000000008 R_BPF_64_RELATIVE
000000000000a170  0000000000000008 R_BPF_64_RELATIVE
000000000000a1a8  0000000000000008 R_BPF_64_RELATIVE
000000000000a1e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a210  0000000000000008 R_BPF_64_RELATIVE
000000000000a240  0000000000000008 R_BPF_64_RELATIVE
000000000000a270  0000000000000008 R_BPF_64_RELATIVE
000000000000a2a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a2d0  0000000000000008 R_BPF_64_RELATIVE
000000000000a2f8  0000000000000008 R_BPF_64_RELATIVE
000000000000a320  0000000000000008 R_BPF_64_RELATIVE
000000000000a350  0000000000000008 R_BPF_64_RELATIVE
000000000000a380  0000000000000008 R_BPF_64_RELATIVE
000000000000a3b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a3e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a410  0000000000000008 R_BPF_64_RELATIVE
000000000000a430  0000000000000008 R_BPF_64_RELATIVE
000000000000a450  0000000000000008 R_BPF_64_RELATIVE
000000000000a470  0000000000000008 R_BPF_64_RELATIVE
000000000000a490  0000000000000008 R_BPF_64_RELATIVE
000000000000a4b0  0000000000000008 R_BPF_64_RELATIVE
000000000000a4c8  0000000000000008 R_BPF_64_RELATIVE
000000000000a4e8  0000000000000008 R_BPF_64_RELATIVE
000000000000a508  0000000000000008 R_BPF_64_RELATIVE
000000000000a528  0000000000000008 R_BPF_64_RELATIVE
000000000000a548  0000000000000008 R_BPF_64_RELATIVE
000000000000a560  0000000000000008 R_BPF_64_RELATIVE
000000000000a580  0000000000000008 R_BPF_64_RELATIVE
000000000000a5a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a5e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a600  0000000000000008 R_BPF_64_RELATIVE
000000000000a620  0000000000000008 R_BPF_64_RELATIVE
000000000000a640  0000000000000008 R_BPF_64_RELATIVE
000000000000a660  0000000000000008 R_BPF_64_RELATIVE
000000000000a680  0000000000000008 R_BPF_64_RELATIVE
000000000000a6a0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6c0  0000000000000008 R_BPF_64_RELATIVE
000000000000a6e0  0000000000000008 R_BPF_64_RELATIVE
000000000000a700  0000000000000008 R_BPF_64_RELATIVE
000000000000a808  0000000000000008 R_BPF_64_RELATIVE
000000000000a878  0000000000000008 R_BPF_64_RELATIVE
000000000000aa50  0000000000000008 R_BPF_64_RELATIVE
000000000000aa68  0000000000000008 R_BPF_64_RELATIVE
000000000000aa98  0000000000000008 R_BPF_64_RELATIVE
000000000000ab60  0000000000000008 R_BPF_64_RELATIVE
000000000000b018  0000000000000008 R_BPF_64_RELATIVE
000000000000b030  0000000000000008 R_BPF_64_RELATIVE
000000000000b278  0000000000000008 R_BPF_64_RELATIVE
000000000000b2b0  0000000000000008 R_BPF_64_RELATIVE
000000000000b2c8  0000000000000008 R_BPF_64_RELATIVE
000000000000b2d8  0000000000000008 R_BPF_64_RELATIVE
000000000000b6b8  0000000000000008 R_BPF_64_RELATIVE
000000000000b740  0000000000000008 R_BPF_64_RELATIVE
000000000000b770  0000000000000008 R_BPF_64_RELATIVE
000000000000b848  0000000000000008 R_BPF_64_RELATIVE
000000000000b970  0000000000000008 R_BPF_64_RELATIVE
000000000000b9b8  0000000000000008 R_BPF_64_RELATIVE
000000000000b9d0  0000000000000008 R_BPF_64_RELATIVE
000000000000bc10  0000000000000008 R_BPF_64_RELATIVE
000000000000bc58  0000000000000008 R_BPF_64_RELATIVE
000000000000bc70  0000000000000008 R_BPF_64_RELATIVE
000000000000be70  0000000000000008 R_BPF_64_RELATIVE
000000000000beb8  0000000000000008 R_BPF_64_RELATIVE
000000000000bf20  0000000000000008 R_BPF_64_RELATIVE
000000000000bfc8  0000000000000008 R_BPF_64_RELATIVE
000000000000c030  0000000000000008 R_BPF_64_RELATIVE
000000000000c0a8  0000000000000008 R_BPF_64_RELATIVE
000000000000c0e0  0000000000000008 R_BPF_64_RELATIVE
000000000000c140  0000000000000008 R_BPF_64_RELATIVE
000000000000c198  0000000000000008 R_BPF_64_RELATIVE
000000000000c278  0000000000000008 R_BPF_64_RELATIVE
000000000000c2a8  0000000000000008 R_BPF_64_RELATIVE
000000000000c318  0000000000000008 R_BPF_64_RELATIVE
000000000000c330  0000000000000008 R_BPF_64_RELATIVE
000000000000c3c8  0000000000000008 R_BPF_64_RELATIVE
000000000000c3e0  0000000000000008 R_BPF_64_RELATIVE
000000000000c410  0000000000000008 R_BPF_64_RELATIVE
000000000000c740  0000000000000008 R_BPF_64_RELATIVE
000000000000c7e0  0000000000000008 R_BPF_64_RELATIVE
000000000000def8  0000000000000008 R_BPF_64_RELATIVE
000000000000e1a0  0000000000000008 R_BPF_64_RELATIVE
000000000000e738  0000000000000008 R_BPF_64_RELATIVE
000000000000e768  0000000000000008 R_BPF_64_RELATIVE
000000000000e818  0000000000000008 R_BPF_64_RELATIVE
000000000000e848  0000000000000008 R_BPF_64_RELATIVE
000000000000e8f8  0000000000000008 R_BPF_64_RELATIVE
000000000000e928  0000000000000008 R_BPF_64_RELATIVE
000000000000e998  0000000000000008 R_BPF_64_RELATIVE
000000000000e9f0  0000000000000008 R_BPF_64_RELATIVE
000000000000ea80  0000000000000008 R_BPF_64_RELATIVE
000000000000eac8  0000000000000008 R_BPF_64_RELATIVE
000000000000eb40  0000000000000008 R_BPF_64_RELATIVE
000000000000eb70  0000000000000008 R_BPF_64_RELATIVE
000000000000eba8  0000000000000008 R_BPF_64_RELATIVE
000000000000ec18  0000000000000008 R_BPF_64_RELATIVE
000000000000ec48  0000000000000008 R_BPF_64_RELATIVE
000000000000ec98  0000000000000008 R_BPF_64_RELATIVE
000000000000eec0  0000000000000008 R_BPF_64_RELATIVE
000000000000ef58  0000000000000008 R_BPF_64_RELATIVE
000000000000ef88  0000000000000008 R_BPF_64_RELATIVE
000000000000efc0  0000000000000008 R_BPF_64_RELATIVE
000000000000eff0  0000000000000008 R_BPF_64_RELATIVE
000000000000f020  0000000000000008 R_BPF_64_RELATIVE
000000000000f320  0000000000000008 R_BPF_64_RELATIVE
000000000000f338  0000000000000008 R_BPF_64_RELATIVE
000000000000f398  0000000000000008 R_BPF_64_RELATIVE
000000000000f3c8  0000000000000008 R_BPF_64_RELATIVE
000000000000f488  0000000000000008 R_BPF_64_RELATIVE
000000000000f530  0000000000000008 R_BPF_64_RELATIVE
000000000000f5f8  0000000000000008 R_BPF_64_RELATIVE
000000000000f6a0  0000000000000008 R_BPF_64_RELATIVE
000000000000f7a8  0000000000000008 R_BPF_64_RELATIVE
000000000000f7e0  0000000000000008 R_BPF_64_RELATIVE
000000000000f9d0  0000000000000008 R_BPF_64_RELATIVE
000000000000fa80  0000000000000008 R_BPF_64_RELATIVE
000000000000fae0  0000000000000008 R_BPF_64_RELATIVE
000000000000fb40  0000000000000008 R_BPF_64_RELATIVE
000000000000fbd8  0000000000000008 R_BPF_64_RELATIVE
000000000000fc30  0000000000000008 R_BPF_64_RELATIVE
000000000000fca0  0000000000000008 R_BPF_64_RELATIVE
000000000000fd50  0000000000000008 R_BPF_64_RELATIVE
000000000000fe60  0000000000000008 R_BPF_64_RELATIVE
000000000000fe98  0000000000000008 R_BPF_64_RELATIVE
000000000000ff70  0000000000000008 R_BPF_64_RELATIVE
000000000000ffd0  0000000000000008 R_BPF_64_RELATIVE
0000000000010078  0000000000000008 R_BPF_64_RELATIVE
0000000000010148  0000000000000008 R_BPF_64_RELATIVE
0000000000010180  0000000000000008 R_BPF_64_RELATIVE
0000000000010258  0000000000000008 R_BPF_64_RELATIVE
00000000000102b8  0000000000000008 R_BPF_64_RELATIVE
0000000000010350  0000000000000008 R_BPF_64_RELATIVE
0000000000010420  0000000000000008 R_BPF_64_RELATIVE
0000000000010458  0000000000000008 R_BPF_64_RELATIVE
0000000000010530  0000000000000008 R_BPF_64_RELATIVE
0000000000010590  0000000000000008 R_BPF_64_RELATIVE
0000000000010628  0000000000000008 R_BPF_64_RELATIVE
0000000000010668  0000000000000008 R_BPF_64_RELATIVE
0000000000010810  0000000000000008 R_BPF_64_RELATIVE
00000000000108a8  0000000000000008 R_BPF_64_RELATIVE
0000000000010948  0000000000000008 R_BPF_64_RELATIVE
0000000000010970  0000000000000008 R_BPF_64_RELATIVE
00000000000109d8  0000000000000008 R_BPF_64_RELATIVE
0000000000010aa0  0000000000000008 R_BPF_64_RELATIVE
0000000000010ad0  0000000000000008 R_BPF_64_RELATIVE
00000000000139d0  0000000000000008 R_BPF_64_RELATIVE
00000000000139e0  0000000000000008 R_BPF_64_RELATIVE
00000000000139f0  0000000000000008 R_BPF_64_RELATIVE
0000000000013a00  0000000000000008 R_BPF_64_RELATIVE
0000000000013a10  0000000000000008 R_BPF_64_RELATIVE
0000000000013a20  0000000000000008 R_BPF_64_RELATIVE
0000000000013a30  0000000000000008 R_BPF_64_RELATIVE
0000000000013a40  0000000000000008 R_BPF_64_RELATIVE
0000000000013a50  0000000000000008 R_BPF_64_RELATIVE
0000000000013a60  0000000000000008 R_BPF_64_RELATIVE
0000000000013a70  0000000000000008 R_BPF_64_RELATIVE
0000000000013a80  0000000000000008 R_BPF_64_RELATIVE
0000000000013a90  0000000000000008 R_BPF_64_RELATIVE
0000000000013aa0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ab0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ac0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ad0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ae0  0000000000000008 R_BPF_64_RELATIVE
0000000000013af0  0000000000000008 R_BPF_64_RELATIVE
0000000000013b00  0000000000000008 R_BPF_64_RELATIVE
0000000000013b10  0000000000000008 R_BPF_64_RELATIVE
0000000000013b20  0000000000000008 R_BPF_64_RELATIVE
0000000000013b38  0000000000000008 R_BPF_64_RELATIVE
0000000000013b40  0000000000000008 R_BPF_64_RELATIVE
0000000000013b58  0000000000000008 R_BPF_64_RELATIVE
0000000000013b60  0000000000000008 R_BPF_64_RELATIVE
0000000000013b68  0000000000000008 R_BPF_64_RELATIVE
0000000000013b70  0000000000000008 R_BPF_64_RELATIVE
0000000000013b78  0000000000000008 R_BPF_64_RELATIVE
0000000000013b80  0000000000000008 R_BPF_64_RELATIVE
0000000000013b88  0000000000000008 R_BPF_64_RELATIVE
0000000000013b90  0000000000000008 R_BPF_64_RELATIVE
0000000000013b98  0000000000000008 R_BPF_64_RELATIVE
0000000000013ba8  0000000000000008 R_BPF_64_RELATIVE
0000000000013bc0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bc8  0000000000000008 R_BPF_64_RELATIVE
0000000000013bd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013bd8  0000000000000008 R_BPF_64_RELATIVE
0000000000013bf0  0000000000000008 R_BPF_64_RELATIVE
0000000000013c08  0000000000000008 R_BPF_64_RELATIVE
0000000000013c10  0000000000000008 R_BPF_64_RELATIVE
0000000000013c28  0000000000000008 R_BPF_64_RELATIVE
0000000000013c30  0000000000000008 R_BPF_64_RELATIVE
0000000000013c38  0000000000000008 R_BPF_64_RELATIVE
0000000000013c40  0000000000000008 R_BPF_64_RELATIVE
0000000000013c58  0000000000000008 R_BPF_64_RELATIVE
0000000000013c68  0000000000000008 R_BPF_64_RELATIVE
0000000000013c80  0000000000000008 R_BPF_64_RELATIVE
0000000000013c90  0000000000000008 R_BPF_64_RELATIVE
0000000000013ca8  0000000000000008 R_BPF_64_RELATIVE
0000000000013cc0  0000000000000008 R_BPF_64_RELATIVE
0000000000013cc8  0000000000000008 R_BPF_64_RELATIVE
0000000000013ce0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ce8  0000000000000008 R_BPF_64_RELATIVE
0000000000013cf0  0000000000000008 R_BPF_64_RELATIVE
0000000000013cf8  0000000000000008 R_BPF_64_RELATIVE
0000000000013d00  0000000000000008 R_BPF_64_RELATIVE
0000000000013d08  0000000000000008 R_BPF_64_RELATIVE
0000000000013d10  0000000000000008 R_BPF_64_RELATIVE
0000000000013d18  0000000000000008 R_BPF_64_RELATIVE
0000000000013d20  0000000000000008 R_BPF_64_RELATIVE
0000000000013d38  0000000000000008 R_BPF_64_RELATIVE
0000000000013d40  0000000000000008 R_BPF_64_RELATIVE
0000000000013d50  0000000000000008 R_BPF_64_RELATIVE
0000000000013d60  0000000000000008 R_BPF_64_RELATIVE
0000000000013d70  0000000000000008 R_BPF_64_RELATIVE
0000000000013d80  0000000000000008 R_BPF_64_RELATIVE
0000000000013d98  0000000000000008 R_BPF_64_RELATIVE
0000000000013db0  0000000000000008 R_BPF_64_RELATIVE
0000000000013dc8  0000000000000008 R_BPF_64_RELATIVE
0000000000013dd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013de8  0000000000000008 R_BPF_64_RELATIVE
0000000000013df0  0000000000000008 R_BPF_64_RELATIVE
0000000000013df8  0000000000000008 R_BPF_64_RELATIVE
0000000000013e00  0000000000000008 R_BPF_64_RELATIVE
0000000000013e10  0000000000000008 R_BPF_64_RELATIVE
0000000000013e20  0000000000000008 R_BPF_64_RELATIVE
0000000000013e30  0000000000000008 R_BPF_64_RELATIVE
0000000000013e40  0000000000000008 R_BPF_64_RELATIVE
0000000000013e58  0000000000000008 R_BPF_64_RELATIVE
0000000000013e60  0000000000000008 R_BPF_64_RELATIVE
0000000000013e70  0000000000000008 R_BPF_64_RELATIVE
0000000000013e80  0000000000000008 R_BPF_64_RELATIVE
0000000000013e90  0000000000000008 R_BPF_64_RELATIVE
0000000000013ea0  0000000000000008 R_BPF_64_RELATIVE
0000000000013eb0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ec0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ed8  0000000000000008 R_BPF_64_RELATIVE
0000000000013ef0  0000000000000008 R_BPF_64_RELATIVE
0000000000013f08  0000000000000008 R_BPF_64_RELATIVE
0000000000013f18  0000000000000008 R_BPF_64_RELATIVE
0000000000013f28  0000000000000008 R_BPF_64_RELATIVE
0000000000013f38  0000000000000008 R_BPF_64_RELATIVE
0000000000013f48  0000000000000008 R_BPF_64_RELATIVE
0000000000013f58  0000000000000008 R_BPF_64_RELATIVE
0000000000013f68  0000000000000008 R_BPF_64_RELATIVE
0000000000013f80  0000000000000008 R_BPF_64_RELATIVE
0000000000013f90  0000000000000008 R_BPF_64_RELATIVE
0000000000013fa0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fb0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fc0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fd0  0000000000000008 R_BPF_64_RELATIVE
0000000000013fe0  0000000000000008 R_BPF_64_RELATIVE
0000000000013ff0  0000000000000008 R_BPF_64_RELATIVE
0000000000014000  0000000000000008 R_BPF_64_RELATIVE
0000000000014010  0000000000000008 R_BPF_64_RELATIVE
0000000000014020  0000000000000008 R_BPF_64_RELATIVE
0000000000014030  0000000000000008 R_BPF_64_RELATIVE
0000000000014040  0000000000000008 R_BPF_64_RELATIVE
0000000000014058  0000000000000008 R_BPF_64_RELATIVE
0000000000014070  0000000000000008 R_BPF_64_RELATIVE
0000000000014088  0000000000000008 R_BPF_64_RELATIVE
00000000000140a0  0000000000000008 R_BPF_64_RELATIVE
0000000000001e40  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002368  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002580  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002a60  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002c58  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000002f20  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
00000000000031a0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000003930  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000003ab0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000004148  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000004d78  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
000000000000aba0  000000010000000a R_BPF_64_32            0000000000000000 sol_log_
0000000000000410  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000448  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000570  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000005a8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000a30  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000c10  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000d98  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000000f60  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001678  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001800  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001af8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000001b90  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000028e0  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000031f8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000003200  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000050e0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005338  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000055a0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005760  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005940  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000005a48  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000062c0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006540  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006578  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006710  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006748  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006928  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006990  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006bc8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006c10  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000006c18  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000070a8  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000089d8  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000092c8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009720  000000020000000a R_BPF_64_32            0000000000000000 abort
00000000000098c8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009a60  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009c18  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009dc0  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000009ef8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000a788  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000a968  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ab58  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ab88  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ab98  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abb8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abc0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abc8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abd0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ac08  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ad38  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ad70  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000ae98  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000aed0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b048  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b058  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b068  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b078  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b088  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b208  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b2f0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b6e8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000b6f0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c220  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c300  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c360  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000c460  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000df10  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e1b8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e7c0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e8a0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000e980  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000eae0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000eee8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f070  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f350  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f3b0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f3e0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f4a0  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f610  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000f9e8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010960  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010ab8  000000020000000a R_BPF_64_32            0000000000000000 abort
0000000000010ae8  000000020000000a R_BPF_64_32            0000000000000000 abort
000000000000abb0  000000040000000a R_BPF_64_32            0000000000004ca0 custom_panic
0000000000011840  000000050000000a R_BPF_64_32            0000000000000000 sol_memset_
0000000000009640  000000060000000a R_BPF_64_32            0000000000000000 sol_try_find_program_address
0000000000008d00  000000070000000a R_BPF_64_32            0000000000000000 sol_invoke_signed_rust
0000000000009fe0  000000080000000a R_BPF_64_32            0000000000000000 sol_get_rent_sysvar
0000000000011728  000000090000000a R_BPF_64_32            0000000000000000 sol_memcpy_
0000000000011990  0000000a0000000a R_BPF_64_32            0000000000000000 sol_memcmp_

Symbol table '.dynsym' contains 11 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
     2 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
     3 00000000000019e8 12504 FUNC    GLOBAL DEFAULT     1 entrypoint
     4 0000000000004ca0   280 FUNC    GLOBAL DEFAULT     1 custom_panic
     5 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memset_
     6 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_try_find_program_address
     7 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_invoke_signed_rust
     8 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_get_rent_sysvar
     9 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
    10 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcmp_

Symbol table '.symtab' contains 1326 entries
   Num    Value          Size Type    Bind   Vis       Ndx Name
     0 0000000000000000     0 NOTYPE  LOCAL  DEFAULT   UND
     1 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS tictactoe.f9d98a26-cgu.0
     2 0000000000000120    56 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>
     3 0000000000000150     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
     4 0000000000000158     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&u8>
     5 0000000000000160   400 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>
     6 00000000000001c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_3
     7 0000000000000228     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_6
     8 0000000000000288     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_9
     9 00000000000002e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_12
    10 00000000000139d0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_1
    11 00000000000002f0   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
    12 0000000000000320     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_2
    13 0000000000000408     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_12
    14 0000000000000358     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_5
    15 0000000000000368     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_7
    16 00000000000003a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_9
    17 00000000000003b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_10
    18 00000000000005b0   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
    19 0000000000000418     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_14
    20 0000000000000438     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_13
    21 0000000000000450   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
    22 0000000000000480     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_2
    23 0000000000000568     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_12
    24 00000000000004b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_5
    25 00000000000004c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_7
    26 0000000000000500     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_9
    27 0000000000000510     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_10
    28 0000000000000578     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_14
    29 0000000000000598     0 NOTYPE  LOCAL  DEFAULT     1 LBB11_13
    30 00000000000005f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_12
    31 00000000000006d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_2
    32 0000000000000668     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_7
    33 0000000000000640     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_6
    34 00000000000006b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_9
    35 0000000000000698     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_11
    36 00000000000006c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB13_10
    37 0000000000000850     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_7
    38 00000000000007f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_5
    39 00000000000007b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_9
    40 0000000000000870     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_11
    41 00000000000007d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_10
    42 0000000000000860     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_8
    43 0000000000000950     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_3
    44 0000000000000980     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_5
    45 0000000000012678    18 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_2
    46 00000000000009c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_7
    47 00000000000009a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB17_6
    48 000000000001268a    13 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_4
    49 0000000000000a38     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_5
    50 0000000000000b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_3
    51 0000000000000a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_11
    52 0000000000000aa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_7
    53 0000000000000d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_10
    54 0000000000013a90    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_6
    55 0000000000006018   168 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for u8>::fmt
    56 0000000000000ca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_9
    57 0000000000000bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_4
    58 0000000000000c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB18_6
    59 0000000000013b40    88 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_7
    60 0000000000000da0     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_5
    61 0000000000000ed0     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_3
    62 0000000000001000     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_13
    63 0000000000000ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_12
    64 0000000000001018     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_9
    65 0000000000000f48     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_4
    66 0000000000000f68     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_10
    67 00000000000010a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_11
    68 00000000000010b0  1152 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize
    69 00000000000010f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_2
    70 0000000000001128     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_4
    71 0000000000001208     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_10
    72 0000000000001198     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_7
    73 00000000000011c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_9
    74 00000000000012a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_12
    75 0000000000013b98    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_20
    76 0000000000001258     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_11
    77 00000000000012d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_14
    78 0000000000001308     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_16
    79 0000000000001350     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_17
    80 0000000000001380     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_19
    81 00000000000013c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_21
    82 0000000000001400     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_23
    83 0000000000001430     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_25
    84 0000000000001448     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_27
    85 00000000000014b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_29
    86 00000000000014e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB22_31
    87 0000000000001738     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_11
    88 0000000000001680     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_7
    89 0000000000001770     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_5
    90 0000000000001878     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_9
    91 0000000000001748     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_12
    92 0000000000001760     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_13
    93 0000000000001808     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_8
    94 00000000000126b1     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_21
    95 0000000000001b00     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_4
    96 0000000000001cf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_20
    97 0000000000001b18     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_5
    98 0000000000001c00     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_8
    99 0000000000001b98     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_7
   100 0000000000001c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_9
   101 0000000000001ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_15
   102 0000000000001cb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_16
   103 0000000000002168     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_33
   104 00000000000021c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_39
   105 00000000000027c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_69
   106 00000000000129a2    22 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_22
   107 0000000000002a60     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_84
   108 0000000000002b20     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_91
   109 0000000000002ae8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_86
   110 0000000000002198     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_36
   111 00000000000021f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_42
   112 00000000000028e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_72
   113 0000000000012872    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_23
   114 0000000000002450     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_59
   115 0000000000002288     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_51
   116 0000000000013a30    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_24
   117 0000000000001e78     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_25
   118 00000000000027a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_68
   119 0000000000002408     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_58
   120 0000000000002f78     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_108
   121 00000000000020a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_30
   122 0000000000002fc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_110
   123 0000000000003bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_162
   124 00000000000049d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_251
   125 0000000000002228     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_45
   126 0000000000002908     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_73
   127 0000000000012921    25 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_25
   128 0000000000002258     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_48
   129 0000000000002928     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_74
   130 00000000000127fd    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_26
   131 0000000000002948     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_75
   132 0000000000002968     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_76
   133 0000000000012952    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_27
   134 0000000000002988     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_77
   135 00000000000029a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_78
   136 0000000000012830    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_28
   137 00000000000029c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_79
   138 00000000000029e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_80
   139 00000000000128a7    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_29
   140 0000000000002a08     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_81
   141 0000000000002a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_82
   142 00000000000127b3    21 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_30
   143 0000000000013a10    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_31
   144 00000000000023a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_54
   145 0000000000002c98     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_101
   146 0000000000002cb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_102
   147 00000000000139f0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_32
   148 00000000000025b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_62
   149 0000000000003010     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_111
   150 00000000000027f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_70
   151 0000000000002a48     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_83
   152 0000000000013ba8    48 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_33
   153 0000000000002c48     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_98
   154 00000000000129e2    55 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_34
   155 0000000000013bf0    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_35
   156 0000000000013bd8    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_36
   157 000000000001288c    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_37
   158 000000000001293a    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_38
   159 0000000000012815    27 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_39
   160 0000000000012985    29 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_40
   161 000000000001296c    25 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_41
   162 0000000000012856    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_42
   163 0000000000012843    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_43
   164 0000000000012902    31 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_44
   165 00000000000127ea    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_46
   166 00000000000127c8    34 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_47
   167 00000000000129b8    14 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_48
   168 0000000000002a68     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_85
   169 0000000000002b60     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_94
   170 0000000000002b08     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_90
   171 0000000000002c38     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_97
   172 0000000000002b90     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_87
   173 0000000000002bf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_95
   174 0000000000003208     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_117
   175 0000000000002f58     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_107
   176 0000000000002fb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_109
   177 0000000000003330     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_120
   178 0000000000003178     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_114
   179 0000000000003990     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_151
   180 0000000000003188     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_115
   181 000000000001260a    31 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_49
   182 00000000000034f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_123
   183 00000000000031f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_116
   184 0000000000003390     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_121
   185 0000000000004978     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_249
   186 00000000000034b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_122
   187 0000000000003b68     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_161
   188 0000000000003540     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_125
   189 0000000000003568     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_127
   190 0000000000003580     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_129
   191 00000000000035b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_131
   192 00000000000035f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_133
   193 0000000000003660     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_135
   194 0000000000003738     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_137
   195 0000000000003750     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_139
   196 0000000000003790     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_141
   197 0000000000003880     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_142
   198 0000000000003c28     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_163
   199 00000000000038d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_146
   200 0000000000003918     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_149
   201 0000000000012629    41 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_50
   202 0000000000003cf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_170
   203 00000000000039c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_153
   204 00000000000039e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_155
   205 0000000000013a50    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_51
   206 0000000000003ae8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_158
   207 0000000000004050     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_190
   208 00000000000041a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_194
   209 00000000000049c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_250
   210 0000000000003cc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_167
   211 0000000000003ce0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_169
   212 0000000000003d40     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_172
   213 0000000000003d70     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_174
   214 0000000000003d88     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_176
   215 0000000000003db8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_178
   216 0000000000003df0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_180
   217 0000000000003e38     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_182
   218 0000000000003fb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_183
   219 0000000000004a00     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_252
   220 0000000000004010     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_187
   221 0000000000013a70    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_52
   222 0000000000004180     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_193
   223 0000000000004938     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_248
   224 00000000000041e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_196
   225 0000000000004218     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_198
   226 0000000000004230     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_200
   227 0000000000004260     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_202
   228 00000000000042a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_204
   229 0000000000004318     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_206
   230 0000000000004348     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_208
   231 0000000000004360     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_210
   232 0000000000004388     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_212
   233 00000000000043c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_214
   234 0000000000004450     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_216
   235 0000000000004490     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_218
   236 00000000000044b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_220
   237 00000000000044d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_222
   238 00000000000046d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_225
   239 0000000000004730     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_228
   240 0000000000004790     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_231
   241 00000000000047f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_234
   242 0000000000004850     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_237
   243 00000000000048b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_240
   244 00000000000048f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_244
   245 0000000000004920     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_247
   246 0000000000004a98     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_256
   247 0000000000004af8     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_2
   248 0000000000004b28     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_4
   249 0000000000004b40     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_6
   250 0000000000004b88     0 NOTYPE  LOCAL  DEFAULT     1 LBB28_8
   251 0000000000004bd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_2
   252 0000000000004c08     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_4
   253 0000000000004c20     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_6
   254 0000000000004c98     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_10
   255 0000000000004c70     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_9
   256 0000000000013aa0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_53
   257 00000000000060c0    24 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   258 0000000000004db0     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_3
   259 0000000000004e38     0 NOTYPE  LOCAL  DEFAULT     1 LBB34_4
   260 0000000000004f00     0 NOTYPE  LOCAL  DEFAULT     1 LBB34_9
   261 0000000000004f58     0 NOTYPE  LOCAL  DEFAULT     1 LBB34_10
   262 0000000000012580     0 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_61
   263 0000000000013af0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_62
   264 0000000000005058     0 NOTYPE  LOCAL  DEFAULT     1 LBB34_13
   265 0000000000004ea0     0 NOTYPE  LOCAL  DEFAULT     1 LBB34_7
   266 0000000000004fb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB34_11
   267 0000000000013ad0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_63
   268 0000000000005008     0 NOTYPE  LOCAL  DEFAULT     1 LBB34_12
   269 0000000000013ab0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_64
   270 0000000000013b10    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_65
   271 0000000000013b00    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_66
   272 0000000000013ae0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_67
   273 0000000000013ac0    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_68
   274 00000000000050e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_5
   275 00000000000052a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_3
   276 0000000000005188     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_12
   277 00000000000054c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_15
   278 0000000000005140     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_13
   279 00000000000051d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_9
   280 00000000000051b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_17
   281 0000000000005460     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_16
   282 00000000000053a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_18
   283 00000000000053c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_11
   284 0000000000005320     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_4
   285 0000000000005340     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_8
   286 0000000000005538     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_19
   287 0000000000005540     0 NOTYPE  LOCAL  DEFAULT     1 LBB35_20
   288 00000000000055a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB37_5
   289 00000000000056d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB37_3
   290 0000000000005800     0 NOTYPE  LOCAL  DEFAULT     1 LBB37_13
   291 00000000000057f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB37_12
   292 0000000000005820     0 NOTYPE  LOCAL  DEFAULT     1 LBB37_9
   293 0000000000005748     0 NOTYPE  LOCAL  DEFAULT     1 LBB37_4
   294 0000000000005768     0 NOTYPE  LOCAL  DEFAULT     1 LBB37_10
   295 00000000000058b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB37_11
   296 0000000000005948     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_6
   297 0000000000005960     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_7
   298 00000000000059b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_4
   299 0000000000005ab8     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_9
   300 0000000000005ad0     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_10
   301 0000000000005a50     0 NOTYPE  LOCAL  DEFAULT     1 LBB38_8
   302 0000000000005ae0    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::type_id
   303 0000000000005af8    16 FUNC    LOCAL  DEFAULT     1 std::error::Error::backtrace
   304 0000000000005b08    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::cause
   305 0000000000005b20   168 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Write>::write_str
   306 0000000000005b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB44_2
   307 0000000000005bc8   688 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Write>::write_char
   308 0000000000005c58     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_4
   309 0000000000005c28     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_3
   310 0000000000005e68     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_12
   311 0000000000005d10     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_6
   312 0000000000005ca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_7
   313 0000000000005d58     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_8
   314 0000000000005de0     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_9
   315 0000000000005e28     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_11
   316 0000000000005e78   104 FUNC    LOCAL  DEFAULT     1 core::fmt::Write::write_fmt
   317 0000000000013c10    48 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_69
   318 0000000000005ee0   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   319 0000000000005f40     0 NOTYPE  LOCAL  DEFAULT     1 LBB47_2
   320 0000000000005f88    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   321 0000000000005fa8   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   322 0000000000006080     0 NOTYPE  LOCAL  DEFAULT     1 LBB50_2
   323 0000000000006060     0 NOTYPE  LOCAL  DEFAULT     1 LBB50_5
   324 00000000000060a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB50_4
   325 00000000000060b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB50_3
   326 0000000000012548    14 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_71
   327 0000000000012556    36 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_72
   328 0000000000012580    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_75
   329 000000000001259c     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_76
   330 00000000000125a5    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_77
   331 00000000000125bd    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_78
   332 00000000000125d5    29 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_79
   333 00000000000125f2     9 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_80
   334 00000000000125fb    15 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_81
   335 0000000000012697    26 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_82
   336 00000000000126ba    37 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_83
   337 00000000000126df    12 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_84
   338 00000000000126eb    35 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_85
   339 000000000001270e    34 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_86
   340 0000000000012730    61 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_87
   341 000000000001276d    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_88
   342 0000000000012785    46 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_89
   343 0000000000013b20    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_90
   344 00000000000129c6    28 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_91
   345 0000000000012a19    75 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_92
   346 0000000000000910   200 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::GameState as core::fmt::Debug>::fmt
   347 00000000000006f0   544 FUNC    LOCAL  DEFAULT     1 tictactoe::instructions::PlayerMove::process
   348 00000000000009d8   872 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize
   349 0000000000000d40   880 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize
   350 0000000000001530  1208 FUNC    LOCAL  DEFAULT     1 <tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize
   351 0000000000005088  1216 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize
   352 0000000000004db8   720 FUNC    LOCAL  DEFAULT     1 <tictactoe::error::TictactoeError as core::fmt::Display>::fmt
   353 0000000000004ac0   208 FUNC    LOCAL  HIDDEN      1 __rg_alloc
   354 0000000000004b90     8 FUNC    LOCAL  HIDDEN      1 __rg_dealloc
   355 0000000000004b98   264 FUNC    LOCAL  HIDDEN      1 __rg_realloc
   356 00000000000058b8   552 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize
   357 0000000000005548   880 FUNC    LOCAL  DEFAULT     1 <tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize
   358 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS 1mmfwtw9ogskz7n7
   359 00000000000060d8     0 NOTYPE  LOCAL  DEFAULT     1
   360 00000000000060e8     0 NOTYPE  LOCAL  DEFAULT     1
   361 00000000000060f8     0 NOTYPE  LOCAL  DEFAULT     1
   362 0000000000006108     0 NOTYPE  LOCAL  DEFAULT     1
   363 00000000000060e8    16 FUNC    LOCAL  DEFAULT     1 __rust_dealloc
   364 00000000000060d8    16 FUNC    LOCAL  DEFAULT     1 __rust_alloc
   365 00000000000060f8    16 FUNC    LOCAL  DEFAULT     1 __rust_realloc
   366 0000000000006108    16 FUNC    LOCAL  DEFAULT     1 __rust_alloc_error_handler
   367 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS solana_program.e9ff558d-cgu.0
   368 0000000000006118     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&alloc::vec::Vec<(u64,solana_program::stake_history::StakeHistoryEntry)>>
   369 0000000000006120    56 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>
   370 0000000000006150     0 NOTYPE  LOCAL  DEFAULT     1 LBB6_3
   371 0000000000006158   240 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>
   372 00000000000061a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_3
   373 0000000000006210     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_6
   374 0000000000006180     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_9
   375 00000000000061b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_5
   376 0000000000006230     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_8
   377 00000000000061c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_12
   378 00000000000061e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB10_15
   379 0000000000012ac8    24 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_15
   380 0000000000013d20    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_16
   381 0000000000013c40    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_17
   382 00000000000062c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB14_2
   383 0000000000006370     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_2
   384 0000000000006388     0 NOTYPE  LOCAL  DEFAULT     1 LBB23_3
   385 00000000000063f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_2
   386 0000000000006410     0 NOTYPE  LOCAL  DEFAULT     1 LBB27_3
   387 0000000000006750   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   388 0000000000006420   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   389 0000000000006450     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_2
   390 0000000000006538     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_12
   391 0000000000006488     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_5
   392 0000000000006498     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_7
   393 00000000000064d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_9
   394 00000000000064e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_10
   395 0000000000006548     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_14
   396 0000000000006568     0 NOTYPE  LOCAL  DEFAULT     1 LBB32_13
   397 0000000000006580   464 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   398 00000000000065b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_2
   399 0000000000006708     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_16
   400 00000000000065e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_5
   401 00000000000065f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_7
   402 0000000000006658     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_9
   403 0000000000006668     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_11
   404 00000000000066a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_13
   405 00000000000066b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_14
   406 0000000000006718     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_18
   407 0000000000006738     0 NOTYPE  LOCAL  DEFAULT     1 LBB42_17
   408 0000000000006790     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_12
   409 0000000000006878     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_2
   410 0000000000006808     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_7
   411 00000000000067e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_6
   412 0000000000006858     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_9
   413 0000000000006838     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_11
   414 0000000000006868     0 NOTYPE  LOCAL  DEFAULT     1 LBB45_10
   415 00000000000070d0  6416 FUNC    LOCAL  DEFAULT     1 solana_program::instruction::Instruction::new_with_bincode
   416 0000000000013c80    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_63
   417 0000000000013c90    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_64
   418 0000000000013c58    16 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_69
   419 0000000000006908     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_2
   420 0000000000006918     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_4
   421 0000000000006930     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_6
   422 0000000000006998     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_9
   423 0000000000006978     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_8
   424 00000000000069a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_10
   425 0000000000006ae8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_14
   426 0000000000006b80     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_15
   427 0000000000006a08     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_12
   428 0000000000006ab8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_13
   429 0000000000006d80     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_30
   430 0000000000006bd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_18
   431 0000000000013c68    24 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_70
   432 0000000000006c20     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_20
   433 0000000000006c10     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_19
   434 0000000000006c70     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_22
   435 0000000000006ca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_24
   436 0000000000006cc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_26
   437 0000000000006ce8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_28
   438 0000000000006df8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_32
   439 0000000000007098     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_43
   440 0000000000006e88     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_34
   441 0000000000006ec8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_36
   442 0000000000006ef0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_38
   443 0000000000006f10     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_40
   444 0000000000006ff8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_42
   445 0000000000007140     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_5
   446 0000000000007180     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_12
   447 0000000000007230     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_25
   448 0000000000007198     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_18
   449 0000000000007130     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_4
   450 0000000000007160     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_9
   451 00000000000071a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_16
   452 00000000000071c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_19
   453 00000000000071d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_21
   454 00000000000071d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_20
   455 00000000000071b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_17
   456 00000000000071f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_23
   457 0000000000007208     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_24
   458 0000000000007260     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_27
   459 00000000000089c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_147
   460 0000000000007338     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_33
   461 0000000000007578     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_48
   462 0000000000007680     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_56
   463 0000000000007858     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_65
   464 00000000000072e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_32
   465 00000000000087c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_140
   466 0000000000007618     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_52
   467 00000000000073e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_38
   468 0000000000007408     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_39
   469 0000000000007970     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_71
   470 0000000000007a88     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_77
   471 0000000000007398     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_37
   472 0000000000008070     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_109
   473 0000000000007648     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_53
   474 0000000000007ba0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_83
   475 0000000000007440     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_42
   476 0000000000008800     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_142
   477 0000000000007518     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_46
   478 0000000000007478     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_43
   479 0000000000007d38     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_91
   480 0000000000007e68     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_97
   481 0000000000008008     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_105
   482 00000000000075d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_51
   483 0000000000008140     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_111
   484 0000000000007668     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_55
   485 0000000000008840     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_144
   486 0000000000008060     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_108
   487 00000000000076d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_58
   488 0000000000008880     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_145
   489 0000000000007718     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_59
   490 0000000000007788     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_61
   491 0000000000007800     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_63
   492 00000000000077c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_62
   493 0000000000008078     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_110
   494 00000000000078a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_67
   495 0000000000007918     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_69
   496 00000000000078e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_68
   497 00000000000079c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_73
   498 0000000000007a30     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_75
   499 00000000000079f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_74
   500 0000000000007ad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_79
   501 0000000000007b48     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_81
   502 0000000000007b10     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_80
   503 0000000000007bf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_85
   504 0000000000007cd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_89
   505 0000000000007c28     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_86
   506 00000000000083b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_122
   507 0000000000007d80     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_93
   508 00000000000088b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_92
   509 0000000000007e08     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_95
   510 0000000000007dd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_94
   511 0000000000007eb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_99
   512 0000000000007fa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_103
   513 0000000000007ef8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_100
   514 0000000000008580     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_130
   515 0000000000008050     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_107
   516 0000000000008188     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_113
   517 00000000000088e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_146
   518 00000000000081d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_114
   519 0000000000008258     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_116
   520 00000000000082c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_118
   521 0000000000008358     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_120
   522 0000000000008318     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_119
   523 0000000000008408     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_124
   524 0000000000008920     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_123
   525 00000000000084a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_126
   526 0000000000008520     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_128
   527 00000000000084e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_127
   528 00000000000085d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_132
   529 0000000000008970     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_131
   530 0000000000008670     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_134
   531 00000000000086e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_136
   532 0000000000008760     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_138
   533 0000000000008728     0 NOTYPE  LOCAL  DEFAULT     1 LBB131_137
   534 0000000000008cd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_4
   535 0000000000008cb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_2
   536 0000000000008ad8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_3
   537 0000000000008ae8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_7
   538 0000000000008ca0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_14
   539 0000000000008c00     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_10
   540 0000000000008b70     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_16
   541 0000000000008dc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_17
   542 0000000000008bc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_18
   543 0000000000008df8     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_19
   544 0000000000008d50     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_12
   545 0000000000008c60     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_13
   546 0000000000008d88     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_15
   547 0000000000008d30     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_6
   548 0000000000008e40     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_21
   549 0000000000008e28     0 NOTYPE  LOCAL  DEFAULT     1 LBB200_20
   550 0000000000008e88     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_14
   551 0000000000008eb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_8
   552 0000000000008f08     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_5
   553 0000000000008fa8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_27
   554 00000000000090d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_39
   555 0000000000008ee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_21
   556 0000000000008f30     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_18
   557 0000000000008fd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_33
   558 0000000000008f58     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_11
   559 0000000000008ff0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_30
   560 0000000000008f80     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_24
   561 0000000000009008     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_36
   562 0000000000009020     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_28
   563 0000000000009038     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_29
   564 0000000000009050     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_34
   565 0000000000009068     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_35
   566 0000000000009080     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_31
   567 0000000000009098     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_32
   568 00000000000090b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_37
   569 00000000000090c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_38
   570 0000000000009110     0 NOTYPE  LOCAL  DEFAULT     1 LBB206_43
   571 00000000000091a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_14
   572 00000000000091d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_8
   573 0000000000009238     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_5
   574 0000000000009330     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_28
   575 0000000000009448     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_49
   576 0000000000009318     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_27
   577 0000000000009208     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_21
   578 0000000000009268     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_18
   579 0000000000009348     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_37
   580 00000000000091c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_38
   581 00000000000092d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_11
   582 0000000000009358     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_32
   583 00000000000091f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_33
   584 0000000000009300     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_24
   585 0000000000009368     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_44
   586 0000000000009228     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_45
   587 0000000000009378     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_29
   588 0000000000009388     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_30
   589 0000000000009258     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_31
   590 0000000000009398     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_39
   591 00000000000093a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_40
   592 0000000000009288     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_41
   593 0000000000009408     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_43
   594 00000000000093b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_34
   595 00000000000093c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_35
   596 00000000000092f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_36
   597 00000000000093d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_46
   598 00000000000093e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_47
   599 00000000000093f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB207_48
   600 00000000000095b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_4
   601 0000000000009598     0 NOTYPE  LOCAL  DEFAULT     1 LBB210_3
   602 0000000000009698     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_2
   603 0000000000009728     0 NOTYPE  LOCAL  DEFAULT     1 LBB221_4
   604 0000000000009818     0 NOTYPE  LOCAL  DEFAULT     1 LBB230_2
   605 0000000000009868     0 NOTYPE  LOCAL  DEFAULT     1 LBB230_4
   606 0000000000013cc8    88 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_209
   607 00000000000098d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB332_2
   608 0000000000009a68     0 NOTYPE  LOCAL  DEFAULT     1 LBB334_2
   609 0000000000009c20     0 NOTYPE  LOCAL  DEFAULT     1 LBB336_2
   610 0000000000009d28    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::type_id
   611 0000000000009d40    16 FUNC    LOCAL  DEFAULT     1 std::error::Error::backtrace
   612 0000000000009d50    24 FUNC    LOCAL  DEFAULT     1 std::error::Error::cause
   613 0000000000009dc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_5
   614 0000000000009e68     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_3
   615 0000000000009f80     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_7
   616 0000000000009f00     0 NOTYPE  LOCAL  DEFAULT     1 LBB408_6
   617 000000000000a040     0 NOTYPE  LOCAL  DEFAULT     1 LBB623_2
   618 000000000000a058     0 NOTYPE  LOCAL  DEFAULT     1 LBB623_3
   619 0000000000012a64    19 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_794
   620 0000000000012a77    17 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_822
   621 0000000000012a88    13 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_845
   622 0000000000012a95    49 OBJECT  LOCAL  DEFAULT     2 .L__unnamed_851
   623 0000000000013ca8    32 OBJECT  LOCAL  DEFAULT     3 .L__unnamed_866
   624 0000000000009d68   552 FUNC    LOCAL  DEFAULT     1 <solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize
   625 00000000000070b0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref
   626 00000000000095c0   440 FUNC    LOCAL  DEFAULT     1 solana_program::pubkey::Pubkey::find_program_address
   627 0000000000006890  2080 FUNC    LOCAL  DEFAULT     1 solana_program::entrypoint::deserialize
   628 0000000000009458   360 FUNC    LOCAL  DEFAULT     1 <solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from
   629 0000000000006300   152 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::try_borrow_data
   630 0000000000006398   136 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::try_borrow_mut_data
   631 0000000000008e48   728 FUNC    LOCAL  DEFAULT     1 solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from
   632 0000000000009f90   216 FUNC    LOCAL  DEFAULT     1 solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get
   633 0000000000009778   248 FUNC    LOCAL  DEFAULT     1 solana_program::rent::Rent::minimum_balance
   634 0000000000006248   184 FUNC    LOCAL  DEFAULT     1 solana_program::account_info::AccountInfo::lamports
   635 0000000000009bc0   360 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::allocate
   636 0000000000008a20  1064 FUNC    LOCAL  DEFAULT     1 solana_program::program::invoke_signed
   637 0000000000009870   408 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::assign
   638 0000000000009a08   440 FUNC    LOCAL  DEFAULT     1 solana_program::system_instruction::transfer
   639 00000000000089e0    64 FUNC    LOCAL  DEFAULT     1 solana_program::program::invoke
   640 0000000000012ac8     0 OBJECT  LOCAL  DEFAULT     2 solana_program::message::legacy::BUILTIN_PROGRAMS_KEYS
   641 00000000000070b0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::hash::Hash as core::convert::AsRef<[u8]>>::as_ref
   642 0000000000009120   824 FUNC    LOCAL  DEFAULT     1 <solana_program::program_error::ProgramError as core::convert::From<u64>>::from
   643 0000000000009d68   552 FUNC    LOCAL  DEFAULT     1 <solana_program::hash::Hash as borsh::de::BorshDeserialize>::deserialize
   644 00000000000070b0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::blake3::Hash as core::convert::AsRef<[u8]>>::as_ref
   645 00000000000070b0    32 FUNC    LOCAL  DEFAULT     1 <solana_program::keccak::Hash as core::convert::AsRef<[u8]>>::as_ref
   646 0000000000009d68   552 FUNC    LOCAL  DEFAULT     1 <solana_program::blake3::Hash as borsh::de::BorshDeserialize>::deserialize
   647 0000000000009d68   552 FUNC    LOCAL  DEFAULT     1 <solana_program::keccak::Hash as borsh::de::BorshDeserialize>::deserialize
   648 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS blake3.b6ab9703-cgu.0
   649 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS solana_frozen_abi.c0b6b15a-cgu.0
   650 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS bs58.9c04cdba-cgu.0
   651 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS keccak.d4752f62-cgu.0
   652 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS bincode.adfda9c8-cgu.0
   653 000000000000a068     8 FUNC    LOCAL  DEFAULT     1 bincode::config::DefaultOptions::new
   654 000000000000a068     8 FUNC    LOCAL  DEFAULT     1 <bincode::config::DefaultOptions as core::default::Default>::default
   655 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS sha2.46e18164-cgu.0
   656 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS log.abad14e7-cgu.0
   657 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS borsh.c965a638-cgu.0
   658 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS std.76e7c9c4-cgu.0
   659 0000000000012ae0     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.0
   660 0000000000013d40    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.894d23c69aaefe319b308348099da530.113
   661 000000000000abd8    40 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   662 000000000000a0e8  1608 FUNC    LOCAL  DEFAULT     1 std::io::error::ErrorKind::as_str
   663 000000000000a150     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_28
   664 000000000000a1c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_15
   665 000000000000a230     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_9
   666 000000000000a2c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_6
   667 000000000000a718     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_82
   668 0000000000012dd5    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.161
   669 000000000000a190     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_42
   670 000000000000a260     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_36
   671 000000000000a2e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_33
   672 000000000000a430     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_68
   673 0000000000012c63    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.141
   674 000000000000a1f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_49
   675 000000000000a310     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_46
   676 000000000000a450     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_74
   677 0000000000012bd6    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.131
   678 000000000000a290     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_22
   679 000000000000a340     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_19
   680 000000000000a470     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_62
   681 0000000000012d57    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.151
   682 000000000000a650     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_81
   683 000000000000a370     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_53
   684 000000000000a490     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_77
   685 000000000000a4b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_78
   686 0000000000012b6b    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.125
   687 000000000000a3a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_12
   688 000000000000a4c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_58
   689 0000000000012d9e    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.156
   690 000000000000a3d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_39
   691 000000000000a4e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_71
   692 0000000000012c20    25 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.136
   693 000000000000a400     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_25
   694 000000000000a508     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_65
   695 0000000000012cfd    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.146
   696 000000000000a528     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_56
   697 000000000000a548     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_57
   698 000000000000a560     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_69
   699 000000000000a580     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_70
   700 000000000000a5a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_75
   701 000000000000a5c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_76
   702 0000000000012ba1    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.128
   703 000000000000a5e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_63
   704 000000000000a600     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_64
   705 0000000000012d1e    15 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.148
   706 000000000000a620     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_79
   707 000000000000a640     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_80
   708 0000000000012b40    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.122
   709 000000000000a660     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_60
   710 000000000000a680     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_61
   711 0000000000012d6e    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.153
   712 000000000000a6a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_72
   713 000000000000a6c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_73
   714 0000000000012bf1    20 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.133
   715 000000000000a6e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_66
   716 000000000000a700     0 NOTYPE  LOCAL  DEFAULT     1 LBB213_67
   717 0000000000012c86    25 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.143
   718 0000000000012c6f    23 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.142
   719 0000000000012d62    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.152
   720 0000000000012b8c    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.127
   721 0000000000012b81    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.126
   722 0000000000012db0    19 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.157
   723 0000000000012c39    23 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.137
   724 0000000000012d10    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.147
   725 0000000000012dc3    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.160
   726 0000000000012c5a     9 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.140
   727 0000000000012c50    10 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.139
   728 0000000000012bc8    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.130
   729 0000000000012bb7    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.129
   730 0000000000012d42    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.150
   731 0000000000012d2d    21 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.149
   732 0000000000012b5e    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.124
   733 0000000000012b53    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.123
   734 0000000000012d91    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.155
   735 0000000000012d83    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.154
   736 0000000000012c12    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.135
   737 0000000000012c05    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.134
   738 0000000000012cd7    38 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.145
   739 0000000000012c9f    56 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.144
   740 000000000000a790     0 NOTYPE  LOCAL  DEFAULT     1 LBB214_2
   741 000000000000a8d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_3
   742 000000000000a918     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_5
   743 000000000000a998     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_11
   744 000000000000a970     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_10
   745 000000000000a9b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_7
   746 000000000000a9a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB216_12
   747 0000000000013d50    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.894d23c69aaefe319b308348099da530.175
   748 000000000000ab28    40 FUNC    LOCAL  DEFAULT     1 <alloc::string::String as core::fmt::Display>::fmt
   749 0000000000012df2    46 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.353
   750 000000000000aba0    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::sol_log
   751 0000000000012de6    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.173
   752 0000000000012df1     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.894d23c69aaefe319b308348099da530.174
   753 000000000000a730   152 FUNC    LOCAL  DEFAULT     1 std::io::error::Error::_new
   754 000000000000a098    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Display>::fmt
   755 000000000000a0c0    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Debug>::fmt
   756 000000000000a070    40 FUNC    LOCAL  DEFAULT     1 <std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as std::error::Error>::description
   757 000000000000a7c8   864 FUNC    LOCAL  DEFAULT     1 <std::io::error::Error as core::fmt::Display>::fmt
   758 000000000000abb0    24 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::panic
   759 000000000000ab50    16 FUNC    LOCAL  DEFAULT     1 std::process::abort
   760 000000000000abc8    16 FUNC    LOCAL  DEFAULT     1 std::sys::sbf::abort_internal
   761 000000000000ab60    48 FUNC    LOCAL  DEFAULT     1 rust_oom
   762 000000000000ab90    16 FUNC    LOCAL  DEFAULT     1 rust_begin_unwind
   763 000000000000a070    40 FUNC    LOCAL  DEFAULT     1 <std::sys_common::wtf8::Wtf8Buf as core::ops::deref::Deref>::deref
   764 000000000000a070    40 FUNC    LOCAL  DEFAULT     1 <std::sys_common::wtf8::Wtf8Buf as core::ops::deref::DerefMut>::deref_mut
   765 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS panic_abort.848a2d84-cgu.0
   766 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS hashbrown.a672f3dc-cgu.0
   767 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS alloc.55e0798c-cgu.0
   768 000000000000ac00    16 FUNC    LOCAL  DEFAULT     1 core::ops::function::FnOnce::call_once
   769 000000000000ac10     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&u8>
   770 000000000000ac18   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle
   771 000000000000ac48     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
   772 000000000000ad30     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_12
   773 000000000000ac80     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_5
   774 000000000000ac90     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_7
   775 000000000000acc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_9
   776 000000000000acd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_10
   777 000000000000aed8   320 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::finish_grow
   778 000000000000ad40     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_14
   779 000000000000ad60     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_13
   780 000000000000ad78   352 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::RawVec<T,A>::reserve_for_push
   781 000000000000ada8     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_2
   782 000000000000ae90     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_12
   783 000000000000ade0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_5
   784 000000000000adf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_7
   785 000000000000ae28     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_9
   786 000000000000ae38     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_10
   787 000000000000aea0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_14
   788 000000000000aec0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_13
   789 000000000000af18     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_12
   790 000000000000b000     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_2
   791 000000000000af90     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_7
   792 000000000000af68     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_6
   793 000000000000afe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_9
   794 000000000000afc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_11
   795 000000000000aff0     0 NOTYPE  LOCAL  DEFAULT     1 LBB4_10
   796 0000000000012e3c    17 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.1
   797 0000000000013d80    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.2
   798 000000000000b080    16 FUNC    LOCAL  DEFAULT     1 core::intrinsics::const_eval_select
   799 000000000000b120     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_3
   800 000000000000b0f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_2
   801 000000000000b1b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_10
   802 000000000000b160     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_7
   803 000000000000b210     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_13
   804 000000000000b198     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_9
   805 0000000000013dd0    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.60
   806 000000000000b2f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB20_15
   807 0000000000012e4d    51 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.14
   808 0000000000013db0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.58
   809 0000000000013d98    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.d1e713e3042411b23b52a406e93e1cc2.16
   810 000000000000b300   680 FUNC    LOCAL  DEFAULT     1 alloc::string::String::push
   811 000000000000b390     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_4
   812 000000000000b360     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_3
   813 000000000000b5a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_12
   814 000000000000b448     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_6
   815 000000000000b3e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_7
   816 000000000000b490     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_8
   817 000000000000b518     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_9
   818 000000000000b560     0 NOTYPE  LOCAL  DEFAULT     1 LBB30_11
   819 000000000000b5a8   168 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_str
   820 000000000000b608     0 NOTYPE  LOCAL  DEFAULT     1 LBB60_2
   821 000000000000b650    32 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_char
   822 000000000000b670   112 FUNC    LOCAL  DEFAULT     1 <&mut W as core::fmt::Write>::write_fmt
   823 0000000000012e20    28 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.0
   824 0000000000012e80    24 OBJECT  LOCAL  DEFAULT     2 .Lanon.d1e713e3042411b23b52a406e93e1cc2.15
   825 000000000000b090   624 FUNC    LOCAL  DEFAULT     1 alloc::fmt::format
   826 000000000000b018    56 FUNC    LOCAL  DEFAULT     1 alloc::raw_vec::capacity_overflow
   827 000000000000b050    16 FUNC    LOCAL  DEFAULT     1 alloc::alloc::handle_alloc_error
   828 000000000000b070    16 FUNC    LOCAL  HIDDEN      1 __rg_oom
   829 000000000000b060    16 FUNC    LOCAL  DEFAULT     1 alloc::alloc::handle_alloc_error::rt_error
   830 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS core.817fea1d-cgu.0
   831 000000000000b6e0    24 FUNC    LOCAL  DEFAULT     1 core::ops::function::FnOnce::call_once
   832 000000000000b6f8     8 FUNC    LOCAL  DEFAULT     1 core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>
   833 0000000000012e98     0 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.100
   834 0000000000013e00    16 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.130
   835 000000000000b700   280 FUNC    LOCAL  DEFAULT     1 <core::ops::range::Range<Idx> as core::fmt::Debug>::fmt
   836 000000000000f6c8  1336 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::Debug for usize>::fmt
   837 000000000000b7c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_2
   838 000000000000b7d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB70_3
   839 000000000000b818    24 FUNC    LOCAL  DEFAULT     1 <T as core::any::Any>::type_id
   840 0000000000012e9a    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.137
   841 000000000000b870  1496 FUNC    LOCAL  DEFAULT     1 core::char::methods::<impl char>::escape_debug_ext
   842 000000000000b8f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_4
   843 000000000000be20     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_14
   844 000000000000b8e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_10
   845 000000000000b8d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_8
   846 000000000000b908     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_7
   847 000000000000bbd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_12
   848 000000000000be00     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_13
   849 000000000000bc00     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_11
   850 000000000000b930     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_16
   851 000000000000ba00     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_28
   852 000000000000bc10     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_18
   853 000000000000b970     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_27
   854 000000000000bca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB91_19
   855 00000000000134a8   438 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.355
   856 0000000000013394    84 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.353
   857 00000000000133e8   192 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.354
   858 000000000000f0d8   784 FUNC    LOCAL  DEFAULT     1 core::unicode::printable::check
   859 0000000000013265   303 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.352
   860 00000000000130f5    80 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.350
   861 0000000000013145   288 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.351
   862 0000000000010760    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   863 0000000000013e10    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.167
   864 0000000000012ed1    12 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.169
   865 000000000000c188     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_6
   866 000000000000bf80     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_3
   867 00000000000106f8   104 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   868 0000000000013e60    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.172
   869 000000000000c088     0 NOTYPE  LOCAL  DEFAULT     1 LBB125_5
   870 00000000000106c0    56 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Display>::fmt
   871 0000000000013e80    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.176
   872 0000000000013e40    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.168
   873 0000000000010690    48 FUNC    LOCAL  DEFAULT     1 <&T as core::fmt::Debug>::fmt
   874 0000000000013ea0    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.191
   875 0000000000012ef4     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.190
   876 0000000000012f13   200 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.228
   877 000000000000c618     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_4
   878 000000000000c890     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_22
   879 000000000000c570     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_3
   880 000000000000c588     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_26
   881 000000000000c5b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_25
   882 000000000000c928     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_28
   883 000000000000c658     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_6
   884 000000000000c6d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_20
   885 000000000000c668     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_7
   886 000000000000c710     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_10
   887 000000000000c720     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_11
   888 000000000000c770     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_13
   889 000000000000c7b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_16
   890 000000000000c7c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_17
   891 000000000000c810     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_19
   892 000000000000c8d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_24
   893 000000000000c8e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_29
   894 000000000000c918     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_30
   895 000000000000c930     0 NOTYPE  LOCAL  DEFAULT     1 LBB172_31
   896 000000000000c990     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_2
   897 000000000000c9b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_4
   898 000000000000c9a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_3
   899 000000000000c9e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_12
   900 000000000000ca38     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_6
   901 000000000000cb00     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_14
   902 000000000000d060   192 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral::write_prefix
   903 000000000000cc20     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_51
   904 000000000000cbe8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_17
   905 000000000000caa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_11
   906 000000000000cac8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_8
   907 000000000000ca80     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_10
   908 000000000000cbc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_16
   909 000000000000cb30     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_18
   910 000000000000cc38     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_27
   911 000000000000cb60     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_20
   912 000000000000cd30     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_23
   913 000000000000cd18     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_52
   914 000000000000ccb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_30
   915 000000000000cee8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_33
   916 000000000000ced0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_53
   917 000000000000cd70     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_24
   918 000000000000cdb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_26
   919 000000000000ce60     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_46
   920 000000000000ceb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_49
   921 000000000000cec0     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_50
   922 000000000000cf20     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_34
   923 000000000000cf60     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_36
   924 000000000000cfd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_39
   925 000000000000d030     0 NOTYPE  LOCAL  DEFAULT     1 LBB173_42
   926 000000000000d0d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_2
   927 000000000000d0e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_3
   928 000000000000d0e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB174_4
   929 000000000000d148     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_2
   930 000000000000d158     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_5
   931 000000000000d470     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_3
   932 000000000000d398     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_27
   933 000000000000d2e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_13
   934 000000000000d1b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_7
   935 000000000000d370     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_16
   936 000000000000d2c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_12
   937 000000000000d510     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_17
   938 000000000000d3f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_32
   939 000000000000d438     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_29
   940 000000000000d3d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_31
   941 000000000000d4b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_35
   942 000000000000d4a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_4
   943 000000000000d570     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_38
   944 000000000000d558     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_49
   945 000000000000d708     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_21
   946 000000000000d6c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_20
   947 000000000000d718     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_22
   948 000000000000d5a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_39
   949 000000000000d5e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_41
   950 000000000000d648     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_44
   951 000000000000d6a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_47
   952 000000000000d728     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_24
   953 000000000000d740     0 NOTYPE  LOCAL  DEFAULT     1 LBB175_26
   954 000000000000e238     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_61
   955 000000000000e1c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_12
   956 000000000000d8e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_3
   957 000000000000da70     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_13
   958 000000000000d970     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_5
   959 000000000000da88     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_14
   960 000000000000da28     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_7
   961 000000000000e150     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_10
   962 000000000000e188     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_11
   963 000000000000db20     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_17
   964 000000000000dbc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_29
   965 000000000000dae0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_16
   966 000000000000db68     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_22
   967 000000000000dbb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_28
   968 000000000000db88     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_25
   969 000000000000db98     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_26
   970 000000000000dba8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_27
   971 000000000000ded8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_38
   972 000000000000dc38     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_34
   973 000000000000dc00     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_33
   974 000000000000dc58     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_39
   975 000000000000dea8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_37
   976 000000000000df50     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_60
   977 000000000000df60     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_42
   978 000000000000dcd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_41
   979 000000000000dd00     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_64
   980 000000000000dd70     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_62
   981 000000000000dd98     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_84
   982 000000000000ddc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_69
   983 000000000000dde0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_72
   984 000000000000dfa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_44
   985 000000000000dd80     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_77
   986 000000000000dd90     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_83
   987 000000000000de68     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_82
   988 000000000000de80     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_75
   989 000000000000de30     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_74
   990 0000000000013ed8    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.239
   991 000000000000df18     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_53
   992 000000000000df28     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_58
   993 000000000000df30     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_59
   994 000000000000dfe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_45
   995 000000000000e138     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_81
   996 000000000000e100     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_78
   997 000000000000e030     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_49
   998 000000000000e050     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_54
   999 000000000000e0d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_52
  1000 000000000000e0a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB201_56
  1001 0000000000013ef0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.240
  1002 000000000000e578     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_23
  1003 000000000000e340     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_4
  1004 000000000000e3c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_3
  1005 000000000000e588     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_5
  1006 000000000000e350     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_24
  1007 000000000000e388     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_39
  1008 000000000000e358     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_25
  1009 000000000000e398     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_41
  1010 000000000000e3a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_42
  1011 000000000000e3f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_26
  1012 000000000000e460     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_31
  1013 000000000000e480     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_34
  1014 000000000000e508     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_40
  1015 000000000000e520     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_37
  1016 000000000000e4d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_36
  1017 000000000000e540     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_16
  1018 000000000000e550     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_21
  1019 000000000000e558     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_22
  1020 000000000000e5d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_8
  1021 000000000000e620     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_12
  1022 000000000000e640     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_17
  1023 000000000000e6c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_15
  1024 000000000000e690     0 NOTYPE  LOCAL  DEFAULT     1 LBB203_19
  1025 0000000000013ec0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.224
  1026 0000000000012f11     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.227
  1027 0000000000013f08    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.251
  1028 0000000000013f28    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.253
  1029 0000000000013f48    32 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.256
  1030 000000000000ea10     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_7
  1031 000000000000ea50     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_2
  1032 000000000000e9f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_6
  1033 0000000000013070     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.313
  1034 000000000000eae8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_10
  1035 000000000000ebd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_37
  1036 000000000000ecd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_14
  1037 0000000000013f68    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.292
  1038 000000000000eaf8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_12
  1039 0000000000013f80    48 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.316
  1040 000000000000f048     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_13
  1041 0000000000013fb0    64 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.320
  1042 000000000000ed28     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_18
  1043 000000000000ecf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_17
  1044 000000000000ed30     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_19
  1045 000000000000eda0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_23
  1046 000000000000ed40     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_20
  1047 000000000000ed58     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_22
  1048 000000000000eec0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_30
  1049 000000000000ed88     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_36
  1050 000000000000eda8     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_24
  1051 000000000000eef0     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_27
  1052 000000000000ee28     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_28
  1053 000000000000f078     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_31
  1054 0000000000012ea5    43 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.165
  1055 000000000000ef00     0 NOTYPE  LOCAL  DEFAULT     1 LBB242_35
  1056 0000000000013ff0    80 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.324
  1057 000000000000f250     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_3
  1058 000000000000f180     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_2
  1059 000000000000f160     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_6
  1060 000000000000f1b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_8
  1061 000000000000f388     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_10
  1062 000000000000f3b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_11
  1063 000000000000f1d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_13
  1064 000000000000f220     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_16
  1065 000000000000f210     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_15
  1066 000000000000f2d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_5
  1067 000000000000f2a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_17
  1068 000000000000f2a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_21
  1069 000000000000f318     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_18
  1070 000000000000f358     0 NOTYPE  LOCAL  DEFAULT     1 LBB261_20
  1071 0000000000014058    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.349
  1072 0000000000014040    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.348
  1073 000000000000f4a8     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_1
  1074 000000000000f408     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_3
  1075 000000000000f4d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB466_6
  1076 000000000000f618     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_1
  1077 000000000000f578     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_3
  1078 000000000000f648     0 NOTYPE  LOCAL  DEFAULT     1 LBB467_6
  1079 000000000000f878     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_2
  1080 000000000000f700     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_10
  1081 000000000000f898     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_20
  1082 000000000000f820     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_14
  1083 000000000000f728     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_12
  1084 000000000000faa0     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_16
  1085 000000000000f828     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_15
  1086 000000000000f840     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_18
  1087 000000000000fb38     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_17
  1088 000000000000fb88     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_19
  1089 000000000000f9f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_3
  1090 000000000000f928     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_21
  1091 000000000000f8b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_23
  1092 000000000000fa28     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_8
  1093 000000000000f9c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_7
  1094 000000000000f960     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_5
  1095 000000000000fbf0     0 NOTYPE  LOCAL  DEFAULT     1 LBB492_9
  1096 000000000000fc68     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_3
  1097 000000000000fcd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_4
  1098 000000000000fd00     0 NOTYPE  LOCAL  DEFAULT     1 LBB494_5
  1099 000000000000fed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_4
  1100 000000000000fde0     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_2
  1101 000000000000ff30     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_6
  1102 000000000000fee0     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_5
  1103 000000000000fef8     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_8
  1104 000000000000ffc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_7
  1105 0000000000010018     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_9
  1106 0000000000010068     0 NOTYPE  LOCAL  DEFAULT     1 LBB497_11
  1107 00000000000101c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_4
  1108 00000000000100c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_2
  1109 0000000000010218     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_6
  1110 00000000000101c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_5
  1111 00000000000101e0     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_8
  1112 00000000000102b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_7
  1113 0000000000010300     0 NOTYPE  LOCAL  DEFAULT     1 LBB498_9
  1114 0000000000010498     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_4
  1115 00000000000103a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_2
  1116 00000000000104f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_6
  1117 00000000000104a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_5
  1118 00000000000104b8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_8
  1119 0000000000010588     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_7
  1120 00000000000105d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB500_9
  1121 0000000000013686     5 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.540
  1122 00000000000140a0    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.362
  1123 0000000000014088    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.361
  1124 0000000000014070    24 OBJECT  LOCAL  DEFAULT     3 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.360
  1125 00000000000107f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_1
  1126 00000000000107c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_3
  1127 00000000000107d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_4
  1128 0000000000010890     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_6
  1129 000000000001368c   128 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::SHORT_OFFSET_RUNS
  1130 0000000000010880     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_5
  1131 0000000000010ac0     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_8
  1132 00000000000108e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_10
  1133 0000000000010918     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_12
  1134 0000000000010998     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_16
  1135 0000000000010968     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_15
  1136 0000000000010a80     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_23
  1137 000000000001370c   707 OBJECT  LOCAL  DEFAULT     2 core::unicode::unicode_data::grapheme_extend::OFFSETS
  1138 0000000000010a10     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_18
  1139 0000000000010a90     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_20
  1140 0000000000010a78     0 NOTYPE  LOCAL  DEFAULT     1 LBB646_22
  1141 0000000000012e98     2 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.129
  1142 0000000000012ed0     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.166
  1143 0000000000012edd     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.170
  1144 0000000000012ede     3 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.171
  1145 0000000000012ee1    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.175
  1146 0000000000012ef3     1 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.188
  1147 0000000000012ef6    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.223
  1148 0000000000012fdb    27 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.232
  1149 0000000000012ff6    18 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.249
  1150 0000000000013008    34 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.250
  1151 000000000001302a    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.254
  1152 0000000000013040    13 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.255
  1153 000000000001304d    35 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.290
  1154 0000000000013075    11 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.314
  1155 0000000000013080    22 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.315
  1156 0000000000013096    14 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.317
  1157 00000000000130a4    38 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.321
  1158 00000000000130ca     6 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.323
  1159 00000000000130d0    37 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.347
  1160 000000000001365e    40 OBJECT  LOCAL  DEFAULT     2 .Lanon.78d2b12bf0e3bf9ad78143c4d288f97d.356
  1161 000000000000d750    48 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::write_str
  1162 0000000000010378   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt
  1163 000000000000c468    88 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::new
  1164 000000000000c368   256 FUNC    LOCAL  DEFAULT     1 core::result::unwrap_failed
  1165 0000000000010378   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u64>::fmt
  1166 000000000000d780    96 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::write_fmt
  1167 000000000000c4c0  1144 FUNC    LOCAL  DEFAULT     1 core::fmt::write
  1168 000000000000d7e0    32 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_lower_hex
  1169 000000000000d800    32 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::debug_upper_hex
  1170 000000000000f558   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt
  1171 000000000000f3e8   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt
  1172 000000000000fc00   376 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt
  1173 000000000000be48   848 FUNC    LOCAL  DEFAULT     1 <core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt
  1174 0000000000010650    64 FUNC    LOCAL  DEFAULT     1 <core::fmt::Error as core::fmt::Debug>::fmt
  1175 000000000000c198   144 FUNC    LOCAL  DEFAULT     1 core::panicking::panic
  1176 00000000000100a0   728 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt
  1177 000000000000e7c8   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_end_index_len_fail
  1178 000000000000c228   224 FUNC    LOCAL  DEFAULT     1 core::panicking::panic_bounds_check
  1179 000000000000c308    96 FUNC    LOCAL  DEFAULT     1 core::panicking::panic_fmt
  1180 000000000000e248    48 FUNC    LOCAL  DEFAULT     1 <str as core::fmt::Display>::fmt
  1181 000000000000fd78   808 FUNC    LOCAL  DEFAULT     1 core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt
  1182 000000000000e8a8   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_index_order_fail
  1183 000000000000e6e8   224 FUNC    LOCAL  DEFAULT     1 core::slice::index::slice_start_index_len_fail
  1184 000000000000d820  2600 FUNC    LOCAL  DEFAULT     1 <str as core::fmt::Debug>::fmt
  1185 000000000000b830    64 FUNC    LOCAL  DEFAULT     1 <core::cell::BorrowError as core::fmt::Debug>::fmt
  1186 000000000000e278  1136 FUNC    LOCAL  DEFAULT     1 <char as core::fmt::Debug>::fmt
  1187 000000000000d120  1584 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad
  1188 0000000000010790   864 FUNC    LOCAL  DEFAULT     1 core::unicode::unicode_data::grapheme_extend::lookup
  1189 000000000000e988  1872 FUNC    LOCAL  DEFAULT     1 core::str::slice_error_fail
  1190 000000000000c938  1832 FUNC    LOCAL  DEFAULT     1 core::fmt::Formatter::pad_integral
  1191 000000000000f3e8   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::LowerHex for i8>::fmt
  1192 000000000000f558   368 FUNC    LOCAL  DEFAULT     1 core::fmt::num::<impl core::fmt::UpperHex for i8>::fmt
  1193 000000000000d750    48 FUNC    LOCAL  DEFAULT     1 <core::fmt::Formatter as core::fmt::Write>::write_str
  1194 000000000000d780    96 FUNC    LOCAL  DEFAULT     1 <core::fmt::Formatter as core::fmt::Write>::write_fmt
  1195 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.103
  1196 0000000000010af0    16 FUNC    LOCAL  HIDDEN      1 __adddf3
  1197 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.130
  1198 0000000000010bd0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_7
  1199 0000000000010bb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1200 0000000000010bc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
  1201 0000000000010b00   216 FUNC    LOCAL  HIDDEN      1 __fixunsdfdi
  1202 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.14
  1203 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.165
  1204 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.167
  1205 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.181
  1206 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.200
  1207 0000000000010ce0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_9
  1208 0000000000010ca8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1209 0000000000010cd8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_8
  1210 0000000000010bd8   288 FUNC    LOCAL  HIDDEN      1 __gtdf2
  1211 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.27
  1212 0000000000010e00     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_9
  1213 0000000000010dc8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1214 0000000000010df8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_8
  1215 0000000000010cf8   288 FUNC    LOCAL  HIDDEN      1 __gedf2
  1216 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.3
  1217 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.39
  1218 0000000000010e18    16 FUNC    LOCAL  HIDDEN      1 __muldf3
  1219 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.164
  1220 0000000000011000     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_3
  1221 0000000000010ef8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_2
  1222 0000000000010f98     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_23
  1223 0000000000011080     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_24
  1224 0000000000010fe0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_26
  1225 0000000000011098     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_25
  1226 0000000000011240     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_35
  1227 00000000000110d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_5
  1228 0000000000011058     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_7
  1229 0000000000011100     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_6
  1230 0000000000011168     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_28
  1231 00000000000111d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_30
  1232 0000000000011120     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_9
  1233 0000000000011248     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_8
  1234 0000000000011230     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_32
  1235 0000000000011218     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_33
  1236 0000000000011238     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_34
  1237 0000000000011258     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_13
  1238 00000000000112a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_11
  1239 00000000000112f0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_17
  1240 0000000000011490     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_20
  1241 0000000000011458     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_19
  1242 00000000000115f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_22
  1243 0000000000010e28  2048 FUNC    LOCAL  HIDDEN      1 compiler_builtins::float::mul::__muldf3
  1244 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.55
  1245 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.58
  1246 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.71
  1247 0000000000011720     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_2
  1248 00000000000116d0     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_6
  1249 0000000000011688     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_5
  1250 0000000000011730     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_3
  1251 00000000000116d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB0_7
  1252 0000000000011830     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_2
  1253 00000000000117f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_6
  1254 00000000000117c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_5
  1255 0000000000011848     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_3
  1256 0000000000011800     0 NOTYPE  LOCAL  DEFAULT     1 LBB2_7
  1257 0000000000011970     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_2
  1258 0000000000011900     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_7
  1259 00000000000118c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_4
  1260 00000000000118f8     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_6
  1261 00000000000119a0     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_12
  1262 0000000000011920     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_10
  1263 0000000000011910     0 NOTYPE  LOCAL  DEFAULT     1 LBB3_9
  1264 0000000000011740   280 FUNC    LOCAL  HIDDEN      1 memset
  1265 0000000000011858   352 FUNC    LOCAL  HIDDEN      1 memcmp
  1266 0000000000011628   280 FUNC    LOCAL  HIDDEN      1 memcpy
  1267 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.8
  1268 0000000000011eb0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_18
  1269 0000000000011a28     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_2
  1270 0000000000011a40     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_4
  1271 0000000000011a50     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_6
  1272 0000000000011ab0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_7
  1273 0000000000011c40     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_10
  1274 0000000000011c18     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_9
  1275 0000000000011de8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_14
  1276 0000000000011dc0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_13
  1277 0000000000011f00     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_21
  1278 0000000000011e38     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_15
  1279 0000000000011e50     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_16
  1280 0000000000011fb8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_26
  1281 0000000000012170     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_29
  1282 0000000000011f98     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_25
  1283 0000000000011ed8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_20
  1284 00000000000122c8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_38
  1285 0000000000012338     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_42
  1286 0000000000011f68     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_24
  1287 0000000000012198     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_30
  1288 00000000000121c0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_31
  1289 00000000000121d8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_32
  1290 0000000000012240     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_35
  1291 0000000000012218     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_34
  1292 0000000000012328     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_40
  1293 00000000000122b0     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_37
  1294 0000000000012330     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_41
  1295 00000000000122e8     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_39
  1296 0000000000012348     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_44
  1297 0000000000012340     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_43
  1298 0000000000012378     0 NOTYPE  LOCAL  DEFAULT     1 LBB1_47
  1299 00000000000119b8  2528 FUNC    LOCAL  HIDDEN      1 compiler_builtins::float::add::__adddf3
  1300 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.81
  1301 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.87
  1302 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS compiler_builtins.781b1db6-cgu.95
  1303 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS divdi3.c
  1304 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS floatundidf.c
  1305 0000000000012398   136 FUNC    LOCAL  HIDDEN      1 __floatundidf
  1306 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS floatundisf.c
  1307 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS lshrti3.c
  1308 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS muloti4.c
  1309 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS multi3.c
  1310 0000000000012420   296 FUNC    LOCAL  HIDDEN      1 __multi3
  1311 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivmoddi4.c
  1312 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivti3.c
  1313 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS udivmodti4.c
  1314 0000000000000000     0 FILE    LOCAL  DEFAULT   ABS umodti3.c
  1315 00000000000140b8     0 NOTYPE  LOCAL  HIDDEN      4 _DYNAMIC
  1316 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_log_
  1317 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND abort
  1318 00000000000019e8 12504 FUNC    GLOBAL DEFAULT     1 entrypoint
  1319 0000000000004ca0   280 FUNC    GLOBAL DEFAULT     1 custom_panic
  1320 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memset_
  1321 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_try_find_program_address
  1322 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_invoke_signed_rust
  1323 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_get_rent_sysvar
  1324 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcpy_
  1325 0000000000000000     0 NOTYPE  GLOBAL DEFAULT   UND sol_memcmp_
There are no section groups in this file.

/Volumes/d/dev/mp/projects/breakpoint/tictactoe/program/target/bpfel-unknown-unknown/release/tictactoe.so	file format elf64-bpf

Disassembly of section .text

0000000000000120 <core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>>
      36	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      37	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB0_3>
      38	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
      39	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB0_3>
      40	b7 03 00 00 01 00 00 00	r3 = 0x1
      41	85 10 00 00 f3 0b 00 00	call 0xbf3 ; <__rust_dealloc>

0000000000000150 <LBB0_3>
      42	95 00 00 00 00 00 00 00	exit

0000000000000158 <core::ptr::drop_in_place<&u8>>
      43	95 00 00 00 00 00 00 00	exit

0000000000000160 <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
      44	bf 16 00 00 00 00 00 00	r6 = r1
      45	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
      46	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      47	07 02 00 00 ff ff ff ff	r2 += -0x1
      48	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      49	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_3>
      50	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      51	07 02 00 00 ff ff ff ff	r2 += -0x1
      52	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      53	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_3>
      54	b7 02 00 00 20 00 00 00	r2 = 0x20
      55	b7 03 00 00 08 00 00 00	r3 = 0x8
      56	85 10 00 00 e4 0b 00 00	call 0xbe4 ; <__rust_dealloc>

00000000000001c8 <LBB2_3>
      57	79 61 10 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x10)
      58	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      59	07 02 00 00 ff ff ff ff	r2 += -0x1
      60	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      61	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_6>
      62	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      63	07 02 00 00 ff ff ff ff	r2 += -0x1
      64	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      65	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_6>
      66	b7 02 00 00 28 00 00 00	r2 = 0x28
      67	b7 03 00 00 08 00 00 00	r3 = 0x8
      68	85 10 00 00 d8 0b 00 00	call 0xbd8 ; <__rust_dealloc>

0000000000000228 <LBB2_6>
      69	79 61 38 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x38)
      70	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      71	07 02 00 00 ff ff ff ff	r2 += -0x1
      72	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      73	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_9>
      74	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      75	07 02 00 00 ff ff ff ff	r2 += -0x1
      76	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      77	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_9>
      78	b7 02 00 00 20 00 00 00	r2 = 0x20
      79	b7 03 00 00 08 00 00 00	r3 = 0x8
      80	85 10 00 00 cc 0b 00 00	call 0xbcc ; <__rust_dealloc>

0000000000000288 <LBB2_9>
      81	79 61 40 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x40)
      82	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
      83	07 02 00 00 ff ff ff ff	r2 += -0x1
      84	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
      85	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB2_12>
      86	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
      87	07 02 00 00 ff ff ff ff	r2 += -0x1
      88	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
      89	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB2_12>
      90	b7 02 00 00 28 00 00 00	r2 = 0x28
      91	b7 03 00 00 08 00 00 00	r3 = 0x8
      92	85 10 00 00 c0 0b 00 00	call 0xbc0 ; <__rust_dealloc>

00000000000002e8 <LBB2_12>
      93	95 00 00 00 00 00 00 00	exit

00000000000002f0 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
      94	bf 16 00 00 00 00 00 00	r6 = r1
      95	bf 24 00 00 00 00 00 00	r4 = r2
      96	0f 34 00 00 00 00 00 00	r4 += r3
      97	b7 01 00 00 01 00 00 00	r1 = 0x1
      98	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB10_2>
      99	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000320 <LBB10_2>
     100	57 01 00 00 01 00 00 00	r1 &= 0x1
     101	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB10_12>
     102	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
     103	bf 17 00 00 00 00 00 00	r7 = r1
     104	67 07 00 00 01 00 00 00	r7 <<= 0x1
     105	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB10_5>
     106	bf 47 00 00 00 00 00 00	r7 = r4

0000000000000358 <LBB10_5>
     107	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB10_7>
     108	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000000368 <LBB10_7>
     109	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB10_9>
     110	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
     111	b7 03 00 00 01 00 00 00	r3 = 0x1
     112	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
     113	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     114	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
     115	05 00 02 00 00 00 00 00	goto +0x2 <LBB10_10>

00000000000003a0 <LBB10_9>
     116	b7 01 00 00 00 00 00 00	r1 = 0x0
     117	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

00000000000003b0 <LBB10_10>
     118	bf a1 00 00 00 00 00 00	r1 = r10
     119	07 01 00 00 d0 ff ff ff	r1 += -0x30
     120	bf a4 00 00 00 00 00 00	r4 = r10
     121	07 04 00 00 e8 ff ff ff	r4 += -0x18
     122	bf 72 00 00 00 00 00 00	r2 = r7
     123	b7 03 00 00 01 00 00 00	r3 = 0x1
     124	85 10 00 00 39 00 00 00	call 0x39 ; <alloc::raw_vec::finish_grow>
     125	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     126	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB10_14>
     127	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     128	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB10_13>

0000000000000408 <LBB10_12>
     129	85 10 00 00 81 15 00 00	call 0x1581 ; <alloc::raw_vec::capacity_overflow>
     130	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000418 <LBB10_14>
     131	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     132	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     133	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     134	95 00 00 00 00 00 00 00	exit

0000000000000438 <LBB10_13>
     135	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     136	85 10 00 00 81 15 00 00	call 0x1581 ; <alloc::alloc::handle_alloc_error>
     137	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000450 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
     138	bf 16 00 00 00 00 00 00	r6 = r1
     139	bf 23 00 00 00 00 00 00	r3 = r2
     140	07 03 00 00 01 00 00 00	r3 += 0x1
     141	b7 01 00 00 01 00 00 00	r1 = 0x1
     142	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB11_2>
     143	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000480 <LBB11_2>
     144	57 01 00 00 01 00 00 00	r1 &= 0x1
     145	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB11_12>
     146	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
     147	bf 17 00 00 00 00 00 00	r7 = r1
     148	67 07 00 00 01 00 00 00	r7 <<= 0x1
     149	2d 37 01 00 00 00 00 00	if r7 > r3 goto +0x1 <LBB11_5>
     150	bf 37 00 00 00 00 00 00	r7 = r3

00000000000004b8 <LBB11_5>
     151	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB11_7>
     152	b7 07 00 00 08 00 00 00	r7 = 0x8

00000000000004c8 <LBB11_7>
     153	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB11_9>
     154	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
     155	b7 03 00 00 01 00 00 00	r3 = 0x1
     156	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
     157	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     158	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
     159	05 00 02 00 00 00 00 00	goto +0x2 <LBB11_10>

0000000000000500 <LBB11_9>
     160	b7 01 00 00 00 00 00 00	r1 = 0x0
     161	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

0000000000000510 <LBB11_10>
     162	bf a1 00 00 00 00 00 00	r1 = r10
     163	07 01 00 00 d0 ff ff ff	r1 += -0x30
     164	bf a4 00 00 00 00 00 00	r4 = r10
     165	07 04 00 00 e8 ff ff ff	r4 += -0x18
     166	bf 72 00 00 00 00 00 00	r2 = r7
     167	b7 03 00 00 01 00 00 00	r3 = 0x1
     168	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
     169	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     170	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB11_14>
     171	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     172	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB11_13>

0000000000000568 <LBB11_12>
     173	85 10 00 00 55 15 00 00	call 0x1555 ; <alloc::raw_vec::capacity_overflow>
     174	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000578 <LBB11_14>
     175	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     176	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     177	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     178	95 00 00 00 00 00 00 00	exit

0000000000000598 <LBB11_13>
     179	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     180	85 10 00 00 55 15 00 00	call 0x1555 ; <alloc::alloc::handle_alloc_error>
     181	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000005b0 <alloc::raw_vec::finish_grow>
     182	bf 38 00 00 00 00 00 00	r8 = r3
     183	bf 27 00 00 00 00 00 00	r7 = r2
     184	bf 16 00 00 00 00 00 00	r6 = r1
     185	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB13_12>
     186	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     187	b7 01 00 00 01 00 00 00	r1 = 0x1
     188	b7 07 00 00 00 00 00 00	r7 = 0x0
     189	05 00 1d 00 00 00 00 00	goto +0x1d <LBB13_2>

00000000000005f0 <LBB13_12>
     190	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
     191	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB13_7>
     192	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
     193	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB13_6>
     194	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB13_9>
     195	bf 71 00 00 00 00 00 00	r1 = r7
     196	bf 82 00 00 00 00 00 00	r2 = r8
     197	85 10 00 00 55 0b 00 00	call 0xb55 ; <__rust_alloc>
     198	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB13_11>
     199	05 00 11 00 00 00 00 00	goto +0x11 <LBB13_10>

0000000000000640 <LBB13_6>
     200	bf 83 00 00 00 00 00 00	r3 = r8
     201	bf 74 00 00 00 00 00 00	r4 = r7
     202	85 10 00 00 54 0b 00 00	call 0xb54 ; <__rust_realloc>
     203	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB13_11>
     204	05 00 0c 00 00 00 00 00	goto +0xc <LBB13_10>

0000000000000668 <LBB13_7>
     205	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB13_9>
     206	bf 71 00 00 00 00 00 00	r1 = r7
     207	bf 82 00 00 00 00 00 00	r2 = r8
     208	85 10 00 00 4a 0b 00 00	call 0xb4a ; <__rust_alloc>
     209	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB13_11>
     210	05 00 06 00 00 00 00 00	goto +0x6 <LBB13_10>

0000000000000698 <LBB13_11>
     211	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
     212	b7 01 00 00 01 00 00 00	r1 = 0x1
     213	bf 87 00 00 00 00 00 00	r7 = r8
     214	05 00 04 00 00 00 00 00	goto +0x4 <LBB13_2>

00000000000006b8 <LBB13_9>
     215	b7 07 00 00 00 00 00 00	r7 = 0x0
     216	bf 80 00 00 00 00 00 00	r0 = r8

00000000000006c8 <LBB13_10>
     217	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
     218	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000006d8 <LBB13_2>
     219	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
     220	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
     221	95 00 00 00 00 00 00 00	exit

00000000000006f0 <tictactoe::instructions::PlayerMove::process>
     222	bf 47 00 00 00 00 00 00	r7 = r4
     223	bf 16 00 00 00 00 00 00	r6 = r1
     224	b7 01 00 00 b1 c7 71 00	r1 = 0x71c7b1
     225	71 24 01 00 00 00 00 00	r4 = *(u8 *)(r2 + 0x1)
     226	25 04 27 00 08 00 00 00	if r4 > 0x8 goto +0x27 <LBB14_7>
     227	bf 78 00 00 00 00 00 00	r8 = r7
     228	0f 48 00 00 00 00 00 00	r8 += r4
     229	71 84 40 00 00 00 00 00	r4 = *(u8 *)(r8 + 0x40)
     230	55 04 23 00 00 00 00 00	if r4 != 0x0 goto +0x23 <LBB14_7>
     231	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
     232	71 29 00 00 00 00 00 00	r9 = *(u8 *)(r2 + 0x0)
     233	bf 92 00 00 00 00 00 00	r2 = r9
     234	55 02 14 00 01 00 00 00	if r2 != 0x1 goto +0x14 <LBB14_5>
     235	bf 72 00 00 00 00 00 00	r2 = r7
     236	b7 03 00 00 20 00 00 00	r3 = 0x20
     237	85 10 00 00 1d 22 00 00	call 0x221d ; <memcmp>
     238	b7 01 00 00 ac c7 71 00	r1 = 0x71c7ac
     239	67 00 00 00 20 00 00 00	r0 <<= 0x20
     240	77 00 00 00 20 00 00 00	r0 >>= 0x20
     241	55 00 18 00 00 00 00 00	if r0 != 0x0 goto +0x18 <LBB14_7>
     242	b7 01 00 00 b2 c7 71 00	r1 = 0x71c7b2
     243	71 72 4a 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x4a)
     244	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB14_9>
     245	05 00 14 00 00 00 00 00	goto +0x14 <LBB14_7>

00000000000007b0 <LBB14_9>
     246	07 08 00 00 40 00 00 00	r8 += 0x40
     247	73 98 00 00 00 00 00 00	*(u8 *)(r8 + 0x0) = r9
     248	71 71 40 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x40)
     249	55 01 14 00 00 00 00 00	if r1 != 0x0 goto +0x14 <LBB14_11>

00000000000007d0 <LBB14_10>
     250	71 71 4a 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x4a)
     251	a7 01 00 00 01 00 00 00	r1 ^= 0x1
     252	73 17 4a 00 00 00 00 00	*(u8 *)(r7 + 0x4a) = r1
     253	b7 01 00 00 14 00 00 00	r1 = 0x14
     254	05 00 0d 00 00 00 00 00	goto +0xd <LBB14_8>

00000000000007f8 <LBB14_5>
     255	bf 72 00 00 00 00 00 00	r2 = r7
     256	07 02 00 00 20 00 00 00	r2 += 0x20
     257	b7 03 00 00 20 00 00 00	r3 = 0x20
     258	85 10 00 00 08 22 00 00	call 0x2208 ; <memcmp>
     259	b7 01 00 00 ac c7 71 00	r1 = 0x71c7ac
     260	67 00 00 00 20 00 00 00	r0 <<= 0x20
     261	77 00 00 00 20 00 00 00	r0 >>= 0x20
     262	55 00 03 00 00 00 00 00	if r0 != 0x0 goto +0x3 <LBB14_7>
     263	b7 01 00 00 b2 c7 71 00	r1 = 0x71c7b2
     264	71 72 4a 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x4a)
     265	15 02 ec ff 01 00 00 00	if r2 == 0x1 goto -0x14 <LBB14_9>

0000000000000850 <LBB14_7>
     266	63 16 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r1
     267	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000000860 <LBB14_8>
     268	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
     269	95 00 00 00 00 00 00 00	exit

0000000000000870 <LBB14_11>
     270	71 71 41 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x41)
     271	15 01 ea ff 00 00 00 00	if r1 == 0x0 goto -0x16 <LBB14_10>
     272	71 71 42 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x42)
     273	15 01 e8 ff 00 00 00 00	if r1 == 0x0 goto -0x18 <LBB14_10>
     274	71 71 43 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x43)
     275	15 01 e6 ff 00 00 00 00	if r1 == 0x0 goto -0x1a <LBB14_10>
     276	71 71 44 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x44)
     277	15 01 e4 ff 00 00 00 00	if r1 == 0x0 goto -0x1c <LBB14_10>
     278	71 71 45 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x45)
     279	15 01 e2 ff 00 00 00 00	if r1 == 0x0 goto -0x1e <LBB14_10>
     280	71 71 46 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x46)
     281	15 01 e0 ff 00 00 00 00	if r1 == 0x0 goto -0x20 <LBB14_10>
     282	71 71 47 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x47)
     283	15 01 de ff 00 00 00 00	if r1 == 0x0 goto -0x22 <LBB14_10>
     284	71 71 48 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x48)
     285	15 01 dc ff 00 00 00 00	if r1 == 0x0 goto -0x24 <LBB14_10>
     286	b7 01 00 00 03 00 00 00	r1 = 0x3
     287	73 17 49 00 00 00 00 00	*(u8 *)(r7 + 0x49) = r1
     288	b7 01 00 00 14 00 00 00	r1 = 0x14
     289	05 00 ea ff 00 00 00 00	goto -0x16 <LBB14_8>

0000000000000910 <<tictactoe::accounts::GameState as core::fmt::Debug>::fmt>
     290	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
     291	65 01 06 00 01 00 00 00	if r1 s> 0x1 goto +0x6 <LBB17_3>
     292	15 01 0b 00 00 00 00 00	if r1 == 0x0 goto +0xb <LBB17_5>
     293	bf 21 00 00 00 00 00 00	r1 = r2
     294	18 02 00 00 78 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x12678 ll
     296	b7 03 00 00 12 00 00 00	r3 = 0x12
     297	05 00 0f 00 00 00 00 00	goto +0xf <LBB17_7>

0000000000000950 <LBB17_3>
     298	15 01 0a 00 02 00 00 00	if r1 == 0x2 goto +0xa <LBB17_6>
     299	bf 21 00 00 00 00 00 00	r1 = r2
     300	18 02 00 00 60 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x12660 ll
     302	b7 03 00 00 08 00 00 00	r3 = 0x8
     303	05 00 09 00 00 00 00 00	goto +0x9 <LBB17_7>

0000000000000980 <LBB17_5>
     304	bf 21 00 00 00 00 00 00	r1 = r2
     305	18 02 00 00 8a 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x1268a ll
     307	b7 03 00 00 0d 00 00 00	r3 = 0xd
     308	05 00 04 00 00 00 00 00	goto +0x4 <LBB17_7>

00000000000009a8 <LBB17_6>
     309	bf 21 00 00 00 00 00 00	r1 = r2
     310	18 02 00 00 74 26 01 00 00 00 00 00 00 00 00 00	r2 = 0x12674 ll
     312	b7 03 00 00 04 00 00 00	r3 = 0x4

00000000000009c8 <LBB17_7>
     313	85 10 00 00 b0 19 00 00	call 0x19b0 ; <<core::fmt::Formatter as core::fmt::Write>::write_str>
     314	95 00 00 00 00 00 00 00	exit

00000000000009d8 <<tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize>
     315	bf 16 00 00 00 00 00 00	r6 = r1
     316	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
     317	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB18_5>
     318	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     319	b7 02 00 00 01 00 00 00	r2 = 0x1
     320	85 10 00 00 da 0a 00 00	call 0xada ; <__rust_alloc>
     321	bf 07 00 00 00 00 00 00	r7 = r0
     322	55 07 2d 00 00 00 00 00	if r7 != 0x0 goto +0x2d <LBB18_3>
     323	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     324	b7 02 00 00 01 00 00 00	r2 = 0x1
     325	85 10 00 00 c4 14 00 00	call 0x14c4 ; <alloc::alloc::handle_alloc_error>
     326	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000a38 <LBB18_5>
     327	07 03 00 00 ff ff ff ff	r3 += -0x1
     328	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
     329	71 41 00 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x0)
     330	7b 32 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r3
     331	07 04 00 00 01 00 00 00	r4 += 0x1
     332	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
     333	73 1a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r1
     334	b7 02 00 00 04 00 00 00	r2 = 0x4
     335	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB18_11>
     336	05 00 04 00 00 00 00 00	goto +0x4 <LBB18_7>

0000000000000a88 <LBB18_11>
     337	b7 02 00 00 00 00 00 00	r2 = 0x0
     338	73 26 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r2
     339	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
     340	05 00 52 00 00 00 00 00	goto +0x52 <LBB18_10>

0000000000000aa8 <LBB18_7>
     341	bf a1 00 00 00 00 00 00	r1 = r10
     342	07 01 00 00 f0 ff ff ff	r1 += -0x10
     343	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     344	b7 01 00 00 00 00 00 00	r1 = 0x0
     345	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     346	b7 07 00 00 01 00 00 00	r7 = 0x1
     347	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
     348	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
     349	18 01 00 00 90 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a90 ll
     351	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     352	18 01 00 00 18 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6018 ll
     354	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     355	bf a1 00 00 00 00 00 00	r1 = r10
     356	07 01 00 00 a7 ff ff ff	r1 += -0x59
     357	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     358	bf a1 00 00 00 00 00 00	r1 = r10
     359	07 01 00 00 a8 ff ff ff	r1 += -0x58
     360	bf a2 00 00 00 00 00 00	r2 = r10
     361	07 02 00 00 c0 ff ff ff	r2 += -0x40
     362	85 10 00 00 a7 14 00 00	call 0x14a7 ; <alloc::fmt::format>
     363	b7 01 00 00 18 00 00 00	r1 = 0x18
     364	b7 02 00 00 08 00 00 00	r2 = 0x8
     365	85 10 00 00 ad 0a 00 00	call 0xaad ; <__rust_alloc>
     366	55 00 26 00 00 00 00 00	if r0 != 0x0 goto +0x26 <LBB18_9>
     367	05 00 0f 00 00 00 00 00	goto +0xf <LBB18_4>

0000000000000b80 <LBB18_3>
     368	b7 01 00 00 75 74 00 00	r1 = 0x7475
     369	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     370	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     372	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     373	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     375	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     376	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     378	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     379	b7 01 00 00 18 00 00 00	r1 = 0x18
     380	b7 02 00 00 08 00 00 00	r2 = 0x8
     381	85 10 00 00 9d 0a 00 00	call 0xa9d ; <__rust_alloc>
     382	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB18_6>

0000000000000bf8 <LBB18_4>
     383	b7 01 00 00 18 00 00 00	r1 = 0x18
     384	b7 02 00 00 08 00 00 00	r2 = 0x8
     385	85 10 00 00 88 14 00 00	call 0x1488 ; <alloc::alloc::handle_alloc_error>
     386	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000c18 <LBB18_6>
     387	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     388	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     389	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     390	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     391	bf a1 00 00 00 00 00 00	r1 = r10
     392	07 01 00 00 80 ff ff ff	r1 += -0x80
     393	b7 02 00 00 14 00 00 00	r2 = 0x14
     394	bf 03 00 00 00 00 00 00	r3 = r0
     395	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
     397	85 10 00 00 58 13 00 00	call 0x1358 ; <std::io::error::Error::_new>
     398	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     399	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
     400	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     401	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     402	b7 01 00 00 01 00 00 00	r1 = 0x1
     403	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     404	05 00 12 00 00 00 00 00	goto +0x12 <LBB18_10>

0000000000000ca8 <LBB18_9>
     405	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     406	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     407	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     408	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     409	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     410	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
     411	bf a1 00 00 00 00 00 00	r1 = r10
     412	07 01 00 00 90 ff ff ff	r1 += -0x70
     413	b7 02 00 00 14 00 00 00	r2 = 0x14
     414	bf 03 00 00 00 00 00 00	r3 = r0
     415	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
     417	85 10 00 00 44 13 00 00	call 0x1344 ; <std::io::error::Error::_new>
     418	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
     419	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
     420	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     421	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     422	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

0000000000000d38 <LBB18_10>
     423	95 00 00 00 00 00 00 00	exit

0000000000000d40 <<tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize>
     424	bf 16 00 00 00 00 00 00	r6 = r1
     425	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
     426	55 01 09 00 00 00 00 00	if r1 != 0x0 goto +0x9 <LBB20_5>
     427	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     428	b7 02 00 00 01 00 00 00	r2 = 0x1
     429	85 10 00 00 6d 0a 00 00	call 0xa6d ; <__rust_alloc>
     430	bf 07 00 00 00 00 00 00	r7 = r0
     431	55 07 2a 00 00 00 00 00	if r7 != 0x0 goto +0x2a <LBB20_3>
     432	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     433	b7 02 00 00 01 00 00 00	r2 = 0x1
     434	85 10 00 00 57 14 00 00	call 0x1457 ; <alloc::alloc::handle_alloc_error>
     435	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000da0 <LBB20_5>
     436	07 01 00 00 ff ff ff ff	r1 += -0x1
     437	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
     438	71 43 00 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x0)
     439	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
     440	07 04 00 00 01 00 00 00	r4 += 0x1
     441	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
     442	b7 01 00 00 00 00 00 00	r1 = 0x0
     443	73 3a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r3
     444	b7 02 00 00 00 00 00 00	r2 = 0x0
     445	15 03 42 00 00 00 00 00	if r3 == 0x0 goto +0x42 <LBB20_13>
     446	15 03 40 00 01 00 00 00	if r3 == 0x1 goto +0x40 <LBB20_12>
     447	bf a1 00 00 00 00 00 00	r1 = r10
     448	07 01 00 00 f0 ff ff ff	r1 += -0x10
     449	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
     450	b7 01 00 00 00 00 00 00	r1 = 0x0
     451	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     452	b7 07 00 00 01 00 00 00	r7 = 0x1
     453	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
     454	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
     455	18 01 00 00 90 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a90 ll
     457	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
     458	18 01 00 00 18 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6018 ll
     460	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
     461	bf a1 00 00 00 00 00 00	r1 = r10
     462	07 01 00 00 a7 ff ff ff	r1 += -0x59
     463	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
     464	bf a1 00 00 00 00 00 00	r1 = r10
     465	07 01 00 00 a8 ff ff ff	r1 += -0x58
     466	bf a2 00 00 00 00 00 00	r2 = r10
     467	07 02 00 00 c0 ff ff ff	r2 += -0x40
     468	85 10 00 00 3d 14 00 00	call 0x143d ; <alloc::fmt::format>
     469	b7 01 00 00 18 00 00 00	r1 = 0x18
     470	b7 02 00 00 08 00 00 00	r2 = 0x8
     471	85 10 00 00 43 0a 00 00	call 0xa43 ; <__rust_alloc>
     472	55 00 2a 00 00 00 00 00	if r0 != 0x0 goto +0x2a <LBB20_9>
     473	05 00 0f 00 00 00 00 00	goto +0xf <LBB20_4>

0000000000000ed0 <LBB20_3>
     474	b7 01 00 00 75 74 00 00	r1 = 0x7475
     475	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     476	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     478	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     479	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     481	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     482	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     484	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     485	b7 01 00 00 18 00 00 00	r1 = 0x18
     486	b7 02 00 00 08 00 00 00	r2 = 0x8
     487	85 10 00 00 33 0a 00 00	call 0xa33 ; <__rust_alloc>
     488	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB20_10>

0000000000000f48 <LBB20_4>
     489	b7 01 00 00 18 00 00 00	r1 = 0x18
     490	b7 02 00 00 08 00 00 00	r2 = 0x8
     491	85 10 00 00 1e 14 00 00	call 0x141e ; <alloc::alloc::handle_alloc_error>
     492	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000000f68 <LBB20_10>
     493	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     494	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     495	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     496	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     497	bf a1 00 00 00 00 00 00	r1 = r10
     498	07 01 00 00 80 ff ff ff	r1 += -0x80
     499	b7 02 00 00 14 00 00 00	r2 = 0x14
     500	bf 03 00 00 00 00 00 00	r3 = r0
     501	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
     503	85 10 00 00 ee 12 00 00	call 0x12ee ; <std::io::error::Error::_new>
     504	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     505	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
     506	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     507	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     508	b7 01 00 00 01 00 00 00	r1 = 0x1
     509	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     510	05 00 16 00 00 00 00 00	goto +0x16 <LBB20_11>

0000000000000ff8 <LBB20_12>
     511	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000001000 <LBB20_13>
     512	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     513	73 26 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r2
     514	05 00 12 00 00 00 00 00	goto +0x12 <LBB20_11>

0000000000001018 <LBB20_9>
     515	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
     516	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     517	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
     518	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     519	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
     520	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
     521	bf a1 00 00 00 00 00 00	r1 = r10
     522	07 01 00 00 90 ff ff ff	r1 += -0x70
     523	b7 02 00 00 14 00 00 00	r2 = 0x14
     524	bf 03 00 00 00 00 00 00	r3 = r0
     525	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
     527	85 10 00 00 d6 12 00 00	call 0x12d6 ; <std::io::error::Error::_new>
     528	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
     529	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
     530	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     531	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     532	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

00000000000010a8 <LBB20_11>
     533	95 00 00 00 00 00 00 00	exit

00000000000010b0 <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
     534	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
     535	79 38 00 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x0)
     536	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
     537	79 39 08 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x8)
     538	b7 07 00 00 20 00 00 00	r7 = 0x20
     539	bf 96 00 00 00 00 00 00	r6 = r9
     540	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB22_2>
     541	b7 06 00 00 20 00 00 00	r6 = 0x20

00000000000010f0 <LBB22_2>
     542	bf 81 00 00 00 00 00 00	r1 = r8
     543	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
     544	bf 63 00 00 00 00 00 00	r3 = r6
     545	85 10 00 00 a3 20 00 00	call 0x20a3 ; <memcpy>
     546	b7 01 00 00 02 17 00 00	r1 = 0x1702
     547	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB22_4>
     548	b7 01 00 00 04 17 00 00	r1 = 0x1704

0000000000001128 <LBB22_4>
     549	0f 68 00 00 00 00 00 00	r8 += r6
     550	1f 69 00 00 00 00 00 00	r9 -= r6
     551	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
     552	7b 92 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r9
     553	7b 82 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r8
     554	bf 12 00 00 00 00 00 00	r2 = r1
     555	57 02 00 00 06 00 00 00	r2 &= 0x6
     556	55 02 14 00 04 00 00 00	if r2 != 0x4 goto +0x14 <LBB22_10>
     557	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     558	07 02 00 00 20 00 00 00	r2 += 0x20
     559	b7 07 00 00 20 00 00 00	r7 = 0x20
     560	bf 96 00 00 00 00 00 00	r6 = r9
     561	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB22_7>
     562	b7 06 00 00 20 00 00 00	r6 = 0x20

0000000000001198 <LBB22_7>
     563	bf 81 00 00 00 00 00 00	r1 = r8
     564	bf 63 00 00 00 00 00 00	r3 = r6
     565	85 10 00 00 8f 20 00 00	call 0x208f ; <memcpy>
     566	b7 01 00 00 02 17 00 00	r1 = 0x1702
     567	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB22_9>
     568	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000011c8 <LBB22_9>
     569	0f 68 00 00 00 00 00 00	r8 += r6
     570	1f 69 00 00 00 00 00 00	r9 -= r6
     571	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
     572	7b 92 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r9
     573	7b 82 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r8
     574	bf 12 00 00 00 00 00 00	r2 = r1
     575	57 02 00 00 06 00 00 00	r2 &= 0x6
     576	15 02 14 00 04 00 00 00	if r2 == 0x4 goto +0x14 <LBB22_12>

0000000000001208 <LBB22_10>
     577	18 02 00 00 98 3b 01 00 00 00 00 00 00 00 00 00	r2 = 0x13b98 ll
     579	bf 13 00 00 00 00 00 00	r3 = r1
     580	77 03 00 00 08 00 00 00	r3 >>= 0x8
     581	18 04 00 00 98 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b98 ll
     583	67 04 00 00 38 00 00 00	r4 <<= 0x38
     584	4f 43 00 00 00 00 00 00	r3 |= r4
     585	77 02 00 00 08 00 00 00	r2 >>= 0x8
     586	79 a5 e8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x18)

0000000000001258 <LBB22_11>
     587	57 01 00 00 ff 00 00 00	r1 &= 0xff
     588	bf 34 00 00 00 00 00 00	r4 = r3
     589	67 04 00 00 08 00 00 00	r4 <<= 0x8
     590	4f 14 00 00 00 00 00 00	r4 |= r1
     591	7b 45 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r4
     592	77 03 00 00 38 00 00 00	r3 >>= 0x38
     593	67 02 00 00 08 00 00 00	r2 <<= 0x8
     594	4f 32 00 00 00 00 00 00	r2 |= r3
     595	7b 25 08 00 00 00 00 00	*(u64 *)(r5 + 0x8) = r2
     596	95 00 00 00 00 00 00 00	exit

00000000000012a8 <LBB22_12>
     597	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     598	07 02 00 00 40 00 00 00	r2 += 0x40
     599	b7 07 00 00 09 00 00 00	r7 = 0x9
     600	bf 96 00 00 00 00 00 00	r6 = r9
     601	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB22_14>
     602	b7 06 00 00 09 00 00 00	r6 = 0x9

00000000000012d8 <LBB22_14>
     603	bf 81 00 00 00 00 00 00	r1 = r8
     604	bf 63 00 00 00 00 00 00	r3 = r6
     605	85 10 00 00 67 20 00 00	call 0x2067 ; <memcpy>
     606	b7 01 00 00 02 17 00 00	r1 = 0x1702
     607	2d 97 01 00 00 00 00 00	if r7 > r9 goto +0x1 <LBB22_16>
     608	b7 01 00 00 04 17 00 00	r1 = 0x1704

0000000000001308 <LBB22_16>
     609	0f 68 00 00 00 00 00 00	r8 += r6
     610	1f 69 00 00 00 00 00 00	r9 -= r6
     611	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)
     612	7b 97 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r9
     613	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     614	bf 12 00 00 00 00 00 00	r2 = r1
     615	57 02 00 00 06 00 00 00	r2 &= 0x6
     616	15 02 01 00 04 00 00 00	if r2 == 0x4 goto +0x1 <LBB22_17>
     617	05 00 d7 ff 00 00 00 00	goto -0x29 <LBB22_10>

0000000000001350 <LBB22_17>
     618	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     619	71 11 49 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x49)
     620	73 1a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r1
     621	b7 06 00 00 01 00 00 00	r6 = 0x1
     622	55 09 01 00 00 00 00 00	if r9 != 0x0 goto +0x1 <LBB22_19>
     623	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000001380 <LBB22_19>
     624	bf a2 00 00 00 00 00 00	r2 = r10
     625	07 02 00 00 fe ff ff ff	r2 += -0x2
     626	bf 81 00 00 00 00 00 00	r1 = r8
     627	bf 63 00 00 00 00 00 00	r3 = r6
     628	85 10 00 00 50 20 00 00	call 0x2050 ; <memcpy>
     629	b7 01 00 00 02 17 00 00	r1 = 0x1702
     630	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB22_21>
     631	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000013c0 <LBB22_21>
     632	0f 68 00 00 00 00 00 00	r8 += r6
     633	1f 69 00 00 00 00 00 00	r9 -= r6
     634	7b 97 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r9
     635	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     636	bf 12 00 00 00 00 00 00	r2 = r1
     637	57 02 00 00 06 00 00 00	r2 &= 0x6
     638	15 02 01 00 04 00 00 00	if r2 == 0x4 goto +0x1 <LBB22_23>
     639	05 00 c1 ff 00 00 00 00	goto -0x3f <LBB22_10>

0000000000001400 <LBB22_23>
     640	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
     641	71 12 4a 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x4a)
     642	b7 06 00 00 01 00 00 00	r6 = 0x1
     643	b7 01 00 00 01 00 00 00	r1 = 0x1
     644	15 02 01 00 01 00 00 00	if r2 == 0x1 goto +0x1 <LBB22_25>
     645	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000001430 <LBB22_25>
     646	73 1a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r1
     647	55 09 01 00 00 00 00 00	if r9 != 0x0 goto +0x1 <LBB22_27>
     648	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000001448 <LBB22_27>
     649	bf a2 00 00 00 00 00 00	r2 = r10
     650	07 02 00 00 ff ff ff ff	r2 += -0x1
     651	bf 81 00 00 00 00 00 00	r1 = r8
     652	bf 63 00 00 00 00 00 00	r3 = r6
     653	85 10 00 00 37 20 00 00	call 0x2037 ; <memcpy>
     654	0f 68 00 00 00 00 00 00	r8 += r6
     655	bf 91 00 00 00 00 00 00	r1 = r9
     656	1f 61 00 00 00 00 00 00	r1 -= r6
     657	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     658	7b 87 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r8
     659	b7 01 00 00 02 17 00 00	r1 = 0x1702
     660	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB22_29>
     661	b7 01 00 00 04 17 00 00	r1 = 0x1704

00000000000014b0 <LBB22_29>
     662	bf 12 00 00 00 00 00 00	r2 = r1
     663	57 02 00 00 06 00 00 00	r2 &= 0x6
     664	79 a5 e8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x18)
     665	55 02 02 00 04 00 00 00	if r2 != 0x4 goto +0x2 <LBB22_31>
     666	b7 01 00 00 04 00 00 00	r1 = 0x4
     667	05 00 af ff 00 00 00 00	goto -0x51 <LBB22_11>

00000000000014e0 <LBB22_31>
     668	18 02 00 00 98 3b 01 00 00 00 00 00 00 00 00 00	r2 = 0x13b98 ll
     670	bf 13 00 00 00 00 00 00	r3 = r1
     671	77 03 00 00 08 00 00 00	r3 >>= 0x8
     672	18 04 00 00 98 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b98 ll
     674	67 04 00 00 38 00 00 00	r4 <<= 0x38
     675	4f 43 00 00 00 00 00 00	r3 |= r4
     676	77 02 00 00 08 00 00 00	r2 >>= 0x8
     677	05 00 a5 ff 00 00 00 00	goto -0x5b <LBB22_11>

0000000000001530 <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
     678	bf 27 00 00 00 00 00 00	r7 = r2
     679	bf 16 00 00 00 00 00 00	r6 = r1
     680	bf a1 00 00 00 00 00 00	r1 = r10
     681	07 01 00 00 d0 ff ff ff	r1 += -0x30
     682	85 10 00 00 02 11 00 00	call 0x1102 ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
     683	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     684	15 01 3a 00 01 00 00 00	if r1 == 0x1 goto +0x3a <LBB23_11>
     685	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2c)
     686	63 1a b3 ff 00 00 00 00	*(u32 *)(r10 - 0x4d) = r1
     687	61 a1 d1 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2f)
     688	63 1a b0 ff 00 00 00 00	*(u32 *)(r10 - 0x50) = r1
     689	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     690	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
     691	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x10)
     692	73 1a a8 ff 00 00 00 00	*(u8 *)(r10 - 0x58) = r1
     693	79 a9 e0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x20)
     694	79 a8 d8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x28)
     695	bf a1 00 00 00 00 00 00	r1 = r10
     696	07 01 00 00 d0 ff ff ff	r1 += -0x30
     697	bf 72 00 00 00 00 00 00	r2 = r7
     698	85 10 00 00 f2 10 00 00	call 0x10f2 ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
     699	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     700	15 01 2a 00 01 00 00 00	if r1 == 0x1 goto +0x2a <LBB23_11>
     701	61 a1 d4 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2c)
     702	63 1a cb ff 00 00 00 00	*(u32 *)(r10 - 0x35) = r1
     703	61 a1 d1 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x2f)
     704	63 1a c8 ff 00 00 00 00	*(u32 *)(r10 - 0x38) = r1
     705	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
     706	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
     707	71 a1 f0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x10)
     708	73 1a c0 ff 00 00 00 00	*(u8 *)(r10 - 0x40) = r1
     709	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
     710	25 01 09 00 08 00 00 00	if r1 > 0x8 goto +0x9 <LBB23_7>
     711	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     712	b7 02 00 00 01 00 00 00	r2 = 0x1
     713	85 10 00 00 51 09 00 00	call 0x951 ; <__rust_alloc>
     714	bf 07 00 00 00 00 00 00	r7 = r0
     715	55 07 22 00 00 00 00 00	if r7 != 0x0 goto +0x22 <LBB23_5>
     716	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     717	b7 02 00 00 01 00 00 00	r2 = 0x1
     718	85 10 00 00 3b 13 00 00	call 0x133b ; <alloc::alloc::handle_alloc_error>
     719	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001680 <LBB23_7>
     720	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
     721	7b 2a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r2
     722	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
     723	7b 2a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r2
     724	07 01 00 00 f7 ff ff ff	r1 += -0x9
     725	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     726	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
     727	bf 12 00 00 00 00 00 00	r2 = r1
     728	07 02 00 00 09 00 00 00	r2 += 0x9
     729	7b 27 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r2
     730	69 12 07 00 00 00 00 00	r2 = *(u16 *)(r1 + 0x7)
     731	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
     732	61 12 03 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x3)
     733	63 2a fb ff 00 00 00 00	*(u32 *)(r10 - 0x5) = r2
     734	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
     735	63 1a f8 ff 00 00 00 00	*(u32 *)(r10 - 0x8) = r1
     736	bf a1 00 00 00 00 00 00	r1 = r10
     737	07 01 00 00 d0 ff ff ff	r1 += -0x30
     738	bf 72 00 00 00 00 00 00	r2 = r7
     739	85 10 00 00 57 fe ff ff	call -0x1a9 ; <<tictactoe::accounts::GameState as borsh::de::BorshDeserialize>::deserialize>
     740	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     741	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB23_11>
     742	05 00 28 00 00 00 00 00	goto +0x28 <LBB23_9>

0000000000001738 <LBB23_11>
     743	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
     744	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)

0000000000001748 <LBB23_12>
     745	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
     746	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
     747	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000001760 <LBB23_13>
     748	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
     749	95 00 00 00 00 00 00 00	exit

0000000000001770 <LBB23_5>
     750	b7 01 00 00 75 74 00 00	r1 = 0x7475
     751	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
     752	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
     754	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
     755	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
     757	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
     758	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
     760	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
     761	b7 01 00 00 18 00 00 00	r1 = 0x18
     762	b7 02 00 00 08 00 00 00	r2 = 0x8
     763	85 10 00 00 1f 09 00 00	call 0x91f ; <__rust_alloc>
     764	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB23_8>
     765	b7 01 00 00 18 00 00 00	r1 = 0x18
     766	b7 02 00 00 08 00 00 00	r2 = 0x8
     767	85 10 00 00 0a 13 00 00	call 0x130a ; <alloc::alloc::handle_alloc_error>
     768	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001808 <LBB23_8>
     769	b7 01 00 00 1a 00 00 00	r1 = 0x1a
     770	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     771	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     772	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
     773	bf a1 00 00 00 00 00 00	r1 = r10
     774	07 01 00 00 88 ff ff ff	r1 += -0x78
     775	b7 02 00 00 14 00 00 00	r2 = 0x14
     776	bf 03 00 00 00 00 00 00	r3 = r0
     777	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
     779	85 10 00 00 da 11 00 00	call 0x11da ; <std::io::error::Error::_new>
     780	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
     781	79 a2 90 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x70)
     782	05 00 da ff 00 00 00 00	goto -0x26 <LBB23_12>

0000000000001878 <LBB23_9>
     783	71 a1 d1 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x2f)
     784	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
     785	bf a1 00 00 00 00 00 00	r1 = r10
     786	07 01 00 00 d0 ff ff ff	r1 += -0x30
     787	bf 72 00 00 00 00 00 00	r2 = r7
     788	85 10 00 00 93 fe ff ff	call -0x16d ; <<tictactoe::accounts::Player as borsh::de::BorshDeserialize>::deserialize>
     789	71 a1 d0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x30)
     790	15 01 d0 ff 01 00 00 00	if r1 == 0x1 goto -0x30 <LBB23_11>
     791	71 a1 d1 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x2f)
     792	71 a2 a8 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x58)
     793	73 26 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r2
     794	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
     795	7b 26 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r2
     796	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
     797	7b 26 38 00 00 00 00 00	*(u64 *)(r6 + 0x38) = r2
     798	71 a2 c0 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x40)
     799	73 26 40 00 00 00 00 00	*(u8 *)(r6 + 0x40) = r2
     800	61 a2 f8 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x8)
     801	63 2a 98 ff 00 00 00 00	*(u32 *)(r10 - 0x68) = r2
     802	61 a2 fb ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x5)
     803	63 2a 9b ff 00 00 00 00	*(u32 *)(r10 - 0x65) = r2
     804	61 a2 b0 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x50)
     805	61 a3 b3 ff 00 00 00 00	r3 = *(u32 *)(r10 - 0x4d)
     806	7b 96 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r9
     807	7b 86 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r8
     808	63 36 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r3
     809	63 26 01 00 00 00 00 00	*(u32 *)(r6 + 0x1) = r2
     810	61 a2 cb ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x35)
     811	61 a3 c8 ff 00 00 00 00	r3 = *(u32 *)(r10 - 0x38)
     812	79 a4 70 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x90)
     813	7b 46 30 00 00 00 00 00	*(u64 *)(r6 + 0x30) = r4
     814	79 a4 78 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x88)
     815	7b 46 28 00 00 00 00 00	*(u64 *)(r6 + 0x28) = r4
     816	63 36 21 00 00 00 00 00	*(u32 *)(r6 + 0x21) = r3
     817	63 26 24 00 00 00 00 00	*(u32 *)(r6 + 0x24) = r2
     818	61 a2 98 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x68)
     819	63 26 41 00 00 00 00 00	*(u32 *)(r6 + 0x41) = r2
     820	61 a2 9b ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x65)
     821	63 26 44 00 00 00 00 00	*(u32 *)(r6 + 0x44) = r2
     822	73 16 4b 00 00 00 00 00	*(u8 *)(r6 + 0x4b) = r1
     823	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
     824	73 16 4a 00 00 00 00 00	*(u8 *)(r6 + 0x4a) = r1
     825	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
     826	6b 16 48 00 00 00 00 00	*(u16 *)(r6 + 0x48) = r1
     827	b7 01 00 00 00 00 00 00	r1 = 0x0
     828	05 00 af ff 00 00 00 00	goto -0x51 <LBB23_13>

00000000000019e8 <entrypoint>
     829	bf 12 00 00 00 00 00 00	r2 = r1
     830	bf a1 00 00 00 00 00 00	r1 = r10
     831	07 01 00 00 00 ff ff ff	r1 += -0x100
     832	85 10 00 00 d1 09 00 00	call 0x9d1 ; <solana_program::entrypoint::deserialize>
     833	79 a9 18 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0xe8)
     834	79 a6 10 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0xf0)
     835	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
     836	7b 1a 78 fd 00 00 00 00	*(u64 *)(r10 - 0x288) = r1
     837	79 a8 00 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x100)
     838	79 a1 20 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe0)
     839	79 a2 28 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xd8)
     840	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
     841	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     842	bf a1 00 00 00 00 00 00	r1 = r10
     843	07 01 00 00 00 ff ff ff	r1 += -0x100
     844	bf a2 00 00 00 00 00 00	r2 = r10
     845	07 02 00 00 c8 ff ff ff	r2 += -0x38
     846	85 10 00 00 c2 06 00 00	call 0x6c2 ; <<tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize>
     847	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
     848	15 01 0f 00 01 00 00 00	if r1 == 0x1 goto +0xf <LBB27_4>
     849	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
     850	7b 1a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r1
     851	69 a1 20 ff 00 00 00 00	r1 = *(u16 *)(r10 - 0xe0)
     852	6b 1a 38 fe 00 00 00 00	*(u16 *)(r10 - 0x1c8) = r1
     853	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
     854	15 01 47 00 00 00 00 00	if r1 == 0x0 goto +0x47 <LBB27_20>
     855	b7 01 00 00 12 00 00 00	r1 = 0x12
     856	b7 02 00 00 01 00 00 00	r2 = 0x1
     857	85 10 00 00 c1 08 00 00	call 0x8c1 ; <__rust_alloc>
     858	bf 08 00 00 00 00 00 00	r8 = r0
     859	55 08 07 00 00 00 00 00	if r8 != 0x0 goto +0x7 <LBB27_5>
     860	b7 01 00 00 12 00 00 00	r1 = 0x12
     861	b7 02 00 00 01 00 00 00	r2 = 0x1
     862	85 10 00 00 ab 12 00 00	call 0x12ab ; <alloc::alloc::handle_alloc_error>
     863	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001b00 <LBB27_4>
     864	79 a3 10 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xf0)
     865	79 a2 08 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf8)
     866	05 00 1d 00 00 00 00 00	goto +0x1d <LBB27_8>

0000000000001b18 <LBB27_5>
     867	b7 01 00 00 61 64 00 00	r1 = 0x6461
     868	6b 18 10 00 00 00 00 00	*(u16 *)(r8 + 0x10) = r1
     869	18 01 00 00 62 79 74 65 00 00 00 00 73 20 72 65	r1 = 0x6572207365747962 ll
     871	7b 18 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r1
     872	18 01 00 00 4e 6f 74 20 00 00 00 00 61 6c 6c 20	r1 = 0x206c6c6120746f4e ll
     874	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
     875	b7 01 00 00 18 00 00 00	r1 = 0x18
     876	b7 02 00 00 08 00 00 00	r2 = 0x8
     877	85 10 00 00 ad 08 00 00	call 0x8ad ; <__rust_alloc>
     878	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB27_7>
     879	b7 01 00 00 18 00 00 00	r1 = 0x18
     880	b7 02 00 00 08 00 00 00	r2 = 0x8
     881	85 10 00 00 98 12 00 00	call 0x1298 ; <alloc::alloc::handle_alloc_error>
     882	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000001b98 <LBB27_7>
     883	b7 01 00 00 12 00 00 00	r1 = 0x12
     884	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
     885	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
     886	7b 80 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r8
     887	bf a1 00 00 00 00 00 00	r1 = r10
     888	07 01 00 00 d0 fd ff ff	r1 += -0x230
     889	b7 02 00 00 15 00 00 00	r2 = 0x15
     890	bf 03 00 00 00 00 00 00	r3 = r0
     891	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
     893	85 10 00 00 68 11 00 00	call 0x1168 ; <std::io::error::Error::_new>
     894	79 a3 d8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x228)
     895	79 a2 d0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x230)

0000000000001c00 <LBB27_8>
     896	bf a1 00 00 00 00 00 00	r1 = r10
     897	07 01 00 00 e0 fd ff ff	r1 += -0x220
     898	85 10 00 00 08 0f 00 00	call 0xf08 ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>

0000000000001c18 <LBB27_9>
     899	61 a8 e0 fd 00 00 00 00	r8 = *(u32 *)(r10 - 0x220)
     900	15 08 0f 00 14 00 00 00	if r8 == 0x14 goto +0xf <LBB27_15>
     901	79 a1 e8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x218)
     902	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     903	79 a1 f0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x210)
     904	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     905	79 a1 f8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x208)
     906	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
     907	61 a7 e4 fd 00 00 00 00	r7 = *(u32 *)(r10 - 0x21c)
     908	65 08 0a 00 09 00 00 00	if r8 s> 0x9 goto +0xa <LBB27_16>
     909	65 08 9f 00 04 00 00 00	if r8 s> 0x4 goto +0x9f <LBB27_33>
     910	65 08 aa 00 01 00 00 00	if r8 s> 0x1 goto +0xaa <LBB27_39>
     911	15 08 68 01 00 00 00 00	if r8 == 0x0 goto +0x168 <LBB27_69>
     912	18 01 00 00 a2 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129a2 ll
     914	b7 02 00 00 16 00 00 00	r2 = 0x16
     915	05 00 b8 01 00 00 00 00	goto +0x1b8 <LBB27_84>

0000000000001ca0 <LBB27_15>
     916	b7 08 00 00 00 00 00 00	r8 = 0x0
     917	15 09 ce 01 00 00 00 00	if r9 == 0x0 goto +0x1ce <LBB27_91>
     918	05 00 c6 01 00 00 00 00	goto +0x1c6 <LBB27_86>

0000000000001cb8 <LBB27_16>
     919	65 08 9b 00 0e 00 00 00	if r8 s> 0xe goto +0x9b <LBB27_36>
     920	65 08 a6 00 0b 00 00 00	if r8 s> 0xb goto +0xa6 <LBB27_42>
     921	15 08 83 01 0a 00 00 00	if r8 == 0xa goto +0x183 <LBB27_72>
     922	18 01 00 00 72 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12872 ll
     924	b7 02 00 00 1a 00 00 00	r2 = 0x1a
     925	05 00 ae 01 00 00 00 00	goto +0x1ae <LBB27_84>

0000000000001cf0 <LBB27_20>
     926	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
     927	79 a5 08 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0xf8)
     928	61 a4 04 ff 00 00 00 00	r4 = *(u32 *)(r10 - 0xfc)
     929	71 a3 03 ff 00 00 00 00	r3 = *(u8 *)(r10 - 0xfd)
     930	71 a2 02 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0xfe)
     931	71 a0 01 ff 00 00 00 00	r0 = *(u8 *)(r10 - 0xff)
     932	79 a7 30 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x1d0)
     933	7b 7a 00 fe 00 00 00 00	*(u64 *)(r10 - 0x200) = r7
     934	69 a7 38 fe 00 00 00 00	r7 = *(u16 *)(r10 - 0x1c8)
     935	6b 7a 08 fe 00 00 00 00	*(u16 *)(r10 - 0x1f8) = r7
     936	15 00 e1 00 00 00 00 00	if r0 == 0x0 goto +0xe1 <LBB27_59>
     937	15 00 a7 00 01 00 00 00	if r0 == 0x1 goto +0xa7 <LBB27_51>
     938	73 3a 11 fe 00 00 00 00	*(u8 *)(r10 - 0x1ef) = r3
     939	73 2a 10 fe 00 00 00 00	*(u8 *)(r10 - 0x1f0) = r2
     940	b7 01 00 00 01 00 00 00	r1 = 0x1
     941	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
     942	bf a1 00 00 00 00 00 00	r1 = r10
     943	07 01 00 00 c8 ff ff ff	r1 += -0x38
     944	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
     945	b7 01 00 00 00 00 00 00	r1 = 0x0
     946	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
     947	b7 01 00 00 02 00 00 00	r1 = 0x2
     948	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
     949	18 01 00 00 30 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a30 ll
     951	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
     952	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
     954	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
     955	bf a1 00 00 00 00 00 00	r1 = r10
     956	07 01 00 00 90 ff ff ff	r1 += -0x70
     957	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
     958	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
     959	bf a1 00 00 00 00 00 00	r1 = r10
     960	07 01 00 00 b0 fe ff ff	r1 += -0x150
     961	bf a2 00 00 00 00 00 00	r2 = r10
     962	07 02 00 00 00 ff ff ff	r2 += -0x100
     963	85 10 00 00 4e 12 00 00	call 0x124e ; <alloc::fmt::format>
     964	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
     965	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
     966	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
     967	bf 71 00 00 00 00 00 00	r1 = r7
     968	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
     969	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB27_25>
     970	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB27_25>
     971	bf 71 00 00 00 00 00 00	r1 = r7
     972	bf 82 00 00 00 00 00 00	r2 = r8
     973	b7 03 00 00 01 00 00 00	r3 = 0x1
     974	85 10 00 00 4e 08 00 00	call 0x84e ; <__rust_dealloc>

0000000000001e78 <LBB27_25>
     975	15 09 25 01 00 00 00 00	if r9 == 0x0 goto +0x125 <LBB27_68>
     976	15 09 24 01 01 00 00 00	if r9 == 0x1 goto +0x124 <LBB27_68>
     977	79 a8 78 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x288)
     978	07 08 00 00 30 00 00 00	r8 += 0x30
     979	bf a1 00 00 00 00 00 00	r1 = r10
     980	07 01 00 00 00 ff ff ff	r1 += -0x100
     981	bf 82 00 00 00 00 00 00	r2 = r8
     982	85 10 00 00 89 08 00 00	call 0x889 ; <solana_program::account_info::AccountInfo::try_borrow_data>
     983	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
     984	15 01 a8 00 01 00 00 00	if r1 == 0x1 goto +0xa8 <LBB27_58>
     985	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
     986	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
     987	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
     988	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
     989	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
     990	7b 2a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r2
     991	bf a1 00 00 00 00 00 00	r1 = r10
     992	07 01 00 00 00 ff ff ff	r1 += -0x100
     993	bf a2 00 00 00 00 00 00	r2 = r10
     994	07 02 00 00 30 fe ff ff	r2 += -0x1d0
     995	85 10 00 00 c2 fe ff ff	call -0x13e ; <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
     996	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
     997	15 01 09 02 01 00 00 00	if r1 == 0x1 goto +0x209 <LBB27_108>
     998	61 a1 04 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xfc)
     999	63 1a b3 fe 00 00 00 00	*(u32 *)(r10 - 0x14d) = r1
    1000	61 a1 01 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xff)
    1001	63 1a b0 fe 00 00 00 00	*(u32 *)(r10 - 0x150) = r1
    1002	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1003	7b 1a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r1
    1004	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1005	7b 1a 68 fd 00 00 00 00	*(u64 *)(r10 - 0x298) = r1
    1006	bf a1 00 00 00 00 00 00	r1 = r10
    1007	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1008	7b 1a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r1
    1009	bf a2 00 00 00 00 00 00	r2 = r10
    1010	07 02 00 00 18 ff ff ff	r2 += -0xe8
    1011	b7 03 00 00 34 00 00 00	r3 = 0x34
    1012	85 10 00 00 d0 1e 00 00	call 0x1ed0 ; <memcpy>
    1013	7b 7a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r7
    1014	bf a7 00 00 00 00 00 00	r7 = r10
    1015	07 07 00 00 90 ff ff ff	r7 += -0x70
    1016	bf 71 00 00 00 00 00 00	r1 = r7
    1017	79 a2 58 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a8)
    1018	b7 03 00 00 34 00 00 00	r3 = 0x34
    1019	85 10 00 00 c9 1e 00 00	call 0x1ec9 ; <memcpy>
    1020	bf a1 00 00 00 00 00 00	r1 = r10
    1021	07 01 00 00 c7 fe ff ff	r1 += -0x139
    1022	bf 72 00 00 00 00 00 00	r2 = r7
    1023	b7 03 00 00 34 00 00 00	r3 = 0x34
    1024	85 10 00 00 c4 1e 00 00	call 0x1ec4 ; <memcpy>
    1025	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1026	7b 1a bf fe 00 00 00 00	*(u64 *)(r10 - 0x141) = r1
    1027	79 a1 70 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x290)
    1028	7b 1a b7 fe 00 00 00 00	*(u64 *)(r10 - 0x149) = r1
    1029	79 a2 60 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a0)
    1030	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    1031	07 01 00 00 ff ff ff ff	r1 += -0x1
    1032	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    1033	bf a1 00 00 00 00 00 00	r1 = r10
    1034	07 01 00 00 00 ff ff ff	r1 += -0x100
    1035	bf a2 00 00 00 00 00 00	r2 = r10
    1036	07 02 00 00 10 fe ff ff	r2 += -0x1f0
    1037	bf a4 00 00 00 00 00 00	r4 = r10
    1038	07 04 00 00 b0 fe ff ff	r4 += -0x150
    1039	79 a3 78 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x288)
    1040	85 10 00 00 cd fc ff ff	call -0x333 ; <tictactoe::instructions::PlayerMove::process>
    1041	61 a1 00 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x100)
    1042	15 01 01 00 14 00 00 00	if r1 == 0x14 goto +0x1 <LBB27_30>
    1043	05 00 e4 01 00 00 00 00	goto +0x1e4 <LBB27_110>

00000000000020a0 <LBB27_30>
    1044	bf a1 00 00 00 00 00 00	r1 = r10
    1045	07 01 00 00 00 ff ff ff	r1 += -0x100
    1046	bf 82 00 00 00 00 00 00	r2 = r8
    1047	85 10 00 00 5b 08 00 00	call 0x85b ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1048	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1049	15 01 67 00 01 00 00 00	if r1 == 0x1 goto +0x67 <LBB27_58>
    1050	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1051	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1052	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1053	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1054	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1055	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    1056	bf a1 00 00 00 00 00 00	r1 = r10
    1057	07 01 00 00 c0 fd ff ff	r1 += -0x240
    1058	bf a2 00 00 00 00 00 00	r2 = r10
    1059	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1060	bf a3 00 00 00 00 00 00	r3 = r10
    1061	07 03 00 00 c8 ff ff ff	r3 += -0x38
    1062	85 10 00 00 ef fd ff ff	call -0x211 ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1063	79 a2 c0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x240)
    1064	bf 21 00 00 00 00 00 00	r1 = r2
    1065	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1066	15 01 54 03 04 00 00 00	if r1 == 0x4 goto +0x354 <LBB27_162>
    1067	79 a3 c8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x238)
    1068	05 00 0d 05 00 00 00 00	goto +0x50d <LBB27_251>

0000000000002168 <LBB27_33>
    1069	65 08 17 00 06 00 00 00	if r8 s> 0x6 goto +0x17 <LBB27_45>
    1070	15 08 f2 00 05 00 00 00	if r8 == 0x5 goto +0xf2 <LBB27_73>
    1071	18 01 00 00 21 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12921 ll
    1073	b7 02 00 00 19 00 00 00	r2 = 0x19
    1074	05 00 19 01 00 00 00 00	goto +0x119 <LBB27_84>

0000000000002198 <LBB27_36>
    1075	65 08 17 00 10 00 00 00	if r8 s> 0x10 goto +0x17 <LBB27_48>
    1076	15 08 f0 00 0f 00 00 00	if r8 == 0xf goto +0xf0 <LBB27_74>
    1077	18 01 00 00 fd 27 01 00 00 00 00 00 00 00 00 00	r1 = 0x127fd ll
    1079	b7 02 00 00 18 00 00 00	r2 = 0x18
    1080	05 00 13 01 00 00 00 00	goto +0x113 <LBB27_84>

00000000000021c8 <LBB27_39>
    1081	15 08 ef 00 02 00 00 00	if r8 == 0x2 goto +0xef <LBB27_75>
    1082	15 08 f2 00 03 00 00 00	if r8 == 0x3 goto +0xf2 <LBB27_76>
    1083	18 01 00 00 52 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12952 ll
    1085	b7 02 00 00 1a 00 00 00	r2 = 0x1a
    1086	05 00 0d 01 00 00 00 00	goto +0x10d <LBB27_84>

00000000000021f8 <LBB27_42>
    1087	15 08 f1 00 0c 00 00 00	if r8 == 0xc goto +0xf1 <LBB27_77>
    1088	15 08 f4 00 0d 00 00 00	if r8 == 0xd goto +0xf4 <LBB27_78>
    1089	18 01 00 00 30 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12830 ll
    1091	b7 02 00 00 13 00 00 00	r2 = 0x13
    1092	05 00 07 01 00 00 00 00	goto +0x107 <LBB27_84>

0000000000002228 <LBB27_45>
    1093	15 08 f3 00 07 00 00 00	if r8 == 0x7 goto +0xf3 <LBB27_79>
    1094	15 08 f6 00 08 00 00 00	if r8 == 0x8 goto +0xf6 <LBB27_80>
    1095	18 01 00 00 a7 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128a7 ll
    1097	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1098	05 00 01 01 00 00 00 00	goto +0x101 <LBB27_84>

0000000000002258 <LBB27_48>
    1099	15 08 f5 00 11 00 00 00	if r8 == 0x11 goto +0xf5 <LBB27_81>
    1100	15 08 f8 00 12 00 00 00	if r8 == 0x12 goto +0xf8 <LBB27_82>
    1101	18 01 00 00 b3 27 01 00 00 00 00 00 00 00 00 00	r1 = 0x127b3 ll
    1103	b7 02 00 00 15 00 00 00	r2 = 0x15
    1104	05 00 fb 00 00 00 00 00	goto +0xfb <LBB27_84>

0000000000002288 <LBB27_51>
    1105	b7 01 00 00 01 00 00 00	r1 = 0x1
    1106	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1107	bf a1 00 00 00 00 00 00	r1 = r10
    1108	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1109	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1110	b7 01 00 00 00 00 00 00	r1 = 0x0
    1111	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1112	b7 01 00 00 02 00 00 00	r1 = 0x2
    1113	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1114	18 01 00 00 10 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a10 ll
    1116	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1117	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    1119	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1120	bf a1 00 00 00 00 00 00	r1 = r10
    1121	07 01 00 00 90 ff ff ff	r1 += -0x70
    1122	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1123	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
    1124	bf a1 00 00 00 00 00 00	r1 = r10
    1125	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1126	bf a2 00 00 00 00 00 00	r2 = r10
    1127	07 02 00 00 00 ff ff ff	r2 += -0x100
    1128	85 10 00 00 a9 11 00 00	call 0x11a9 ; <alloc::fmt::format>
    1129	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1130	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1131	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1132	bf 71 00 00 00 00 00 00	r1 = r7
    1133	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1134	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB27_54>
    1135	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB27_54>
    1136	bf 71 00 00 00 00 00 00	r1 = r7
    1137	bf 82 00 00 00 00 00 00	r2 = r8
    1138	b7 03 00 00 01 00 00 00	r3 = 0x1
    1139	85 10 00 00 a9 07 00 00	call 0x7a9 ; <__rust_dealloc>

00000000000023a0 <LBB27_54>
    1140	15 09 80 00 00 00 00 00	if r9 == 0x0 goto +0x80 <LBB27_68>
    1141	15 09 7f 00 01 00 00 00	if r9 == 0x1 goto +0x7f <LBB27_68>
    1142	79 a8 78 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x288)
    1143	71 81 28 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x28)
    1144	15 01 1a 01 00 00 00 00	if r1 == 0x0 goto +0x11a <LBB27_101>
    1145	07 08 00 00 30 00 00 00	r8 += 0x30
    1146	bf a1 00 00 00 00 00 00	r1 = r10
    1147	07 01 00 00 00 ff ff ff	r1 += -0x100
    1148	bf 82 00 00 00 00 00 00	r2 = r8
    1149	85 10 00 00 e2 07 00 00	call 0x7e2 ; <solana_program::account_info::AccountInfo::try_borrow_data>
    1150	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1151	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB27_58>
    1152	05 00 16 01 00 00 00 00	goto +0x116 <LBB27_102>

0000000000002408 <LBB27_58>
    1153	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    1154	7b 1a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r1
    1155	79 a1 20 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe0)
    1156	7b 1a f8 fd 00 00 00 00	*(u64 *)(r10 - 0x208) = r1
    1157	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1158	7b 1a e8 fd 00 00 00 00	*(u64 *)(r10 - 0x218) = r1
    1159	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1160	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1161	05 00 f9 fe 00 00 00 00	goto -0x107 <LBB27_9>

0000000000002450 <LBB27_59>
    1162	7b 8a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r8
    1163	7b 5a 16 fe 00 00 00 00	*(u64 *)(r10 - 0x1ea) = r5
    1164	63 4a 12 fe 00 00 00 00	*(u32 *)(r10 - 0x1ee) = r4
    1165	73 3a 11 fe 00 00 00 00	*(u8 *)(r10 - 0x1ef) = r3
    1166	73 2a 10 fe 00 00 00 00	*(u8 *)(r10 - 0x1f0) = r2
    1167	79 a2 00 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x200)
    1168	7b 2a 26 fe 00 00 00 00	*(u64 *)(r10 - 0x1da) = r2
    1169	69 a2 08 fe 00 00 00 00	r2 = *(u16 *)(r10 - 0x1f8)
    1170	6b 2a 2e fe 00 00 00 00	*(u16 *)(r10 - 0x1d2) = r2
    1171	7b 1a 1e fe 00 00 00 00	*(u64 *)(r10 - 0x1e2) = r1
    1172	b7 01 00 00 01 00 00 00	r1 = 0x1
    1173	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1174	bf a1 00 00 00 00 00 00	r1 = r10
    1175	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1176	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1177	b7 01 00 00 00 00 00 00	r1 = 0x0
    1178	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1179	b7 01 00 00 02 00 00 00	r1 = 0x2
    1180	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1181	18 01 00 00 f0 39 01 00 00 00 00 00 00 00 00 00	r1 = 0x139f0 ll
    1183	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1184	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    1186	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1187	bf a1 00 00 00 00 00 00	r1 = r10
    1188	07 01 00 00 90 ff ff ff	r1 += -0x70
    1189	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1190	7b 9a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r9
    1191	bf a1 00 00 00 00 00 00	r1 = r10
    1192	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1193	bf a2 00 00 00 00 00 00	r2 = r10
    1194	07 02 00 00 00 ff ff ff	r2 += -0x100
    1195	85 10 00 00 66 11 00 00	call 0x1166 ; <alloc::fmt::format>
    1196	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1197	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1198	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1199	bf 71 00 00 00 00 00 00	r1 = r7
    1200	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1201	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB27_62>
    1202	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB27_62>
    1203	bf 71 00 00 00 00 00 00	r1 = r7
    1204	bf 82 00 00 00 00 00 00	r2 = r8
    1205	b7 03 00 00 01 00 00 00	r3 = 0x1
    1206	85 10 00 00 66 07 00 00	call 0x766 ; <__rust_dealloc>

00000000000025b8 <LBB27_62>
    1207	15 09 3d 00 00 00 00 00	if r9 == 0x0 goto +0x3d <LBB27_68>
    1208	15 09 3c 00 01 00 00 00	if r9 == 0x1 goto +0x3c <LBB27_68>
    1209	15 09 3b 00 02 00 00 00	if r9 == 0x2 goto +0x3b <LBB27_68>
    1210	79 a8 78 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x288)
    1211	71 81 28 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x28)
    1212	15 01 d6 00 00 00 00 00	if r1 == 0x0 goto +0xd6 <LBB27_101>
    1213	07 08 00 00 30 00 00 00	r8 += 0x30
    1214	18 01 00 00 bd 81 54 33 00 00 00 00 5c 4a 83 27	r1 = 0x27834a5c335481bd ll
    1216	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1217	18 01 00 00 35 47 77 69 00 00 00 00 da 47 43 0c	r1 = 0xc4347da69774735 ll
    1219	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1220	18 01 00 00 76 13 de 53 00 00 00 00 0b 69 2a 87	r1 = -0x78d596f4ac21ec8a ll
    1222	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1223	18 01 00 00 da 07 5c b2 00 00 00 00 ff 5e c6 81	r1 = -0x7e39a1004da3f826 ll
    1225	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1226	bf a1 00 00 00 00 00 00	r1 = r10
    1227	07 01 00 00 a0 fd ff ff	r1 += -0x260
    1228	bf a2 00 00 00 00 00 00	r2 = r10
    1229	07 02 00 00 10 fe ff ff	r2 += -0x1f0
    1230	85 10 00 00 47 09 00 00	call 0x947 ; <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    1231	b7 01 00 00 09 00 00 00	r1 = 0x9
    1232	7b 1a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r1
    1233	18 01 00 00 b1 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x126b1 ll
    1235	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    1236	79 a1 a8 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x258)
    1237	7b 1a c8 fe 00 00 00 00	*(u64 *)(r10 - 0x138) = r1
    1238	79 a1 a0 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x260)
    1239	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1240	bf a1 00 00 00 00 00 00	r1 = r10
    1241	07 01 00 00 00 ff ff ff	r1 += -0x100
    1242	bf a2 00 00 00 00 00 00	r2 = r10
    1243	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1244	bf a4 00 00 00 00 00 00	r4 = r10
    1245	07 04 00 00 c8 ff ff ff	r4 += -0x38
    1246	b7 03 00 00 02 00 00 00	r3 = 0x2
    1247	85 10 00 00 d8 0d 00 00	call 0xdd8 ; <solana_program::pubkey::Pubkey::find_program_address>
    1248	79 a1 18 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xe8)
    1249	7b 1a 48 fe 00 00 00 00	*(u64 *)(r10 - 0x1b8) = r1
    1250	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1251	7b 1a 40 fe 00 00 00 00	*(u64 *)(r10 - 0x1c0) = r1
    1252	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1253	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
    1254	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1255	7b 1a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r1
    1256	71 a7 20 ff 00 00 00 00	r7 = *(u8 *)(r10 - 0xe0)
    1257	79 82 00 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x0)
    1258	bf a1 00 00 00 00 00 00	r1 = r10
    1259	07 01 00 00 30 fe ff ff	r1 += -0x1d0
    1260	b7 03 00 00 20 00 00 00	r3 = 0x20
    1261	85 10 00 00 1d 1e 00 00	call 0x1e1d ; <memcmp>
    1262	67 00 00 00 20 00 00 00	r0 <<= 0x20
    1263	77 00 00 00 20 00 00 00	r0 >>= 0x20
    1264	15 00 11 01 00 00 00 00	if r0 == 0x0 goto +0x111 <LBB27_111>
    1265	18 01 00 00 00 00 00 00 00 00 00 00 af c7 71 00	r1 = 0x71c7af00000000 ll
    1267	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1268	05 00 8e fe 00 00 00 00	goto -0x172 <LBB27_9>

00000000000027a8 <LBB27_68>
    1269	b7 01 00 00 0a 00 00 00	r1 = 0xa
    1270	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1271	05 00 8b fe 00 00 00 00	goto -0x175 <LBB27_9>

00000000000027c0 <LBB27_69>
    1272	bf 71 00 00 00 00 00 00	r1 = r7
    1273	07 01 00 00 54 38 8e ff	r1 += -0x71c7ac
    1274	67 01 00 00 20 00 00 00	r1 <<= 0x20
    1275	77 01 00 00 20 00 00 00	r1 >>= 0x20
    1276	b7 02 00 00 07 00 00 00	r2 = 0x7
    1277	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB27_70>
    1278	05 00 4a 00 00 00 00 00	goto +0x4a <LBB27_83>

00000000000027f8 <LBB27_70>
    1279	63 7a 90 ff 00 00 00 00	*(u32 *)(r10 - 0x70) = r7
    1280	b7 01 00 00 00 00 00 00	r1 = 0x0
    1281	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1282	7b 1a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r1
    1283	b7 01 00 00 01 00 00 00	r1 = 0x1
    1284	7b 1a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r1
    1285	bf a1 00 00 00 00 00 00	r1 = r10
    1286	07 01 00 00 00 ff ff ff	r1 += -0x100
    1287	7b 1a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r1
    1288	bf a2 00 00 00 00 00 00	r2 = r10
    1289	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1290	18 03 00 00 a8 3b 01 00 00 00 00 00 00 00 00 00	r3 = 0x13ba8 ll
    1292	85 10 00 00 80 13 00 00	call 0x1380 ; <core::fmt::Formatter::new>
    1293	bf a1 00 00 00 00 00 00	r1 = r10
    1294	07 01 00 00 90 ff ff ff	r1 += -0x70
    1295	79 a2 70 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x290)
    1296	85 10 00 00 a6 04 00 00	call 0x4a6 ; <<tictactoe::error::TictactoeError as core::fmt::Display>::fmt>
    1297	15 00 77 00 00 00 00 00	if r0 == 0x0 goto +0x77 <LBB27_98>
    1298	bf a3 00 00 00 00 00 00	r3 = r10
    1299	07 03 00 00 30 fe ff ff	r3 += -0x1d0
    1300	18 01 00 00 e2 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129e2 ll
    1302	b7 02 00 00 37 00 00 00	r2 = 0x37
    1303	18 04 00 00 f0 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13bf0 ll
    1305	18 05 00 00 d8 3b 01 00 00 00 00 00 00 00 00 00	r5 = 0x13bd8 ll
    1307	85 10 00 00 51 13 00 00	call 0x1351 ; <core::result::unwrap_failed>
    1308	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000028e8 <LBB27_72>
    1309	18 01 00 00 8c 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x1288c ll
    1311	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1312	05 00 2b 00 00 00 00 00	goto +0x2b <LBB27_84>

0000000000002908 <LBB27_73>
    1313	18 01 00 00 3a 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x1293a ll
    1315	b7 02 00 00 18 00 00 00	r2 = 0x18
    1316	05 00 27 00 00 00 00 00	goto +0x27 <LBB27_84>

0000000000002928 <LBB27_74>
    1317	18 01 00 00 15 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12815 ll
    1319	b7 02 00 00 1b 00 00 00	r2 = 0x1b
    1320	05 00 23 00 00 00 00 00	goto +0x23 <LBB27_84>

0000000000002948 <LBB27_75>
    1321	18 01 00 00 85 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12985 ll
    1323	b7 02 00 00 1d 00 00 00	r2 = 0x1d
    1324	05 00 1f 00 00 00 00 00	goto +0x1f <LBB27_84>

0000000000002968 <LBB27_76>
    1325	18 01 00 00 6c 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x1296c ll
    1327	b7 02 00 00 19 00 00 00	r2 = 0x19
    1328	05 00 1b 00 00 00 00 00	goto +0x1b <LBB27_84>

0000000000002988 <LBB27_77>
    1329	18 01 00 00 56 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12856 ll
    1331	b7 02 00 00 1c 00 00 00	r2 = 0x1c
    1332	05 00 17 00 00 00 00 00	goto +0x17 <LBB27_84>

00000000000029a8 <LBB27_78>
    1333	18 01 00 00 43 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x12843 ll
    1335	b7 02 00 00 13 00 00 00	r2 = 0x13
    1336	05 00 13 00 00 00 00 00	goto +0x13 <LBB27_84>

00000000000029c8 <LBB27_79>
    1337	18 01 00 00 02 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x12902 ll
    1339	b7 02 00 00 1f 00 00 00	r2 = 0x1f
    1340	05 00 0f 00 00 00 00 00	goto +0xf <LBB27_84>

00000000000029e8 <LBB27_80>
    1341	18 01 00 00 c2 28 01 00 00 00 00 00 00 00 00 00	r1 = 0x128c2 ll
    1343	b7 02 00 00 20 00 00 00	r2 = 0x20
    1344	05 00 0b 00 00 00 00 00	goto +0xb <LBB27_84>

0000000000002a08 <LBB27_81>
    1345	18 01 00 00 ea 27 01 00 00 00 00 00 00 00 00 00	r1 = 0x127ea ll
    1347	b7 02 00 00 13 00 00 00	r2 = 0x13
    1348	05 00 07 00 00 00 00 00	goto +0x7 <LBB27_84>

0000000000002a28 <LBB27_82>
    1349	18 01 00 00 c8 27 01 00 00 00 00 00 00 00 00 00	r1 = 0x127c8 ll
    1351	b7 02 00 00 22 00 00 00	r2 = 0x22
    1352	05 00 03 00 00 00 00 00	goto +0x3 <LBB27_84>

0000000000002a48 <LBB27_83>
    1353	18 01 00 00 b8 29 01 00 00 00 00 00 00 00 00 00	r1 = 0x129b8 ll
    1355	b7 02 00 00 0e 00 00 00	r2 = 0xe

0000000000002a60 <LBB27_84>
    1356	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_

0000000000002a68 <LBB27_85>
    1357	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    1358	7b 1a c0 fe 00 00 00 00	*(u64 *)(r10 - 0x140) = r1
    1359	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    1360	7b 2a b8 fe 00 00 00 00	*(u64 *)(r10 - 0x148) = r2
    1361	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    1362	7b 3a b0 fe 00 00 00 00	*(u64 *)(r10 - 0x150) = r3
    1363	63 7a 04 ff 00 00 00 00	*(u32 *)(r10 - 0xfc) = r7
    1364	63 8a 00 ff 00 00 00 00	*(u32 *)(r10 - 0x100) = r8
    1365	7b 3a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r3
    1366	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1367	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    1368	bf a1 00 00 00 00 00 00	r1 = r10
    1369	07 01 00 00 00 ff ff ff	r1 += -0x100
    1370	85 10 00 00 6e 0c 00 00	call 0xc6e ; <solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from>
    1371	bf 08 00 00 00 00 00 00	r8 = r0
    1372	15 09 07 00 00 00 00 00	if r9 == 0x0 goto +0x7 <LBB27_91>

0000000000002ae8 <LBB27_86>
    1373	27 09 00 00 30 00 00 00	r9 *= 0x30
    1374	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    1375	07 07 00 00 10 00 00 00	r7 += 0x10
    1376	05 00 0b 00 00 00 00 00	goto +0xb <LBB27_94>

0000000000002b08 <LBB27_90>
    1377	07 07 00 00 30 00 00 00	r7 += 0x30
    1378	07 09 00 00 d0 ff ff ff	r9 += -0x30
    1379	55 09 08 00 00 00 00 00	if r9 != 0x0 goto +0x8 <LBB27_94>

0000000000002b20 <LBB27_91>
    1380	15 06 22 00 00 00 00 00	if r6 == 0x0 goto +0x22 <LBB27_97>
    1381	27 06 00 00 30 00 00 00	r6 *= 0x30
    1382	15 06 20 00 00 00 00 00	if r6 == 0x0 goto +0x20 <LBB27_97>
    1383	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    1384	bf 62 00 00 00 00 00 00	r2 = r6
    1385	b7 03 00 00 08 00 00 00	r3 = 0x8
    1386	85 10 00 00 b2 06 00 00	call 0x6b2 ; <__rust_dealloc>
    1387	05 00 1b 00 00 00 00 00	goto +0x1b <LBB27_97>

0000000000002b60 <LBB27_94>
    1388	79 71 f8 ff 00 00 00 00	r1 = *(u64 *)(r7 - 0x8)
    1389	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1390	07 02 00 00 ff ff ff ff	r2 += -0x1
    1391	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    1392	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB27_87>
    1393	05 00 0d 00 00 00 00 00	goto +0xd <LBB27_95>

0000000000002b90 <LBB27_87>
    1394	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1395	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1396	07 02 00 00 ff ff ff ff	r2 += -0x1
    1397	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    1398	55 02 ea ff 00 00 00 00	if r2 != 0x0 goto -0x16 <LBB27_90>
    1399	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1400	07 02 00 00 ff ff ff ff	r2 += -0x1
    1401	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    1402	55 02 e6 ff 00 00 00 00	if r2 != 0x0 goto -0x1a <LBB27_90>
    1403	b7 02 00 00 28 00 00 00	r2 = 0x28
    1404	b7 03 00 00 08 00 00 00	r3 = 0x8
    1405	85 10 00 00 9f 06 00 00	call 0x69f ; <__rust_dealloc>
    1406	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB27_90>

0000000000002bf8 <LBB27_95>
    1407	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1408	07 02 00 00 ff ff ff ff	r2 += -0x1
    1409	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    1410	55 02 ef ff 00 00 00 00	if r2 != 0x0 goto -0x11 <LBB27_87>
    1411	b7 02 00 00 20 00 00 00	r2 = 0x20
    1412	b7 03 00 00 08 00 00 00	r3 = 0x8
    1413	85 10 00 00 97 06 00 00	call 0x697 ; <__rust_dealloc>
    1414	05 00 eb ff 00 00 00 00	goto -0x15 <LBB27_87>

0000000000002c38 <LBB27_97>
    1415	bf 80 00 00 00 00 00 00	r0 = r8
    1416	95 00 00 00 00 00 00 00	exit

0000000000002c48 <LBB27_98>
    1417	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1418	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1419	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1420	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1421	15 02 bf ff 00 00 00 00	if r2 == 0x0 goto -0x41 <LBB27_85>
    1422	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1423	15 01 bd ff 00 00 00 00	if r1 == 0x0 goto -0x43 <LBB27_85>
    1424	b7 03 00 00 01 00 00 00	r3 = 0x1
    1425	85 10 00 00 8b 06 00 00	call 0x68b ; <__rust_dealloc>
    1426	05 00 ba ff 00 00 00 00	goto -0x46 <LBB27_85>

0000000000002c98 <LBB27_101>
    1427	18 01 00 00 00 00 00 00 00 00 00 00 ad c7 71 00	r1 = 0x71c7ad00000000 ll
    1429	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1430	05 00 ec fd 00 00 00 00	goto -0x214 <LBB27_9>

0000000000002cb8 <LBB27_102>
    1431	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1432	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1433	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1434	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1435	7b 1a 38 fe 00 00 00 00	*(u64 *)(r10 - 0x1c8) = r1
    1436	7b 2a 30 fe 00 00 00 00	*(u64 *)(r10 - 0x1d0) = r2
    1437	bf a1 00 00 00 00 00 00	r1 = r10
    1438	07 01 00 00 00 ff ff ff	r1 += -0x100
    1439	bf a2 00 00 00 00 00 00	r2 = r10
    1440	07 02 00 00 30 fe ff ff	r2 += -0x1d0
    1441	85 10 00 00 04 fd ff ff	call -0x2fc ; <<tictactoe::accounts::Game as borsh::de::BorshDeserialize>::deserialize>
    1442	71 a1 00 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x100)
    1443	15 01 4b 00 01 00 00 00	if r1 == 0x1 goto +0x4b <LBB27_108>
    1444	61 a1 04 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xfc)
    1445	63 1a b3 fe 00 00 00 00	*(u32 *)(r10 - 0x14d) = r1
    1446	61 a1 01 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0xff)
    1447	63 1a b0 fe 00 00 00 00	*(u32 *)(r10 - 0x150) = r1
    1448	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1449	7b 1a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r1
    1450	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    1451	7b 1a 68 fd 00 00 00 00	*(u64 *)(r10 - 0x298) = r1
    1452	bf a1 00 00 00 00 00 00	r1 = r10
    1453	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1454	7b 1a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r1
    1455	bf a2 00 00 00 00 00 00	r2 = r10
    1456	07 02 00 00 18 ff ff ff	r2 += -0xe8
    1457	b7 03 00 00 34 00 00 00	r3 = 0x34
    1458	85 10 00 00 12 1d 00 00	call 0x1d12 ; <memcpy>
    1459	7b 7a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r7
    1460	bf a7 00 00 00 00 00 00	r7 = r10
    1461	07 07 00 00 90 ff ff ff	r7 += -0x70
    1462	bf 71 00 00 00 00 00 00	r1 = r7
    1463	79 a2 58 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a8)
    1464	b7 03 00 00 34 00 00 00	r3 = 0x34
    1465	85 10 00 00 0b 1d 00 00	call 0x1d0b ; <memcpy>
    1466	bf a1 00 00 00 00 00 00	r1 = r10
    1467	07 01 00 00 c7 fe ff ff	r1 += -0x139
    1468	bf 72 00 00 00 00 00 00	r2 = r7
    1469	b7 03 00 00 34 00 00 00	r3 = 0x34
    1470	85 10 00 00 06 1d 00 00	call 0x1d06 ; <memcpy>
    1471	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1472	7b 1a bf fe 00 00 00 00	*(u64 *)(r10 - 0x141) = r1
    1473	79 a1 70 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x290)
    1474	7b 1a b7 fe 00 00 00 00	*(u64 *)(r10 - 0x149) = r1
    1475	79 a2 60 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2a0)
    1476	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    1477	07 01 00 00 ff ff ff ff	r1 += -0x1
    1478	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    1479	71 a1 f9 fe 00 00 00 00	r1 = *(u8 *)(r10 - 0x107)
    1480	15 01 78 00 01 00 00 00	if r1 == 0x1 goto +0x78 <LBB27_117>
    1481	bf a1 00 00 00 00 00 00	r1 = r10
    1482	07 01 00 00 f9 fe ff ff	r1 += -0x107
    1483	b7 02 00 00 01 00 00 00	r2 = 0x1
    1484	7b 2a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r2
    1485	bf a2 00 00 00 00 00 00	r2 = r10
    1486	07 02 00 00 90 ff ff ff	r2 += -0x70
    1487	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1488	b7 02 00 00 00 00 00 00	r2 = 0x0
    1489	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1490	b7 02 00 00 02 00 00 00	r2 = 0x2
    1491	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1492	18 02 00 00 d0 39 01 00 00 00 00 00 00 00 00 00	r2 = 0x139d0 ll
    1494	7b 2a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r2
    1495	18 02 00 00 10 09 00 00 00 00 00 00 00 00 00 00	r2 = 0x910 ll
    1497	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    1498	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    1499	bf a1 00 00 00 00 00 00	r1 = r10
    1500	07 01 00 00 c8 ff ff ff	r1 += -0x38
    1501	bf a2 00 00 00 00 00 00	r2 = r10
    1502	07 02 00 00 00 ff ff ff	r2 += -0x100
    1503	85 10 00 00 32 10 00 00	call 0x1032 ; <alloc::fmt::format>
    1504	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    1505	79 a7 c8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x38)
    1506	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    1507	bf 71 00 00 00 00 00 00	r1 = r7
    1508	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1509	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB27_107>
    1510	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB27_107>
    1511	bf 71 00 00 00 00 00 00	r1 = r7
    1512	bf 82 00 00 00 00 00 00	r2 = r8
    1513	b7 03 00 00 01 00 00 00	r3 = 0x1
    1514	85 10 00 00 32 06 00 00	call 0x632 ; <__rust_dealloc>

0000000000002f58 <LBB27_107>
    1515	18 01 00 00 00 00 00 00 00 00 00 00 b0 c7 71 00	r1 = 0x71c7b000000000 ll
    1517	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1518	05 00 94 fd 00 00 00 00	goto -0x26c <LBB27_9>

0000000000002f78 <LBB27_108>
    1519	79 a3 10 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0xf0)
    1520	79 a2 08 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf8)
    1521	bf a1 00 00 00 00 00 00	r1 = r10
    1522	07 01 00 00 e0 fd ff ff	r1 += -0x220
    1523	85 10 00 00 97 0c 00 00	call 0xc97 ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    1524	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1525	07 01 00 00 ff ff ff ff	r1 += -0x1

0000000000002fb0 <LBB27_109>
    1526	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    1527	05 00 8b fd 00 00 00 00	goto -0x275 <LBB27_9>

0000000000002fc0 <LBB27_110>
    1528	61 a2 1c ff 00 00 00 00	r2 = *(u32 *)(r10 - 0xe4)
    1529	63 2a fc fd 00 00 00 00	*(u32 *)(r10 - 0x204) = r2
    1530	79 a2 14 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xec)
    1531	7b 2a f4 fd 00 00 00 00	*(u64 *)(r10 - 0x20c) = r2
    1532	79 a2 0c ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xf4)
    1533	7b 2a ec fd 00 00 00 00	*(u64 *)(r10 - 0x214) = r2
    1534	79 a2 04 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0xfc)
    1535	7b 2a e4 fd 00 00 00 00	*(u64 *)(r10 - 0x21c) = r2
    1536	63 1a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r1
    1537	05 00 81 fd 00 00 00 00	goto -0x27f <LBB27_9>

0000000000003010 <LBB27_111>
    1538	7b 8a 68 fd 00 00 00 00	*(u64 *)(r10 - 0x298) = r8
    1539	73 7a 57 fe 00 00 00 00	*(u8 *)(r10 - 0x1a9) = r7
    1540	bf a1 00 00 00 00 00 00	r1 = r10
    1541	07 01 00 00 90 fd ff ff	r1 += -0x270
    1542	bf a2 00 00 00 00 00 00	r2 = r10
    1543	07 02 00 00 10 fe ff ff	r2 += -0x1f0
    1544	85 10 00 00 0d 08 00 00	call 0x80d ; <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    1545	b7 01 00 00 01 00 00 00	r1 = 0x1
    1546	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    1547	bf a1 00 00 00 00 00 00	r1 = r10
    1548	07 01 00 00 57 fe ff ff	r1 += -0x1a9
    1549	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    1550	b7 01 00 00 09 00 00 00	r1 = 0x9
    1551	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1552	18 01 00 00 b1 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x126b1 ll
    1554	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    1555	79 a1 98 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x268)
    1556	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    1557	79 a1 90 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x270)
    1558	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    1559	bf a1 00 00 00 00 00 00	r1 = r10
    1560	07 01 00 00 00 ff ff ff	r1 += -0x100
    1561	85 10 00 00 d8 0d 00 00	call 0xdd8 ; <solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get>
    1562	bf a1 00 00 00 00 00 00	r1 = r10
    1563	07 01 00 00 0c ff ff ff	r1 += -0xf4
    1564	61 a8 08 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0xf8)
    1565	79 a2 00 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x100)
    1566	15 02 47 00 01 00 00 00	if r2 == 0x1 goto +0x47 <LBB27_120>
    1567	61 12 10 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x10)
    1568	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    1569	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1570	63 8a 78 fe 00 00 00 00	*(u32 *)(r10 - 0x188) = r8
    1571	7b 1a 7c fe 00 00 00 00	*(u64 *)(r10 - 0x184) = r1
    1572	7b 3a 84 fe 00 00 00 00	*(u64 *)(r10 - 0x17c) = r3
    1573	63 2a c0 fe 00 00 00 00	*(u32 *)(r10 - 0x140) = r2
    1574	63 2a 8c fe 00 00 00 00	*(u32 *)(r10 - 0x174) = r2
    1575	bf a1 00 00 00 00 00 00	r1 = r10
    1576	07 01 00 00 78 fe ff ff	r1 += -0x188
    1577	b7 02 00 00 4b 00 00 00	r2 = 0x4b
    1578	85 10 00 00 c4 0c 00 00	call 0xcc4 ; <solana_program::rent::Rent::minimum_balance>
    1579	bf 08 00 00 00 00 00 00	r8 = r0
    1580	79 a1 68 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x298)
    1581	25 08 01 00 01 00 00 00	if r8 > 0x1 goto +0x1 <LBB27_114>
    1582	b7 08 00 00 01 00 00 00	r8 = 0x1

0000000000003178 <LBB27_114>
    1583	85 10 00 00 19 06 00 00	call 0x619 ; <solana_program::account_info::AccountInfo::lamports>
    1584	2d 08 01 01 00 00 00 00	if r8 > r0 goto +0x101 <LBB27_151>

0000000000003188 <LBB27_115>
    1585	18 01 00 00 0a 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x1260a ll
    1587	b7 02 00 00 1f 00 00 00	r2 = 0x1f
    1588	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1589	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    1590	79 72 30 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x30)
    1591	bf a1 00 00 00 00 00 00	r1 = r10
    1592	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1593	b7 03 00 00 4b 00 00 00	r3 = 0x4b
    1594	85 10 00 00 3d 0d 00 00	call 0xd3d ; <solana_program::system_instruction::allocate>
    1595	79 71 38 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x38)
    1596	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    1597	07 03 00 00 01 00 00 00	r3 += 0x1
    1598	25 03 60 00 01 00 00 00	if r3 > 0x1 goto +0x60 <LBB27_123>

00000000000031f8 <LBB27_116>
    1599	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    1600	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000003208 <LBB27_117>
    1601	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    1602	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1603	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1604	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    1605	79 14 10 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x10)
    1606	79 11 18 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x18)
    1607	7b 1a e8 fe 00 00 00 00	*(u64 *)(r10 - 0x118) = r1
    1608	7b 4a e0 fe 00 00 00 00	*(u64 *)(r10 - 0x120) = r4
    1609	7b 3a d8 fe 00 00 00 00	*(u64 *)(r10 - 0x128) = r3
    1610	7b 2a d0 fe 00 00 00 00	*(u64 *)(r10 - 0x130) = r2
    1611	b7 01 00 00 02 00 00 00	r1 = 0x2
    1612	73 1a f9 fe 00 00 00 00	*(u8 *)(r10 - 0x107) = r1
    1613	bf a1 00 00 00 00 00 00	r1 = r10
    1614	07 01 00 00 00 ff ff ff	r1 += -0x100
    1615	bf 82 00 00 00 00 00 00	r2 = r8
    1616	85 10 00 00 22 06 00 00	call 0x622 ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1617	79 a1 00 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x100)
    1618	15 01 2e fe 01 00 00 00	if r1 == 0x1 goto -0x1d2 <LBB27_58>
    1619	79 a7 10 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0xf0)
    1620	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    1621	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1622	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1623	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    1624	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    1625	bf a1 00 00 00 00 00 00	r1 = r10
    1626	07 01 00 00 b0 fd ff ff	r1 += -0x250
    1627	bf a2 00 00 00 00 00 00	r2 = r10
    1628	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1629	bf a3 00 00 00 00 00 00	r3 = r10
    1630	07 03 00 00 c8 ff ff ff	r3 += -0x38
    1631	85 10 00 00 b6 fb ff ff	call -0x44a ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1632	79 a2 b0 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x250)
    1633	bf 21 00 00 00 00 00 00	r1 = r2
    1634	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1635	15 01 1b 01 04 00 00 00	if r1 == 0x4 goto +0x11b <LBB27_162>
    1636	79 a3 b8 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x248)
    1637	05 00 d4 02 00 00 00 00	goto +0x2d4 <LBB27_251>

0000000000003330 <LBB27_120>
    1638	61 12 18 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x18)
    1639	79 13 10 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x10)
    1640	79 14 08 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x8)
    1641	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1642	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    1643	7b 4a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r4
    1644	7b 3a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r3
    1645	63 2a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r2
    1646	bf 81 00 00 00 00 00 00	r1 = r8
    1647	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    1648	15 01 01 00 14 00 00 00	if r1 == 0x14 goto +0x1 <LBB27_121>
    1649	05 00 bd 02 00 00 00 00	goto +0x2bd <LBB27_249>

0000000000003390 <LBB27_121>
    1650	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    1651	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1652	79 12 18 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x18)
    1653	7b 2a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r2
    1654	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    1655	7b 2a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r2
    1656	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    1657	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1658	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    1659	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1660	bf a1 00 00 00 00 00 00	r1 = r10
    1661	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1662	b7 02 00 00 00 00 00 00	r2 = 0x0
    1663	b7 03 00 00 4a 00 00 00	r3 = 0x4a
    1664	85 10 00 00 67 1c 00 00	call 0x1c67 ; <memset>
    1665	b7 01 00 00 01 00 00 00	r1 = 0x1
    1666	6b 1a 49 ff 00 00 00 00	*(u16 *)(r10 - 0xb7) = r1
    1667	79 a1 d0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x130)
    1668	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    1669	79 a1 d8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x128)
    1670	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    1671	79 a1 e0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x120)
    1672	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    1673	79 a1 e8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x118)
    1674	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    1675	79 a1 f0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x110)
    1676	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    1677	71 a1 f8 fe 00 00 00 00	r1 = *(u8 *)(r10 - 0x108)
    1678	73 1a 48 ff 00 00 00 00	*(u8 *)(r10 - 0xb8) = r1
    1679	bf a1 00 00 00 00 00 00	r1 = r10
    1680	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1681	bf 72 00 00 00 00 00 00	r2 = r7
    1682	85 10 00 00 e0 05 00 00	call 0x5e0 ; <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    1683	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1684	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB27_122>
    1685	05 00 d7 00 00 00 00 00	goto +0xd7 <LBB27_161>

00000000000034b0 <LBB27_122>
    1686	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1687	7b 1a f0 fd 00 00 00 00	*(u64 *)(r10 - 0x210) = r1
    1688	79 a1 d0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x130)
    1689	7b 1a f8 fd 00 00 00 00	*(u64 *)(r10 - 0x208) = r1
    1690	79 a1 c0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x140)
    1691	7b 1a e8 fd 00 00 00 00	*(u64 *)(r10 - 0x218) = r1
    1692	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    1693	7b 1a e0 fd 00 00 00 00	*(u64 *)(r10 - 0x220) = r1
    1694	05 00 e4 fc 00 00 00 00	goto -0x31c <LBB27_9>

00000000000034f8 <LBB27_123>
    1695	71 74 59 00 00 00 00 00	r4 = *(u8 *)(r7 + 0x59)
    1696	71 72 58 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x58)
    1697	79 70 30 00 00 00 00 00	r0 = *(u64 *)(r7 + 0x30)
    1698	7b 31 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r3
    1699	79 73 40 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x40)
    1700	79 35 00 00 00 00 00 00	r5 = *(u64 *)(r3 + 0x0)
    1701	07 05 00 00 01 00 00 00	r5 += 0x1
    1702	25 05 01 00 01 00 00 00	if r5 > 0x1 goto +0x1 <LBB27_125>
    1703	05 00 97 ff 00 00 00 00	goto -0x69 <LBB27_116>

0000000000003540 <LBB27_125>
    1704	7b 53 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r5
    1705	b7 07 00 00 01 00 00 00	r7 = 0x1
    1706	b7 05 00 00 01 00 00 00	r5 = 0x1
    1707	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB27_127>
    1708	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000003568 <LBB27_127>
    1709	b7 04 00 00 01 00 00 00	r4 = 0x1
    1710	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB27_129>
    1711	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003580 <LBB27_129>
    1712	7b 4a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r4
    1713	7b 5a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r5
    1714	79 a2 78 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x288)
    1715	71 22 5a 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x5a)
    1716	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB27_131>
    1717	b7 07 00 00 00 00 00 00	r7 = 0x0

00000000000035b0 <LBB27_131>
    1718	7b 7a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r7
    1719	7b 0a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r0
    1720	7b 1a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r1
    1721	79 a5 78 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x288)
    1722	79 58 68 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x68)
    1723	79 84 00 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x0)
    1724	07 04 00 00 01 00 00 00	r4 += 0x1
    1725	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB27_133>
    1726	05 00 80 ff 00 00 00 00	goto -0x80 <LBB27_116>

00000000000035f8 <LBB27_133>
    1727	71 51 89 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x89)
    1728	7b 1a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r1
    1729	71 51 88 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x88)
    1730	7b 1a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r1
    1731	79 51 60 00 00 00 00 00	r1 = *(u64 *)(r5 + 0x60)
    1732	79 52 50 00 00 00 00 00	r2 = *(u64 *)(r5 + 0x50)
    1733	79 57 48 00 00 00 00 00	r7 = *(u64 *)(r5 + 0x48)
    1734	7b 48 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r4
    1735	79 50 70 00 00 00 00 00	r0 = *(u64 *)(r5 + 0x70)
    1736	79 04 00 00 00 00 00 00	r4 = *(u64 *)(r0 + 0x0)
    1737	07 04 00 00 01 00 00 00	r4 += 0x1
    1738	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB27_135>
    1739	05 00 73 ff 00 00 00 00	goto -0x8d <LBB27_116>

0000000000003660 <LBB27_135>
    1740	7b 40 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r4
    1741	79 54 78 00 00 00 00 00	r4 = *(u64 *)(r5 + 0x78)
    1742	7b 4a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r4
    1743	79 54 80 00 00 00 00 00	r4 = *(u64 *)(r5 + 0x80)
    1744	7b 4a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r4
    1745	71 54 8a 00 00 00 00 00	r4 = *(u8 *)(r5 + 0x8a)
    1746	7b 0a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r0
    1747	7b 8a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r8
    1748	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    1749	79 a5 38 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2c8)
    1750	73 5a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r5
    1751	79 a5 40 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2c0)
    1752	73 5a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r5
    1753	79 a5 30 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2d0)
    1754	73 5a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r5
    1755	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1756	7b 7a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r7
    1757	7b 3a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r3
    1758	79 a2 50 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b0)
    1759	7b 2a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r2
    1760	79 a2 48 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2b8)
    1761	7b 2a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r2
    1762	79 a2 20 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x2e0)
    1763	b7 03 00 00 01 00 00 00	r3 = 0x1
    1764	b7 07 00 00 01 00 00 00	r7 = 0x1
    1765	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB27_137>
    1766	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000003738 <LBB27_137>
    1767	b7 04 00 00 01 00 00 00	r4 = 0x1
    1768	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB27_139>
    1769	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003750 <LBB27_139>
    1770	7b 0a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r0
    1771	7b 1a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r1
    1772	7b 8a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r8
    1773	79 a1 28 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2d8)
    1774	bf 12 00 00 00 00 00 00	r2 = r1
    1775	b7 01 00 00 01 00 00 00	r1 = 0x1
    1776	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB27_141>
    1777	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000003790 <LBB27_141>
    1778	7b 1a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r1
    1779	73 1a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r1
    1780	7b 4a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r4
    1781	73 4a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r4
    1782	79 a1 58 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a8)
    1783	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r1
    1784	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    1785	7b 1a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r1
    1786	73 7a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r7
    1787	b7 02 00 00 03 00 00 00	r2 = 0x3
    1788	7b 2a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r2
    1789	bf a2 00 00 00 00 00 00	r2 = r10
    1790	07 02 00 00 c8 ff ff ff	r2 += -0x38
    1791	7b 2a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r2
    1792	bf a2 00 00 00 00 00 00	r2 = r10
    1793	07 02 00 00 98 fe ff ff	r2 += -0x168
    1794	7b 2a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r2
    1795	7b 3a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r3
    1796	bf a1 00 00 00 00 00 00	r1 = r10
    1797	07 01 00 00 90 ff ff ff	r1 += -0x70
    1798	bf a2 00 00 00 00 00 00	r2 = r10
    1799	07 02 00 00 b0 fe ff ff	r2 += -0x150
    1800	bf a3 00 00 00 00 00 00	r3 = r10
    1801	07 03 00 00 00 ff ff ff	r3 += -0x100
    1802	bf a5 00 00 00 00 00 00	r5 = r10
    1803	b7 04 00 00 02 00 00 00	r4 = 0x2
    1804	85 10 00 00 37 0a 00 00	call 0xa37 ; <solana_program::program::invoke_signed>
    1805	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    1806	15 08 01 00 14 00 00 00	if r8 == 0x14 goto +0x1 <LBB27_142>
    1807	05 00 75 00 00 00 00 00	goto +0x75 <LBB27_163>

0000000000003880 <LBB27_142>
    1808	bf a1 00 00 00 00 00 00	r1 = r10
    1809	07 01 00 00 00 ff ff ff	r1 += -0x100
    1810	85 10 00 00 19 f9 ff ff	call -0x6e7 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    1811	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1812	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB27_146>
    1813	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1814	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB27_146>
    1815	27 02 00 00 22 00 00 00	r2 *= 0x22
    1816	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB27_146>
    1817	b7 03 00 00 01 00 00 00	r3 = 0x1
    1818	85 10 00 00 02 05 00 00	call 0x502 ; <__rust_dealloc>

00000000000038d8 <LBB27_146>
    1819	7b 7a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r7
    1820	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    1821	79 a8 70 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x290)
    1822	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB27_149>
    1823	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1824	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB27_149>
    1825	b7 03 00 00 01 00 00 00	r3 = 0x1
    1826	85 10 00 00 fa 04 00 00	call 0x4fa ; <__rust_dealloc>

0000000000003918 <LBB27_149>
    1827	18 01 00 00 29 26 01 00 00 00 00 00 00 00 00 00	r1 = 0x12629 ll
    1829	b7 02 00 00 29 00 00 00	r2 = 0x29
    1830	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1831	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    1832	79 72 30 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x30)
    1833	bf a1 00 00 00 00 00 00	r1 = r10
    1834	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1835	bf 83 00 00 00 00 00 00	r3 = r8
    1836	85 10 00 00 e1 0b 00 00	call 0xbe1 ; <solana_program::system_instruction::assign>
    1837	79 71 38 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x38)
    1838	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    1839	07 03 00 00 01 00 00 00	r3 += 0x1
    1840	25 03 6e 00 01 00 00 00	if r3 > 0x1 goto +0x6e <LBB27_170>
    1841	05 00 0d ff 00 00 00 00	goto -0xf3 <LBB27_116>

0000000000003990 <LBB27_151>
    1842	bf 83 00 00 00 00 00 00	r3 = r8
    1843	1f 03 00 00 00 00 00 00	r3 -= r0
    1844	b7 01 00 00 00 00 00 00	r1 = 0x0
    1845	b7 02 00 00 01 00 00 00	r2 = 0x1
    1846	b7 04 00 00 01 00 00 00	r4 = 0x1
    1847	2d 83 01 00 00 00 00 00	if r3 > r8 goto +0x1 <LBB27_153>
    1848	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000039c8 <LBB27_153>
    1849	b7 05 00 00 00 00 00 00	r5 = 0x0
    1850	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB27_155>
    1851	bf 35 00 00 00 00 00 00	r5 = r3

00000000000039e0 <LBB27_155>
    1852	7b 5a 90 fe 00 00 00 00	*(u64 *)(r10 - 0x170) = r5
    1853	7b 2a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r2
    1854	bf a2 00 00 00 00 00 00	r2 = r10
    1855	07 02 00 00 98 fe ff ff	r2 += -0x168
    1856	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    1857	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    1858	b7 01 00 00 02 00 00 00	r1 = 0x2
    1859	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    1860	18 01 00 00 50 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a50 ll
    1862	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    1863	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    1865	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    1866	bf a1 00 00 00 00 00 00	r1 = r10
    1867	07 01 00 00 90 fe ff ff	r1 += -0x170
    1868	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    1869	bf a1 00 00 00 00 00 00	r1 = r10
    1870	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1871	bf a2 00 00 00 00 00 00	r2 = r10
    1872	07 02 00 00 00 ff ff ff	r2 += -0x100
    1873	85 10 00 00 c0 0e 00 00	call 0xec0 ; <alloc::fmt::format>
    1874	79 a8 b8 fe 00 00 00 00	r8 = *(u64 *)(r10 - 0x148)
    1875	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    1876	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    1877	bf 71 00 00 00 00 00 00	r1 = r7
    1878	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    1879	15 08 05 00 00 00 00 00	if r8 == 0x0 goto +0x5 <LBB27_158>
    1880	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB27_158>
    1881	bf 71 00 00 00 00 00 00	r1 = r7
    1882	bf 82 00 00 00 00 00 00	r2 = r8
    1883	b7 03 00 00 01 00 00 00	r3 = 0x1
    1884	85 10 00 00 c0 04 00 00	call 0x4c0 ; <__rust_dealloc>

0000000000003ae8 <LBB27_158>
    1885	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    1886	bf 71 00 00 00 00 00 00	r1 = r7
    1887	85 10 00 00 e9 04 00 00	call 0x4e9 ; <solana_program::account_info::AccountInfo::lamports>
    1888	79 a4 90 fe 00 00 00 00	r4 = *(u64 *)(r10 - 0x170)
    1889	2d 04 a8 00 00 00 00 00	if r4 > r0 goto +0xa8 <LBB27_190>
    1890	79 78 30 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x30)
    1891	79 72 00 00 00 00 00 00	r2 = *(u64 *)(r7 + 0x0)
    1892	bf a1 00 00 00 00 00 00	r1 = r10
    1893	07 01 00 00 b0 fe ff ff	r1 += -0x150
    1894	bf 83 00 00 00 00 00 00	r3 = r8
    1895	85 10 00 00 d9 0b 00 00	call 0xbd9 ; <solana_program::system_instruction::transfer>
    1896	79 75 08 00 00 00 00 00	r5 = *(u64 *)(r7 + 0x8)
    1897	79 53 00 00 00 00 00 00	r3 = *(u64 *)(r5 + 0x0)
    1898	07 03 00 00 01 00 00 00	r3 += 0x1
    1899	25 03 c8 00 01 00 00 00	if r3 > 0x1 goto +0xc8 <LBB27_194>
    1900	05 00 d2 fe 00 00 00 00	goto -0x12e <LBB27_116>

0000000000003b68 <LBB27_161>
    1901	79 a7 c0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x140)
    1902	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    1903	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    1904	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    1905	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    1906	7b 2a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r2
    1907	bf a1 00 00 00 00 00 00	r1 = r10
    1908	07 01 00 00 80 fd ff ff	r1 += -0x280
    1909	bf a2 00 00 00 00 00 00	r2 = r10
    1910	07 02 00 00 00 ff ff ff	r2 += -0x100
    1911	bf a3 00 00 00 00 00 00	r3 = r10
    1912	07 03 00 00 90 ff ff ff	r3 += -0x70
    1913	85 10 00 00 9c fa ff ff	call -0x564 ; <<tictactoe::accounts::Game as borsh::ser::BorshSerialize>::serialize>
    1914	79 a2 80 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x280)
    1915	bf 21 00 00 00 00 00 00	r1 = r2
    1916	57 01 00 00 ff 00 00 00	r1 &= 0xff
    1917	15 01 01 00 04 00 00 00	if r1 == 0x4 goto +0x1 <LBB27_162>
    1918	05 00 ba 01 00 00 00 00	goto +0x1ba <LBB27_250>

0000000000003bf8 <LBB27_162>
    1919	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    1920	07 01 00 00 01 00 00 00	r1 += 0x1
    1921	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    1922	b7 01 00 00 14 00 00 00	r1 = 0x14
    1923	63 1a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r1
    1924	05 00 fe fb 00 00 00 00	goto -0x402 <LBB27_9>

0000000000003c28 <LBB27_163>
    1925	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    1926	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    1927	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    1928	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    1929	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    1930	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    1931	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    1932	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    1933	bf a1 00 00 00 00 00 00	r1 = r10
    1934	07 01 00 00 00 ff ff ff	r1 += -0x100
    1935	85 10 00 00 9c f8 ff ff	call -0x764 ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    1936	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    1937	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB27_167>
    1938	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    1939	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB27_167>
    1940	27 02 00 00 22 00 00 00	r2 *= 0x22
    1941	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB27_167>
    1942	b7 03 00 00 01 00 00 00	r3 = 0x1
    1943	85 10 00 00 85 04 00 00	call 0x485 ; <__rust_dealloc>

0000000000003cc0 <LBB27_167>
    1944	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    1945	15 02 95 01 00 00 00 00	if r2 == 0x0 goto +0x195 <LBB27_249>
    1946	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    1947	15 01 93 01 00 00 00 00	if r1 == 0x0 goto +0x193 <LBB27_249>

0000000000003ce0 <LBB27_169>
    1948	b7 03 00 00 01 00 00 00	r3 = 0x1
    1949	85 10 00 00 7f 04 00 00	call 0x47f ; <__rust_dealloc>
    1950	05 00 90 01 00 00 00 00	goto +0x190 <LBB27_249>

0000000000003cf8 <LBB27_170>
    1951	71 74 59 00 00 00 00 00	r4 = *(u8 *)(r7 + 0x59)
    1952	71 72 58 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x58)
    1953	79 78 30 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x30)
    1954	7b 31 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r3
    1955	79 73 40 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x40)
    1956	79 35 00 00 00 00 00 00	r5 = *(u64 *)(r3 + 0x0)
    1957	07 05 00 00 01 00 00 00	r5 += 0x1
    1958	25 05 01 00 01 00 00 00	if r5 > 0x1 goto +0x1 <LBB27_172>
    1959	05 00 97 fe 00 00 00 00	goto -0x169 <LBB27_116>

0000000000003d40 <LBB27_172>
    1960	7b 53 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r5
    1961	bf 40 00 00 00 00 00 00	r0 = r4
    1962	b7 05 00 00 01 00 00 00	r5 = 0x1
    1963	b7 04 00 00 01 00 00 00	r4 = 0x1
    1964	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB27_174>
    1965	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000003d70 <LBB27_174>
    1966	b7 00 00 00 01 00 00 00	r0 = 0x1
    1967	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB27_176>
    1968	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000003d88 <LBB27_176>
    1969	7b 0a 18 fd 00 00 00 00	*(u64 *)(r10 - 0x2e8) = r0
    1970	7b 4a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r4
    1971	79 a2 78 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x288)
    1972	71 22 5a 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x5a)
    1973	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB27_178>
    1974	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000003db8 <LBB27_178>
    1975	bf 50 00 00 00 00 00 00	r0 = r5
    1976	7b 8a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r8
    1977	79 a4 50 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2b0)
    1978	79 47 00 00 00 00 00 00	r7 = *(u64 *)(r4 + 0x0)
    1979	07 07 00 00 01 00 00 00	r7 += 0x1
    1980	25 07 01 00 01 00 00 00	if r7 > 0x1 goto +0x1 <LBB27_180>
    1981	05 00 81 fe 00 00 00 00	goto -0x17f <LBB27_116>

0000000000003df0 <LBB27_180>
    1982	79 a8 78 fd 00 00 00 00	r8 = *(u64 *)(r10 - 0x288)
    1983	79 82 50 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x50)
    1984	79 88 48 00 00 00 00 00	r8 = *(u64 *)(r8 + 0x48)
    1985	7b 74 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r7
    1986	79 a5 48 fd 00 00 00 00	r5 = *(u64 *)(r10 - 0x2b8)
    1987	79 57 00 00 00 00 00 00	r7 = *(u64 *)(r5 + 0x0)
    1988	07 07 00 00 01 00 00 00	r7 += 0x1
    1989	25 07 01 00 01 00 00 00	if r7 > 0x1 goto +0x1 <LBB27_182>
    1990	05 00 78 fe 00 00 00 00	goto -0x188 <LBB27_116>

0000000000003e38 <LBB27_182>
    1991	7b 75 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r7
    1992	79 a7 28 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2d8)
    1993	73 7a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r7
    1994	79 a7 30 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2d0)
    1995	73 7a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r7
    1996	79 a7 38 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2c8)
    1997	73 7a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r7
    1998	79 a7 58 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2a8)
    1999	7b 7a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r7
    2000	79 a7 60 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x2a0)
    2001	7b 7a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r7
    2002	7b 5a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r5
    2003	7b 4a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r4
    2004	79 a4 40 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2c0)
    2005	7b 4a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r4
    2006	73 0a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r0
    2007	79 a4 20 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2e0)
    2008	73 4a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r4
    2009	79 a4 18 fd 00 00 00 00	r4 = *(u64 *)(r10 - 0x2e8)
    2010	73 4a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r4
    2011	7b 2a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r2
    2012	7b 8a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r8
    2013	7b 3a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r3
    2014	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2015	79 a1 70 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x290)
    2016	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2017	b7 01 00 00 03 00 00 00	r1 = 0x3
    2018	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    2019	bf a1 00 00 00 00 00 00	r1 = r10
    2020	07 01 00 00 c8 ff ff ff	r1 += -0x38
    2021	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    2022	bf a1 00 00 00 00 00 00	r1 = r10
    2023	07 01 00 00 98 fe ff ff	r1 += -0x168
    2024	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    2025	b7 01 00 00 01 00 00 00	r1 = 0x1
    2026	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    2027	bf a1 00 00 00 00 00 00	r1 = r10
    2028	07 01 00 00 90 ff ff ff	r1 += -0x70
    2029	bf a2 00 00 00 00 00 00	r2 = r10
    2030	07 02 00 00 b0 fe ff ff	r2 += -0x150
    2031	bf a3 00 00 00 00 00 00	r3 = r10
    2032	07 03 00 00 00 ff ff ff	r3 += -0x100
    2033	bf a5 00 00 00 00 00 00	r5 = r10
    2034	b7 04 00 00 02 00 00 00	r4 = 0x2
    2035	85 10 00 00 50 09 00 00	call 0x950 ; <solana_program::program::invoke_signed>
    2036	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    2037	15 08 01 00 14 00 00 00	if r8 == 0x14 goto +0x1 <LBB27_183>
    2038	05 00 49 01 00 00 00 00	goto +0x149 <LBB27_252>

0000000000003fb8 <LBB27_183>
    2039	bf a1 00 00 00 00 00 00	r1 = r10
    2040	07 01 00 00 00 ff ff ff	r1 += -0x100
    2041	85 10 00 00 32 f8 ff ff	call -0x7ce ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    2042	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2043	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB27_187>
    2044	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2045	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB27_187>
    2046	27 02 00 00 22 00 00 00	r2 *= 0x22
    2047	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB27_187>
    2048	b7 03 00 00 01 00 00 00	r3 = 0x1
    2049	85 10 00 00 1b 04 00 00	call 0x41b ; <__rust_dealloc>

0000000000004010 <LBB27_187>
    2050	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2051	79 a7 68 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x298)
    2052	15 02 6d fe 00 00 00 00	if r2 == 0x0 goto -0x193 <LBB27_121>
    2053	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2054	15 01 6b fe 00 00 00 00	if r1 == 0x0 goto -0x195 <LBB27_121>
    2055	b7 03 00 00 01 00 00 00	r3 = 0x1
    2056	85 10 00 00 14 04 00 00	call 0x414 ; <__rust_dealloc>
    2057	05 00 68 fe 00 00 00 00	goto -0x198 <LBB27_121>

0000000000004050 <LBB27_190>
    2058	bf 71 00 00 00 00 00 00	r1 = r7
    2059	85 10 00 00 3d 04 00 00	call 0x43d ; <solana_program::account_info::AccountInfo::lamports>
    2060	7b 0a a8 fe 00 00 00 00	*(u64 *)(r10 - 0x158) = r0
    2061	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    2063	7b 1a a0 fe 00 00 00 00	*(u64 *)(r10 - 0x160) = r1
    2064	bf a1 00 00 00 00 00 00	r1 = r10
    2065	07 01 00 00 a8 fe ff ff	r1 += -0x158
    2066	7b 1a 98 fe 00 00 00 00	*(u64 *)(r10 - 0x168) = r1
    2067	b7 01 00 00 01 00 00 00	r1 = 0x1
    2068	7b 1a 28 ff 00 00 00 00	*(u64 *)(r10 - 0xd8) = r1
    2069	bf a1 00 00 00 00 00 00	r1 = r10
    2070	07 01 00 00 98 fe ff ff	r1 += -0x168
    2071	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    2072	b7 08 00 00 00 00 00 00	r8 = 0x0
    2073	7b 8a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r8
    2074	b7 01 00 00 02 00 00 00	r1 = 0x2
    2075	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2076	18 01 00 00 70 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a70 ll
    2078	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2079	bf a1 00 00 00 00 00 00	r1 = r10
    2080	07 01 00 00 b0 fe ff ff	r1 += -0x150
    2081	bf a2 00 00 00 00 00 00	r2 = r10
    2082	07 02 00 00 00 ff ff ff	r2 += -0x100
    2083	85 10 00 00 ee 0d 00 00	call 0xdee ; <alloc::fmt::format>
    2084	79 a1 b8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x148)
    2085	7b 1a 70 fd 00 00 00 00	*(u64 *)(r10 - 0x290) = r1
    2086	79 a7 b0 fe 00 00 00 00	r7 = *(u64 *)(r10 - 0x150)
    2087	79 a2 c0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x140)
    2088	bf 71 00 00 00 00 00 00	r1 = r7
    2089	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    2090	79 a2 70 fd 00 00 00 00	r2 = *(u64 *)(r10 - 0x290)
    2091	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB27_193>
    2092	15 07 03 00 00 00 00 00	if r7 == 0x0 goto +0x3 <LBB27_193>
    2093	bf 71 00 00 00 00 00 00	r1 = r7
    2094	b7 03 00 00 01 00 00 00	r3 = 0x1
    2095	85 10 00 00 ed 03 00 00	call 0x3ed ; <__rust_dealloc>

0000000000004180 <LBB27_193>
    2096	18 01 00 00 00 00 00 00 00 00 00 00 ae c7 71 00	r1 = 0x71c7ae00000000 ll
    2098	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    2099	05 00 f3 00 00 00 00 00	goto +0xf3 <LBB27_248>

00000000000041a0 <LBB27_194>
    2100	71 72 29 00 00 00 00 00	r2 = *(u8 *)(r7 + 0x29)
    2101	71 71 28 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x28)
    2102	79 70 00 00 00 00 00 00	r0 = *(u64 *)(r7 + 0x0)
    2103	7b 35 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r3
    2104	79 74 10 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x10)
    2105	79 43 00 00 00 00 00 00	r3 = *(u64 *)(r4 + 0x0)
    2106	07 03 00 00 01 00 00 00	r3 += 0x1
    2107	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB27_196>
    2108	05 00 02 fe 00 00 00 00	goto -0x1fe <LBB27_116>

00000000000041e8 <LBB27_196>
    2109	7b 4a 58 fd 00 00 00 00	*(u64 *)(r10 - 0x2a8) = r4
    2110	7b 34 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r3
    2111	b7 04 00 00 01 00 00 00	r4 = 0x1
    2112	b7 03 00 00 01 00 00 00	r3 = 0x1
    2113	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB27_198>
    2114	b7 03 00 00 00 00 00 00	r3 = 0x0

0000000000004218 <LBB27_198>
    2115	b7 02 00 00 01 00 00 00	r2 = 0x1
    2116	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB27_200>
    2117	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000004230 <LBB27_200>
    2118	7b 0a 60 fd 00 00 00 00	*(u64 *)(r10 - 0x2a0) = r0
    2119	7b 2a 40 fd 00 00 00 00	*(u64 *)(r10 - 0x2c0) = r2
    2120	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    2121	71 11 2a 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x2a)
    2122	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB27_202>
    2123	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000004260 <LBB27_202>
    2124	bf 87 00 00 00 00 00 00	r7 = r8
    2125	7b 4a 48 fd 00 00 00 00	*(u64 *)(r10 - 0x2b8) = r4
    2126	7b 3a 50 fd 00 00 00 00	*(u64 *)(r10 - 0x2b0) = r3
    2127	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    2128	79 10 38 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x38)
    2129	79 02 00 00 00 00 00 00	r2 = *(u64 *)(r0 + 0x0)
    2130	07 02 00 00 01 00 00 00	r2 += 0x1
    2131	25 02 01 00 01 00 00 00	if r2 > 0x1 goto +0x1 <LBB27_204>
    2132	05 00 ea fd 00 00 00 00	goto -0x216 <LBB27_116>

00000000000042a8 <LBB27_204>
    2133	71 13 59 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x59)
    2134	bf 14 00 00 00 00 00 00	r4 = r1
    2135	71 41 58 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x58)
    2136	79 48 20 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x20)
    2137	7b 8a 28 fd 00 00 00 00	*(u64 *)(r10 - 0x2d8) = r8
    2138	79 48 18 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x18)
    2139	7b 8a 30 fd 00 00 00 00	*(u64 *)(r10 - 0x2d0) = r8
    2140	7b 0a 38 fd 00 00 00 00	*(u64 *)(r10 - 0x2c8) = r0
    2141	7b 20 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r2
    2142	79 42 40 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x40)
    2143	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2144	07 04 00 00 01 00 00 00	r4 += 0x1
    2145	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB27_206>
    2146	05 00 dc fd 00 00 00 00	goto -0x224 <LBB27_116>

0000000000004318 <LBB27_206>
    2147	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2148	b7 00 00 00 01 00 00 00	r0 = 0x1
    2149	b7 08 00 00 01 00 00 00	r8 = 0x1
    2150	bf 74 00 00 00 00 00 00	r4 = r7
    2151	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB27_208>
    2152	b7 08 00 00 00 00 00 00	r8 = 0x0

0000000000004348 <LBB27_208>
    2153	b7 07 00 00 01 00 00 00	r7 = 0x1
    2154	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB27_210>
    2155	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000004360 <LBB27_210>
    2156	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    2157	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    2158	71 11 5a 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x5a)
    2159	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB27_212>
    2160	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000004388 <LBB27_212>
    2161	7b 0a 18 fd 00 00 00 00	*(u64 *)(r10 - 0x2e8) = r0
    2162	7b 5a 20 fd 00 00 00 00	*(u64 *)(r10 - 0x2e0) = r5
    2163	79 a1 78 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x288)
    2164	79 10 68 00 00 00 00 00	r0 = *(u64 *)(r1 + 0x68)
    2165	79 03 00 00 00 00 00 00	r3 = *(u64 *)(r0 + 0x0)
    2166	07 03 00 00 01 00 00 00	r3 += 0x1
    2167	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB27_214>
    2168	05 00 c6 fd 00 00 00 00	goto -0x23a <LBB27_116>

00000000000043c8 <LBB27_214>
    2169	7b 8a 08 fd 00 00 00 00	*(u64 *)(r10 - 0x2f8) = r8
    2170	7b 4a 10 fd 00 00 00 00	*(u64 *)(r10 - 0x2f0) = r4
    2171	71 14 89 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x89)
    2172	bf 15 00 00 00 00 00 00	r5 = r1
    2173	71 51 88 00 00 00 00 00	r1 = *(u8 *)(r5 + 0x88)
    2174	79 58 60 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x60)
    2175	7b 8a f0 fc 00 00 00 00	*(u64 *)(r10 - 0x310) = r8
    2176	79 58 50 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x50)
    2177	7b 8a f8 fc 00 00 00 00	*(u64 *)(r10 - 0x308) = r8
    2178	79 58 48 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x48)
    2179	7b 8a 00 fd 00 00 00 00	*(u64 *)(r10 - 0x300) = r8
    2180	7b 30 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r3
    2181	79 55 70 00 00 00 00 00	r5 = *(u64 *)(r5 + 0x70)
    2182	79 53 00 00 00 00 00 00	r3 = *(u64 *)(r5 + 0x0)
    2183	07 03 00 00 01 00 00 00	r3 += 0x1
    2184	25 03 01 00 01 00 00 00	if r3 > 0x1 goto +0x1 <LBB27_216>
    2185	05 00 b5 fd 00 00 00 00	goto -0x24b <LBB27_116>

0000000000004450 <LBB27_216>
    2186	7b 2a e8 fc 00 00 00 00	*(u64 *)(r10 - 0x318) = r2
    2187	7b 35 00 00 00 00 00 00	*(u64 *)(r5 + 0x0) = r3
    2188	bf 48 00 00 00 00 00 00	r8 = r4
    2189	bf 13 00 00 00 00 00 00	r3 = r1
    2190	b7 04 00 00 01 00 00 00	r4 = 0x1
    2191	b7 01 00 00 01 00 00 00	r1 = 0x1
    2192	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB27_218>
    2193	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000004490 <LBB27_218>
    2194	bf 72 00 00 00 00 00 00	r2 = r7
    2195	79 a3 58 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x2a8)
    2196	b7 03 00 00 01 00 00 00	r3 = 0x1
    2197	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB27_220>
    2198	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000044b8 <LBB27_220>
    2199	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    2200	71 78 8a 00 00 00 00 00	r8 = *(u8 *)(r7 + 0x8a)
    2201	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB27_222>
    2202	b7 04 00 00 00 00 00 00	r4 = 0x0

00000000000044d8 <LBB27_222>
    2203	79 a7 78 fd 00 00 00 00	r7 = *(u64 *)(r10 - 0x288)
    2204	79 78 78 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x78)
    2205	79 77 80 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x80)
    2206	73 3a 89 ff 00 00 00 00	*(u8 *)(r10 - 0x77) = r3
    2207	73 1a 88 ff 00 00 00 00	*(u8 *)(r10 - 0x78) = r1
    2208	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    2209	7b 8a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r8
    2210	7b 5a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r5
    2211	7b 0a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r0
    2212	79 a1 f0 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x310)
    2213	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    2214	79 a1 18 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2e8)
    2215	73 1a 5a ff 00 00 00 00	*(u8 *)(r10 - 0xa6) = r1
    2216	79 a1 08 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2f8)
    2217	73 1a 59 ff 00 00 00 00	*(u8 *)(r10 - 0xa7) = r1
    2218	73 2a 58 ff 00 00 00 00	*(u8 *)(r10 - 0xa8) = r2
    2219	79 a1 f8 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x308)
    2220	7b 1a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r1
    2221	79 a1 00 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x300)
    2222	7b 1a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r1
    2223	79 a1 e8 fc 00 00 00 00	r1 = *(u64 *)(r10 - 0x318)
    2224	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    2225	79 a1 38 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2c8)
    2226	7b 1a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r1
    2227	79 a1 10 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2f0)
    2228	7b 1a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r1
    2229	79 a1 48 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b8)
    2230	73 1a 2a ff 00 00 00 00	*(u8 *)(r10 - 0xd6) = r1
    2231	79 a1 50 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2b0)
    2232	73 1a 29 ff 00 00 00 00	*(u8 *)(r10 - 0xd7) = r1
    2233	79 a1 40 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2c0)
    2234	73 1a 28 ff 00 00 00 00	*(u8 *)(r10 - 0xd8) = r1
    2235	79 a1 28 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2d8)
    2236	7b 1a 20 ff 00 00 00 00	*(u64 *)(r10 - 0xe0) = r1
    2237	79 a1 30 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2d0)
    2238	7b 1a 18 ff 00 00 00 00	*(u64 *)(r10 - 0xe8) = r1
    2239	79 a1 58 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a8)
    2240	7b 1a 10 ff 00 00 00 00	*(u64 *)(r10 - 0xf0) = r1
    2241	79 a1 20 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2e0)
    2242	7b 1a 08 ff 00 00 00 00	*(u64 *)(r10 - 0xf8) = r1
    2243	79 a1 60 fd 00 00 00 00	r1 = *(u64 *)(r10 - 0x2a0)
    2244	7b 1a 00 ff 00 00 00 00	*(u64 *)(r10 - 0x100) = r1
    2245	73 4a 8a ff 00 00 00 00	*(u8 *)(r10 - 0x76) = r4
    2246	bf a1 00 00 00 00 00 00	r1 = r10
    2247	07 01 00 00 90 ff ff ff	r1 += -0x70
    2248	bf a2 00 00 00 00 00 00	r2 = r10
    2249	07 02 00 00 b0 fe ff ff	r2 += -0x150
    2250	bf a3 00 00 00 00 00 00	r3 = r10
    2251	07 03 00 00 00 ff ff ff	r3 += -0x100
    2252	b7 04 00 00 03 00 00 00	r4 = 0x3
    2253	85 10 00 00 6e 08 00 00	call 0x86e ; <solana_program::program::invoke>
    2254	79 a1 08 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf8)
    2255	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2256	07 02 00 00 ff ff ff ff	r2 += -0x1
    2257	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2258	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB27_225>
    2259	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2260	07 02 00 00 ff ff ff ff	r2 += -0x1
    2261	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2262	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB27_225>
    2263	b7 02 00 00 20 00 00 00	r2 = 0x20
    2264	b7 03 00 00 08 00 00 00	r3 = 0x8
    2265	85 10 00 00 43 03 00 00	call 0x343 ; <__rust_dealloc>

00000000000046d0 <LBB27_225>
    2266	79 a1 10 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xf0)
    2267	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2268	07 02 00 00 ff ff ff ff	r2 += -0x1
    2269	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2270	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB27_228>
    2271	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2272	07 02 00 00 ff ff ff ff	r2 += -0x1
    2273	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2274	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB27_228>
    2275	b7 02 00 00 28 00 00 00	r2 = 0x28
    2276	b7 03 00 00 08 00 00 00	r3 = 0x8
    2277	85 10 00 00 37 03 00 00	call 0x337 ; <__rust_dealloc>

0000000000004730 <LBB27_228>
    2278	79 a1 38 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc8)
    2279	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2280	07 02 00 00 ff ff ff ff	r2 += -0x1
    2281	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2282	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB27_231>
    2283	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2284	07 02 00 00 ff ff ff ff	r2 += -0x1
    2285	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2286	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB27_231>
    2287	b7 02 00 00 20 00 00 00	r2 = 0x20
    2288	b7 03 00 00 08 00 00 00	r3 = 0x8
    2289	85 10 00 00 2b 03 00 00	call 0x32b ; <__rust_dealloc>

0000000000004790 <LBB27_231>
    2290	79 a1 40 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0xc0)
    2291	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2292	07 02 00 00 ff ff ff ff	r2 += -0x1
    2293	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2294	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB27_234>
    2295	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2296	07 02 00 00 ff ff ff ff	r2 += -0x1
    2297	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2298	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB27_234>
    2299	b7 02 00 00 28 00 00 00	r2 = 0x28
    2300	b7 03 00 00 08 00 00 00	r3 = 0x8
    2301	85 10 00 00 1f 03 00 00	call 0x31f ; <__rust_dealloc>

00000000000047f0 <LBB27_234>
    2302	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    2303	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2304	07 02 00 00 ff ff ff ff	r2 += -0x1
    2305	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2306	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB27_237>
    2307	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2308	07 02 00 00 ff ff ff ff	r2 += -0x1
    2309	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2310	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB27_237>
    2311	b7 02 00 00 20 00 00 00	r2 = 0x20
    2312	b7 03 00 00 08 00 00 00	r3 = 0x8
    2313	85 10 00 00 13 03 00 00	call 0x313 ; <__rust_dealloc>

0000000000004850 <LBB27_237>
    2314	79 a1 70 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x90)
    2315	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    2316	07 02 00 00 ff ff ff ff	r2 += -0x1
    2317	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2318	55 02 07 00 00 00 00 00	if r2 != 0x0 goto +0x7 <LBB27_240>
    2319	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    2320	07 02 00 00 ff ff ff ff	r2 += -0x1
    2321	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    2322	55 02 03 00 00 00 00 00	if r2 != 0x0 goto +0x3 <LBB27_240>
    2323	b7 02 00 00 28 00 00 00	r2 = 0x28
    2324	b7 03 00 00 08 00 00 00	r3 = 0x8
    2325	85 10 00 00 07 03 00 00	call 0x307 ; <__rust_dealloc>

00000000000048b0 <LBB27_240>
    2326	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2327	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB27_244>
    2328	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2329	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB27_244>
    2330	27 02 00 00 22 00 00 00	r2 *= 0x22
    2331	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB27_244>
    2332	b7 03 00 00 01 00 00 00	r3 = 0x1
    2333	85 10 00 00 ff 02 00 00	call 0x2ff ; <__rust_dealloc>

00000000000048f0 <LBB27_244>
    2334	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2335	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB27_247>
    2336	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2337	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB27_247>
    2338	b7 03 00 00 01 00 00 00	r3 = 0x1
    2339	85 10 00 00 f9 02 00 00	call 0x2f9 ; <__rust_dealloc>

0000000000004920 <LBB27_247>
    2340	61 a8 90 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x70)
    2341	55 08 01 00 14 00 00 00	if r8 != 0x14 goto +0x1 <LBB27_248>
    2342	05 00 0a fd 00 00 00 00	goto -0x2f6 <LBB27_115>

0000000000004938 <LBB27_248>
    2343	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    2344	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    2345	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    2346	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    2347	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    2348	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    2349	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    2350	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1

0000000000004978 <LBB27_249>
    2351	61 a1 70 fe 00 00 00 00	r1 = *(u32 *)(r10 - 0x190)
    2352	63 1a fc fd 00 00 00 00	*(u32 *)(r10 - 0x204) = r1
    2353	79 a1 68 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x198)
    2354	7b 1a f4 fd 00 00 00 00	*(u64 *)(r10 - 0x20c) = r1
    2355	79 a1 60 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1a0)
    2356	7b 1a ec fd 00 00 00 00	*(u64 *)(r10 - 0x214) = r1
    2357	79 a1 58 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x1a8)
    2358	7b 1a e4 fd 00 00 00 00	*(u64 *)(r10 - 0x21c) = r1
    2359	63 8a e0 fd 00 00 00 00	*(u32 *)(r10 - 0x220) = r8
    2360	05 00 4a fa 00 00 00 00	goto -0x5b6 <LBB27_9>

00000000000049c8 <LBB27_250>
    2361	79 a3 88 fd 00 00 00 00	r3 = *(u64 *)(r10 - 0x278)

00000000000049d0 <LBB27_251>
    2362	bf a1 00 00 00 00 00 00	r1 = r10
    2363	07 01 00 00 e0 fd ff ff	r1 += -0x220
    2364	85 10 00 00 4e 09 00 00	call 0x94e ; <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    2365	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2366	07 01 00 00 01 00 00 00	r1 += 0x1
    2367	05 00 b6 fc 00 00 00 00	goto -0x34a <LBB27_109>

0000000000004a00 <LBB27_252>
    2368	61 a1 ac ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x54)
    2369	63 1a 70 fe 00 00 00 00	*(u32 *)(r10 - 0x190) = r1
    2370	79 a1 a4 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x5c)
    2371	7b 1a 68 fe 00 00 00 00	*(u64 *)(r10 - 0x198) = r1
    2372	79 a1 9c ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x64)
    2373	7b 1a 60 fe 00 00 00 00	*(u64 *)(r10 - 0x1a0) = r1
    2374	79 a1 94 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x6c)
    2375	7b 1a 58 fe 00 00 00 00	*(u64 *)(r10 - 0x1a8) = r1
    2376	bf a1 00 00 00 00 00 00	r1 = r10
    2377	07 01 00 00 00 ff ff ff	r1 += -0x100
    2378	85 10 00 00 e1 f6 ff ff	call -0x91f ; <core::ptr::drop_in_place<[solana_program::account_info::AccountInfo; 2]>>
    2379	79 a2 b8 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x148)
    2380	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB27_256>
    2381	79 a1 b0 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x150)
    2382	15 01 04 00 00 00 00 00	if r1 == 0x0 goto +0x4 <LBB27_256>
    2383	27 02 00 00 22 00 00 00	r2 *= 0x22
    2384	15 02 02 00 00 00 00 00	if r2 == 0x0 goto +0x2 <LBB27_256>
    2385	b7 03 00 00 01 00 00 00	r3 = 0x1
    2386	85 10 00 00 ca 02 00 00	call 0x2ca ; <__rust_dealloc>

0000000000004a98 <LBB27_256>
    2387	79 a2 d0 fe 00 00 00 00	r2 = *(u64 *)(r10 - 0x130)
    2388	15 02 da ff 00 00 00 00	if r2 == 0x0 goto -0x26 <LBB27_249>
    2389	79 a1 c8 fe 00 00 00 00	r1 = *(u64 *)(r10 - 0x138)
    2390	15 01 d8 ff 00 00 00 00	if r1 == 0x0 goto -0x28 <LBB27_249>
    2391	05 00 44 fe 00 00 00 00	goto -0x1bc <LBB27_169>

0000000000004ac0 <__rg_alloc>
    2392	18 03 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r3 = 0x300000000 ll
    2394	79 33 00 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x0)
    2395	18 04 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r4 = 0x300008000 ll
    2397	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB28_2>
    2398	bf 34 00 00 00 00 00 00	r4 = r3

0000000000004af8 <LBB28_2>
    2399	bf 43 00 00 00 00 00 00	r3 = r4
    2400	1f 13 00 00 00 00 00 00	r3 -= r1
    2401	b7 00 00 00 00 00 00 00	r0 = 0x0
    2402	b7 05 00 00 01 00 00 00	r5 = 0x1
    2403	2d 43 01 00 00 00 00 00	if r3 > r4 goto +0x1 <LBB28_4>
    2404	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000004b28 <LBB28_4>
    2405	b7 01 00 00 00 00 00 00	r1 = 0x0
    2406	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB28_6>
    2407	bf 31 00 00 00 00 00 00	r1 = r3

0000000000004b40 <LBB28_6>
    2408	87 02 00 00 00 00 00 00	r2 = -r2
    2409	5f 21 00 00 00 00 00 00	r1 &= r2
    2410	18 02 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000008 ll
    2412	2d 12 04 00 00 00 00 00	if r2 > r1 goto +0x4 <LBB28_8>
    2413	18 02 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r2 = 0x300000000 ll
    2415	7b 12 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r1
    2416	bf 10 00 00 00 00 00 00	r0 = r1

0000000000004b88 <LBB28_8>
    2417	95 00 00 00 00 00 00 00	exit

0000000000004b90 <__rg_dealloc>
    2418	95 00 00 00 00 00 00 00	exit

0000000000004b98 <__rg_realloc>
    2419	bf 15 00 00 00 00 00 00	r5 = r1
    2420	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2422	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    2423	18 06 00 00 00 80 00 00 00 00 00 00 03 00 00 00	r6 = 0x300008000 ll
    2425	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB30_2>
    2426	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004bd8 <LBB30_2>
    2427	bf 61 00 00 00 00 00 00	r1 = r6
    2428	1f 41 00 00 00 00 00 00	r1 -= r4
    2429	b7 00 00 00 00 00 00 00	r0 = 0x0
    2430	b7 07 00 00 01 00 00 00	r7 = 0x1
    2431	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB30_4>
    2432	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000004c08 <LBB30_4>
    2433	b7 06 00 00 00 00 00 00	r6 = 0x0
    2434	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB30_6>
    2435	bf 16 00 00 00 00 00 00	r6 = r1

0000000000004c20 <LBB30_6>
    2436	87 03 00 00 00 00 00 00	r3 = -r3
    2437	5f 36 00 00 00 00 00 00	r6 &= r3
    2438	18 01 00 00 08 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000008 ll
    2440	2d 61 0a 00 00 00 00 00	if r1 > r6 goto +0xa <LBB30_10>
    2441	18 01 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r1 = 0x300000000 ll
    2443	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    2444	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB30_9>
    2445	bf 24 00 00 00 00 00 00	r4 = r2

0000000000004c70 <LBB30_9>
    2446	bf 61 00 00 00 00 00 00	r1 = r6
    2447	bf 52 00 00 00 00 00 00	r2 = r5
    2448	bf 43 00 00 00 00 00 00	r3 = r4
    2449	85 10 00 00 33 19 00 00	call 0x1933 ; <memcpy>
    2450	bf 60 00 00 00 00 00 00	r0 = r6

0000000000004c98 <LBB30_10>
    2451	95 00 00 00 00 00 00 00	exit

0000000000004ca0 <custom_panic>
    2452	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    2453	bf a1 00 00 00 00 00 00	r1 = r10
    2454	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2455	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2456	b7 01 00 00 00 00 00 00	r1 = 0x0
    2457	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2458	b7 01 00 00 01 00 00 00	r1 = 0x1
    2459	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    2460	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    2461	18 01 00 00 a0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13aa0 ll
    2463	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2464	18 01 00 00 c0 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x60c0 ll
    2466	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2467	bf a1 00 00 00 00 00 00	r1 = r10
    2468	07 01 00 00 a0 ff ff ff	r1 += -0x60
    2469	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2470	bf a1 00 00 00 00 00 00	r1 = r10
    2471	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2472	bf a2 00 00 00 00 00 00	r2 = r10
    2473	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2474	85 10 00 00 67 0c 00 00	call 0xc67 ; <alloc::fmt::format>
    2475	79 a6 b0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x50)
    2476	79 a7 a8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x58)
    2477	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    2478	bf 71 00 00 00 00 00 00	r1 = r7
    2479	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    2480	15 06 05 00 00 00 00 00	if r6 == 0x0 goto +0x5 <LBB32_3>
    2481	15 07 04 00 00 00 00 00	if r7 == 0x0 goto +0x4 <LBB32_3>
    2482	bf 71 00 00 00 00 00 00	r1 = r7
    2483	bf 62 00 00 00 00 00 00	r2 = r6
    2484	b7 03 00 00 01 00 00 00	r3 = 0x1
    2485	85 10 00 00 67 02 00 00	call 0x267 ; <__rust_dealloc>

0000000000004db0 <LBB32_3>
    2486	95 00 00 00 00 00 00 00	exit

0000000000004db8 <<tictactoe::error::TictactoeError as core::fmt::Display>::fmt>
    2487	bf 23 00 00 00 00 00 00	r3 = r2
    2488	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    2489	65 01 0d 00 ae c7 71 00	if r1 s> 0x71c7ae goto +0xd <LBB34_4>
    2490	15 01 25 00 ac c7 71 00	if r1 == 0x71c7ac goto +0x25 <LBB34_9>
    2491	15 01 2f 00 ad c7 71 00	if r1 == 0x71c7ad goto +0x2f <LBB34_10>
    2492	18 01 00 00 80 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x12580 ll
    2494	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2495	b7 01 00 00 00 00 00 00	r1 = 0x0
    2496	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2497	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2498	b7 01 00 00 01 00 00 00	r1 = 0x1
    2499	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2500	18 01 00 00 f0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13af0 ll
    2502	05 00 44 00 00 00 00 00	goto +0x44 <LBB34_13>

0000000000004e38 <LBB34_4>
    2503	65 01 0c 00 b0 c7 71 00	if r1 s> 0x71c7b0 goto +0xc <LBB34_7>
    2504	15 01 2d 00 af c7 71 00	if r1 == 0x71c7af goto +0x2d <LBB34_11>
    2505	18 01 00 00 80 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x12580 ll
    2507	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2508	b7 01 00 00 00 00 00 00	r1 = 0x0
    2509	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2510	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2511	b7 01 00 00 01 00 00 00	r1 = 0x1
    2512	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2513	18 01 00 00 d0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ad0 ll
    2515	05 00 37 00 00 00 00 00	goto +0x37 <LBB34_13>

0000000000004ea0 <LBB34_7>
    2516	15 01 2c 00 b1 c7 71 00	if r1 == 0x71c7b1 goto +0x2c <LBB34_12>
    2517	18 01 00 00 80 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x12580 ll
    2519	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2520	b7 01 00 00 00 00 00 00	r1 = 0x0
    2521	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2522	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2523	b7 01 00 00 01 00 00 00	r1 = 0x1
    2524	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2525	18 01 00 00 b0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ab0 ll
    2527	05 00 2b 00 00 00 00 00	goto +0x2b <LBB34_13>

0000000000004f00 <LBB34_9>
    2528	18 01 00 00 80 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x12580 ll
    2530	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2531	b7 01 00 00 00 00 00 00	r1 = 0x0
    2532	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2533	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2534	b7 01 00 00 01 00 00 00	r1 = 0x1
    2535	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2536	18 01 00 00 10 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b10 ll
    2538	05 00 20 00 00 00 00 00	goto +0x20 <LBB34_13>

0000000000004f58 <LBB34_10>
    2539	18 01 00 00 80 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x12580 ll
    2541	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2542	b7 01 00 00 00 00 00 00	r1 = 0x0
    2543	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2544	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2545	b7 01 00 00 01 00 00 00	r1 = 0x1
    2546	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2547	18 01 00 00 00 3b 01 00 00 00 00 00 00 00 00 00	r1 = 0x13b00 ll
    2549	05 00 15 00 00 00 00 00	goto +0x15 <LBB34_13>

0000000000004fb0 <LBB34_11>
    2550	18 01 00 00 80 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x12580 ll
    2552	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2553	b7 01 00 00 00 00 00 00	r1 = 0x0
    2554	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2555	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2556	b7 01 00 00 01 00 00 00	r1 = 0x1
    2557	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2558	18 01 00 00 e0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ae0 ll
    2560	05 00 0a 00 00 00 00 00	goto +0xa <LBB34_13>

0000000000005008 <LBB34_12>
    2561	18 01 00 00 80 25 01 00 00 00 00 00 00 00 00 00	r1 = 0x12580 ll
    2563	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2564	b7 01 00 00 00 00 00 00	r1 = 0x0
    2565	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2566	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2567	b7 01 00 00 01 00 00 00	r1 = 0x1
    2568	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    2569	18 01 00 00 c0 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ac0 ll

0000000000005058 <LBB34_13>
    2571	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2572	bf a2 00 00 00 00 00 00	r2 = r10
    2573	07 02 00 00 d0 ff ff ff	r2 += -0x30
    2574	bf 31 00 00 00 00 00 00	r1 = r3
    2575	85 10 00 00 e0 10 00 00	call 0x10e0 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    2576	95 00 00 00 00 00 00 00	exit

0000000000005088 <<tictactoe::instructions::TictactoeInstruction as borsh::de::BorshDeserialize>::deserialize>
    2577	bf 16 00 00 00 00 00 00	r6 = r1
    2578	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
    2579	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB35_5>
    2580	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2581	b7 02 00 00 01 00 00 00	r2 = 0x1
    2582	85 10 00 00 04 02 00 00	call 0x204 ; <__rust_alloc>
    2583	bf 07 00 00 00 00 00 00	r7 = r0
    2584	55 07 3c 00 00 00 00 00	if r7 != 0x0 goto +0x3c <LBB35_3>
    2585	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2586	b7 02 00 00 01 00 00 00	r2 = 0x1
    2587	85 10 00 00 ee 0b 00 00	call 0xbee ; <alloc::alloc::handle_alloc_error>
    2588	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000050e8 <LBB35_5>
    2589	07 03 00 00 ff ff ff ff	r3 += -0x1
    2590	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2591	71 41 00 00 00 00 00 00	r1 = *(u8 *)(r4 + 0x0)
    2592	7b 32 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r3
    2593	07 04 00 00 01 00 00 00	r4 += 0x1
    2594	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2595	73 1a 8f ff 00 00 00 00	*(u8 *)(r10 - 0x71) = r1
    2596	15 01 0c 00 00 00 00 00	if r1 == 0x0 goto +0xc <LBB35_12>
    2597	15 01 73 00 01 00 00 00	if r1 == 0x1 goto +0x73 <LBB35_15>
    2598	15 01 01 00 02 00 00 00	if r1 == 0x2 goto +0x1 <LBB35_13>
    2599	05 00 12 00 00 00 00 00	goto +0x12 <LBB35_9>

0000000000005140 <LBB35_13>
    2600	bf a1 00 00 00 00 00 00	r1 = r10
    2601	07 01 00 00 c0 ff ff ff	r1 += -0x40
    2602	85 10 00 00 ec 00 00 00	call 0xec ; <<tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize>
    2603	71 a1 c0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x40)
    2604	15 01 0a 00 01 00 00 00	if r1 == 0x1 goto +0xa <LBB35_17>
    2605	b7 01 00 00 02 00 00 00	r1 = 0x2
    2606	71 a5 c2 ff 00 00 00 00	r5 = *(u8 *)(r10 - 0x3e)
    2607	71 a4 c1 ff 00 00 00 00	r4 = *(u8 *)(r10 - 0x3f)
    2608	05 00 68 00 00 00 00 00	goto +0x68 <LBB35_15>

0000000000005188 <LBB35_12>
    2609	bf a1 00 00 00 00 00 00	r1 = r10
    2610	07 01 00 00 c0 ff ff ff	r1 += -0x40
    2611	85 10 00 00 79 09 00 00	call 0x979 ; <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
    2612	71 a1 c0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x40)
    2613	15 01 01 00 01 00 00 00	if r1 == 0x1 goto +0x1 <LBB35_17>
    2614	05 00 55 00 00 00 00 00	goto +0x55 <LBB35_16>

00000000000051b8 <LBB35_17>
    2615	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    2616	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    2617	05 00 3b 00 00 00 00 00	goto +0x3b <LBB35_18>

00000000000051d0 <LBB35_9>
    2618	bf a1 00 00 00 00 00 00	r1 = r10
    2619	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2620	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2621	b7 01 00 00 00 00 00 00	r1 = 0x0
    2622	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2623	b7 07 00 00 01 00 00 00	r7 = 0x1
    2624	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
    2625	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    2626	18 01 00 00 90 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a90 ll
    2628	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2629	18 01 00 00 18 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6018 ll
    2631	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2632	bf a1 00 00 00 00 00 00	r1 = r10
    2633	07 01 00 00 8f ff ff ff	r1 += -0x71
    2634	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2635	bf a1 00 00 00 00 00 00	r1 = r10
    2636	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2637	bf a2 00 00 00 00 00 00	r2 = r10
    2638	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2639	85 10 00 00 c2 0b 00 00	call 0xbc2 ; <alloc::fmt::format>
    2640	b7 01 00 00 18 00 00 00	r1 = 0x18
    2641	b7 02 00 00 08 00 00 00	r2 = 0x8
    2642	85 10 00 00 c8 01 00 00	call 0x1c8 ; <__rust_alloc>
    2643	55 00 25 00 00 00 00 00	if r0 != 0x0 goto +0x25 <LBB35_11>
    2644	05 00 0f 00 00 00 00 00	goto +0xf <LBB35_4>

00000000000052a8 <LBB35_3>
    2645	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2646	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2647	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2649	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2650	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2652	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2653	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2655	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2656	b7 01 00 00 18 00 00 00	r1 = 0x18
    2657	b7 02 00 00 08 00 00 00	r2 = 0x8
    2658	85 10 00 00 b8 01 00 00	call 0x1b8 ; <__rust_alloc>
    2659	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB35_8>

0000000000005320 <LBB35_4>
    2660	b7 01 00 00 18 00 00 00	r1 = 0x18
    2661	b7 02 00 00 08 00 00 00	r2 = 0x8
    2662	85 10 00 00 a3 0b 00 00	call 0xba3 ; <alloc::alloc::handle_alloc_error>
    2663	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005340 <LBB35_8>
    2664	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2665	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2666	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2667	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2668	bf a1 00 00 00 00 00 00	r1 = r10
    2669	07 01 00 00 68 ff ff ff	r1 += -0x98
    2670	b7 02 00 00 14 00 00 00	r2 = 0x14
    2671	bf 03 00 00 00 00 00 00	r3 = r0
    2672	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
    2674	85 10 00 00 73 0a 00 00	call 0xa73 ; <std::io::error::Error::_new>
    2675	79 a1 68 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x98)
    2676	79 a2 70 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x90)

00000000000053a8 <LBB35_18>
    2677	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2678	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2679	b7 01 00 00 01 00 00 00	r1 = 0x1
    2680	05 00 2e 00 00 00 00 00	goto +0x2e <LBB35_19>

00000000000053c8 <LBB35_11>
    2681	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2682	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2683	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    2684	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2685	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    2686	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    2687	bf a1 00 00 00 00 00 00	r1 = r10
    2688	07 01 00 00 78 ff ff ff	r1 += -0x88
    2689	b7 02 00 00 14 00 00 00	r2 = 0x14
    2690	bf 03 00 00 00 00 00 00	r3 = r0
    2691	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
    2693	85 10 00 00 60 0a 00 00	call 0xa60 ; <std::io::error::Error::_new>
    2694	79 a1 78 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x88)
    2695	79 a2 80 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x80)
    2696	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2697	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2698	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7
    2699	05 00 1c 00 00 00 00 00	goto +0x1c <LBB35_20>

0000000000005460 <LBB35_16>
    2700	61 a1 c3 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x3d)
    2701	63 1a a0 ff 00 00 00 00	*(u32 *)(r10 - 0x60) = r1
    2702	71 a1 c7 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x39)
    2703	73 1a a4 ff 00 00 00 00	*(u8 *)(r10 - 0x5c) = r1
    2704	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    2705	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    2706	71 a1 e0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x20)
    2707	73 1a 98 ff 00 00 00 00	*(u8 *)(r10 - 0x68) = r1
    2708	79 a0 d0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x30)
    2709	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    2710	b7 01 00 00 00 00 00 00	r1 = 0x0
    2711	71 a5 c2 ff 00 00 00 00	r5 = *(u8 *)(r10 - 0x3e)
    2712	71 a4 c1 ff 00 00 00 00	r4 = *(u8 *)(r10 - 0x3f)

00000000000054c8 <LBB35_15>
    2713	71 a2 a4 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x5c)
    2714	73 26 08 00 00 00 00 00	*(u8 *)(r6 + 0x8) = r2
    2715	61 a2 a0 ff 00 00 00 00	r2 = *(u32 *)(r10 - 0x60)
    2716	63 26 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r2
    2717	71 a2 98 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x68)
    2718	79 a7 90 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x70)
    2719	7b 06 11 00 00 00 00 00	*(u64 *)(r6 + 0x11) = r0
    2720	7b 36 09 00 00 00 00 00	*(u64 *)(r6 + 0x9) = r3
    2721	7b 76 19 00 00 00 00 00	*(u64 *)(r6 + 0x19) = r7
    2722	73 26 21 00 00 00 00 00	*(u8 *)(r6 + 0x21) = r2
    2723	73 56 03 00 00 00 00 00	*(u8 *)(r6 + 0x3) = r5
    2724	73 46 02 00 00 00 00 00	*(u8 *)(r6 + 0x2) = r4
    2725	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
    2726	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000005538 <LBB35_19>
    2727	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1

0000000000005540 <LBB35_20>
    2728	95 00 00 00 00 00 00 00	exit

0000000000005548 <<tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize>
    2729	bf 16 00 00 00 00 00 00	r6 = r1
    2730	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    2731	55 01 09 00 00 00 00 00	if r1 != 0x0 goto +0x9 <LBB37_5>
    2732	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2733	b7 02 00 00 01 00 00 00	r2 = 0x1
    2734	85 10 00 00 6c 01 00 00	call 0x16c ; <__rust_alloc>
    2735	bf 07 00 00 00 00 00 00	r7 = r0
    2736	55 07 29 00 00 00 00 00	if r7 != 0x0 goto +0x29 <LBB37_3>
    2737	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2738	b7 02 00 00 01 00 00 00	r2 = 0x1
    2739	85 10 00 00 56 0b 00 00	call 0xb56 ; <alloc::alloc::handle_alloc_error>
    2740	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000055a8 <LBB37_5>
    2741	07 01 00 00 ff ff ff ff	r1 += -0x1
    2742	79 24 00 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x0)
    2743	71 43 00 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x0)
    2744	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    2745	07 04 00 00 01 00 00 00	r4 += 0x1
    2746	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    2747	b7 01 00 00 01 00 00 00	r1 = 0x1
    2748	73 3a a7 ff 00 00 00 00	*(u8 *)(r10 - 0x59) = r3
    2749	15 03 42 00 00 00 00 00	if r3 == 0x0 goto +0x42 <LBB37_13>
    2750	15 03 40 00 01 00 00 00	if r3 == 0x1 goto +0x40 <LBB37_12>
    2751	bf a1 00 00 00 00 00 00	r1 = r10
    2752	07 01 00 00 f0 ff ff ff	r1 += -0x10
    2753	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    2754	b7 01 00 00 00 00 00 00	r1 = 0x0
    2755	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    2756	b7 07 00 00 01 00 00 00	r7 = 0x1
    2757	7b 7a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r7
    2758	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    2759	18 01 00 00 90 3a 01 00 00 00 00 00 00 00 00 00	r1 = 0x13a90 ll
    2761	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    2762	18 01 00 00 18 60 00 00 00 00 00 00 00 00 00 00	r1 = 0x6018 ll
    2764	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    2765	bf a1 00 00 00 00 00 00	r1 = r10
    2766	07 01 00 00 a7 ff ff ff	r1 += -0x59
    2767	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    2768	bf a1 00 00 00 00 00 00	r1 = r10
    2769	07 01 00 00 a8 ff ff ff	r1 += -0x58
    2770	bf a2 00 00 00 00 00 00	r2 = r10
    2771	07 02 00 00 c0 ff ff ff	r2 += -0x40
    2772	85 10 00 00 3d 0b 00 00	call 0xb3d ; <alloc::fmt::format>
    2773	b7 01 00 00 18 00 00 00	r1 = 0x18
    2774	b7 02 00 00 08 00 00 00	r2 = 0x8
    2775	85 10 00 00 43 01 00 00	call 0x143 ; <__rust_alloc>
    2776	55 00 2b 00 00 00 00 00	if r0 != 0x0 goto +0x2b <LBB37_9>
    2777	05 00 0f 00 00 00 00 00	goto +0xf <LBB37_4>

00000000000056d0 <LBB37_3>
    2778	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2779	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2780	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2782	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2783	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2785	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2786	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2788	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2789	b7 01 00 00 18 00 00 00	r1 = 0x18
    2790	b7 02 00 00 08 00 00 00	r2 = 0x8
    2791	85 10 00 00 33 01 00 00	call 0x133 ; <__rust_alloc>
    2792	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB37_10>

0000000000005748 <LBB37_4>
    2793	b7 01 00 00 18 00 00 00	r1 = 0x18
    2794	b7 02 00 00 08 00 00 00	r2 = 0x8
    2795	85 10 00 00 1e 0b 00 00	call 0xb1e ; <alloc::alloc::handle_alloc_error>
    2796	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005768 <LBB37_10>
    2797	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2798	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2799	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2800	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2801	bf a1 00 00 00 00 00 00	r1 = r10
    2802	07 01 00 00 80 ff ff ff	r1 += -0x80
    2803	b7 02 00 00 14 00 00 00	r2 = 0x14
    2804	bf 03 00 00 00 00 00 00	r3 = r0
    2805	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
    2807	85 10 00 00 ee 09 00 00	call 0x9ee ; <std::io::error::Error::_new>
    2808	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    2809	79 a2 88 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x78)
    2810	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2811	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2812	b7 01 00 00 01 00 00 00	r1 = 0x1
    2813	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    2814	05 00 17 00 00 00 00 00	goto +0x17 <LBB37_11>

00000000000057f8 <LBB37_12>
    2815	b7 01 00 00 02 00 00 00	r1 = 0x2

0000000000005800 <LBB37_13>
    2816	b7 02 00 00 00 00 00 00	r2 = 0x0
    2817	73 26 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r2
    2818	73 16 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r1
    2819	05 00 12 00 00 00 00 00	goto +0x12 <LBB37_11>

0000000000005820 <LBB37_9>
    2820	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    2821	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2822	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    2823	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2824	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    2825	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    2826	bf a1 00 00 00 00 00 00	r1 = r10
    2827	07 01 00 00 90 ff ff ff	r1 += -0x70
    2828	b7 02 00 00 14 00 00 00	r2 = 0x14
    2829	bf 03 00 00 00 00 00 00	r3 = r0
    2830	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
    2832	85 10 00 00 d5 09 00 00	call 0x9d5 ; <std::io::error::Error::_new>
    2833	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    2834	79 a2 98 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x68)
    2835	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2836	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2837	73 76 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r7

00000000000058b0 <LBB37_11>
    2838	95 00 00 00 00 00 00 00	exit

00000000000058b8 <<tictactoe::instructions::PlayerMove as borsh::de::BorshDeserialize>::deserialize>
    2839	bf 27 00 00 00 00 00 00	r7 = r2
    2840	bf 16 00 00 00 00 00 00	r6 = r1
    2841	bf a1 00 00 00 00 00 00	r1 = r10
    2842	07 01 00 00 e8 ff ff ff	r1 += -0x18
    2843	85 10 00 00 8d ff ff ff	call -0x73 ; <<tictactoe::instructions::MoveKind as borsh::de::BorshDeserialize>::deserialize>
    2844	71 a1 e8 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x18)
    2845	15 01 0b 00 01 00 00 00	if r1 == 0x1 goto +0xb <LBB38_6>
    2846	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    2847	55 01 0c 00 00 00 00 00	if r1 != 0x0 goto +0xc <LBB38_7>
    2848	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2849	b7 02 00 00 01 00 00 00	r2 = 0x1
    2850	85 10 00 00 f8 00 00 00	call 0xf8 ; <__rust_alloc>
    2851	bf 07 00 00 00 00 00 00	r7 = r0
    2852	55 07 12 00 00 00 00 00	if r7 != 0x0 goto +0x12 <LBB38_4>
    2853	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2854	b7 02 00 00 01 00 00 00	r2 = 0x1
    2855	85 10 00 00 e2 0a 00 00	call 0xae2 ; <alloc::alloc::handle_alloc_error>
    2856	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005948 <LBB38_6>
    2857	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    2858	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    2859	05 00 2b 00 00 00 00 00	goto +0x2b <LBB38_9>

0000000000005960 <LBB38_7>
    2860	71 a2 e9 ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x17)
    2861	07 01 00 00 ff ff ff ff	r1 += -0x1
    2862	79 73 00 00 00 00 00 00	r3 = *(u64 *)(r7 + 0x0)
    2863	71 34 00 00 00 00 00 00	r4 = *(u8 *)(r3 + 0x0)
    2864	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2865	07 03 00 00 01 00 00 00	r3 += 0x1
    2866	7b 37 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r3
    2867	73 46 02 00 00 00 00 00	*(u8 *)(r6 + 0x2) = r4
    2868	73 26 01 00 00 00 00 00	*(u8 *)(r6 + 0x1) = r2
    2869	b7 01 00 00 00 00 00 00	r1 = 0x0
    2870	05 00 23 00 00 00 00 00	goto +0x23 <LBB38_10>

00000000000059b8 <LBB38_4>
    2871	b7 01 00 00 75 74 00 00	r1 = 0x7475
    2872	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    2873	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    2875	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    2876	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    2878	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    2879	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    2881	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    2882	b7 01 00 00 18 00 00 00	r1 = 0x18
    2883	b7 02 00 00 08 00 00 00	r2 = 0x8
    2884	85 10 00 00 d6 00 00 00	call 0xd6 ; <__rust_alloc>
    2885	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB38_8>
    2886	b7 01 00 00 18 00 00 00	r1 = 0x18
    2887	b7 02 00 00 08 00 00 00	r2 = 0x8
    2888	85 10 00 00 c1 0a 00 00	call 0xac1 ; <alloc::alloc::handle_alloc_error>
    2889	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000005a50 <LBB38_8>
    2890	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    2891	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    2892	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    2893	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    2894	bf a1 00 00 00 00 00 00	r1 = r10
    2895	07 01 00 00 d8 ff ff ff	r1 += -0x28
    2896	b7 02 00 00 14 00 00 00	r2 = 0x14
    2897	bf 03 00 00 00 00 00 00	r3 = r0
    2898	18 04 00 00 40 3b 01 00 00 00 00 00 00 00 00 00	r4 = 0x13b40 ll
    2900	85 10 00 00 91 09 00 00	call 0x991 ; <std::io::error::Error::_new>
    2901	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    2902	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)

0000000000005ab8 <LBB38_9>
    2903	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2904	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    2905	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000005ad0 <LBB38_10>
    2906	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    2907	95 00 00 00 00 00 00 00	exit

0000000000005ae0 <std::error::Error::type_id>
    2908	18 00 00 00 ed d3 f7 ec 00 00 00 00 03 94 b8 10	r0 = 0x10b89403ecf7d3ed ll
    2910	95 00 00 00 00 00 00 00	exit

0000000000005af8 <std::error::Error::backtrace>
    2911	b7 00 00 00 00 00 00 00	r0 = 0x0
    2912	95 00 00 00 00 00 00 00	exit

0000000000005b08 <std::error::Error::cause>
    2913	b7 02 00 00 00 00 00 00	r2 = 0x0
    2914	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    2915	95 00 00 00 00 00 00 00	exit

0000000000005b20 <<alloc::string::String as core::fmt::Write>::write_str>
    2916	bf 36 00 00 00 00 00 00	r6 = r3
    2917	bf 28 00 00 00 00 00 00	r8 = r2
    2918	bf 17 00 00 00 00 00 00	r7 = r1
    2919	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    2920	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    2921	1f 91 00 00 00 00 00 00	r1 -= r9
    2922	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB44_2>
    2923	bf 71 00 00 00 00 00 00	r1 = r7
    2924	bf 92 00 00 00 00 00 00	r2 = r9
    2925	bf 63 00 00 00 00 00 00	r3 = r6
    2926	85 10 00 00 ef f4 ff ff	call -0xb11 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    2927	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000005b80 <LBB44_2>
    2928	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    2929	0f 91 00 00 00 00 00 00	r1 += r9
    2930	bf 82 00 00 00 00 00 00	r2 = r8
    2931	bf 63 00 00 00 00 00 00	r3 = r6
    2932	85 10 00 00 50 17 00 00	call 0x1750 ; <memcpy>
    2933	0f 69 00 00 00 00 00 00	r9 += r6
    2934	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    2935	b7 00 00 00 00 00 00 00	r0 = 0x0
    2936	95 00 00 00 00 00 00 00	exit

0000000000005bc8 <<alloc::string::String as core::fmt::Write>::write_char>
    2937	bf 27 00 00 00 00 00 00	r7 = r2
    2938	bf 16 00 00 00 00 00 00	r6 = r1
    2939	bf 71 00 00 00 00 00 00	r1 = r7
    2940	67 01 00 00 20 00 00 00	r1 <<= 0x20
    2941	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2942	25 01 0c 00 7f 00 00 00	if r1 > 0x7f goto +0xc <LBB45_4>
    2943	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    2944	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    2945	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB45_3>
    2946	bf 61 00 00 00 00 00 00	r1 = r6
    2947	85 10 00 00 06 f5 ff ff	call -0xafa ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    2948	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

0000000000005c28 <LBB45_3>
    2949	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    2950	0f 21 00 00 00 00 00 00	r1 += r2
    2951	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    2952	07 02 00 00 01 00 00 00	r2 += 0x1
    2953	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    2954	05 00 42 00 00 00 00 00	goto +0x42 <LBB45_12>

0000000000005c58 <LBB45_4>
    2955	b7 02 00 00 00 00 00 00	r2 = 0x0
    2956	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    2957	b7 02 00 00 00 08 00 00	r2 = 0x800
    2958	2d 12 13 00 00 00 00 00	if r2 > r1 goto +0x13 <LBB45_6>
    2959	bf 71 00 00 00 00 00 00	r1 = r7
    2960	67 01 00 00 20 00 00 00	r1 <<= 0x20
    2961	77 01 00 00 20 00 00 00	r1 >>= 0x20
    2962	b7 02 00 00 00 00 01 00	r2 = 0x10000
    2963	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB45_7>
    2964	05 00 16 00 00 00 00 00	goto +0x16 <LBB45_8>

0000000000005ca8 <LBB45_7>
    2965	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    2966	47 07 00 00 80 00 00 00	r7 |= 0x80
    2967	73 7a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r7
    2968	bf 12 00 00 00 00 00 00	r2 = r1
    2969	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    2970	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    2971	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2972	77 01 00 00 06 00 00 00	r1 >>= 0x6
    2973	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    2974	47 01 00 00 80 00 00 00	r1 |= 0x80
    2975	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    2976	b7 07 00 00 03 00 00 00	r7 = 0x3
    2977	05 00 1a 00 00 00 00 00	goto +0x1a <LBB45_9>

0000000000005d10 <LBB45_6>
    2978	bf 71 00 00 00 00 00 00	r1 = r7
    2979	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    2980	47 01 00 00 80 00 00 00	r1 |= 0x80
    2981	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    2982	77 07 00 00 06 00 00 00	r7 >>= 0x6
    2983	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    2984	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    2985	b7 07 00 00 02 00 00 00	r7 = 0x2
    2986	05 00 11 00 00 00 00 00	goto +0x11 <LBB45_9>

0000000000005d58 <LBB45_8>
    2987	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    2988	47 07 00 00 80 00 00 00	r7 |= 0x80
    2989	73 7a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r7
    2990	bf 12 00 00 00 00 00 00	r2 = r1
    2991	77 02 00 00 12 00 00 00	r2 >>= 0x12
    2992	47 02 00 00 f0 00 00 00	r2 |= 0xf0
    2993	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    2994	bf 12 00 00 00 00 00 00	r2 = r1
    2995	77 02 00 00 06 00 00 00	r2 >>= 0x6
    2996	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    2997	47 02 00 00 80 00 00 00	r2 |= 0x80
    2998	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    2999	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    3000	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    3001	47 01 00 00 80 00 00 00	r1 |= 0x80
    3002	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    3003	b7 07 00 00 04 00 00 00	r7 = 0x4

0000000000005de0 <LBB45_9>
    3004	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    3005	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    3006	1f 81 00 00 00 00 00 00	r1 -= r8
    3007	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB45_11>
    3008	bf 61 00 00 00 00 00 00	r1 = r6
    3009	bf 82 00 00 00 00 00 00	r2 = r8
    3010	bf 73 00 00 00 00 00 00	r3 = r7
    3011	85 10 00 00 9a f4 ff ff	call -0xb66 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3012	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

0000000000005e28 <LBB45_11>
    3013	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    3014	0f 81 00 00 00 00 00 00	r1 += r8
    3015	bf a2 00 00 00 00 00 00	r2 = r10
    3016	07 02 00 00 fc ff ff ff	r2 += -0x4
    3017	bf 73 00 00 00 00 00 00	r3 = r7
    3018	85 10 00 00 fa 16 00 00	call 0x16fa ; <memcpy>
    3019	0f 78 00 00 00 00 00 00	r8 += r7
    3020	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

0000000000005e68 <LBB45_12>
    3021	b7 00 00 00 00 00 00 00	r0 = 0x0
    3022	95 00 00 00 00 00 00 00	exit

0000000000005e78 <core::fmt::Write::write_fmt>
    3023	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3024	bf a6 00 00 00 00 00 00	r6 = r10
    3025	07 06 00 00 d0 ff ff ff	r6 += -0x30
    3026	bf 61 00 00 00 00 00 00	r1 = r6
    3027	b7 03 00 00 30 00 00 00	r3 = 0x30
    3028	85 10 00 00 f0 16 00 00	call 0x16f0 ; <memcpy>
    3029	bf a1 00 00 00 00 00 00	r1 = r10
    3030	07 01 00 00 c8 ff ff ff	r1 += -0x38
    3031	18 02 00 00 10 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13c10 ll
    3033	bf 63 00 00 00 00 00 00	r3 = r6
    3034	85 10 00 00 bd 0c 00 00	call 0xcbd ; <core::fmt::write>
    3035	95 00 00 00 00 00 00 00	exit

0000000000005ee0 <<&mut W as core::fmt::Write>::write_str>
    3036	bf 36 00 00 00 00 00 00	r6 = r3
    3037	bf 28 00 00 00 00 00 00	r8 = r2
    3038	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    3039	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    3040	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    3041	1f 91 00 00 00 00 00 00	r1 -= r9
    3042	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB47_2>
    3043	bf 71 00 00 00 00 00 00	r1 = r7
    3044	bf 92 00 00 00 00 00 00	r2 = r9
    3045	bf 63 00 00 00 00 00 00	r3 = r6
    3046	85 10 00 00 77 f4 ff ff	call -0xb89 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3047	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

0000000000005f40 <LBB47_2>
    3048	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    3049	0f 91 00 00 00 00 00 00	r1 += r9
    3050	bf 82 00 00 00 00 00 00	r2 = r8
    3051	bf 63 00 00 00 00 00 00	r3 = r6
    3052	85 10 00 00 d8 16 00 00	call 0x16d8 ; <memcpy>
    3053	0f 69 00 00 00 00 00 00	r9 += r6
    3054	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    3055	b7 00 00 00 00 00 00 00	r0 = 0x0
    3056	95 00 00 00 00 00 00 00	exit

0000000000005f88 <<&mut W as core::fmt::Write>::write_char>
    3057	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3058	85 10 00 00 86 ff ff ff	call -0x7a ; <<alloc::string::String as core::fmt::Write>::write_char>
    3059	b7 00 00 00 00 00 00 00	r0 = 0x0
    3060	95 00 00 00 00 00 00 00	exit

0000000000005fa8 <<&mut W as core::fmt::Write>::write_fmt>
    3061	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3062	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    3063	bf a6 00 00 00 00 00 00	r6 = r10
    3064	07 06 00 00 d0 ff ff ff	r6 += -0x30
    3065	bf 61 00 00 00 00 00 00	r1 = r6
    3066	b7 03 00 00 30 00 00 00	r3 = 0x30
    3067	85 10 00 00 c9 16 00 00	call 0x16c9 ; <memcpy>
    3068	bf a1 00 00 00 00 00 00	r1 = r10
    3069	07 01 00 00 c8 ff ff ff	r1 += -0x38
    3070	18 02 00 00 10 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13c10 ll
    3072	bf 63 00 00 00 00 00 00	r3 = r6
    3073	85 10 00 00 96 0c 00 00	call 0xc96 ; <core::fmt::write>
    3074	95 00 00 00 00 00 00 00	exit

0000000000006018 <core::fmt::num::<impl core::fmt::Debug for u8>::fmt>
    3075	bf 26 00 00 00 00 00 00	r6 = r2
    3076	bf 17 00 00 00 00 00 00	r7 = r1
    3077	bf 61 00 00 00 00 00 00	r1 = r6
    3078	85 10 00 00 f5 0e 00 00	call 0xef5 ; <core::fmt::Formatter::debug_lower_hex>
    3079	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB50_2>
    3080	bf 61 00 00 00 00 00 00	r1 = r6
    3081	85 10 00 00 f6 0e 00 00	call 0xef6 ; <core::fmt::Formatter::debug_upper_hex>
    3082	55 00 01 00 00 00 00 00	if r0 != 0x0 goto +0x1 <LBB50_5>
    3083	05 00 08 00 00 00 00 00	goto +0x8 <LBB50_4>

0000000000006060 <LBB50_5>
    3084	bf 71 00 00 00 00 00 00	r1 = r7
    3085	bf 62 00 00 00 00 00 00	r2 = r6
    3086	85 10 00 00 9c 12 00 00	call 0x129c ; <core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt>
    3087	05 00 07 00 00 00 00 00	goto +0x7 <LBB50_3>

0000000000006080 <LBB50_2>
    3088	bf 71 00 00 00 00 00 00	r1 = r7
    3089	bf 62 00 00 00 00 00 00	r2 = r6
    3090	85 10 00 00 6a 12 00 00	call 0x126a ; <core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt>
    3091	05 00 03 00 00 00 00 00	goto +0x3 <LBB50_3>

00000000000060a0 <LBB50_4>
    3092	bf 71 00 00 00 00 00 00	r1 = r7
    3093	bf 62 00 00 00 00 00 00	r2 = r6
    3094	85 10 00 00 69 13 00 00	call 0x1369 ; <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>

00000000000060b8 <LBB50_3>
    3095	95 00 00 00 00 00 00 00	exit

00000000000060c0 <<&T as core::fmt::Display>::fmt>
    3096	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3097	85 10 00 00 af 0b 00 00	call 0xbaf ; <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt>
    3098	95 00 00 00 00 00 00 00	exit

00000000000060d8 <__rust_alloc>
    3099	85 10 00 00 3c fd ff ff	call -0x2c4 ; <__rg_alloc>
    3100	95 00 00 00 00 00 00 00	exit

00000000000060e8 <__rust_dealloc>
    3101	85 10 00 00 54 fd ff ff	call -0x2ac ; <__rg_dealloc>
    3102	95 00 00 00 00 00 00 00	exit

00000000000060f8 <__rust_realloc>
    3103	85 10 00 00 53 fd ff ff	call -0x2ad ; <__rg_realloc>
    3104	95 00 00 00 00 00 00 00	exit

0000000000006108 <__rust_alloc_error_handler>
    3105	85 10 00 00 ec 09 00 00	call 0x9ec ; <__rg_oom>
    3106	95 00 00 00 00 00 00 00	exit

0000000000006118 <core::ptr::drop_in_place<&alloc::vec::Vec<(u64,solana_program::stake_history::StakeHistoryEntry)>>>
    3107	95 00 00 00 00 00 00 00	exit

0000000000006120 <core::ptr::drop_in_place<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError>>
    3108	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    3109	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB6_3>
    3110	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3111	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB6_3>
    3112	b7 03 00 00 01 00 00 00	r3 = 0x1
    3113	85 10 00 00 f3 ff ff ff	call -0xd ; <__rust_dealloc>

0000000000006150 <LBB6_3>
    3114	95 00 00 00 00 00 00 00	exit

0000000000006158 <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    3115	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    3116	65 02 08 00 09 00 00 00	if r2 s> 0x9 goto +0x8 <LBB10_3>
    3117	15 02 14 00 03 00 00 00	if r2 == 0x3 goto +0x14 <LBB10_6>
    3118	15 02 01 00 09 00 00 00	if r2 == 0x9 goto +0x1 <LBB10_9>
    3119	05 00 07 00 00 00 00 00	goto +0x7 <LBB10_5>

0000000000006180 <LBB10_9>
    3120	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3121	15 02 05 00 00 00 00 00	if r2 == 0x0 goto +0x5 <LBB10_5>
    3122	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3123	15 01 03 00 00 00 00 00	if r1 == 0x0 goto +0x3 <LBB10_5>
    3124	05 00 11 00 00 00 00 00	goto +0x11 <LBB10_8>

00000000000061a8 <LBB10_3>
    3125	15 02 02 00 0a 00 00 00	if r2 == 0xa goto +0x2 <LBB10_12>
    3126	15 02 06 00 0b 00 00 00	if r2 == 0xb goto +0x6 <LBB10_15>

00000000000061b8 <LBB10_5>
    3127	95 00 00 00 00 00 00 00	exit

00000000000061c0 <LBB10_12>
    3128	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3129	15 02 fd ff 00 00 00 00	if r2 == 0x0 goto -0x3 <LBB10_5>
    3130	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3131	15 01 fb ff 00 00 00 00	if r1 == 0x0 goto -0x5 <LBB10_5>
    3132	05 00 09 00 00 00 00 00	goto +0x9 <LBB10_8>

00000000000061e8 <LBB10_15>
    3133	79 12 38 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x38)
    3134	15 02 f8 ff 00 00 00 00	if r2 == 0x0 goto -0x8 <LBB10_5>
    3135	79 11 30 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x30)
    3136	15 01 f6 ff 00 00 00 00	if r1 == 0x0 goto -0xa <LBB10_5>
    3137	05 00 04 00 00 00 00 00	goto +0x4 <LBB10_8>

0000000000006210 <LBB10_6>
    3138	79 12 50 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x50)
    3139	15 02 f3 ff 00 00 00 00	if r2 == 0x0 goto -0xd <LBB10_5>
    3140	79 11 48 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x48)
    3141	15 01 f1 ff 00 00 00 00	if r1 == 0x0 goto -0xf <LBB10_5>

0000000000006230 <LBB10_8>
    3142	b7 03 00 00 01 00 00 00	r3 = 0x1
    3143	85 10 00 00 d5 ff ff ff	call -0x2b ; <__rust_dealloc>
    3144	05 00 ee ff 00 00 00 00	goto -0x12 <LBB10_5>

0000000000006248 <solana_program::account_info::AccountInfo::lamports>
    3145	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    3146	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    3147	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    3149	2d 23 0b 00 00 00 00 00	if r3 > r2 goto +0xb <LBB14_2>
    3150	bf a3 00 00 00 00 00 00	r3 = r10
    3151	07 03 00 00 f8 ff ff ff	r3 += -0x8
    3152	18 01 00 00 c8 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ac8 ll
    3154	b7 02 00 00 18 00 00 00	r2 = 0x18
    3155	18 04 00 00 20 3d 01 00 00 00 00 00 00 00 00 00	r4 = 0x13d20 ll
    3157	18 05 00 00 40 3c 01 00 00 00 00 00 00 00 00 00	r5 = 0x13c40 ll
    3159	85 10 00 00 15 0c 00 00	call 0xc15 ; <core::result::unwrap_failed>
    3160	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000062c8 <LBB14_2>
    3161	bf 23 00 00 00 00 00 00	r3 = r2
    3162	07 03 00 00 01 00 00 00	r3 += 0x1
    3163	7b 31 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r3
    3164	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    3165	79 30 00 00 00 00 00 00	r0 = *(u64 *)(r3 + 0x0)
    3166	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    3167	95 00 00 00 00 00 00 00	exit

0000000000006300 <solana_program::account_info::AccountInfo::try_borrow_data>
    3168	79 22 10 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x10)
    3169	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    3170	18 04 00 00 fe ff ff ff 00 00 00 00 ff ff ff 7f	r4 = 0x7ffffffffffffffe ll
    3172	2d 43 09 00 00 00 00 00	if r3 > r4 goto +0x9 <LBB23_2>
    3173	bf 24 00 00 00 00 00 00	r4 = r2
    3174	07 04 00 00 10 00 00 00	r4 += 0x10
    3175	07 03 00 00 01 00 00 00	r3 += 0x1
    3176	7b 32 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r3
    3177	7b 41 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r4
    3178	07 02 00 00 18 00 00 00	r2 += 0x18
    3179	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    3180	b7 02 00 00 00 00 00 00	r2 = 0x0
    3181	05 00 03 00 00 00 00 00	goto +0x3 <LBB23_3>

0000000000006370 <LBB23_2>
    3182	b7 02 00 00 0b 00 00 00	r2 = 0xb
    3183	63 21 08 00 00 00 00 00	*(u32 *)(r1 + 0x8) = r2
    3184	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000006388 <LBB23_3>
    3185	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3186	95 00 00 00 00 00 00 00	exit

0000000000006398 <solana_program::account_info::AccountInfo::try_borrow_mut_data>
    3187	79 22 10 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x10)
    3188	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    3189	55 03 09 00 00 00 00 00	if r3 != 0x0 goto +0x9 <LBB27_2>
    3190	bf 23 00 00 00 00 00 00	r3 = r2
    3191	07 03 00 00 10 00 00 00	r3 += 0x10
    3192	b7 04 00 00 ff ff ff ff	r4 = -0x1
    3193	7b 42 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r4
    3194	7b 31 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r3
    3195	07 02 00 00 18 00 00 00	r2 += 0x18
    3196	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    3197	b7 02 00 00 00 00 00 00	r2 = 0x0
    3198	05 00 03 00 00 00 00 00	goto +0x3 <LBB27_3>

00000000000063f8 <LBB27_2>
    3199	b7 02 00 00 0b 00 00 00	r2 = 0xb
    3200	63 21 08 00 00 00 00 00	*(u32 *)(r1 + 0x8) = r2
    3201	b7 02 00 00 01 00 00 00	r2 = 0x1

0000000000006410 <LBB27_3>
    3202	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3203	95 00 00 00 00 00 00 00	exit

0000000000006420 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3204	bf 16 00 00 00 00 00 00	r6 = r1
    3205	bf 24 00 00 00 00 00 00	r4 = r2
    3206	0f 34 00 00 00 00 00 00	r4 += r3
    3207	b7 01 00 00 01 00 00 00	r1 = 0x1
    3208	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB32_2>
    3209	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006450 <LBB32_2>
    3210	57 01 00 00 01 00 00 00	r1 &= 0x1
    3211	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB32_12>
    3212	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    3213	bf 17 00 00 00 00 00 00	r7 = r1
    3214	67 07 00 00 01 00 00 00	r7 <<= 0x1
    3215	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB32_5>
    3216	bf 47 00 00 00 00 00 00	r7 = r4

0000000000006488 <LBB32_5>
    3217	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB32_7>
    3218	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000006498 <LBB32_7>
    3219	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB32_9>
    3220	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    3221	b7 03 00 00 01 00 00 00	r3 = 0x1
    3222	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3223	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3224	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    3225	05 00 02 00 00 00 00 00	goto +0x2 <LBB32_10>

00000000000064d0 <LBB32_9>
    3226	b7 01 00 00 00 00 00 00	r1 = 0x0
    3227	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

00000000000064e0 <LBB32_10>
    3228	bf a1 00 00 00 00 00 00	r1 = r10
    3229	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3230	bf a4 00 00 00 00 00 00	r4 = r10
    3231	07 04 00 00 e8 ff ff ff	r4 += -0x18
    3232	bf 72 00 00 00 00 00 00	r2 = r7
    3233	b7 03 00 00 01 00 00 00	r3 = 0x1
    3234	85 10 00 00 47 00 00 00	call 0x47 ; <alloc::raw_vec::finish_grow>
    3235	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    3236	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB32_14>
    3237	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3238	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB32_13>

0000000000006538 <LBB32_12>
    3239	85 10 00 00 5b 09 00 00	call 0x95b ; <alloc::raw_vec::capacity_overflow>
    3240	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006548 <LBB32_14>
    3241	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3242	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3243	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3244	95 00 00 00 00 00 00 00	exit

0000000000006568 <LBB32_13>
    3245	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3246	85 10 00 00 5b 09 00 00	call 0x95b ; <alloc::alloc::handle_alloc_error>
    3247	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006580 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3248	bf 16 00 00 00 00 00 00	r6 = r1
    3249	bf 21 00 00 00 00 00 00	r1 = r2
    3250	07 01 00 00 01 00 00 00	r1 += 0x1
    3251	b7 03 00 00 01 00 00 00	r3 = 0x1
    3252	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB42_2>
    3253	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000065b0 <LBB42_2>
    3254	57 03 00 00 01 00 00 00	r3 &= 0x1
    3255	55 03 29 00 00 00 00 00	if r3 != 0x0 goto +0x29 <LBB42_16>
    3256	79 69 08 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x8)
    3257	bf 97 00 00 00 00 00 00	r7 = r9
    3258	67 07 00 00 01 00 00 00	r7 <<= 0x1
    3259	2d 17 01 00 00 00 00 00	if r7 > r1 goto +0x1 <LBB42_5>
    3260	bf 17 00 00 00 00 00 00	r7 = r1

00000000000065e8 <LBB42_5>
    3261	25 07 01 00 04 00 00 00	if r7 > 0x4 goto +0x1 <LBB42_7>
    3262	b7 07 00 00 04 00 00 00	r7 = 0x4

00000000000065f8 <LBB42_7>
    3263	bf a1 00 00 00 00 00 00	r1 = r10
    3264	07 01 00 00 c0 ff ff ff	r1 += -0x40
    3265	b7 08 00 00 00 00 00 00	r8 = 0x0
    3266	bf 72 00 00 00 00 00 00	r2 = r7
    3267	b7 03 00 00 00 00 00 00	r3 = 0x0
    3268	b7 04 00 00 30 00 00 00	r4 = 0x30
    3269	b7 05 00 00 00 00 00 00	r5 = 0x0
    3270	85 10 00 00 bd 17 00 00	call 0x17bd ; <__multi3>
    3271	b7 01 00 00 01 00 00 00	r1 = 0x1
    3272	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
    3273	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB42_9>
    3274	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006658 <LBB42_9>
    3275	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB42_11>
    3276	b7 08 00 00 08 00 00 00	r8 = 0x8

0000000000006668 <LBB42_11>
    3277	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    3278	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB42_13>
    3279	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    3280	b7 03 00 00 08 00 00 00	r3 = 0x8
    3281	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3282	27 09 00 00 30 00 00 00	r9 *= 0x30
    3283	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    3284	05 00 01 00 00 00 00 00	goto +0x1 <LBB42_14>

00000000000066a8 <LBB42_13>
    3285	b7 01 00 00 00 00 00 00	r1 = 0x0

00000000000066b0 <LBB42_14>
    3286	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3287	bf a1 00 00 00 00 00 00	r1 = r10
    3288	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3289	bf a4 00 00 00 00 00 00	r4 = r10
    3290	07 04 00 00 e8 ff ff ff	r4 += -0x18
    3291	bf 83 00 00 00 00 00 00	r3 = r8
    3292	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
    3293	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    3294	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB42_18>
    3295	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3296	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB42_17>

0000000000006708 <LBB42_16>
    3297	85 10 00 00 21 09 00 00	call 0x921 ; <alloc::raw_vec::capacity_overflow>
    3298	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006718 <LBB42_18>
    3299	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3300	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3301	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3302	95 00 00 00 00 00 00 00	exit

0000000000006738 <LBB42_17>
    3303	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    3304	85 10 00 00 21 09 00 00	call 0x921 ; <alloc::alloc::handle_alloc_error>
    3305	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006750 <alloc::raw_vec::finish_grow>
    3306	bf 38 00 00 00 00 00 00	r8 = r3
    3307	bf 27 00 00 00 00 00 00	r7 = r2
    3308	bf 16 00 00 00 00 00 00	r6 = r1
    3309	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB45_12>
    3310	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3311	b7 01 00 00 01 00 00 00	r1 = 0x1
    3312	b7 07 00 00 00 00 00 00	r7 = 0x0
    3313	05 00 1d 00 00 00 00 00	goto +0x1d <LBB45_2>

0000000000006790 <LBB45_12>
    3314	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    3315	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB45_7>
    3316	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    3317	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB45_6>
    3318	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB45_9>
    3319	bf 71 00 00 00 00 00 00	r1 = r7
    3320	bf 82 00 00 00 00 00 00	r2 = r8
    3321	85 10 00 00 21 ff ff ff	call -0xdf ; <__rust_alloc>
    3322	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB45_11>
    3323	05 00 11 00 00 00 00 00	goto +0x11 <LBB45_10>

00000000000067e0 <LBB45_6>
    3324	bf 83 00 00 00 00 00 00	r3 = r8
    3325	bf 74 00 00 00 00 00 00	r4 = r7
    3326	85 10 00 00 20 ff ff ff	call -0xe0 ; <__rust_realloc>
    3327	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB45_11>
    3328	05 00 0c 00 00 00 00 00	goto +0xc <LBB45_10>

0000000000006808 <LBB45_7>
    3329	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB45_9>
    3330	bf 71 00 00 00 00 00 00	r1 = r7
    3331	bf 82 00 00 00 00 00 00	r2 = r8
    3332	85 10 00 00 16 ff ff ff	call -0xea ; <__rust_alloc>
    3333	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB45_11>
    3334	05 00 06 00 00 00 00 00	goto +0x6 <LBB45_10>

0000000000006838 <LBB45_11>
    3335	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    3336	b7 01 00 00 01 00 00 00	r1 = 0x1
    3337	bf 87 00 00 00 00 00 00	r7 = r8
    3338	05 00 04 00 00 00 00 00	goto +0x4 <LBB45_2>

0000000000006858 <LBB45_9>
    3339	b7 07 00 00 00 00 00 00	r7 = 0x0
    3340	bf 80 00 00 00 00 00 00	r0 = r8

0000000000006868 <LBB45_10>
    3341	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    3342	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006878 <LBB45_2>
    3343	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    3344	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    3345	95 00 00 00 00 00 00 00	exit

0000000000006890 <solana_program::entrypoint::deserialize>
    3346	bf 16 00 00 00 00 00 00	r6 = r1
    3347	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    3348	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
    3349	bf a1 00 00 00 00 00 00	r1 = r10
    3350	07 01 00 00 d0 ff ff ff	r1 += -0x30
    3351	b7 07 00 00 00 00 00 00	r7 = 0x0
    3352	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    3353	b7 03 00 00 00 00 00 00	r3 = 0x0
    3354	b7 04 00 00 30 00 00 00	r4 = 0x30
    3355	b7 05 00 00 00 00 00 00	r5 = 0x0
    3356	85 10 00 00 67 17 00 00	call 0x1767 ; <__multi3>
    3357	b7 01 00 00 01 00 00 00	r1 = 0x1
    3358	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    3359	55 02 01 00 00 00 00 00	if r2 != 0x0 goto +0x1 <LBB91_2>
    3360	b7 01 00 00 00 00 00 00	r1 = 0x0

0000000000006908 <LBB91_2>
    3361	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB91_4>
    3362	b7 07 00 00 08 00 00 00	r7 = 0x8

0000000000006918 <LBB91_4>
    3363	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB91_6>
    3364	85 10 00 00 de 08 00 00	call 0x8de ; <alloc::raw_vec::capacity_overflow>
    3365	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006930 <LBB91_6>
    3366	79 a8 d0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x30)
    3367	7b 6a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r6
    3368	15 08 0a 00 00 00 00 00	if r8 == 0x0 goto +0xa <LBB91_9>
    3369	bf 81 00 00 00 00 00 00	r1 = r8
    3370	bf 72 00 00 00 00 00 00	r2 = r7
    3371	85 10 00 00 ef fe ff ff	call -0x111 ; <__rust_alloc>
    3372	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3373	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB91_8>
    3374	05 00 06 00 00 00 00 00	goto +0x6 <LBB91_10>

0000000000006978 <LBB91_8>
    3375	bf 81 00 00 00 00 00 00	r1 = r8
    3376	bf 72 00 00 00 00 00 00	r2 = r7
    3377	85 10 00 00 d8 08 00 00	call 0x8d8 ; <alloc::alloc::handle_alloc_error>
    3378	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006998 <LBB91_9>
    3379	bf 70 00 00 00 00 00 00	r0 = r7
    3380	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)

00000000000069a8 <LBB91_10>
    3381	b7 01 00 00 00 00 00 00	r1 = 0x0
    3382	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3383	7b 0a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r0
    3384	b7 09 00 00 08 00 00 00	r9 = 0x8
    3385	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    3386	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    3387	15 01 21 00 00 00 00 00	if r1 == 0x0 goto +0x21 <LBB91_14>
    3388	b7 09 00 00 08 00 00 00	r9 = 0x8
    3389	bf 07 00 00 00 00 00 00	r7 = r0
    3390	b7 02 00 00 00 00 00 00	r2 = 0x0
    3391	b7 04 00 00 00 00 00 00	r4 = 0x0
    3392	05 00 2f 00 00 00 00 00	goto +0x2f <LBB91_15>

0000000000006a08 <LBB91_12>
    3393	bf 21 00 00 00 00 00 00	r1 = r2
    3394	27 01 00 00 30 00 00 00	r1 *= 0x30
    3395	bf 03 00 00 00 00 00 00	r3 = r0
    3396	0f 13 00 00 00 00 00 00	r3 += r1
    3397	73 53 2a 00 00 00 00 00	*(u8 *)(r3 + 0x2a) = r5
    3398	73 63 29 00 00 00 00 00	*(u8 *)(r3 + 0x29) = r6
    3399	73 43 28 00 00 00 00 00	*(u8 *)(r3 + 0x28) = r4
    3400	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3401	7b 13 20 00 00 00 00 00	*(u64 *)(r3 + 0x20) = r1
    3402	7b 73 18 00 00 00 00 00	*(u64 *)(r3 + 0x18) = r7
    3403	7b 83 10 00 00 00 00 00	*(u64 *)(r3 + 0x10) = r8
    3404	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    3405	7b 13 08 00 00 00 00 00	*(u64 *)(r3 + 0x8) = r1
    3406	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    3407	7b 13 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r1
    3408	61 a1 fb ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x5)
    3409	63 13 2b 00 00 00 00 00	*(u32 *)(r3 + 0x2b) = r1
    3410	71 a1 ff ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x1)
    3411	73 13 2f 00 00 00 00 00	*(u8 *)(r3 + 0x2f) = r1
    3412	07 02 00 00 01 00 00 00	r2 += 0x1
    3413	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    3414	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)

0000000000006ab8 <LBB91_13>
    3415	79 a4 c8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x38)
    3416	07 04 00 00 01 00 00 00	r4 += 0x1
    3417	07 09 00 00 08 00 00 00	r9 += 0x8
    3418	bf 07 00 00 00 00 00 00	r7 = r0
    3419	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    3420	2d 41 13 00 00 00 00 00	if r1 > r4 goto +0x13 <LBB91_15>

0000000000006ae8 <LBB91_14>
    3421	bf 31 00 00 00 00 00 00	r1 = r3
    3422	0f 91 00 00 00 00 00 00	r1 += r9
    3423	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    3424	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3425	79 a4 80 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x80)
    3426	7b 24 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r2
    3427	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    3428	7b 24 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r2
    3429	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    3430	7b 24 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r2
    3431	07 09 00 00 08 00 00 00	r9 += 0x8
    3432	bf 32 00 00 00 00 00 00	r2 = r3
    3433	0f 92 00 00 00 00 00 00	r2 += r9
    3434	7b 24 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r2
    3435	7b 14 28 00 00 00 00 00	*(u64 *)(r4 + 0x28) = r1
    3436	0f 91 00 00 00 00 00 00	r1 += r9
    3437	0f 13 00 00 00 00 00 00	r3 += r1
    3438	7b 34 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r3
    3439	95 00 00 00 00 00 00 00	exit

0000000000006b80 <LBB91_15>
    3440	bf 31 00 00 00 00 00 00	r1 = r3
    3441	0f 91 00 00 00 00 00 00	r1 += r9
    3442	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    3443	7b 4a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r4
    3444	15 01 3b 00 ff 00 00 00	if r1 == 0xff goto +0x3b <LBB91_30>
    3445	2d 12 04 00 00 00 00 00	if r2 > r1 goto +0x4 <LBB91_18>
    3446	18 03 00 00 68 3c 01 00 00 00 00 00 00 00 00 00	r3 = 0x13c68 ll
    3448	85 10 00 00 cc 0a 00 00	call 0xacc ; <core::panicking::panic_bounds_check>
    3449	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006bd0 <LBB91_18>
    3450	7b 9a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r9
    3451	27 01 00 00 30 00 00 00	r1 *= 0x30
    3452	bf 74 00 00 00 00 00 00	r4 = r7
    3453	0f 14 00 00 00 00 00 00	r4 += r1
    3454	79 46 08 00 00 00 00 00	r6 = *(u64 *)(r4 + 0x8)
    3455	79 68 00 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x0)
    3456	07 08 00 00 01 00 00 00	r8 += 0x1
    3457	25 08 02 00 01 00 00 00	if r8 > 0x1 goto +0x2 <LBB91_20>

0000000000006c10 <LBB91_19>
    3458	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    3459	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000006c20 <LBB91_20>
    3460	71 45 29 00 00 00 00 00	r5 = *(u8 *)(r4 + 0x29)
    3461	71 43 28 00 00 00 00 00	r3 = *(u8 *)(r4 + 0x28)
    3462	79 49 00 00 00 00 00 00	r9 = *(u64 *)(r4 + 0x0)
    3463	7b 9a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r9
    3464	7b 86 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r8
    3465	79 48 10 00 00 00 00 00	r8 = *(u64 *)(r4 + 0x10)
    3466	79 84 00 00 00 00 00 00	r4 = *(u64 *)(r8 + 0x0)
    3467	07 04 00 00 01 00 00 00	r4 += 0x1
    3468	25 04 01 00 01 00 00 00	if r4 > 0x1 goto +0x1 <LBB91_22>
    3469	05 00 f4 ff 00 00 00 00	goto -0xc <LBB91_19>

0000000000006c70 <LBB91_22>
    3470	7b 6a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r6
    3471	7b 48 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r4
    3472	bf 54 00 00 00 00 00 00	r4 = r5
    3473	b7 05 00 00 01 00 00 00	r5 = 0x1
    3474	b7 06 00 00 01 00 00 00	r6 = 0x1
    3475	55 04 01 00 00 00 00 00	if r4 != 0x0 goto +0x1 <LBB91_24>
    3476	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000006ca8 <LBB91_24>
    3477	b7 04 00 00 01 00 00 00	r4 = 0x1
    3478	79 a9 b8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x48)
    3479	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_26>
    3480	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000006cc8 <LBB91_26>
    3481	0f 17 00 00 00 00 00 00	r7 += r1
    3482	71 71 2a 00 00 00 00 00	r1 = *(u8 *)(r7 + 0x2a)
    3483	55 01 01 00 00 00 00 00	if r1 != 0x0 goto +0x1 <LBB91_28>
    3484	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000006ce8 <LBB91_28>
    3485	79 71 20 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x20)
    3486	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3487	79 77 18 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x18)
    3488	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3489	5d 12 9f ff 00 00 00 00	if r2 != r1 goto -0x61 <LBB91_12>
    3490	bf a1 00 00 00 00 00 00	r1 = r10
    3491	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3492	7b 7a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r7
    3493	bf 57 00 00 00 00 00 00	r7 = r5
    3494	7b 6a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r6
    3495	bf 46 00 00 00 00 00 00	r6 = r4
    3496	85 10 00 00 07 ff ff ff	call -0xf9 ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3497	bf 64 00 00 00 00 00 00	r4 = r6
    3498	79 a6 90 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x70)
    3499	bf 75 00 00 00 00 00 00	r5 = r7
    3500	79 a7 88 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x78)
    3501	79 a0 e0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x20)
    3502	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    3503	05 00 91 ff 00 00 00 00	goto -0x6f <LBB91_12>

0000000000006d80 <LBB91_30>
    3504	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    3505	bf 96 00 00 00 00 00 00	r6 = r9
    3506	0f 36 00 00 00 00 00 00	r6 += r3
    3507	71 61 03 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x3)
    3508	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    3509	71 61 02 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x2)
    3510	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    3511	71 61 01 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x1)
    3512	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    3513	b7 01 00 00 20 00 00 00	r1 = 0x20
    3514	b7 02 00 00 08 00 00 00	r2 = 0x8
    3515	85 10 00 00 5f fe ff ff	call -0x1a1 ; <__rust_alloc>
    3516	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB91_32>
    3517	b7 01 00 00 20 00 00 00	r1 = 0x20
    3518	05 00 54 00 00 00 00 00	goto +0x54 <LBB91_43>

0000000000006df8 <LBB91_32>
    3519	b7 01 00 00 00 00 00 00	r1 = 0x0
    3520	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    3521	b7 01 00 00 01 00 00 00	r1 = 0x1
    3522	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    3523	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    3524	bf 61 00 00 00 00 00 00	r1 = r6
    3525	07 01 00 00 48 00 00 00	r1 += 0x48
    3526	7b 0a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r0
    3527	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    3528	79 67 50 00 00 00 00 00	r7 = *(u64 *)(r6 + 0x50)
    3529	63 76 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r7
    3530	b7 01 00 00 28 00 00 00	r1 = 0x28
    3531	b7 02 00 00 08 00 00 00	r2 = 0x8
    3532	85 10 00 00 4e fe ff ff	call -0x1b2 ; <__rust_alloc>
    3533	bf 08 00 00 00 00 00 00	r8 = r0
    3534	55 08 02 00 00 00 00 00	if r8 != 0x0 goto +0x2 <LBB91_34>
    3535	b7 01 00 00 28 00 00 00	r1 = 0x28
    3536	05 00 42 00 00 00 00 00	goto +0x42 <LBB91_43>

0000000000006e88 <LBB91_34>
    3537	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3538	bf 13 00 00 00 00 00 00	r3 = r1
    3539	b7 04 00 00 00 00 00 00	r4 = 0x0
    3540	b7 01 00 00 01 00 00 00	r1 = 0x1
    3541	b7 05 00 00 01 00 00 00	r5 = 0x1
    3542	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    3543	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_36>
    3544	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000006ec8 <LBB91_36>
    3545	79 a3 a8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x58)
    3546	7b 48 10 00 00 00 00 00	*(u64 *)(r8 + 0x10) = r4
    3547	b7 04 00 00 01 00 00 00	r4 = 0x1
    3548	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_38>
    3549	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000006ef0 <LBB91_38>
    3550	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    3551	b7 00 00 00 01 00 00 00	r0 = 0x1
    3552	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB91_40>
    3553	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000006f10 <LBB91_40>
    3554	7b 0a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r0
    3555	7b 4a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r4
    3556	bf 63 00 00 00 00 00 00	r3 = r6
    3557	07 03 00 00 28 00 00 00	r3 += 0x28
    3558	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    3559	07 06 00 00 08 00 00 00	r6 += 0x8
    3560	7b 18 08 00 00 00 00 00	*(u64 *)(r8 + 0x8) = r1
    3561	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    3562	bf 91 00 00 00 00 00 00	r1 = r9
    3563	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3564	0f 31 00 00 00 00 00 00	r1 += r3
    3565	07 01 00 00 58 00 00 00	r1 += 0x58
    3566	7b 18 18 00 00 00 00 00	*(u64 *)(r8 + 0x18) = r1
    3567	7b 78 20 00 00 00 00 00	*(u64 *)(r8 + 0x20) = r7
    3568	0f 79 00 00 00 00 00 00	r9 += r7
    3569	07 09 00 00 5f 28 00 00	r9 += 0x285f
    3570	57 09 00 00 f8 ff ff ff	r9 &= -0x8
    3571	bf 31 00 00 00 00 00 00	r1 = r3
    3572	0f 91 00 00 00 00 00 00	r1 += r9
    3573	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    3574	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3575	5d 12 07 00 00 00 00 00	if r2 != r1 goto +0x7 <LBB91_42>
    3576	bf a1 00 00 00 00 00 00	r1 = r10
    3577	07 01 00 00 e0 ff ff ff	r1 += -0x20
    3578	7b 5a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r5
    3579	85 10 00 00 b4 fe ff ff	call -0x14c ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    3580	79 a5 b8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x48)
    3581	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    3582	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)

0000000000006ff8 <LBB91_42>
    3583	bf 21 00 00 00 00 00 00	r1 = r2
    3584	27 01 00 00 30 00 00 00	r1 *= 0x30
    3585	79 a0 e0 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x20)
    3586	bf 04 00 00 00 00 00 00	r4 = r0
    3587	0f 14 00 00 00 00 00 00	r4 += r1
    3588	73 54 2a 00 00 00 00 00	*(u8 *)(r4 + 0x2a) = r5
    3589	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    3590	73 14 29 00 00 00 00 00	*(u8 *)(r4 + 0x29) = r1
    3591	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    3592	73 14 28 00 00 00 00 00	*(u8 *)(r4 + 0x28) = r1
    3593	7b 74 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r7
    3594	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    3595	7b 14 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r1
    3596	7b 84 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r8
    3597	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    3598	7b 14 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r1
    3599	7b 64 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r6
    3600	07 02 00 00 01 00 00 00	r2 += 0x1
    3601	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    3602	05 00 44 ff 00 00 00 00	goto -0xbc <LBB91_13>

0000000000007098 <LBB91_43>
    3603	b7 02 00 00 08 00 00 00	r2 = 0x8
    3604	85 10 00 00 f5 07 00 00	call 0x7f5 ; <alloc::alloc::handle_alloc_error>
    3605	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000070b0 <<solana_program::pubkey::Pubkey as core::convert::AsRef<[u8]>>::as_ref>
    3606	b7 03 00 00 20 00 00 00	r3 = 0x20
    3607	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    3608	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    3609	95 00 00 00 00 00 00 00	exit

00000000000070d0 <solana_program::instruction::Instruction::new_with_bincode>
    3610	bf 47 00 00 00 00 00 00	r7 = r4
    3611	bf 39 00 00 00 00 00 00	r9 = r3
    3612	bf 26 00 00 00 00 00 00	r6 = r2
    3613	bf 18 00 00 00 00 00 00	r8 = r1
    3614	85 10 00 00 ee 05 00 00	call 0x5ee ; <bincode::config::DefaultOptions::new>
    3615	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    3616	7b 6a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r6
    3617	65 02 06 00 05 00 00 00	if r2 s> 0x5 goto +0x6 <LBB131_5>
    3618	65 02 0d 00 02 00 00 00	if r2 s> 0x2 goto +0xd <LBB131_12>
    3619	b7 06 00 00 34 00 00 00	r6 = 0x34
    3620	15 02 21 00 00 00 00 00	if r2 == 0x0 goto +0x21 <LBB131_25>
    3621	15 02 0d 00 01 00 00 00	if r2 == 0x1 goto +0xd <LBB131_18>

0000000000007130 <LBB131_4>
    3622	b7 06 00 00 0c 00 00 00	r6 = 0xc
    3623	05 00 1e 00 00 00 00 00	goto +0x1e <LBB131_25>

0000000000007140 <LBB131_5>
    3624	65 02 03 00 08 00 00 00	if r2 s> 0x8 goto +0x3 <LBB131_9>
    3625	15 02 09 00 06 00 00 00	if r2 == 0x6 goto +0x9 <LBB131_18>
    3626	15 02 08 00 07 00 00 00	if r2 == 0x7 goto +0x8 <LBB131_18>
    3627	05 00 fa ff 00 00 00 00	goto -0x6 <LBB131_4>

0000000000007160 <LBB131_9>
    3628	65 02 08 00 0a 00 00 00	if r2 s> 0xa goto +0x8 <LBB131_16>
    3629	15 02 0a 00 09 00 00 00	if r2 == 0x9 goto +0xa <LBB131_19>
    3630	b7 01 00 00 4c 00 00 00	r1 = 0x4c
    3631	05 00 0b 00 00 00 00 00	goto +0xb <LBB131_21>

0000000000007180 <LBB131_12>
    3632	15 02 09 00 03 00 00 00	if r2 == 0x3 goto +0x9 <LBB131_20>
    3633	15 02 04 00 04 00 00 00	if r2 == 0x4 goto +0x4 <LBB131_17>
    3634	05 00 f3 ff 00 00 00 00	goto -0xd <LBB131_4>

0000000000007198 <LBB131_18>
    3635	b7 06 00 00 24 00 00 00	r6 = 0x24
    3636	05 00 11 00 00 00 00 00	goto +0x11 <LBB131_25>

00000000000071a8 <LBB131_16>
    3637	15 02 08 00 0b 00 00 00	if r2 == 0xb goto +0x8 <LBB131_23>

00000000000071b0 <LBB131_17>
    3638	b7 06 00 00 04 00 00 00	r6 = 0x4
    3639	05 00 0e 00 00 00 00 00	goto +0xe <LBB131_25>

00000000000071c0 <LBB131_19>
    3640	b7 01 00 00 54 00 00 00	r1 = 0x54
    3641	05 00 01 00 00 00 00 00	goto +0x1 <LBB131_21>

00000000000071d0 <LBB131_20>
    3642	b7 01 00 00 5c 00 00 00	r1 = 0x5c

00000000000071d8 <LBB131_21>
    3643	bf 93 00 00 00 00 00 00	r3 = r9
    3644	07 03 00 00 58 00 00 00	r3 += 0x58
    3645	05 00 03 00 00 00 00 00	goto +0x3 <LBB131_24>

00000000000071f0 <LBB131_23>
    3646	b7 01 00 00 34 00 00 00	r1 = 0x34
    3647	bf 93 00 00 00 00 00 00	r3 = r9
    3648	07 03 00 00 40 00 00 00	r3 += 0x40

0000000000007208 <LBB131_24>
    3649	79 36 00 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x0)
    3650	0f 16 00 00 00 00 00 00	r6 += r1
    3651	b7 00 00 00 01 00 00 00	r0 = 0x1
    3652	b7 01 00 00 00 00 00 00	r1 = 0x0
    3653	15 06 06 00 00 00 00 00	if r6 == 0x0 goto +0x6 <LBB131_27>

0000000000007230 <LBB131_25>
    3654	bf 61 00 00 00 00 00 00	r1 = r6
    3655	b7 02 00 00 01 00 00 00	r2 = 0x1
    3656	85 10 00 00 d2 fd ff ff	call -0x22e ; <__rust_alloc>
    3657	15 00 ee 02 00 00 00 00	if r0 == 0x0 goto +0x2ee <LBB131_147>
    3658	71 92 00 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x0)
    3659	bf 61 00 00 00 00 00 00	r1 = r6

0000000000007260 <LBB131_27>
    3660	b7 03 00 00 00 00 00 00	r3 = 0x0
    3661	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    3662	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    3663	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    3664	bf a3 00 00 00 00 00 00	r3 = r10
    3665	07 03 00 00 f0 ff ff ff	r3 += -0x10
    3666	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    3667	7b 8a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r8
    3668	7b 3a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r3
    3669	65 02 11 00 05 00 00 00	if r2 s> 0x5 goto +0x11 <LBB131_33>
    3670	65 02 58 00 02 00 00 00	if r2 s> 0x2 goto +0x58 <LBB131_48>
    3671	15 02 78 00 00 00 00 00	if r2 == 0x0 goto +0x78 <LBB131_56>
    3672	15 02 b2 00 01 00 00 00	if r2 == 0x1 goto +0xb2 <LBB131_65>
    3673	b7 02 00 00 00 00 00 00	r2 = 0x0
    3674	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_32>
    3675	05 00 9c 02 00 00 00 00	goto +0x29c <LBB131_140>

00000000000072e0 <LBB131_32>
    3676	0f 20 00 00 00 00 00 00	r0 += r2
    3677	b7 01 00 00 02 00 00 00	r1 = 0x2
    3678	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3679	07 02 00 00 04 00 00 00	r2 += 0x4
    3680	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3681	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3682	1f 21 00 00 00 00 00 00	r1 -= r2
    3683	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3684	b7 03 00 00 08 00 00 00	r3 = 0x8
    3685	2d 13 5d 00 00 00 00 00	if r3 > r1 goto +0x5d <LBB131_52>
    3686	05 00 15 00 00 00 00 00	goto +0x15 <LBB131_38>

0000000000007338 <LBB131_33>
    3687	65 02 19 00 08 00 00 00	if r2 s> 0x8 goto +0x19 <LBB131_39>
    3688	15 02 c5 00 06 00 00 00	if r2 == 0x6 goto +0xc5 <LBB131_71>
    3689	15 02 e7 00 07 00 00 00	if r2 == 0x7 goto +0xe7 <LBB131_77>
    3690	b7 02 00 00 00 00 00 00	r2 = 0x0
    3691	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_37>
    3692	bf a1 00 00 00 00 00 00	r1 = r10
    3693	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3694	b7 02 00 00 00 00 00 00	r2 = 0x0
    3695	b7 03 00 00 04 00 00 00	r3 = 0x4
    3696	85 10 00 00 13 fe ff ff	call -0x1ed ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3697	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3698	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007398 <LBB131_37>
    3699	0f 20 00 00 00 00 00 00	r0 += r2
    3700	b7 01 00 00 08 00 00 00	r1 = 0x8
    3701	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3702	07 02 00 00 04 00 00 00	r2 += 0x4
    3703	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3704	79 a3 f0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x10)
    3705	1f 23 00 00 00 00 00 00	r3 -= r2
    3706	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3707	2d 31 47 00 00 00 00 00	if r1 > r3 goto +0x47 <LBB131_52>

00000000000073e0 <LBB131_38>
    3708	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3709	0f 21 00 00 00 00 00 00	r1 += r2
    3710	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3711	07 02 00 00 08 00 00 00	r2 += 0x8
    3712	05 00 8d 01 00 00 00 00	goto +0x18d <LBB131_109>

0000000000007408 <LBB131_39>
    3713	65 02 47 00 0a 00 00 00	if r2 s> 0xa goto +0x47 <LBB131_53>
    3714	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r9
    3715	15 02 f0 00 09 00 00 00	if r2 == 0x9 goto +0xf0 <LBB131_83>
    3716	b7 08 00 00 00 00 00 00	r8 = 0x0
    3717	b7 06 00 00 00 00 00 00	r6 = 0x0
    3718	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_42>
    3719	05 00 78 02 00 00 00 00	goto +0x278 <LBB131_142>

0000000000007440 <LBB131_42>
    3720	0f 60 00 00 00 00 00 00	r0 += r6
    3721	b7 01 00 00 0a 00 00 00	r1 = 0xa
    3722	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3723	07 09 00 00 01 00 00 00	r9 += 0x1
    3724	07 06 00 00 04 00 00 00	r6 += 0x4
    3725	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3726	05 00 14 00 00 00 00 00	goto +0x14 <LBB131_46>

0000000000007478 <LBB131_43>
    3727	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3728	0f 61 00 00 00 00 00 00	r1 += r6
    3729	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3730	07 06 00 00 01 00 00 00	r6 += 0x1
    3731	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3732	07 08 00 00 01 00 00 00	r8 += 0x1
    3733	55 08 0d 00 20 00 00 00	if r8 != 0x20 goto +0xd <LBB131_46>
    3734	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3735	1f 61 00 00 00 00 00 00	r1 -= r6
    3736	79 a9 c0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x40)
    3737	79 98 58 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x58)
    3738	79 97 48 00 00 00 00 00	r7 = *(u64 *)(r9 + 0x48)
    3739	25 01 0b 01 07 00 00 00	if r1 > 0x7 goto +0x10b <LBB131_91>
    3740	bf a1 00 00 00 00 00 00	r1 = r10
    3741	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3742	bf 62 00 00 00 00 00 00	r2 = r6
    3743	b7 03 00 00 08 00 00 00	r3 = 0x8
    3744	85 10 00 00 e3 fd ff ff	call -0x21d ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3745	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    3746	05 00 04 01 00 00 00 00	goto +0x104 <LBB131_91>

0000000000007518 <LBB131_46>
    3747	bf 91 00 00 00 00 00 00	r1 = r9
    3748	0f 81 00 00 00 00 00 00	r1 += r8
    3749	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3750	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3751	5d 61 e7 ff 00 00 00 00	if r1 != r6 goto -0x19 <LBB131_43>
    3752	bf a1 00 00 00 00 00 00	r1 = r10
    3753	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3754	bf 62 00 00 00 00 00 00	r2 = r6
    3755	b7 03 00 00 01 00 00 00	r3 = 0x1
    3756	85 10 00 00 d7 fd ff ff	call -0x229 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3757	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    3758	05 00 e0 ff 00 00 00 00	goto -0x20 <LBB131_43>

0000000000007578 <LBB131_48>
    3759	15 02 1d 01 03 00 00 00	if r2 == 0x3 goto +0x11d <LBB131_97>
    3760	15 02 50 01 04 00 00 00	if r2 == 0x4 goto +0x150 <LBB131_105>
    3761	b7 02 00 00 00 00 00 00	r2 = 0x0
    3762	79 96 08 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x8)
    3763	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_51>
    3764	bf a1 00 00 00 00 00 00	r1 = r10
    3765	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3766	b7 02 00 00 00 00 00 00	r2 = 0x0
    3767	b7 03 00 00 04 00 00 00	r3 = 0x4
    3768	85 10 00 00 cb fd ff ff	call -0x235 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3769	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3770	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000075d8 <LBB131_51>
    3771	0f 20 00 00 00 00 00 00	r0 += r2
    3772	b7 01 00 00 05 00 00 00	r1 = 0x5
    3773	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3774	07 02 00 00 04 00 00 00	r2 += 0x4
    3775	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3776	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3777	1f 21 00 00 00 00 00 00	r1 -= r2
    3778	25 01 b9 ff 07 00 00 00	if r1 > 0x7 goto -0x47 <LBB131_38>

0000000000007618 <LBB131_52>
    3779	bf a1 00 00 00 00 00 00	r1 = r10
    3780	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3781	b7 03 00 00 08 00 00 00	r3 = 0x8
    3782	85 10 00 00 bd fd ff ff	call -0x243 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3783	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3784	05 00 b3 ff 00 00 00 00	goto -0x4d <LBB131_38>

0000000000007648 <LBB131_53>
    3785	15 02 5e 01 0b 00 00 00	if r2 == 0xb goto +0x15e <LBB131_111>
    3786	b7 02 00 00 00 00 00 00	r2 = 0x0
    3787	25 01 01 00 03 00 00 00	if r1 > 0x3 goto +0x1 <LBB131_55>
    3788	05 00 3b 02 00 00 00 00	goto +0x23b <LBB131_144>

0000000000007668 <LBB131_55>
    3789	0f 20 00 00 00 00 00 00	r0 += r2
    3790	b7 01 00 00 0c 00 00 00	r1 = 0xc
    3791	05 00 3c 01 00 00 00 00	goto +0x13c <LBB131_108>

0000000000007680 <LBB131_56>
    3792	b7 06 00 00 00 00 00 00	r6 = 0x0
    3793	b7 02 00 00 00 00 00 00	r2 = 0x0
    3794	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_58>
    3795	bf a1 00 00 00 00 00 00	r1 = r10
    3796	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3797	b7 02 00 00 00 00 00 00	r2 = 0x0
    3798	b7 03 00 00 04 00 00 00	r3 = 0x4
    3799	85 10 00 00 ac fd ff ff	call -0x254 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3800	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3801	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000076d0 <LBB131_58>
    3802	0f 20 00 00 00 00 00 00	r0 += r2
    3803	63 60 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r6
    3804	07 02 00 00 04 00 00 00	r2 += 0x4
    3805	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3806	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3807	1f 21 00 00 00 00 00 00	r1 -= r2
    3808	79 96 28 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x28)
    3809	b7 03 00 00 08 00 00 00	r3 = 0x8
    3810	2d 13 2d 02 00 00 00 00	if r3 > r1 goto +0x22d <LBB131_145>

0000000000007718 <LBB131_59>
    3811	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3812	0f 21 00 00 00 00 00 00	r1 += r2
    3813	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3814	07 02 00 00 08 00 00 00	r2 += 0x8
    3815	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3816	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3817	1f 21 00 00 00 00 00 00	r1 -= r2
    3818	79 96 30 00 00 00 00 00	r6 = *(u64 *)(r9 + 0x30)
    3819	25 01 05 00 07 00 00 00	if r1 > 0x7 goto +0x5 <LBB131_61>
    3820	bf a1 00 00 00 00 00 00	r1 = r10
    3821	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3822	b7 03 00 00 08 00 00 00	r3 = 0x8
    3823	85 10 00 00 94 fd ff ff	call -0x26c ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3824	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007788 <LBB131_61>
    3825	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3826	0f 21 00 00 00 00 00 00	r1 += r2
    3827	7b 61 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r6
    3828	b7 06 00 00 00 00 00 00	r6 = 0x0
    3829	07 09 00 00 01 00 00 00	r9 += 0x1
    3830	07 02 00 00 08 00 00 00	r2 += 0x8
    3831	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3832	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_63>

00000000000077c8 <LBB131_62>
    3833	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3834	0f 21 00 00 00 00 00 00	r1 += r2
    3835	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3836	07 02 00 00 01 00 00 00	r2 += 0x1
    3837	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3838	07 06 00 00 01 00 00 00	r6 += 0x1
    3839	15 06 0f 01 20 00 00 00	if r6 == 0x20 goto +0x10f <LBB131_110>

0000000000007800 <LBB131_63>
    3840	bf 91 00 00 00 00 00 00	r1 = r9
    3841	0f 61 00 00 00 00 00 00	r1 += r6
    3842	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3843	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3844	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_62>
    3845	bf a1 00 00 00 00 00 00	r1 = r10
    3846	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3847	b7 03 00 00 01 00 00 00	r3 = 0x1
    3848	85 10 00 00 7b fd ff ff	call -0x285 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3849	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3850	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_62>

0000000000007858 <LBB131_65>
    3851	b7 06 00 00 00 00 00 00	r6 = 0x0
    3852	b7 02 00 00 00 00 00 00	r2 = 0x0
    3853	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_67>
    3854	bf a1 00 00 00 00 00 00	r1 = r10
    3855	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3856	b7 02 00 00 00 00 00 00	r2 = 0x0
    3857	b7 03 00 00 04 00 00 00	r3 = 0x4
    3858	85 10 00 00 71 fd ff ff	call -0x28f ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3859	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3860	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000078a8 <LBB131_67>
    3861	0f 20 00 00 00 00 00 00	r0 += r2
    3862	b7 01 00 00 01 00 00 00	r1 = 0x1
    3863	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3864	07 09 00 00 01 00 00 00	r9 += 0x1
    3865	07 02 00 00 04 00 00 00	r2 += 0x4
    3866	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3867	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_69>

00000000000078e0 <LBB131_68>
    3868	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3869	0f 21 00 00 00 00 00 00	r1 += r2
    3870	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3871	07 02 00 00 01 00 00 00	r2 += 0x1
    3872	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3873	07 06 00 00 01 00 00 00	r6 += 0x1
    3874	15 06 ec 00 20 00 00 00	if r6 == 0x20 goto +0xec <LBB131_110>

0000000000007918 <LBB131_69>
    3875	bf 91 00 00 00 00 00 00	r1 = r9
    3876	0f 61 00 00 00 00 00 00	r1 += r6
    3877	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3878	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3879	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_68>
    3880	bf a1 00 00 00 00 00 00	r1 = r10
    3881	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3882	b7 03 00 00 01 00 00 00	r3 = 0x1
    3883	85 10 00 00 58 fd ff ff	call -0x2a8 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3884	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3885	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_68>

0000000000007970 <LBB131_71>
    3886	b7 06 00 00 00 00 00 00	r6 = 0x0
    3887	b7 02 00 00 00 00 00 00	r2 = 0x0
    3888	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_73>
    3889	bf a1 00 00 00 00 00 00	r1 = r10
    3890	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3891	b7 02 00 00 00 00 00 00	r2 = 0x0
    3892	b7 03 00 00 04 00 00 00	r3 = 0x4
    3893	85 10 00 00 4e fd ff ff	call -0x2b2 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3894	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3895	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

00000000000079c0 <LBB131_73>
    3896	0f 20 00 00 00 00 00 00	r0 += r2
    3897	b7 01 00 00 06 00 00 00	r1 = 0x6
    3898	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3899	07 09 00 00 01 00 00 00	r9 += 0x1
    3900	07 02 00 00 04 00 00 00	r2 += 0x4
    3901	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3902	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_75>

00000000000079f8 <LBB131_74>
    3903	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3904	0f 21 00 00 00 00 00 00	r1 += r2
    3905	73 81 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r8
    3906	07 02 00 00 01 00 00 00	r2 += 0x1
    3907	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3908	07 06 00 00 01 00 00 00	r6 += 0x1
    3909	15 06 c9 00 20 00 00 00	if r6 == 0x20 goto +0xc9 <LBB131_110>

0000000000007a30 <LBB131_75>
    3910	bf 91 00 00 00 00 00 00	r1 = r9
    3911	0f 61 00 00 00 00 00 00	r1 += r6
    3912	71 18 00 00 00 00 00 00	r8 = *(u8 *)(r1 + 0x0)
    3913	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3914	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_74>
    3915	bf a1 00 00 00 00 00 00	r1 = r10
    3916	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3917	b7 03 00 00 01 00 00 00	r3 = 0x1
    3918	85 10 00 00 35 fd ff ff	call -0x2cb ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3919	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3920	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_74>

0000000000007a88 <LBB131_77>
    3921	b7 06 00 00 00 00 00 00	r6 = 0x0
    3922	b7 02 00 00 00 00 00 00	r2 = 0x0
    3923	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_79>
    3924	bf a1 00 00 00 00 00 00	r1 = r10
    3925	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3926	b7 02 00 00 00 00 00 00	r2 = 0x0
    3927	b7 03 00 00 04 00 00 00	r3 = 0x4
    3928	85 10 00 00 2b fd ff ff	call -0x2d5 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3929	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3930	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000007ad8 <LBB131_79>
    3931	0f 20 00 00 00 00 00 00	r0 += r2
    3932	b7 01 00 00 07 00 00 00	r1 = 0x7
    3933	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3934	07 09 00 00 01 00 00 00	r9 += 0x1
    3935	07 02 00 00 04 00 00 00	r2 += 0x4
    3936	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3937	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_81>

0000000000007b10 <LBB131_80>
    3938	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3939	0f 21 00 00 00 00 00 00	r1 += r2
    3940	73 81 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r8
    3941	07 02 00 00 01 00 00 00	r2 += 0x1
    3942	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    3943	07 06 00 00 01 00 00 00	r6 += 0x1
    3944	15 06 a6 00 20 00 00 00	if r6 == 0x20 goto +0xa6 <LBB131_110>

0000000000007b48 <LBB131_81>
    3945	bf 91 00 00 00 00 00 00	r1 = r9
    3946	0f 61 00 00 00 00 00 00	r1 += r6
    3947	71 18 00 00 00 00 00 00	r8 = *(u8 *)(r1 + 0x0)
    3948	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3949	5d 21 f4 ff 00 00 00 00	if r1 != r2 goto -0xc <LBB131_80>
    3950	bf a1 00 00 00 00 00 00	r1 = r10
    3951	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3952	b7 03 00 00 01 00 00 00	r3 = 0x1
    3953	85 10 00 00 12 fd ff ff	call -0x2ee ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3954	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    3955	05 00 ee ff 00 00 00 00	goto -0x12 <LBB131_80>

0000000000007ba0 <LBB131_83>
    3956	b7 08 00 00 00 00 00 00	r8 = 0x0
    3957	b7 06 00 00 00 00 00 00	r6 = 0x0
    3958	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_85>
    3959	bf a1 00 00 00 00 00 00	r1 = r10
    3960	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3961	b7 02 00 00 00 00 00 00	r2 = 0x0
    3962	b7 03 00 00 04 00 00 00	r3 = 0x4
    3963	85 10 00 00 08 fd ff ff	call -0x2f8 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3964	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    3965	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000007bf0 <LBB131_85>
    3966	0f 60 00 00 00 00 00 00	r0 += r6
    3967	b7 01 00 00 09 00 00 00	r1 = 0x9
    3968	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    3969	07 09 00 00 01 00 00 00	r9 += 0x1
    3970	07 06 00 00 04 00 00 00	r6 += 0x4
    3971	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3972	05 00 16 00 00 00 00 00	goto +0x16 <LBB131_89>

0000000000007c28 <LBB131_86>
    3973	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    3974	0f 61 00 00 00 00 00 00	r1 += r6
    3975	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    3976	07 06 00 00 01 00 00 00	r6 += 0x1
    3977	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    3978	07 08 00 00 01 00 00 00	r8 += 0x1
    3979	55 08 0f 00 20 00 00 00	if r8 != 0x20 goto +0xf <LBB131_89>
    3980	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3981	1f 61 00 00 00 00 00 00	r1 -= r6
    3982	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    3983	79 27 58 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x58)
    3984	79 22 48 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x48)
    3985	25 01 e5 00 07 00 00 00	if r1 > 0x7 goto +0xe5 <LBB131_122>
    3986	bf a1 00 00 00 00 00 00	r1 = r10
    3987	07 01 00 00 e8 ff ff ff	r1 += -0x18
    3988	bf 28 00 00 00 00 00 00	r8 = r2
    3989	bf 62 00 00 00 00 00 00	r2 = r6
    3990	b7 03 00 00 08 00 00 00	r3 = 0x8
    3991	85 10 00 00 ec fc ff ff	call -0x314 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    3992	bf 82 00 00 00 00 00 00	r2 = r8
    3993	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    3994	05 00 dc 00 00 00 00 00	goto +0xdc <LBB131_122>

0000000000007cd8 <LBB131_89>
    3995	bf 91 00 00 00 00 00 00	r1 = r9
    3996	0f 81 00 00 00 00 00 00	r1 += r8
    3997	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    3998	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    3999	5d 61 e5 ff 00 00 00 00	if r1 != r6 goto -0x1b <LBB131_86>
    4000	bf a1 00 00 00 00 00 00	r1 = r10
    4001	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4002	bf 62 00 00 00 00 00 00	r2 = r6
    4003	b7 03 00 00 01 00 00 00	r3 = 0x1
    4004	85 10 00 00 df fc ff ff	call -0x321 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4005	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4006	05 00 de ff 00 00 00 00	goto -0x22 <LBB131_86>

0000000000007d38 <LBB131_91>
    4007	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4008	0f 61 00 00 00 00 00 00	r1 += r6
    4009	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4010	07 06 00 00 08 00 00 00	r6 += 0x8
    4011	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4012	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4013	1f 61 00 00 00 00 00 00	r1 -= r6
    4014	3d 81 01 00 00 00 00 00	if r1 >= r8 goto +0x1 <LBB131_93>
    4015	05 00 66 01 00 00 00 00	goto +0x166 <LBB131_92>

0000000000007d80 <LBB131_93>
    4016	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4017	0f 61 00 00 00 00 00 00	r1 += r6
    4018	bf 72 00 00 00 00 00 00	r2 = r7
    4019	bf 83 00 00 00 00 00 00	r3 = r8
    4020	85 10 00 00 10 13 00 00	call 0x1310 ; <memcpy>
    4021	0f 86 00 00 00 00 00 00	r6 += r8
    4022	b7 08 00 00 00 00 00 00	r8 = 0x0
    4023	07 09 00 00 21 00 00 00	r9 += 0x21
    4024	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4025	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_95>

0000000000007dd0 <LBB131_94>
    4026	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4027	0f 61 00 00 00 00 00 00	r1 += r6
    4028	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4029	07 06 00 00 01 00 00 00	r6 += 0x1
    4030	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4031	07 08 00 00 01 00 00 00	r8 += 0x1
    4032	15 08 4e 00 20 00 00 00	if r8 == 0x20 goto +0x4e <LBB131_110>

0000000000007e08 <LBB131_95>
    4033	bf 91 00 00 00 00 00 00	r1 = r9
    4034	0f 81 00 00 00 00 00 00	r1 += r8
    4035	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4036	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4037	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_94>
    4038	bf a1 00 00 00 00 00 00	r1 = r10
    4039	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4040	bf 62 00 00 00 00 00 00	r2 = r6
    4041	b7 03 00 00 01 00 00 00	r3 = 0x1
    4042	85 10 00 00 b9 fc ff ff	call -0x347 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4043	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4044	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_94>

0000000000007e68 <LBB131_97>
    4045	b7 08 00 00 00 00 00 00	r8 = 0x0
    4046	b7 06 00 00 00 00 00 00	r6 = 0x0
    4047	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_99>
    4048	bf a1 00 00 00 00 00 00	r1 = r10
    4049	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4050	b7 02 00 00 00 00 00 00	r2 = 0x0
    4051	b7 03 00 00 04 00 00 00	r3 = 0x4
    4052	85 10 00 00 af fc ff ff	call -0x351 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4053	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4054	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000007eb8 <LBB131_99>
    4055	0f 60 00 00 00 00 00 00	r0 += r6
    4056	b7 01 00 00 03 00 00 00	r1 = 0x3
    4057	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4058	7b 9a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r9
    4059	07 09 00 00 01 00 00 00	r9 += 0x1
    4060	07 06 00 00 04 00 00 00	r6 += 0x4
    4061	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4062	05 00 16 00 00 00 00 00	goto +0x16 <LBB131_103>

0000000000007ef8 <LBB131_100>
    4063	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4064	0f 61 00 00 00 00 00 00	r1 += r6
    4065	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4066	07 06 00 00 01 00 00 00	r6 += 0x1
    4067	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4068	07 08 00 00 01 00 00 00	r8 += 0x1
    4069	55 08 0f 00 20 00 00 00	if r8 != 0x20 goto +0xf <LBB131_103>
    4070	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4071	1f 61 00 00 00 00 00 00	r1 -= r6
    4072	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    4073	79 27 58 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x58)
    4074	79 22 48 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x48)
    4075	25 01 c4 00 07 00 00 00	if r1 > 0x7 goto +0xc4 <LBB131_130>
    4076	bf a1 00 00 00 00 00 00	r1 = r10
    4077	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4078	bf 28 00 00 00 00 00 00	r8 = r2
    4079	bf 62 00 00 00 00 00 00	r2 = r6
    4080	b7 03 00 00 08 00 00 00	r3 = 0x8
    4081	85 10 00 00 92 fc ff ff	call -0x36e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4082	bf 82 00 00 00 00 00 00	r2 = r8
    4083	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4084	05 00 bb 00 00 00 00 00	goto +0xbb <LBB131_130>

0000000000007fa8 <LBB131_103>
    4085	bf 91 00 00 00 00 00 00	r1 = r9
    4086	0f 81 00 00 00 00 00 00	r1 += r8
    4087	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4088	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4089	5d 61 e5 ff 00 00 00 00	if r1 != r6 goto -0x1b <LBB131_100>
    4090	bf a1 00 00 00 00 00 00	r1 = r10
    4091	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4092	bf 62 00 00 00 00 00 00	r2 = r6
    4093	b7 03 00 00 01 00 00 00	r3 = 0x1
    4094	85 10 00 00 85 fc ff ff	call -0x37b ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4095	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4096	05 00 de ff 00 00 00 00	goto -0x22 <LBB131_100>

0000000000008008 <LBB131_105>
    4097	b7 02 00 00 00 00 00 00	r2 = 0x0
    4098	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_107>
    4099	bf a1 00 00 00 00 00 00	r1 = r10
    4100	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4101	b7 02 00 00 00 00 00 00	r2 = 0x0
    4102	b7 03 00 00 04 00 00 00	r3 = 0x4
    4103	85 10 00 00 7c fc ff ff	call -0x384 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4104	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4105	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)

0000000000008050 <LBB131_107>
    4106	0f 20 00 00 00 00 00 00	r0 += r2
    4107	b7 01 00 00 04 00 00 00	r1 = 0x4

0000000000008060 <LBB131_108>
    4108	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4109	07 02 00 00 04 00 00 00	r2 += 0x4

0000000000008070 <LBB131_109>
    4110	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2

0000000000008078 <LBB131_110>
    4111	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    4112	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4113	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    4114	79 a4 d0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x30)
    4115	7b 14 28 00 00 00 00 00	*(u64 *)(r4 + 0x28) = r1
    4116	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4117	7b 14 20 00 00 00 00 00	*(u64 *)(r4 + 0x20) = r1
    4118	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    4119	79 31 18 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x18)
    4120	7b 14 48 00 00 00 00 00	*(u64 *)(r4 + 0x48) = r1
    4121	79 31 10 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x10)
    4122	7b 14 40 00 00 00 00 00	*(u64 *)(r4 + 0x40) = r1
    4123	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4124	7b 14 38 00 00 00 00 00	*(u64 *)(r4 + 0x38) = r1
    4125	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4126	7b 14 30 00 00 00 00 00	*(u64 *)(r4 + 0x30) = r1
    4127	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    4128	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    4129	7b 14 00 00 00 00 00 00	*(u64 *)(r4 + 0x0) = r1
    4130	79 31 08 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x8)
    4131	7b 14 08 00 00 00 00 00	*(u64 *)(r4 + 0x8) = r1
    4132	79 31 10 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x10)
    4133	7b 14 10 00 00 00 00 00	*(u64 *)(r4 + 0x10) = r1
    4134	7b 24 18 00 00 00 00 00	*(u64 *)(r4 + 0x18) = r2
    4135	95 00 00 00 00 00 00 00	exit

0000000000008140 <LBB131_111>
    4136	b7 06 00 00 00 00 00 00	r6 = 0x0
    4137	25 01 07 00 03 00 00 00	if r1 > 0x3 goto +0x7 <LBB131_113>
    4138	bf a1 00 00 00 00 00 00	r1 = r10
    4139	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4140	b7 02 00 00 00 00 00 00	r2 = 0x0
    4141	b7 03 00 00 04 00 00 00	r3 = 0x4
    4142	85 10 00 00 55 fc ff ff	call -0x3ab ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4143	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4144	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008188 <LBB131_113>
    4145	0f 60 00 00 00 00 00 00	r0 += r6
    4146	b7 01 00 00 0b 00 00 00	r1 = 0xb
    4147	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4148	07 06 00 00 04 00 00 00	r6 += 0x4
    4149	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4150	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4151	1f 61 00 00 00 00 00 00	r1 -= r6
    4152	79 98 28 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x28)
    4153	b7 02 00 00 08 00 00 00	r2 = 0x8
    4154	2d 12 e2 00 00 00 00 00	if r2 > r1 goto +0xe2 <LBB131_146>

00000000000081d8 <LBB131_114>
    4155	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4156	0f 61 00 00 00 00 00 00	r1 += r6
    4157	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4158	07 06 00 00 08 00 00 00	r6 += 0x8
    4159	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4160	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4161	1f 61 00 00 00 00 00 00	r1 -= r6
    4162	79 98 40 00 00 00 00 00	r8 = *(u64 *)(r9 + 0x40)
    4163	79 97 30 00 00 00 00 00	r7 = *(u64 *)(r9 + 0x30)
    4164	25 01 06 00 07 00 00 00	if r1 > 0x7 goto +0x6 <LBB131_116>
    4165	bf a1 00 00 00 00 00 00	r1 = r10
    4166	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4167	bf 62 00 00 00 00 00 00	r2 = r6
    4168	b7 03 00 00 08 00 00 00	r3 = 0x8
    4169	85 10 00 00 3a fc ff ff	call -0x3c6 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4170	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008258 <LBB131_116>
    4171	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4172	0f 61 00 00 00 00 00 00	r1 += r6
    4173	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4174	07 06 00 00 08 00 00 00	r6 += 0x8
    4175	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4176	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4177	1f 61 00 00 00 00 00 00	r1 -= r6
    4178	3d 81 06 00 00 00 00 00	if r1 >= r8 goto +0x6 <LBB131_118>
    4179	bf a1 00 00 00 00 00 00	r1 = r10
    4180	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4181	bf 62 00 00 00 00 00 00	r2 = r6
    4182	bf 83 00 00 00 00 00 00	r3 = r8
    4183	85 10 00 00 2c fc ff ff	call -0x3d4 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4184	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000082c8 <LBB131_118>
    4185	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4186	0f 61 00 00 00 00 00 00	r1 += r6
    4187	bf 72 00 00 00 00 00 00	r2 = r7
    4188	bf 83 00 00 00 00 00 00	r3 = r8
    4189	85 10 00 00 67 12 00 00	call 0x1267 ; <memcpy>
    4190	0f 86 00 00 00 00 00 00	r6 += r8
    4191	b7 08 00 00 00 00 00 00	r8 = 0x0
    4192	07 09 00 00 01 00 00 00	r9 += 0x1
    4193	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4194	05 00 08 00 00 00 00 00	goto +0x8 <LBB131_120>

0000000000008318 <LBB131_119>
    4195	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4196	0f 61 00 00 00 00 00 00	r1 += r6
    4197	73 91 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r9
    4198	07 06 00 00 01 00 00 00	r6 += 0x1
    4199	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4200	07 08 00 00 01 00 00 00	r8 += 0x1
    4201	bf 79 00 00 00 00 00 00	r9 = r7
    4202	15 08 a4 ff 20 00 00 00	if r8 == 0x20 goto -0x5c <LBB131_110>

0000000000008358 <LBB131_120>
    4203	bf 97 00 00 00 00 00 00	r7 = r9
    4204	0f 89 00 00 00 00 00 00	r9 += r8
    4205	71 99 00 00 00 00 00 00	r9 = *(u8 *)(r9 + 0x0)
    4206	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4207	5d 61 f3 ff 00 00 00 00	if r1 != r6 goto -0xd <LBB131_119>
    4208	bf a1 00 00 00 00 00 00	r1 = r10
    4209	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4210	bf 62 00 00 00 00 00 00	r2 = r6
    4211	b7 03 00 00 01 00 00 00	r3 = 0x1
    4212	85 10 00 00 0f fc ff ff	call -0x3f1 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4213	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4214	05 00 ec ff 00 00 00 00	goto -0x14 <LBB131_119>

00000000000083b8 <LBB131_122>
    4215	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4216	0f 61 00 00 00 00 00 00	r1 += r6
    4217	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7
    4218	07 06 00 00 08 00 00 00	r6 += 0x8
    4219	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4220	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4221	bf 91 00 00 00 00 00 00	r1 = r9
    4222	1f 61 00 00 00 00 00 00	r1 -= r6
    4223	3d 71 01 00 00 00 00 00	if r1 >= r7 goto +0x1 <LBB131_124>
    4224	05 00 a3 00 00 00 00 00	goto +0xa3 <LBB131_123>

0000000000008408 <LBB131_124>
    4225	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4226	bf 81 00 00 00 00 00 00	r1 = r8
    4227	0f 61 00 00 00 00 00 00	r1 += r6
    4228	bf 73 00 00 00 00 00 00	r3 = r7
    4229	85 10 00 00 3f 12 00 00	call 0x123f ; <memcpy>
    4230	0f 76 00 00 00 00 00 00	r6 += r7
    4231	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4232	1f 69 00 00 00 00 00 00	r9 -= r6
    4233	79 a7 c0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x40)
    4234	79 71 60 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x60)
    4235	25 09 09 00 07 00 00 00	if r9 > 0x7 goto +0x9 <LBB131_126>
    4236	bf 18 00 00 00 00 00 00	r8 = r1
    4237	bf a1 00 00 00 00 00 00	r1 = r10
    4238	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4239	bf 62 00 00 00 00 00 00	r2 = r6
    4240	b7 03 00 00 08 00 00 00	r3 = 0x8
    4241	85 10 00 00 f2 fb ff ff	call -0x40e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4242	bf 81 00 00 00 00 00 00	r1 = r8
    4243	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4244	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000084a8 <LBB131_126>
    4245	0f 68 00 00 00 00 00 00	r8 += r6
    4246	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    4247	b7 08 00 00 00 00 00 00	r8 = 0x0
    4248	07 07 00 00 21 00 00 00	r7 += 0x21
    4249	07 06 00 00 08 00 00 00	r6 += 0x8
    4250	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4251	bf 79 00 00 00 00 00 00	r9 = r7
    4252	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_128>

00000000000084e8 <LBB131_127>
    4253	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4254	0f 61 00 00 00 00 00 00	r1 += r6
    4255	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4256	07 06 00 00 01 00 00 00	r6 += 0x1
    4257	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4258	07 08 00 00 01 00 00 00	r8 += 0x1
    4259	15 08 6b ff 20 00 00 00	if r8 == 0x20 goto -0x95 <LBB131_110>

0000000000008520 <LBB131_128>
    4260	bf 91 00 00 00 00 00 00	r1 = r9
    4261	0f 81 00 00 00 00 00 00	r1 += r8
    4262	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4263	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4264	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_127>
    4265	bf a1 00 00 00 00 00 00	r1 = r10
    4266	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4267	bf 62 00 00 00 00 00 00	r2 = r6
    4268	b7 03 00 00 01 00 00 00	r3 = 0x1
    4269	85 10 00 00 d6 fb ff ff	call -0x42a ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4270	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4271	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_127>

0000000000008580 <LBB131_130>
    4272	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4273	0f 61 00 00 00 00 00 00	r1 += r6
    4274	7b 71 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r7
    4275	07 06 00 00 08 00 00 00	r6 += 0x8
    4276	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4277	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4278	bf 91 00 00 00 00 00 00	r1 = r9
    4279	1f 61 00 00 00 00 00 00	r1 -= r6
    4280	3d 71 01 00 00 00 00 00	if r1 >= r7 goto +0x1 <LBB131_132>
    4281	05 00 74 00 00 00 00 00	goto +0x74 <LBB131_131>

00000000000085d0 <LBB131_132>
    4282	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4283	bf 81 00 00 00 00 00 00	r1 = r8
    4284	0f 61 00 00 00 00 00 00	r1 += r6
    4285	bf 73 00 00 00 00 00 00	r3 = r7
    4286	85 10 00 00 06 12 00 00	call 0x1206 ; <memcpy>
    4287	0f 76 00 00 00 00 00 00	r6 += r7
    4288	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4289	1f 69 00 00 00 00 00 00	r9 -= r6
    4290	79 a7 c0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x40)
    4291	79 71 60 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x60)
    4292	25 09 09 00 07 00 00 00	if r9 > 0x7 goto +0x9 <LBB131_134>
    4293	bf 18 00 00 00 00 00 00	r8 = r1
    4294	bf a1 00 00 00 00 00 00	r1 = r10
    4295	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4296	bf 62 00 00 00 00 00 00	r2 = r6
    4297	b7 03 00 00 08 00 00 00	r3 = 0x8
    4298	85 10 00 00 b9 fb ff ff	call -0x447 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4299	bf 81 00 00 00 00 00 00	r1 = r8
    4300	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    4301	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

0000000000008670 <LBB131_134>
    4302	0f 68 00 00 00 00 00 00	r8 += r6
    4303	7b 18 00 00 00 00 00 00	*(u64 *)(r8 + 0x0) = r1
    4304	07 06 00 00 08 00 00 00	r6 += 0x8
    4305	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4306	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4307	1f 61 00 00 00 00 00 00	r1 -= r6
    4308	79 78 68 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x68)
    4309	bf 79 00 00 00 00 00 00	r9 = r7
    4310	25 01 06 00 07 00 00 00	if r1 > 0x7 goto +0x6 <LBB131_136>
    4311	bf a1 00 00 00 00 00 00	r1 = r10
    4312	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4313	bf 62 00 00 00 00 00 00	r2 = r6
    4314	b7 03 00 00 08 00 00 00	r3 = 0x8
    4315	85 10 00 00 a8 fb ff ff	call -0x458 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4316	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)

00000000000086e8 <LBB131_136>
    4317	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4318	0f 61 00 00 00 00 00 00	r1 += r6
    4319	7b 81 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r8
    4320	b7 08 00 00 00 00 00 00	r8 = 0x0
    4321	07 09 00 00 21 00 00 00	r9 += 0x21
    4322	07 06 00 00 08 00 00 00	r6 += 0x8
    4323	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4324	05 00 07 00 00 00 00 00	goto +0x7 <LBB131_138>

0000000000008728 <LBB131_137>
    4325	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4326	0f 61 00 00 00 00 00 00	r1 += r6
    4327	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    4328	07 06 00 00 01 00 00 00	r6 += 0x1
    4329	7b 6a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r6
    4330	07 08 00 00 01 00 00 00	r8 += 0x1
    4331	15 08 23 ff 20 00 00 00	if r8 == 0x20 goto -0xdd <LBB131_110>

0000000000008760 <LBB131_138>
    4332	bf 91 00 00 00 00 00 00	r1 = r9
    4333	0f 81 00 00 00 00 00 00	r1 += r8
    4334	71 17 00 00 00 00 00 00	r7 = *(u8 *)(r1 + 0x0)
    4335	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    4336	5d 61 f4 ff 00 00 00 00	if r1 != r6 goto -0xc <LBB131_137>
    4337	bf a1 00 00 00 00 00 00	r1 = r10
    4338	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4339	bf 62 00 00 00 00 00 00	r2 = r6
    4340	b7 03 00 00 01 00 00 00	r3 = 0x1
    4341	85 10 00 00 8e fb ff ff	call -0x472 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4342	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4343	05 00 ed ff 00 00 00 00	goto -0x13 <LBB131_137>

00000000000087c0 <LBB131_140>
    4344	bf a1 00 00 00 00 00 00	r1 = r10
    4345	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4346	b7 02 00 00 00 00 00 00	r2 = 0x0
    4347	b7 03 00 00 04 00 00 00	r3 = 0x4
    4348	85 10 00 00 87 fb ff ff	call -0x479 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4349	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4350	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4351	05 00 5c fd 00 00 00 00	goto -0x2a4 <LBB131_32>

0000000000008800 <LBB131_142>
    4352	bf a1 00 00 00 00 00 00	r1 = r10
    4353	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4354	b7 02 00 00 00 00 00 00	r2 = 0x0
    4355	b7 03 00 00 04 00 00 00	r3 = 0x4
    4356	85 10 00 00 7f fb ff ff	call -0x481 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4357	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4358	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4359	05 00 80 fd 00 00 00 00	goto -0x280 <LBB131_42>

0000000000008840 <LBB131_144>
    4360	bf a1 00 00 00 00 00 00	r1 = r10
    4361	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4362	b7 02 00 00 00 00 00 00	r2 = 0x0
    4363	b7 03 00 00 04 00 00 00	r3 = 0x4
    4364	85 10 00 00 77 fb ff ff	call -0x489 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4365	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    4366	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4367	05 00 bd fd 00 00 00 00	goto -0x243 <LBB131_55>

0000000000008880 <LBB131_145>
    4368	bf a1 00 00 00 00 00 00	r1 = r10
    4369	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4370	b7 03 00 00 08 00 00 00	r3 = 0x8
    4371	85 10 00 00 70 fb ff ff	call -0x490 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4372	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    4373	05 00 cd fd 00 00 00 00	goto -0x233 <LBB131_59>

00000000000088b0 <LBB131_92>
    4374	bf a1 00 00 00 00 00 00	r1 = r10
    4375	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4376	bf 62 00 00 00 00 00 00	r2 = r6
    4377	bf 83 00 00 00 00 00 00	r3 = r8
    4378	85 10 00 00 69 fb ff ff	call -0x497 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4379	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4380	05 00 93 fe 00 00 00 00	goto -0x16d <LBB131_93>

00000000000088e8 <LBB131_146>
    4381	bf a1 00 00 00 00 00 00	r1 = r10
    4382	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4383	bf 62 00 00 00 00 00 00	r2 = r6
    4384	b7 03 00 00 08 00 00 00	r3 = 0x8
    4385	85 10 00 00 62 fb ff ff	call -0x49e ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4386	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4387	05 00 17 ff 00 00 00 00	goto -0xe9 <LBB131_114>

0000000000008920 <LBB131_123>
    4388	bf a1 00 00 00 00 00 00	r1 = r10
    4389	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4390	bf 28 00 00 00 00 00 00	r8 = r2
    4391	bf 62 00 00 00 00 00 00	r2 = r6
    4392	bf 73 00 00 00 00 00 00	r3 = r7
    4393	85 10 00 00 5a fb ff ff	call -0x4a6 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4394	bf 82 00 00 00 00 00 00	r2 = r8
    4395	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4396	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4397	05 00 53 ff 00 00 00 00	goto -0xad <LBB131_124>

0000000000008970 <LBB131_131>
    4398	bf a1 00 00 00 00 00 00	r1 = r10
    4399	07 01 00 00 e8 ff ff ff	r1 += -0x18
    4400	bf 28 00 00 00 00 00 00	r8 = r2
    4401	bf 62 00 00 00 00 00 00	r2 = r6
    4402	bf 73 00 00 00 00 00 00	r3 = r7
    4403	85 10 00 00 50 fb ff ff	call -0x4b0 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    4404	bf 82 00 00 00 00 00 00	r2 = r8
    4405	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4406	79 a6 f8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x8)
    4407	05 00 82 ff 00 00 00 00	goto -0x7e <LBB131_132>

00000000000089c0 <LBB131_147>
    4408	bf 61 00 00 00 00 00 00	r1 = r6
    4409	b7 02 00 00 01 00 00 00	r2 = 0x1
    4410	85 10 00 00 cf 04 00 00	call 0x4cf ; <alloc::alloc::handle_alloc_error>
    4411	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000089e0 <solana_program::program::invoke>
    4412	18 05 00 00 c8 2a 01 00 00 00 00 00 00 00 00 00	r5 = 0x12ac8 ll
    4414	7b 5a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r5
    4415	b7 05 00 00 00 00 00 00	r5 = 0x0
    4416	7b 5a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r5
    4417	bf a5 00 00 00 00 00 00	r5 = r10
    4418	85 10 00 00 01 00 00 00	call 0x1 ; <solana_program::program::invoke_signed>
    4419	95 00 00 00 00 00 00 00	exit

0000000000008a20 <solana_program::program::invoke_signed>
    4420	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
    4421	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    4422	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    4423	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    4424	79 21 10 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x10)
    4425	79 52 08 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0xff8)
    4426	7b 2a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r2
    4427	79 52 00 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0x1000)
    4428	7b 2a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r2
    4429	15 01 4d 00 00 00 00 00	if r1 == 0x0 goto +0x4d <LBB200_4>
    4430	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    4431	79 27 00 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x0)
    4432	27 01 00 00 22 00 00 00	r1 *= 0x22
    4433	bf 72 00 00 00 00 00 00	r2 = r7
    4434	0f 12 00 00 00 00 00 00	r2 += r1
    4435	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    4436	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    4437	27 01 00 00 30 00 00 00	r1 *= 0x30
    4438	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4439	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    4440	07 01 00 00 d8 ff ff ff	r1 += -0x28
    4441	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4442	05 00 3b 00 00 00 00 00	goto +0x3b <LBB200_2>

0000000000008ad8 <LBB200_3>
    4443	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB200_7>
    4444	05 00 37 00 00 00 00 00	goto +0x37 <LBB200_14>

0000000000008ae8 <LBB200_7>
    4445	79 92 28 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x28)
    4446	bf 61 00 00 00 00 00 00	r1 = r6
    4447	b7 03 00 00 20 00 00 00	r3 = 0x20
    4448	85 10 00 00 aa 11 00 00	call 0x11aa ; <memcmp>
    4449	07 08 00 00 d0 ff ff ff	r8 += -0x30
    4450	07 09 00 00 30 00 00 00	r9 += 0x30
    4451	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4452	77 00 00 00 20 00 00 00	r0 >>= 0x20
    4453	55 00 f5 ff 00 00 00 00	if r0 != 0x0 goto -0xb <LBB200_3>
    4454	71 61 21 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x21)
    4455	55 01 18 00 00 00 00 00	if r1 != 0x0 goto +0x18 <LBB200_10>
    4456	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4457	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4458	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    4460	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB200_16>
    4461	05 00 4a 00 00 00 00 00	goto +0x4a <LBB200_17>

0000000000008b70 <LBB200_16>
    4462	bf 13 00 00 00 00 00 00	r3 = r1
    4463	07 03 00 00 10 00 00 00	r3 += 0x10
    4464	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    4465	7b 23 00 00 00 00 00 00	*(u64 *)(r3 + 0x0) = r2
    4466	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4467	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    4468	18 04 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r4 = 0x7fffffffffffffff ll
    4470	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB200_18>
    4471	05 00 47 00 00 00 00 00	goto +0x47 <LBB200_19>

0000000000008bc0 <LBB200_18>
    4472	bf 23 00 00 00 00 00 00	r3 = r2
    4473	07 03 00 00 10 00 00 00	r3 += 0x10
    4474	7b 3a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r3
    4475	07 02 00 00 18 00 00 00	r2 += 0x18
    4476	07 01 00 00 18 00 00 00	r1 += 0x18
    4477	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    4478	7b 2a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r2
    4479	05 00 14 00 00 00 00 00	goto +0x14 <LBB200_14>

0000000000008c00 <LBB200_10>
    4480	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4481	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4482	b7 04 00 00 00 00 00 00	r4 = 0x0
    4483	55 02 26 00 00 00 00 00	if r2 != 0x0 goto +0x26 <LBB200_12>
    4484	bf 12 00 00 00 00 00 00	r2 = r1
    4485	07 02 00 00 10 00 00 00	r2 += 0x10
    4486	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    4487	7b 42 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r4
    4488	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4489	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    4490	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB200_13>
    4491	05 00 25 00 00 00 00 00	goto +0x25 <LBB200_15>

0000000000008c60 <LBB200_13>
    4492	bf 23 00 00 00 00 00 00	r3 = r2
    4493	07 03 00 00 10 00 00 00	r3 += 0x10
    4494	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    4495	7b 42 10 00 00 00 00 00	*(u64 *)(r2 + 0x10) = r4
    4496	07 02 00 00 18 00 00 00	r2 += 0x18
    4497	07 01 00 00 18 00 00 00	r1 += 0x18
    4498	7b 2a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r2
    4499	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1

0000000000008ca0 <LBB200_14>
    4500	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4501	1d 17 05 00 00 00 00 00	if r7 == r1 goto +0x5 <LBB200_4>

0000000000008cb0 <LBB200_2>
    4502	bf 76 00 00 00 00 00 00	r6 = r7
    4503	07 07 00 00 22 00 00 00	r7 += 0x22
    4504	79 a8 f8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x8)
    4505	79 a9 f0 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x10)
    4506	05 00 c0 ff 00 00 00 00	goto -0x40 <LBB200_3>

0000000000008cd8 <LBB200_4>
    4507	79 a1 b0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x50)
    4508	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    4509	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    4510	79 a4 78 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x88)
    4511	79 a5 80 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x80)
    4512	85 10 00 00 ff ff ff ff	call -0x1 ; sol_invoke_signed_rust
    4513	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB200_6>
    4514	b7 01 00 00 14 00 00 00	r1 = 0x14
    4515	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4516	63 12 00 00 00 00 00 00	*(u32 *)(r2 + 0x0) = r1
    4517	05 00 22 00 00 00 00 00	goto +0x22 <LBB200_21>

0000000000008d30 <LBB200_6>
    4518	79 a1 a8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x58)
    4519	bf 02 00 00 00 00 00 00	r2 = r0
    4520	85 10 00 00 7b 00 00 00	call 0x7b ; <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    4521	05 00 1e 00 00 00 00 00	goto +0x1e <LBB200_21>

0000000000008d50 <LBB200_12>
    4522	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4523	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    4524	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4525	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4527	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    4528	05 00 14 00 00 00 00 00	goto +0x14 <LBB200_20>

0000000000008d88 <LBB200_15>
    4529	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4530	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4531	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4532	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4534	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    4535	05 00 0d 00 00 00 00 00	goto +0xd <LBB200_20>

0000000000008dc0 <LBB200_17>
    4536	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4537	79 a1 a0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x60)
    4538	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4539	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4541	79 a3 98 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x68)
    4542	05 00 06 00 00 00 00 00	goto +0x6 <LBB200_20>

0000000000008df8 <LBB200_19>
    4543	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4544	79 a1 90 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x70)
    4545	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    4546	18 01 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r1 = -0x100000000 ll
    4548	79 a3 88 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x78)

0000000000008e28 <LBB200_20>
    4549	5f 13 00 00 00 00 00 00	r3 &= r1
    4550	47 03 00 00 0b 00 00 00	r3 |= 0xb
    4551	7b 32 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r3

0000000000008e40 <LBB200_21>
    4552	95 00 00 00 00 00 00 00	exit

0000000000008e48 <solana_program::program_error::<impl core::convert::From<solana_program::program_error::ProgramError> for u64>::from>
    4553	61 12 00 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x0)
    4554	65 02 06 00 09 00 00 00	if r2 s> 0x9 goto +0x6 <LBB206_14>
    4555	65 02 0b 00 04 00 00 00	if r2 s> 0x4 goto +0xb <LBB206_8>
    4556	65 02 14 00 01 00 00 00	if r2 s> 0x1 goto +0x14 <LBB206_5>
    4557	15 02 27 00 00 00 00 00	if r2 == 0x0 goto +0x27 <LBB206_27>
    4558	18 06 00 00 00 00 00 00 00 00 00 00 02 00 00 00	r6 = 0x200000000 ll
    4560	05 00 4a 00 00 00 00 00	goto +0x4a <LBB206_39>

0000000000008e88 <LBB206_14>
    4561	65 02 0a 00 0e 00 00 00	if r2 s> 0xe goto +0xa <LBB206_21>
    4562	65 02 13 00 0b 00 00 00	if r2 s> 0xb goto +0x13 <LBB206_18>
    4563	15 02 27 00 0a 00 00 00	if r2 == 0xa goto +0x27 <LBB206_33>
    4564	18 06 00 00 00 00 00 00 00 00 00 00 0c 00 00 00	r6 = 0xc00000000 ll
    4566	05 00 44 00 00 00 00 00	goto +0x44 <LBB206_39>

0000000000008eb8 <LBB206_8>
    4567	65 02 13 00 06 00 00 00	if r2 s> 0x6 goto +0x13 <LBB206_11>
    4568	15 02 25 00 05 00 00 00	if r2 == 0x5 goto +0x25 <LBB206_30>
    4569	18 06 00 00 00 00 00 00 00 00 00 00 07 00 00 00	r6 = 0x700000000 ll
    4571	05 00 3f 00 00 00 00 00	goto +0x3f <LBB206_39>

0000000000008ee0 <LBB206_21>
    4572	65 02 13 00 10 00 00 00	if r2 s> 0x10 goto +0x13 <LBB206_24>
    4573	15 02 23 00 0f 00 00 00	if r2 == 0xf goto +0x23 <LBB206_36>
    4574	18 06 00 00 00 00 00 00 00 00 00 00 11 00 00 00	r6 = 0x1100000000 ll
    4576	05 00 3a 00 00 00 00 00	goto +0x3a <LBB206_39>

0000000000008f08 <LBB206_5>
    4577	15 02 22 00 02 00 00 00	if r2 == 0x2 goto +0x22 <LBB206_28>
    4578	15 02 24 00 03 00 00 00	if r2 == 0x3 goto +0x24 <LBB206_29>
    4579	18 06 00 00 00 00 00 00 00 00 00 00 05 00 00 00	r6 = 0x500000000 ll
    4581	05 00 35 00 00 00 00 00	goto +0x35 <LBB206_39>

0000000000008f30 <LBB206_18>
    4582	15 02 23 00 0c 00 00 00	if r2 == 0xc goto +0x23 <LBB206_34>
    4583	15 02 25 00 0d 00 00 00	if r2 == 0xd goto +0x25 <LBB206_35>
    4584	18 06 00 00 00 00 00 00 00 00 00 00 0f 00 00 00	r6 = 0xf00000000 ll
    4586	05 00 30 00 00 00 00 00	goto +0x30 <LBB206_39>

0000000000008f58 <LBB206_11>
    4587	15 02 24 00 07 00 00 00	if r2 == 0x7 goto +0x24 <LBB206_31>
    4588	15 02 26 00 08 00 00 00	if r2 == 0x8 goto +0x26 <LBB206_32>
    4589	18 06 00 00 00 00 00 00 00 00 00 00 0a 00 00 00	r6 = 0xa00000000 ll
    4591	05 00 2b 00 00 00 00 00	goto +0x2b <LBB206_39>

0000000000008f80 <LBB206_24>
    4592	15 02 25 00 11 00 00 00	if r2 == 0x11 goto +0x25 <LBB206_37>
    4593	15 02 27 00 12 00 00 00	if r2 == 0x12 goto +0x27 <LBB206_38>
    4594	18 06 00 00 00 00 00 00 00 00 00 00 14 00 00 00	r6 = 0x1400000000 ll
    4596	05 00 26 00 00 00 00 00	goto +0x26 <LBB206_39>

0000000000008fa8 <LBB206_27>
    4597	18 06 00 00 00 00 00 00 00 00 00 00 01 00 00 00	r6 = 0x100000000 ll
    4599	61 13 04 00 00 00 00 00	r3 = *(u32 *)(r1 + 0x4)
    4600	15 03 22 00 00 00 00 00	if r3 == 0x0 goto +0x22 <LBB206_39>
    4601	bf 36 00 00 00 00 00 00	r6 = r3
    4602	05 00 20 00 00 00 00 00	goto +0x20 <LBB206_39>

0000000000008fd8 <LBB206_33>
    4603	18 06 00 00 00 00 00 00 00 00 00 00 0b 00 00 00	r6 = 0xb00000000 ll
    4605	05 00 1d 00 00 00 00 00	goto +0x1d <LBB206_39>

0000000000008ff0 <LBB206_30>
    4606	18 06 00 00 00 00 00 00 00 00 00 00 06 00 00 00	r6 = 0x600000000 ll
    4608	05 00 1a 00 00 00 00 00	goto +0x1a <LBB206_39>

0000000000009008 <LBB206_36>
    4609	18 06 00 00 00 00 00 00 00 00 00 00 10 00 00 00	r6 = 0x1000000000 ll
    4611	05 00 17 00 00 00 00 00	goto +0x17 <LBB206_39>

0000000000009020 <LBB206_28>
    4612	18 06 00 00 00 00 00 00 00 00 00 00 03 00 00 00	r6 = 0x300000000 ll
    4614	05 00 14 00 00 00 00 00	goto +0x14 <LBB206_39>

0000000000009038 <LBB206_29>
    4615	18 06 00 00 00 00 00 00 00 00 00 00 04 00 00 00	r6 = 0x400000000 ll
    4617	05 00 11 00 00 00 00 00	goto +0x11 <LBB206_39>

0000000000009050 <LBB206_34>
    4618	18 06 00 00 00 00 00 00 00 00 00 00 0d 00 00 00	r6 = 0xd00000000 ll
    4620	05 00 0e 00 00 00 00 00	goto +0xe <LBB206_39>

0000000000009068 <LBB206_35>
    4621	18 06 00 00 00 00 00 00 00 00 00 00 0e 00 00 00	r6 = 0xe00000000 ll
    4623	05 00 0b 00 00 00 00 00	goto +0xb <LBB206_39>

0000000000009080 <LBB206_31>
    4624	18 06 00 00 00 00 00 00 00 00 00 00 08 00 00 00	r6 = 0x800000000 ll
    4626	05 00 08 00 00 00 00 00	goto +0x8 <LBB206_39>

0000000000009098 <LBB206_32>
    4627	18 06 00 00 00 00 00 00 00 00 00 00 09 00 00 00	r6 = 0x900000000 ll
    4629	05 00 05 00 00 00 00 00	goto +0x5 <LBB206_39>

00000000000090b0 <LBB206_37>
    4630	18 06 00 00 00 00 00 00 00 00 00 00 12 00 00 00	r6 = 0x1200000000 ll
    4632	05 00 02 00 00 00 00 00	goto +0x2 <LBB206_39>

00000000000090c8 <LBB206_38>
    4633	18 06 00 00 00 00 00 00 00 00 00 00 13 00 00 00	r6 = 0x1300000000 ll

00000000000090d8 <LBB206_39>
    4635	55 02 06 00 0e 00 00 00	if r2 != 0xe goto +0x6 <LBB206_43>
    4636	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    4637	15 02 04 00 00 00 00 00	if r2 == 0x0 goto +0x4 <LBB206_43>
    4638	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    4639	15 01 02 00 00 00 00 00	if r1 == 0x0 goto +0x2 <LBB206_43>
    4640	b7 03 00 00 01 00 00 00	r3 = 0x1
    4641	85 10 00 00 fb f9 ff ff	call -0x605 ; <__rust_dealloc>

0000000000009110 <LBB206_43>
    4642	bf 60 00 00 00 00 00 00	r0 = r6
    4643	95 00 00 00 00 00 00 00	exit

0000000000009120 <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    4644	bf 16 00 00 00 00 00 00	r6 = r1
    4645	18 03 00 00 00 00 00 00 00 00 00 00 ff ff ff ff	r3 = -0x100000000 ll
    4647	bf 21 00 00 00 00 00 00	r1 = r2
    4648	0f 31 00 00 00 00 00 00	r1 += r3
    4649	bf 13 00 00 00 00 00 00	r3 = r1
    4650	77 03 00 00 20 00 00 00	r3 >>= 0x20
    4651	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4652	4f 31 00 00 00 00 00 00	r1 |= r3
    4653	65 01 06 00 09 00 00 00	if r1 s> 0x9 goto +0x6 <LBB207_14>
    4654	65 01 0c 00 04 00 00 00	if r1 s> 0x4 goto +0xc <LBB207_8>
    4655	65 01 17 00 01 00 00 00	if r1 s> 0x1 goto +0x17 <LBB207_5>
    4656	15 01 35 00 00 00 00 00	if r1 == 0x0 goto +0x35 <LBB207_28>
    4657	b7 03 00 00 01 00 00 00	r3 = 0x1
    4658	15 01 56 00 01 00 00 00	if r1 == 0x1 goto +0x56 <LBB207_49>
    4659	05 00 2f 00 00 00 00 00	goto +0x2f <LBB207_27>

00000000000091a0 <LBB207_14>
    4660	65 01 0c 00 0e 00 00 00	if r1 s> 0xe goto +0xc <LBB207_21>
    4661	65 01 17 00 0b 00 00 00	if r1 s> 0xb goto +0x17 <LBB207_18>
    4662	15 01 32 00 0a 00 00 00	if r1 == 0xa goto +0x32 <LBB207_37>
    4663	15 01 01 00 0b 00 00 00	if r1 == 0xb goto +0x1 <LBB207_38>
    4664	05 00 2a 00 00 00 00 00	goto +0x2a <LBB207_27>

00000000000091c8 <LBB207_38>
    4665	b7 03 00 00 0b 00 00 00	r3 = 0xb
    4666	05 00 4e 00 00 00 00 00	goto +0x4e <LBB207_49>

00000000000091d8 <LBB207_8>
    4667	65 01 1e 00 06 00 00 00	if r1 s> 0x6 goto +0x1e <LBB207_11>
    4668	15 01 2e 00 05 00 00 00	if r1 == 0x5 goto +0x2e <LBB207_32>
    4669	15 01 01 00 06 00 00 00	if r1 == 0x6 goto +0x1 <LBB207_33>
    4670	05 00 24 00 00 00 00 00	goto +0x24 <LBB207_27>

00000000000091f8 <LBB207_33>
    4671	b7 03 00 00 06 00 00 00	r3 = 0x6
    4672	05 00 48 00 00 00 00 00	goto +0x48 <LBB207_49>

0000000000009208 <LBB207_21>
    4673	65 01 1e 00 10 00 00 00	if r1 s> 0x10 goto +0x1e <LBB207_24>
    4674	15 01 2a 00 0f 00 00 00	if r1 == 0xf goto +0x2a <LBB207_44>
    4675	15 01 01 00 10 00 00 00	if r1 == 0x10 goto +0x1 <LBB207_45>
    4676	05 00 1e 00 00 00 00 00	goto +0x1e <LBB207_27>

0000000000009228 <LBB207_45>
    4677	b7 03 00 00 10 00 00 00	r3 = 0x10
    4678	05 00 42 00 00 00 00 00	goto +0x42 <LBB207_49>

0000000000009238 <LBB207_5>
    4679	15 01 27 00 02 00 00 00	if r1 == 0x2 goto +0x27 <LBB207_29>
    4680	15 01 28 00 03 00 00 00	if r1 == 0x3 goto +0x28 <LBB207_30>
    4681	15 01 01 00 04 00 00 00	if r1 == 0x4 goto +0x1 <LBB207_31>
    4682	05 00 18 00 00 00 00 00	goto +0x18 <LBB207_27>

0000000000009258 <LBB207_31>
    4683	b7 03 00 00 04 00 00 00	r3 = 0x4
    4684	05 00 3c 00 00 00 00 00	goto +0x3c <LBB207_49>

0000000000009268 <LBB207_18>
    4685	15 01 25 00 0c 00 00 00	if r1 == 0xc goto +0x25 <LBB207_39>
    4686	15 01 26 00 0d 00 00 00	if r1 == 0xd goto +0x26 <LBB207_40>
    4687	15 01 01 00 0e 00 00 00	if r1 == 0xe goto +0x1 <LBB207_41>
    4688	05 00 12 00 00 00 00 00	goto +0x12 <LBB207_27>

0000000000009288 <LBB207_41>
    4689	b7 07 00 00 07 00 00 00	r7 = 0x7
    4690	b7 01 00 00 07 00 00 00	r1 = 0x7
    4691	b7 02 00 00 01 00 00 00	r2 = 0x1
    4692	85 10 00 00 c6 f9 ff ff	call -0x63a ; <__rust_alloc>
    4693	55 00 2b 00 00 00 00 00	if r0 != 0x0 goto +0x2b <LBB207_43>
    4694	b7 01 00 00 07 00 00 00	r1 = 0x7
    4695	b7 02 00 00 01 00 00 00	r2 = 0x1
    4696	85 10 00 00 b1 03 00 00	call 0x3b1 ; <alloc::alloc::handle_alloc_error>
    4697	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000092d0 <LBB207_11>
    4698	15 01 1c 00 07 00 00 00	if r1 == 0x7 goto +0x1c <LBB207_34>
    4699	15 01 1d 00 08 00 00 00	if r1 == 0x8 goto +0x1d <LBB207_35>
    4700	15 01 01 00 09 00 00 00	if r1 == 0x9 goto +0x1 <LBB207_36>
    4701	05 00 05 00 00 00 00 00	goto +0x5 <LBB207_27>

00000000000092f0 <LBB207_36>
    4702	b7 03 00 00 09 00 00 00	r3 = 0x9
    4703	05 00 29 00 00 00 00 00	goto +0x29 <LBB207_49>

0000000000009300 <LBB207_24>
    4704	15 01 1a 00 11 00 00 00	if r1 == 0x11 goto +0x1a <LBB207_46>
    4705	15 01 1b 00 12 00 00 00	if r1 == 0x12 goto +0x1b <LBB207_47>
    4706	15 01 1c 00 13 00 00 00	if r1 == 0x13 goto +0x1c <LBB207_48>

0000000000009318 <LBB207_27>
    4707	63 26 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r2
    4708	b7 03 00 00 00 00 00 00	r3 = 0x0
    4709	05 00 23 00 00 00 00 00	goto +0x23 <LBB207_49>

0000000000009330 <LBB207_28>
    4710	b7 03 00 00 00 00 00 00	r3 = 0x0
    4711	63 36 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r3
    4712	05 00 20 00 00 00 00 00	goto +0x20 <LBB207_49>

0000000000009348 <LBB207_37>
    4713	b7 03 00 00 0a 00 00 00	r3 = 0xa
    4714	05 00 1e 00 00 00 00 00	goto +0x1e <LBB207_49>

0000000000009358 <LBB207_32>
    4715	b7 03 00 00 05 00 00 00	r3 = 0x5
    4716	05 00 1c 00 00 00 00 00	goto +0x1c <LBB207_49>

0000000000009368 <LBB207_44>
    4717	b7 03 00 00 0f 00 00 00	r3 = 0xf
    4718	05 00 1a 00 00 00 00 00	goto +0x1a <LBB207_49>

0000000000009378 <LBB207_29>
    4719	b7 03 00 00 02 00 00 00	r3 = 0x2
    4720	05 00 18 00 00 00 00 00	goto +0x18 <LBB207_49>

0000000000009388 <LBB207_30>
    4721	b7 03 00 00 03 00 00 00	r3 = 0x3
    4722	05 00 16 00 00 00 00 00	goto +0x16 <LBB207_49>

0000000000009398 <LBB207_39>
    4723	b7 03 00 00 0c 00 00 00	r3 = 0xc
    4724	05 00 14 00 00 00 00 00	goto +0x14 <LBB207_49>

00000000000093a8 <LBB207_40>
    4725	b7 03 00 00 0d 00 00 00	r3 = 0xd
    4726	05 00 12 00 00 00 00 00	goto +0x12 <LBB207_49>

00000000000093b8 <LBB207_34>
    4727	b7 03 00 00 07 00 00 00	r3 = 0x7
    4728	05 00 10 00 00 00 00 00	goto +0x10 <LBB207_49>

00000000000093c8 <LBB207_35>
    4729	b7 03 00 00 08 00 00 00	r3 = 0x8
    4730	05 00 0e 00 00 00 00 00	goto +0xe <LBB207_49>

00000000000093d8 <LBB207_46>
    4731	b7 03 00 00 11 00 00 00	r3 = 0x11
    4732	05 00 0c 00 00 00 00 00	goto +0xc <LBB207_49>

00000000000093e8 <LBB207_47>
    4733	b7 03 00 00 12 00 00 00	r3 = 0x12
    4734	05 00 0a 00 00 00 00 00	goto +0xa <LBB207_49>

00000000000093f8 <LBB207_48>
    4735	b7 03 00 00 13 00 00 00	r3 = 0x13
    4736	05 00 08 00 00 00 00 00	goto +0x8 <LBB207_49>

0000000000009408 <LBB207_43>
    4737	b7 01 00 00 6e 6f 77 6e	r1 = 0x6e776f6e
    4738	63 10 03 00 00 00 00 00	*(u32 *)(r0 + 0x3) = r1
    4739	b7 01 00 00 55 6e 6b 6e	r1 = 0x6e6b6e55
    4740	63 10 00 00 00 00 00 00	*(u32 *)(r0 + 0x0) = r1
    4741	7b 76 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r7
    4742	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    4743	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    4744	b7 03 00 00 0e 00 00 00	r3 = 0xe

0000000000009448 <LBB207_49>
    4745	63 36 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r3
    4746	95 00 00 00 00 00 00 00	exit

0000000000009458 <<solana_program::program_error::ProgramError as core::convert::From<std::io::error::Error>>::from>
    4747	bf 16 00 00 00 00 00 00	r6 = r1
    4748	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    4749	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    4750	bf a1 00 00 00 00 00 00	r1 = r10
    4751	07 01 00 00 f0 ff ff ff	r1 += -0x10
    4752	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4753	b7 01 00 00 00 00 00 00	r1 = 0x0
    4754	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4755	b7 01 00 00 01 00 00 00	r1 = 0x1
    4756	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    4757	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    4758	18 01 00 00 58 3c 01 00 00 00 00 00 00 00 00 00	r1 = 0x13c58 ll
    4760	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    4761	18 01 00 00 c8 a7 00 00 00 00 00 00 00 00 00 00	r1 = 0xa7c8 ll
    4763	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4764	bf a1 00 00 00 00 00 00	r1 = r10
    4765	07 01 00 00 b0 ff ff ff	r1 += -0x50
    4766	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4767	bf 61 00 00 00 00 00 00	r1 = r6
    4768	07 01 00 00 08 00 00 00	r1 += 0x8
    4769	bf a2 00 00 00 00 00 00	r2 = r10
    4770	07 02 00 00 c0 ff ff ff	r2 += -0x40
    4771	85 10 00 00 6e 03 00 00	call 0x36e ; <alloc::fmt::format>
    4772	b7 01 00 00 0e 00 00 00	r1 = 0xe
    4773	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
    4774	71 a1 b0 ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x50)
    4775	55 01 0f 00 03 00 00 00	if r1 != 0x3 goto +0xf <LBB210_4>
    4776	79 a6 b8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x48)
    4777	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4778	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    4779	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4780	8d 00 00 00 02 00 00 00	callx r2
    4781	79 63 08 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x8)
    4782	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
    4783	15 02 03 00 00 00 00 00	if r2 == 0x0 goto +0x3 <LBB210_3>
    4784	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4785	79 33 10 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x10)
    4786	85 10 00 00 6a f9 ff ff	call -0x696 ; <__rust_dealloc>

0000000000009598 <LBB210_3>
    4787	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    4788	b7 02 00 00 18 00 00 00	r2 = 0x18
    4789	b7 03 00 00 08 00 00 00	r3 = 0x8
    4790	85 10 00 00 66 f9 ff ff	call -0x69a ; <__rust_dealloc>

00000000000095b8 <LBB210_4>
    4791	95 00 00 00 00 00 00 00	exit

00000000000095c0 <solana_program::pubkey::Pubkey::find_program_address>
    4792	bf 40 00 00 00 00 00 00	r0 = r4
    4793	bf 16 00 00 00 00 00 00	r6 = r1
    4794	b7 01 00 00 00 00 00 00	r1 = 0x0
    4795	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    4796	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4797	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    4798	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4799	b7 01 00 00 ff 00 00 00	r1 = 0xff
    4800	73 1a cf ff 00 00 00 00	*(u8 *)(r10 - 0x31) = r1
    4801	bf a4 00 00 00 00 00 00	r4 = r10
    4802	07 04 00 00 d0 ff ff ff	r4 += -0x30
    4803	bf a5 00 00 00 00 00 00	r5 = r10
    4804	07 05 00 00 cf ff ff ff	r5 += -0x31
    4805	bf 21 00 00 00 00 00 00	r1 = r2
    4806	bf 32 00 00 00 00 00 00	r2 = r3
    4807	bf 03 00 00 00 00 00 00	r3 = r0
    4808	85 10 00 00 ff ff ff ff	call -0x1 ; sol_try_find_program_address
    4809	55 00 09 00 00 00 00 00	if r0 != 0x0 goto +0x9 <LBB221_2>
    4810	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    4811	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    4812	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    4813	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    4814	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    4815	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    4816	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    4817	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    4818	71 a1 cf ff 00 00 00 00	r1 = *(u8 *)(r10 - 0x31)

0000000000009698 <LBB221_2>
    4819	15 00 11 00 00 00 00 00	if r0 == 0x0 goto +0x11 <LBB221_4>
    4820	18 01 00 00 c8 2a 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ac8 ll
    4822	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4823	b7 01 00 00 00 00 00 00	r1 = 0x0
    4824	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4825	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    4826	b7 01 00 00 01 00 00 00	r1 = 0x1
    4827	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    4828	18 01 00 00 80 3c 01 00 00 00 00 00 00 00 00 00	r1 = 0x13c80 ll
    4830	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    4831	bf a1 00 00 00 00 00 00	r1 = r10
    4832	07 01 00 00 d0 ff ff ff	r1 += -0x30
    4833	18 02 00 00 90 3c 01 00 00 00 00 00 00 00 00 00	r2 = 0x13c90 ll
    4835	85 10 00 00 7d 05 00 00	call 0x57d ; <core::panicking::panic_fmt>
    4836	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009728 <LBB221_4>
    4837	79 a2 c0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x40)
    4838	7b 26 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r2
    4839	79 a2 b8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x48)
    4840	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    4841	79 a2 b0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x50)
    4842	7b 26 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r2
    4843	79 a2 a8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x58)
    4844	7b 26 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r2
    4845	73 16 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r1
    4846	95 00 00 00 00 00 00 00	exit

0000000000009778 <solana_program::rent::Rent::minimum_balance>
    4847	bf 16 00 00 00 00 00 00	r6 = r1
    4848	07 02 00 00 80 00 00 00	r2 += 0x80
    4849	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    4850	2f 21 00 00 00 00 00 00	r1 *= r2
    4851	85 10 00 00 7f 11 00 00	call 0x117f ; <__floatundidf>
    4852	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    4853	bf 02 00 00 00 00 00 00	r2 = r0
    4854	85 10 00 00 cc 0e 00 00	call 0xecc ; <__muldf3>
    4855	bf 06 00 00 00 00 00 00	r6 = r0
    4856	bf 61 00 00 00 00 00 00	r1 = r6
    4857	85 10 00 00 66 0e 00 00	call 0xe66 ; <__fixunsdfdi>
    4858	bf 07 00 00 00 00 00 00	r7 = r0
    4859	b7 08 00 00 00 00 00 00	r8 = 0x0
    4860	bf 61 00 00 00 00 00 00	r1 = r6
    4861	b7 02 00 00 00 00 00 00	r2 = 0x0
    4862	85 10 00 00 a0 0e 00 00	call 0xea0 ; <__gedf2>
    4863	67 00 00 00 20 00 00 00	r0 <<= 0x20
    4864	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    4865	6d 08 01 00 00 00 00 00	if r8 s> r0 goto +0x1 <LBB230_2>
    4866	bf 78 00 00 00 00 00 00	r8 = r7

0000000000009818 <LBB230_2>
    4867	bf 61 00 00 00 00 00 00	r1 = r6
    4868	18 02 00 00 ff ff ff ff 00 00 00 00 ff ff ef 43	r2 = 0x43efffffffffffff ll
    4870	85 10 00 00 74 0e 00 00	call 0xe74 ; <__gtdf2>
    4871	bf 01 00 00 00 00 00 00	r1 = r0
    4872	67 01 00 00 20 00 00 00	r1 <<= 0x20
    4873	c7 01 00 00 20 00 00 00	r1 s>>= 0x20
    4874	b7 00 00 00 ff ff ff ff	r0 = -0x1
    4875	65 01 01 00 00 00 00 00	if r1 s> 0x0 goto +0x1 <LBB230_4>
    4876	bf 80 00 00 00 00 00 00	r0 = r8

0000000000009868 <LBB230_4>
    4877	95 00 00 00 00 00 00 00	exit

0000000000009870 <solana_program::system_instruction::assign>
    4878	bf 37 00 00 00 00 00 00	r7 = r3
    4879	bf 28 00 00 00 00 00 00	r8 = r2
    4880	bf 16 00 00 00 00 00 00	r6 = r1
    4881	b7 09 00 00 01 00 00 00	r9 = 0x1
    4882	b7 01 00 00 22 00 00 00	r1 = 0x22
    4883	b7 02 00 00 01 00 00 00	r2 = 0x1
    4884	85 10 00 00 06 f9 ff ff	call -0x6fa ; <__rust_alloc>
    4885	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB332_2>
    4886	b7 01 00 00 22 00 00 00	r1 = 0x22
    4887	b7 02 00 00 01 00 00 00	r2 = 0x1
    4888	85 10 00 00 f1 02 00 00	call 0x2f1 ; <alloc::alloc::handle_alloc_error>
    4889	85 10 00 00 ff ff ff ff	call -0x1 ; abort

00000000000098d0 <LBB332_2>
    4890	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    4891	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    4892	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    4893	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    4894	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    4895	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    4896	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    4897	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    4898	b7 01 00 00 01 01 00 00	r1 = 0x101
    4899	6b 10 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r1
    4900	b7 01 00 00 00 00 00 00	r1 = 0x0
    4901	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    4902	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    4903	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    4904	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    4905	79 71 18 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x18)
    4906	7b 1a 91 ff 00 00 00 00	*(u64 *)(r10 - 0x6f) = r1
    4907	79 71 10 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x10)
    4908	7b 1a 89 ff 00 00 00 00	*(u64 *)(r10 - 0x77) = r1
    4909	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    4910	7b 1a 81 ff 00 00 00 00	*(u64 *)(r10 - 0x7f) = r1
    4911	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    4912	7b 1a 79 ff 00 00 00 00	*(u64 *)(r10 - 0x87) = r1
    4913	73 9a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r9
    4914	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    4915	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    4916	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    4917	bf a2 00 00 00 00 00 00	r2 = r10
    4918	07 02 00 00 58 ff ff ff	r2 += -0xa8
    4919	bf a7 00 00 00 00 00 00	r7 = r10
    4920	07 07 00 00 78 ff ff ff	r7 += -0x88
    4921	bf a4 00 00 00 00 00 00	r4 = r10
    4922	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4923	bf 61 00 00 00 00 00 00	r1 = r6
    4924	bf 73 00 00 00 00 00 00	r3 = r7
    4925	85 10 00 00 dc fa ff ff	call -0x524 ; <solana_program::instruction::Instruction::new_with_bincode>
    4926	bf 71 00 00 00 00 00 00	r1 = r7
    4927	85 10 00 00 eb f8 ff ff	call -0x715 ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    4928	95 00 00 00 00 00 00 00	exit

0000000000009a08 <solana_program::system_instruction::transfer>
    4929	bf 47 00 00 00 00 00 00	r7 = r4
    4930	bf 38 00 00 00 00 00 00	r8 = r3
    4931	bf 29 00 00 00 00 00 00	r9 = r2
    4932	bf 16 00 00 00 00 00 00	r6 = r1
    4933	b7 01 00 00 44 00 00 00	r1 = 0x44
    4934	b7 02 00 00 01 00 00 00	r2 = 0x1
    4935	85 10 00 00 d3 f8 ff ff	call -0x72d ; <__rust_alloc>
    4936	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB334_2>
    4937	b7 01 00 00 44 00 00 00	r1 = 0x44
    4938	b7 02 00 00 01 00 00 00	r2 = 0x1
    4939	85 10 00 00 be 02 00 00	call 0x2be ; <alloc::alloc::handle_alloc_error>
    4940	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009a68 <LBB334_2>
    4941	79 91 00 00 00 00 00 00	r1 = *(u64 *)(r9 + 0x0)
    4942	79 92 08 00 00 00 00 00	r2 = *(u64 *)(r9 + 0x8)
    4943	79 93 10 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x10)
    4944	79 94 18 00 00 00 00 00	r4 = *(u64 *)(r9 + 0x18)
    4945	b7 05 00 00 01 01 00 00	r5 = 0x101
    4946	6b 50 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r5
    4947	7b 40 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r4
    4948	7b 30 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r3
    4949	7b 20 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r2
    4950	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    4951	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    4952	7b 10 22 00 00 00 00 00	*(u64 *)(r0 + 0x22) = r1
    4953	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    4954	7b 10 2a 00 00 00 00 00	*(u64 *)(r0 + 0x2a) = r1
    4955	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    4956	7b 10 32 00 00 00 00 00	*(u64 *)(r0 + 0x32) = r1
    4957	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    4958	7b 10 3a 00 00 00 00 00	*(u64 *)(r0 + 0x3a) = r1
    4959	b7 01 00 00 00 01 00 00	r1 = 0x100
    4960	6b 10 42 00 00 00 00 00	*(u16 *)(r0 + 0x42) = r1
    4961	b7 01 00 00 00 00 00 00	r1 = 0x0
    4962	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    4963	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    4964	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    4965	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    4966	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    4967	b7 01 00 00 02 00 00 00	r1 = 0x2
    4968	73 1a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r1
    4969	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    4970	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    4971	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    4972	bf a2 00 00 00 00 00 00	r2 = r10
    4973	07 02 00 00 58 ff ff ff	r2 += -0xa8
    4974	bf a7 00 00 00 00 00 00	r7 = r10
    4975	07 07 00 00 78 ff ff ff	r7 += -0x88
    4976	bf a4 00 00 00 00 00 00	r4 = r10
    4977	07 04 00 00 e8 ff ff ff	r4 += -0x18
    4978	bf 61 00 00 00 00 00 00	r1 = r6
    4979	bf 73 00 00 00 00 00 00	r3 = r7
    4980	85 10 00 00 a5 fa ff ff	call -0x55b ; <solana_program::instruction::Instruction::new_with_bincode>
    4981	bf 71 00 00 00 00 00 00	r1 = r7
    4982	85 10 00 00 b4 f8 ff ff	call -0x74c ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    4983	95 00 00 00 00 00 00 00	exit

0000000000009bc0 <solana_program::system_instruction::allocate>
    4984	bf 37 00 00 00 00 00 00	r7 = r3
    4985	bf 28 00 00 00 00 00 00	r8 = r2
    4986	bf 16 00 00 00 00 00 00	r6 = r1
    4987	b7 09 00 00 01 00 00 00	r9 = 0x1
    4988	b7 01 00 00 22 00 00 00	r1 = 0x22
    4989	b7 02 00 00 01 00 00 00	r2 = 0x1
    4990	85 10 00 00 9c f8 ff ff	call -0x764 ; <__rust_alloc>
    4991	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB336_2>
    4992	b7 01 00 00 22 00 00 00	r1 = 0x22
    4993	b7 02 00 00 01 00 00 00	r2 = 0x1
    4994	85 10 00 00 87 02 00 00	call 0x287 ; <alloc::alloc::handle_alloc_error>
    4995	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009c20 <LBB336_2>
    4996	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    4997	7b 10 18 00 00 00 00 00	*(u64 *)(r0 + 0x18) = r1
    4998	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    4999	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    5000	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    5001	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5002	79 81 00 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x0)
    5003	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    5004	b7 01 00 00 01 01 00 00	r1 = 0x101
    5005	6b 10 20 00 00 00 00 00	*(u16 *)(r0 + 0x20) = r1
    5006	b7 01 00 00 00 00 00 00	r1 = 0x0
    5007	7b 1a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r1
    5008	7b 1a 68 ff 00 00 00 00	*(u64 *)(r10 - 0x98) = r1
    5009	7b 1a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r1
    5010	7b 1a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r1
    5011	b7 01 00 00 08 00 00 00	r1 = 0x8
    5012	73 1a 78 ff 00 00 00 00	*(u8 *)(r10 - 0x88) = r1
    5013	7b 7a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r7
    5014	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    5015	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r9
    5016	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    5017	bf a2 00 00 00 00 00 00	r2 = r10
    5018	07 02 00 00 58 ff ff ff	r2 += -0xa8
    5019	bf a7 00 00 00 00 00 00	r7 = r10
    5020	07 07 00 00 78 ff ff ff	r7 += -0x88
    5021	bf a4 00 00 00 00 00 00	r4 = r10
    5022	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5023	bf 61 00 00 00 00 00 00	r1 = r6
    5024	bf 73 00 00 00 00 00 00	r3 = r7
    5025	85 10 00 00 78 fa ff ff	call -0x588 ; <solana_program::instruction::Instruction::new_with_bincode>
    5026	bf 71 00 00 00 00 00 00	r1 = r7
    5027	85 10 00 00 87 f8 ff ff	call -0x779 ; <core::ptr::drop_in_place<solana_program::system_instruction::SystemInstruction>>
    5028	95 00 00 00 00 00 00 00	exit

0000000000009d28 <std::error::Error::type_id>
    5029	18 00 00 00 ed d3 f7 ec 00 00 00 00 03 94 b8 10	r0 = 0x10b89403ecf7d3ed ll
    5031	95 00 00 00 00 00 00 00	exit

0000000000009d40 <std::error::Error::backtrace>
    5032	b7 00 00 00 00 00 00 00	r0 = 0x0
    5033	95 00 00 00 00 00 00 00	exit

0000000000009d50 <std::error::Error::cause>
    5034	b7 02 00 00 00 00 00 00	r2 = 0x0
    5035	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5036	95 00 00 00 00 00 00 00	exit

0000000000009d68 <<solana_program::pubkey::Pubkey as borsh::de::BorshDeserialize>::deserialize>
    5037	bf 16 00 00 00 00 00 00	r6 = r1
    5038	79 21 08 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x8)
    5039	25 01 09 00 1f 00 00 00	if r1 > 0x1f goto +0x9 <LBB408_5>
    5040	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5041	b7 02 00 00 01 00 00 00	r2 = 0x1
    5042	85 10 00 00 68 f8 ff ff	call -0x798 ; <__rust_alloc>
    5043	bf 07 00 00 00 00 00 00	r7 = r0
    5044	55 07 18 00 00 00 00 00	if r7 != 0x0 goto +0x18 <LBB408_3>
    5045	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5046	b7 02 00 00 01 00 00 00	r2 = 0x1
    5047	85 10 00 00 52 02 00 00	call 0x252 ; <alloc::alloc::handle_alloc_error>
    5048	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009dc8 <LBB408_5>
    5049	07 01 00 00 e0 ff ff ff	r1 += -0x20
    5050	7b 12 08 00 00 00 00 00	*(u64 *)(r2 + 0x8) = r1
    5051	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    5052	bf 13 00 00 00 00 00 00	r3 = r1
    5053	07 03 00 00 20 00 00 00	r3 += 0x20
    5054	7b 32 00 00 00 00 00 00	*(u64 *)(r2 + 0x0) = r3
    5055	79 12 0f 00 00 00 00 00	r2 = *(u64 *)(r1 + 0xf)
    5056	79 13 07 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x7)
    5057	61 14 03 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x3)
    5058	63 46 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r4
    5059	61 14 00 00 00 00 00 00	r4 = *(u32 *)(r1 + 0x0)
    5060	63 46 01 00 00 00 00 00	*(u32 *)(r6 + 0x1) = r4
    5061	71 14 1f 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x1f)
    5062	73 46 20 00 00 00 00 00	*(u8 *)(r6 + 0x20) = r4
    5063	79 11 17 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x17)
    5064	7b 16 18 00 00 00 00 00	*(u64 *)(r6 + 0x18) = r1
    5065	7b 36 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r3
    5066	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5067	b7 01 00 00 00 00 00 00	r1 = 0x0
    5068	05 00 23 00 00 00 00 00	goto +0x23 <LBB408_7>

0000000000009e68 <LBB408_3>
    5069	b7 01 00 00 75 74 00 00	r1 = 0x7475
    5070	6b 17 18 00 00 00 00 00	*(u16 *)(r7 + 0x18) = r1
    5071	18 01 00 00 68 20 6f 66 00 00 00 00 20 69 6e 70	r1 = 0x706e6920666f2068 ll
    5073	7b 17 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r1
    5074	18 01 00 00 65 64 20 6c 00 00 00 00 65 6e 67 74	r1 = 0x74676e656c206465 ll
    5076	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    5077	18 01 00 00 55 6e 65 78 00 00 00 00 70 65 63 74	r1 = 0x7463657078656e55 ll
    5079	7b 17 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r1
    5080	b7 01 00 00 18 00 00 00	r1 = 0x18
    5081	b7 02 00 00 08 00 00 00	r2 = 0x8
    5082	85 10 00 00 40 f8 ff ff	call -0x7c0 ; <__rust_alloc>
    5083	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB408_6>
    5084	b7 01 00 00 18 00 00 00	r1 = 0x18
    5085	b7 02 00 00 08 00 00 00	r2 = 0x8
    5086	85 10 00 00 2b 02 00 00	call 0x22b ; <alloc::alloc::handle_alloc_error>
    5087	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000009f00 <LBB408_6>
    5088	b7 01 00 00 1a 00 00 00	r1 = 0x1a
    5089	7b 10 10 00 00 00 00 00	*(u64 *)(r0 + 0x10) = r1
    5090	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5091	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    5092	bf a1 00 00 00 00 00 00	r1 = r10
    5093	07 01 00 00 f0 ff ff ff	r1 += -0x10
    5094	b7 02 00 00 14 00 00 00	r2 = 0x14
    5095	bf 03 00 00 00 00 00 00	r3 = r0
    5096	18 04 00 00 c8 3c 01 00 00 00 00 00 00 00 00 00	r4 = 0x13cc8 ll
    5098	85 10 00 00 fb 00 00 00	call 0xfb ; <std::io::error::Error::_new>
    5099	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    5100	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5101	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5102	7b 16 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r1
    5103	b7 01 00 00 01 00 00 00	r1 = 0x1

0000000000009f80 <LBB408_7>
    5104	73 16 00 00 00 00 00 00	*(u8 *)(r6 + 0x0) = r1
    5105	95 00 00 00 00 00 00 00	exit

0000000000009f90 <solana_program::sysvar::rent::<impl solana_program::sysvar::Sysvar for solana_program::rent::Rent>::get>
    5106	bf 16 00 00 00 00 00 00	r6 = r1
    5107	b7 01 00 00 32 00 00 00	r1 = 0x32
    5108	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
    5109	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 40	r1 = 0x4000000000000000 ll
    5111	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5112	b7 01 00 00 98 0d 00 00	r1 = 0xd98
    5113	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    5114	bf a1 00 00 00 00 00 00	r1 = r10
    5115	07 01 00 00 e8 ff ff ff	r1 += -0x18
    5116	85 10 00 00 ff ff ff ff	call -0x1 ; sol_get_rent_sysvar
    5117	bf 61 00 00 00 00 00 00	r1 = r6
    5118	07 01 00 00 08 00 00 00	r1 += 0x8
    5119	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB623_2>
    5120	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    5121	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    5122	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    5123	7b 21 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r2
    5124	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    5125	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5126	b7 01 00 00 00 00 00 00	r1 = 0x0
    5127	05 00 03 00 00 00 00 00	goto +0x3 <LBB623_3>

000000000000a040 <LBB623_2>
    5128	bf 02 00 00 00 00 00 00	r2 = r0
    5129	85 10 00 00 1a fe ff ff	call -0x1e6 ; <<solana_program::program_error::ProgramError as core::convert::From<u64>>::from>
    5130	b7 01 00 00 01 00 00 00	r1 = 0x1

000000000000a058 <LBB623_3>
    5131	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5132	95 00 00 00 00 00 00 00	exit

000000000000a068 <bincode::config::DefaultOptions::new>
    5133	95 00 00 00 00 00 00 00	exit

000000000000a070 <<std::sys_common::wtf8::Wtf8Buf as core::ops::deref::DerefMut>::deref_mut>
    5134	79 23 10 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x10)
    5135	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    5136	79 22 00 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x0)
    5137	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    5138	95 00 00 00 00 00 00 00	exit

000000000000a098 <<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Display>::fmt>
    5139	bf 23 00 00 00 00 00 00	r3 = r2
    5140	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5141	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5142	85 10 00 00 32 08 00 00	call 0x832 ; <<str as core::fmt::Display>::fmt>
    5143	95 00 00 00 00 00 00 00	exit

000000000000a0c0 <<std::error::<impl core::convert::From<alloc::string::String> for alloc::boxed::Box<dyn std::error::Error+core::marker::Sync+core::marker::Send>>::from::StringError as core::fmt::Debug>::fmt>
    5144	bf 23 00 00 00 00 00 00	r3 = r2
    5145	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5146	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5147	85 10 00 00 e8 06 00 00	call 0x6e8 ; <<str as core::fmt::Debug>::fmt>
    5148	95 00 00 00 00 00 00 00	exit

000000000000a0e8 <std::io::error::ErrorKind::as_str>
    5149	b7 03 00 00 10 00 00 00	r3 = 0x10
    5150	57 02 00 00 ff 00 00 00	r2 &= 0xff
    5151	65 02 0a 00 13 00 00 00	if r2 s> 0x13 goto +0xa <LBB213_28>
    5152	65 02 18 00 09 00 00 00	if r2 s> 0x9 goto +0x18 <LBB213_15>
    5153	65 02 24 00 04 00 00 00	if r2 s> 0x4 goto +0x24 <LBB213_9>
    5154	65 02 35 00 01 00 00 00	if r2 s> 0x1 goto +0x35 <LBB213_6>
    5155	18 04 00 00 f0 2a 01 00 00 00 00 00 00 00 00 00	r4 = 0x12af0 ll
    5157	15 02 bd 00 00 00 00 00	if r2 == 0x0 goto +0xbd <LBB213_82>
    5158	18 04 00 00 d5 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12dd5 ll
    5160	b7 03 00 00 11 00 00 00	r3 = 0x11
    5161	05 00 b9 00 00 00 00 00	goto +0xb9 <LBB213_82>

000000000000a150 <LBB213_28>
    5162	65 02 07 00 1d 00 00 00	if r2 s> 0x1d goto +0x7 <LBB213_42>
    5163	65 02 20 00 18 00 00 00	if r2 s> 0x18 goto +0x20 <LBB213_36>
    5164	65 02 30 00 15 00 00 00	if r2 s> 0x15 goto +0x30 <LBB213_33>
    5165	15 02 58 00 14 00 00 00	if r2 == 0x14 goto +0x58 <LBB213_68>
    5166	18 04 00 00 63 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c63 ll
    5168	b7 03 00 00 0c 00 00 00	r3 = 0xc
    5169	05 00 b1 00 00 00 00 00	goto +0xb1 <LBB213_82>

000000000000a190 <LBB213_42>
    5170	65 02 0c 00 22 00 00 00	if r2 s> 0x22 goto +0xc <LBB213_49>
    5171	65 02 2e 00 1f 00 00 00	if r2 s> 0x1f goto +0x2e <LBB213_46>
    5172	15 02 55 00 1e 00 00 00	if r2 == 0x1e goto +0x55 <LBB213_74>
    5173	18 04 00 00 d6 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bd6 ll
    5175	b7 03 00 00 1b 00 00 00	r3 = 0x1b
    5176	05 00 aa 00 00 00 00 00	goto +0xaa <LBB213_82>

000000000000a1c8 <LBB213_15>
    5177	65 02 18 00 0e 00 00 00	if r2 s> 0xe goto +0x18 <LBB213_22>
    5178	65 02 2d 00 0b 00 00 00	if r2 s> 0xb goto +0x2d <LBB213_19>
    5179	15 02 52 00 0a 00 00 00	if r2 == 0xa goto +0x52 <LBB213_62>
    5180	18 04 00 00 57 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d57 ll
    5182	05 00 8b 00 00 00 00 00	goto +0x8b <LBB213_81>

000000000000a1f8 <LBB213_49>
    5183	65 02 2e 00 25 00 00 00	if r2 s> 0x25 goto +0x2e <LBB213_53>
    5184	15 02 51 00 23 00 00 00	if r2 == 0x23 goto +0x51 <LBB213_77>
    5185	15 02 54 00 24 00 00 00	if r2 == 0x24 goto +0x54 <LBB213_78>
    5186	18 04 00 00 6b 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b6b ll
    5188	b7 03 00 00 16 00 00 00	r3 = 0x16
    5189	05 00 9d 00 00 00 00 00	goto +0x9d <LBB213_82>

000000000000a230 <LBB213_9>
    5190	65 02 2d 00 06 00 00 00	if r2 s> 0x6 goto +0x2d <LBB213_12>
    5191	15 02 51 00 05 00 00 00	if r2 == 0x5 goto +0x51 <LBB213_58>
    5192	18 04 00 00 9e 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d9e ll
    5194	b7 03 00 00 12 00 00 00	r3 = 0x12
    5195	05 00 97 00 00 00 00 00	goto +0x97 <LBB213_82>

000000000000a260 <LBB213_36>
    5196	65 02 2d 00 1a 00 00 00	if r2 s> 0x1a goto +0x2d <LBB213_39>
    5197	15 02 4f 00 19 00 00 00	if r2 == 0x19 goto +0x4f <LBB213_71>
    5198	18 04 00 00 20 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c20 ll
    5200	b7 03 00 00 19 00 00 00	r3 = 0x19
    5201	05 00 91 00 00 00 00 00	goto +0x91 <LBB213_82>

000000000000a290 <LBB213_22>
    5202	65 02 2d 00 10 00 00 00	if r2 s> 0x10 goto +0x2d <LBB213_25>
    5203	15 02 4d 00 0f 00 00 00	if r2 == 0xf goto +0x4d <LBB213_65>
    5204	18 04 00 00 fd 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cfd ll
    5206	b7 03 00 00 13 00 00 00	r3 = 0x13
    5207	05 00 8b 00 00 00 00 00	goto +0x8b <LBB213_82>

000000000000a2c0 <LBB213_6>
    5208	15 02 4c 00 02 00 00 00	if r2 == 0x2 goto +0x4c <LBB213_56>
    5209	15 02 4f 00 03 00 00 00	if r2 == 0x3 goto +0x4f <LBB213_57>
    5210	18 04 00 00 20 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b20 ll
    5212	05 00 86 00 00 00 00 00	goto +0x86 <LBB213_82>

000000000000a2e8 <LBB213_33>
    5213	15 02 4e 00 16 00 00 00	if r2 == 0x16 goto +0x4e <LBB213_69>
    5214	15 02 51 00 17 00 00 00	if r2 == 0x17 goto +0x51 <LBB213_70>
    5215	18 04 00 00 e0 2a 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ae0 ll
    5217	05 00 81 00 00 00 00 00	goto +0x81 <LBB213_82>

000000000000a310 <LBB213_46>
    5218	15 02 51 00 20 00 00 00	if r2 == 0x20 goto +0x51 <LBB213_75>
    5219	15 02 54 00 21 00 00 00	if r2 == 0x21 goto +0x54 <LBB213_76>
    5220	18 04 00 00 a1 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12ba1 ll
    5222	b7 03 00 00 16 00 00 00	r3 = 0x16
    5223	05 00 7b 00 00 00 00 00	goto +0x7b <LBB213_82>

000000000000a340 <LBB213_19>
    5224	15 02 53 00 0c 00 00 00	if r2 == 0xc goto +0x53 <LBB213_63>
    5225	15 02 56 00 0d 00 00 00	if r2 == 0xd goto +0x56 <LBB213_64>
    5226	18 04 00 00 1e 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d1e ll
    5228	b7 03 00 00 0f 00 00 00	r3 = 0xf
    5229	05 00 75 00 00 00 00 00	goto +0x75 <LBB213_82>

000000000000a370 <LBB213_53>
    5230	15 02 55 00 26 00 00 00	if r2 == 0x26 goto +0x55 <LBB213_79>
    5231	15 02 58 00 27 00 00 00	if r2 == 0x27 goto +0x58 <LBB213_80>
    5232	18 04 00 00 40 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b40 ll
    5234	b7 03 00 00 13 00 00 00	r3 = 0x13
    5235	05 00 6f 00 00 00 00 00	goto +0x6f <LBB213_82>

000000000000a3a0 <LBB213_12>
    5236	15 02 57 00 07 00 00 00	if r2 == 0x7 goto +0x57 <LBB213_60>
    5237	15 02 5a 00 08 00 00 00	if r2 == 0x8 goto +0x5a <LBB213_61>
    5238	18 04 00 00 6e 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d6e ll
    5240	b7 03 00 00 15 00 00 00	r3 = 0x15
    5241	05 00 69 00 00 00 00 00	goto +0x69 <LBB213_82>

000000000000a3d0 <LBB213_39>
    5242	15 02 59 00 1b 00 00 00	if r2 == 0x1b goto +0x59 <LBB213_72>
    5243	15 02 5c 00 1c 00 00 00	if r2 == 0x1c goto +0x5c <LBB213_73>
    5244	18 04 00 00 f1 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bf1 ll
    5246	b7 03 00 00 14 00 00 00	r3 = 0x14
    5247	05 00 63 00 00 00 00 00	goto +0x63 <LBB213_82>

000000000000a400 <LBB213_25>
    5248	15 02 5b 00 11 00 00 00	if r2 == 0x11 goto +0x5b <LBB213_66>
    5249	15 02 5e 00 12 00 00 00	if r2 == 0x12 goto +0x5e <LBB213_67>
    5250	18 04 00 00 86 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c86 ll
    5252	b7 03 00 00 19 00 00 00	r3 = 0x19
    5253	05 00 5d 00 00 00 00 00	goto +0x5d <LBB213_82>

000000000000a430 <LBB213_68>
    5254	18 04 00 00 6f 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c6f ll
    5256	b7 03 00 00 17 00 00 00	r3 = 0x17
    5257	05 00 59 00 00 00 00 00	goto +0x59 <LBB213_82>

000000000000a450 <LBB213_74>
    5258	18 04 00 00 68 26 01 00 00 00 00 00 00 00 00 00	r4 = 0x12668 ll
    5260	b7 03 00 00 08 00 00 00	r3 = 0x8
    5261	05 00 55 00 00 00 00 00	goto +0x55 <LBB213_82>

000000000000a470 <LBB213_62>
    5262	18 04 00 00 62 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d62 ll
    5264	b7 03 00 00 0c 00 00 00	r3 = 0xc
    5265	05 00 51 00 00 00 00 00	goto +0x51 <LBB213_82>

000000000000a490 <LBB213_77>
    5266	18 04 00 00 8c 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b8c ll
    5268	b7 03 00 00 15 00 00 00	r3 = 0x15
    5269	05 00 4d 00 00 00 00 00	goto +0x4d <LBB213_82>

000000000000a4b0 <LBB213_78>
    5270	18 04 00 00 81 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b81 ll
    5272	05 00 31 00 00 00 00 00	goto +0x31 <LBB213_81>

000000000000a4c8 <LBB213_58>
    5273	18 04 00 00 b0 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12db0 ll
    5275	b7 03 00 00 13 00 00 00	r3 = 0x13
    5276	05 00 46 00 00 00 00 00	goto +0x46 <LBB213_82>

000000000000a4e8 <LBB213_71>
    5277	18 04 00 00 39 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c39 ll
    5279	b7 03 00 00 17 00 00 00	r3 = 0x17
    5280	05 00 42 00 00 00 00 00	goto +0x42 <LBB213_82>

000000000000a508 <LBB213_65>
    5281	18 04 00 00 10 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d10 ll
    5283	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5284	05 00 3e 00 00 00 00 00	goto +0x3e <LBB213_82>

000000000000a528 <LBB213_56>
    5285	18 04 00 00 c3 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12dc3 ll
    5287	b7 03 00 00 12 00 00 00	r3 = 0x12
    5288	05 00 3a 00 00 00 00 00	goto +0x3a <LBB213_82>

000000000000a548 <LBB213_57>
    5289	18 04 00 00 10 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b10 ll
    5291	05 00 37 00 00 00 00 00	goto +0x37 <LBB213_82>

000000000000a560 <LBB213_69>
    5292	18 04 00 00 5a 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c5a ll
    5294	b7 03 00 00 09 00 00 00	r3 = 0x9
    5295	05 00 33 00 00 00 00 00	goto +0x33 <LBB213_82>

000000000000a580 <LBB213_70>
    5296	18 04 00 00 50 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c50 ll
    5298	b7 03 00 00 0a 00 00 00	r3 = 0xa
    5299	05 00 2f 00 00 00 00 00	goto +0x2f <LBB213_82>

000000000000a5a0 <LBB213_75>
    5300	18 04 00 00 c8 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bc8 ll
    5302	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5303	05 00 2b 00 00 00 00 00	goto +0x2b <LBB213_82>

000000000000a5c0 <LBB213_76>
    5304	18 04 00 00 b7 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12bb7 ll
    5306	b7 03 00 00 11 00 00 00	r3 = 0x11
    5307	05 00 27 00 00 00 00 00	goto +0x27 <LBB213_82>

000000000000a5e0 <LBB213_63>
    5308	18 04 00 00 42 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d42 ll
    5310	b7 03 00 00 15 00 00 00	r3 = 0x15
    5311	05 00 23 00 00 00 00 00	goto +0x23 <LBB213_82>

000000000000a600 <LBB213_64>
    5312	18 04 00 00 2d 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d2d ll
    5314	b7 03 00 00 15 00 00 00	r3 = 0x15
    5315	05 00 1f 00 00 00 00 00	goto +0x1f <LBB213_82>

000000000000a620 <LBB213_79>
    5316	18 04 00 00 5e 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b5e ll
    5318	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5319	05 00 1b 00 00 00 00 00	goto +0x1b <LBB213_82>

000000000000a640 <LBB213_80>
    5320	18 04 00 00 53 2b 01 00 00 00 00 00 00 00 00 00	r4 = 0x12b53 ll

000000000000a650 <LBB213_81>
    5322	b7 03 00 00 0b 00 00 00	r3 = 0xb
    5323	05 00 17 00 00 00 00 00	goto +0x17 <LBB213_82>

000000000000a660 <LBB213_60>
    5324	18 04 00 00 91 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d91 ll
    5326	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5327	05 00 13 00 00 00 00 00	goto +0x13 <LBB213_82>

000000000000a680 <LBB213_61>
    5328	18 04 00 00 83 2d 01 00 00 00 00 00 00 00 00 00	r4 = 0x12d83 ll
    5330	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5331	05 00 0f 00 00 00 00 00	goto +0xf <LBB213_82>

000000000000a6a0 <LBB213_72>
    5332	18 04 00 00 12 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c12 ll
    5334	b7 03 00 00 0e 00 00 00	r3 = 0xe
    5335	05 00 0b 00 00 00 00 00	goto +0xb <LBB213_82>

000000000000a6c0 <LBB213_73>
    5336	18 04 00 00 05 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c05 ll
    5338	b7 03 00 00 0d 00 00 00	r3 = 0xd
    5339	05 00 07 00 00 00 00 00	goto +0x7 <LBB213_82>

000000000000a6e0 <LBB213_66>
    5340	18 04 00 00 d7 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12cd7 ll
    5342	b7 03 00 00 26 00 00 00	r3 = 0x26
    5343	05 00 03 00 00 00 00 00	goto +0x3 <LBB213_82>

000000000000a700 <LBB213_67>
    5344	18 04 00 00 9f 2c 01 00 00 00 00 00 00 00 00 00	r4 = 0x12c9f ll
    5346	b7 03 00 00 38 00 00 00	r3 = 0x38

000000000000a718 <LBB213_82>
    5347	7b 31 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r3
    5348	7b 41 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r4
    5349	95 00 00 00 00 00 00 00	exit

000000000000a730 <std::io::error::Error::_new>
    5350	bf 48 00 00 00 00 00 00	r8 = r4
    5351	bf 37 00 00 00 00 00 00	r7 = r3
    5352	bf 29 00 00 00 00 00 00	r9 = r2
    5353	bf 16 00 00 00 00 00 00	r6 = r1
    5354	b7 01 00 00 18 00 00 00	r1 = 0x18
    5355	b7 02 00 00 08 00 00 00	r2 = 0x8
    5356	85 10 00 00 2e f7 ff ff	call -0x8d2 ; <__rust_alloc>
    5357	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB214_2>
    5358	b7 01 00 00 18 00 00 00	r1 = 0x18
    5359	b7 02 00 00 08 00 00 00	r2 = 0x8
    5360	85 10 00 00 19 01 00 00	call 0x119 ; <alloc::alloc::handle_alloc_error>
    5361	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a790 <LBB214_2>
    5362	73 90 10 00 00 00 00 00	*(u8 *)(r0 + 0x10) = r9
    5363	7b 80 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r8
    5364	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    5365	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    5366	b7 01 00 00 03 00 00 00	r1 = 0x3
    5367	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5368	95 00 00 00 00 00 00 00	exit

000000000000a7c8 <<std::io::error::Error as core::fmt::Display>::fmt>
    5369	bf 26 00 00 00 00 00 00	r6 = r2
    5370	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    5371	65 02 1f 00 01 00 00 00	if r2 s> 0x1 goto +0x1f <LBB216_3>
    5372	15 02 26 00 00 00 00 00	if r2 == 0x0 goto +0x26 <LBB216_5>
    5373	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x1)
    5374	bf a1 00 00 00 00 00 00	r1 = r10
    5375	07 01 00 00 80 ff ff ff	r1 += -0x80
    5376	85 10 00 00 1c ff ff ff	call -0xe4 ; <std::io::error::ErrorKind::as_str>
    5377	18 01 00 00 d8 ab 00 00 00 00 00 00 00 00 00 00	r1 = 0xabd8 ll
    5379	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    5380	bf a1 00 00 00 00 00 00	r1 = r10
    5381	07 01 00 00 b0 ff ff ff	r1 += -0x50
    5382	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    5383	bf a1 00 00 00 00 00 00	r1 = r10
    5384	07 01 00 00 98 ff ff ff	r1 += -0x68
    5385	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5386	b7 01 00 00 00 00 00 00	r1 = 0x0
    5387	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    5388	b7 01 00 00 01 00 00 00	r1 = 0x1
    5389	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    5390	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    5391	18 01 00 00 40 3d 01 00 00 00 00 00 00 00 00 00	r1 = 0x13d40 ll
    5393	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    5394	79 a1 88 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x78)
    5395	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    5396	79 a1 80 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x80)
    5397	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    5398	bf a2 00 00 00 00 00 00	r2 = r10
    5399	07 02 00 00 d0 ff ff ff	r2 += -0x30
    5400	bf 61 00 00 00 00 00 00	r1 = r6
    5401	85 10 00 00 d6 05 00 00	call 0x5d6 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    5402	05 00 18 00 00 00 00 00	goto +0x18 <LBB216_11>

000000000000a8d8 <LBB216_3>
    5403	15 02 12 00 02 00 00 00	if r2 == 0x2 goto +0x12 <LBB216_10>
    5404	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5405	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    5406	79 22 08 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x8)
    5407	79 23 20 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x20)
    5408	bf 62 00 00 00 00 00 00	r2 = r6
    5409	8d 00 00 00 03 00 00 00	callx r3
    5410	05 00 10 00 00 00 00 00	goto +0x10 <LBB216_11>

000000000000a918 <LBB216_5>
    5411	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x4)
    5412	63 1a 94 ff 00 00 00 00	*(u32 *)(r10 - 0x6c) = r1
    5413	b7 07 00 00 14 00 00 00	r7 = 0x14
    5414	b7 01 00 00 14 00 00 00	r1 = 0x14
    5415	b7 02 00 00 01 00 00 00	r2 = 0x1
    5416	85 10 00 00 f2 f6 ff ff	call -0x90e ; <__rust_alloc>
    5417	55 00 0c 00 00 00 00 00	if r0 != 0x0 goto +0xc <LBB216_7>
    5418	b7 01 00 00 14 00 00 00	r1 = 0x14
    5419	b7 02 00 00 01 00 00 00	r2 = 0x1
    5420	85 10 00 00 dd 00 00 00	call 0xdd ; <alloc::alloc::handle_alloc_error>
    5421	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000a970 <LBB216_10>
    5422	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    5423	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5424	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5425	bf 63 00 00 00 00 00 00	r3 = r6
    5426	85 10 00 00 16 07 00 00	call 0x716 ; <<str as core::fmt::Display>::fmt>

000000000000a998 <LBB216_11>
    5427	bf 06 00 00 00 00 00 00	r6 = r0

000000000000a9a0 <LBB216_12>
    5428	bf 60 00 00 00 00 00 00	r0 = r6
    5429	95 00 00 00 00 00 00 00	exit

000000000000a9b0 <LBB216_7>
    5430	b7 01 00 00 73 66 75 6c	r1 = 0x6c756673
    5431	63 10 10 00 00 00 00 00	*(u32 *)(r0 + 0x10) = r1
    5432	18 01 00 00 6e 20 73 75 00 00 00 00 63 63 65 73	r1 = 0x736563637573206e ll
    5434	7b 10 08 00 00 00 00 00	*(u64 *)(r0 + 0x8) = r1
    5435	18 01 00 00 6f 70 65 72 00 00 00 00 61 74 69 6f	r1 = 0x6f6974617265706f ll
    5437	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r1
    5438	7b 7a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r7
    5439	7b 7a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r7
    5440	7b 0a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r0
    5441	b7 01 00 00 02 00 00 00	r1 = 0x2
    5442	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    5443	bf a1 00 00 00 00 00 00	r1 = r10
    5444	07 01 00 00 b0 ff ff ff	r1 += -0x50
    5445	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5446	b7 01 00 00 00 00 00 00	r1 = 0x0
    5447	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    5448	b7 01 00 00 03 00 00 00	r1 = 0x3
    5449	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    5450	18 01 00 00 50 3d 01 00 00 00 00 00 00 00 00 00	r1 = 0x13d50 ll
    5452	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    5453	18 01 00 00 78 fd 00 00 00 00 00 00 00 00 00 00	r1 = 0xfd78 ll
    5455	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    5456	bf a1 00 00 00 00 00 00	r1 = r10
    5457	07 01 00 00 94 ff ff ff	r1 += -0x6c
    5458	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    5459	18 01 00 00 28 ab 00 00 00 00 00 00 00 00 00 00	r1 = 0xab28 ll
    5461	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    5462	bf a1 00 00 00 00 00 00	r1 = r10
    5463	07 01 00 00 98 ff ff ff	r1 += -0x68
    5464	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    5465	bf a2 00 00 00 00 00 00	r2 = r10
    5466	07 02 00 00 d0 ff ff ff	r2 += -0x30
    5467	bf 61 00 00 00 00 00 00	r1 = r6
    5468	85 10 00 00 93 05 00 00	call 0x593 ; <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    5469	bf 06 00 00 00 00 00 00	r6 = r0
    5470	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
    5471	15 02 d4 ff 00 00 00 00	if r2 == 0x0 goto -0x2c <LBB216_12>
    5472	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    5473	15 01 d2 ff 00 00 00 00	if r1 == 0x0 goto -0x2e <LBB216_12>
    5474	b7 03 00 00 01 00 00 00	r3 = 0x1
    5475	85 10 00 00 b9 f6 ff ff	call -0x947 ; <__rust_dealloc>
    5476	05 00 cf ff 00 00 00 00	goto -0x31 <LBB216_12>

000000000000ab28 <<alloc::string::String as core::fmt::Display>::fmt>
    5477	bf 23 00 00 00 00 00 00	r3 = r2
    5478	79 12 10 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x10)
    5479	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5480	85 10 00 00 e0 06 00 00	call 0x6e0 ; <<str as core::fmt::Display>::fmt>
    5481	95 00 00 00 00 00 00 00	exit

000000000000ab50 <std::process::abort>
    5482	85 10 00 00 0e 00 00 00	call 0xe ; <std::sys::sbf::abort_internal>
    5483	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ab60 <rust_oom>
    5484	18 01 00 00 f2 2d 01 00 00 00 00 00 00 00 00 00	r1 = 0x12df2 ll
    5486	b7 02 00 00 2e 00 00 00	r2 = 0x2e
    5487	85 10 00 00 04 00 00 00	call 0x4 ; <std::sys::sbf::sol_log>
    5488	85 10 00 00 f9 ff ff ff	call -0x7 ; <std::process::abort>
    5489	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ab90 <rust_begin_unwind>
    5490	85 10 00 00 03 00 00 00	call 0x3 ; <std::sys::sbf::panic>
    5491	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000aba0 <std::sys::sbf::sol_log>
    5492	85 10 00 00 ff ff ff ff	call -0x1 ; sol_log_
    5493	95 00 00 00 00 00 00 00	exit

000000000000abb0 <std::sys::sbf::panic>
    5494	85 10 00 00 ff ff ff ff	call -0x1 ; <std::sys::sbf::panic>
    5495	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5496	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000abc8 <std::sys::sbf::abort_internal>
    5497	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5498	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000abd8 <<&T as core::fmt::Display>::fmt>
    5499	bf 23 00 00 00 00 00 00	r3 = r2
    5500	79 12 08 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x8)
    5501	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5502	85 10 00 00 ca 06 00 00	call 0x6ca ; <<str as core::fmt::Display>::fmt>
    5503	95 00 00 00 00 00 00 00	exit

000000000000ac00 <core::ops::function::FnOnce::call_once>
    5504	85 10 00 00 8b 00 00 00	call 0x8b ; <alloc::alloc::handle_alloc_error::rt_error>
    5505	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ac10 <core::ptr::drop_in_place<&u8>>
    5506	95 00 00 00 00 00 00 00	exit

000000000000ac18 <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5507	bf 16 00 00 00 00 00 00	r6 = r1
    5508	bf 24 00 00 00 00 00 00	r4 = r2
    5509	0f 34 00 00 00 00 00 00	r4 += r3
    5510	b7 01 00 00 01 00 00 00	r1 = 0x1
    5511	2d 42 01 00 00 00 00 00	if r2 > r4 goto +0x1 <LBB2_2>
    5512	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000ac48 <LBB2_2>
    5513	57 01 00 00 01 00 00 00	r1 &= 0x1
    5514	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB2_12>
    5515	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5516	bf 17 00 00 00 00 00 00	r7 = r1
    5517	67 07 00 00 01 00 00 00	r7 <<= 0x1
    5518	2d 47 01 00 00 00 00 00	if r7 > r4 goto +0x1 <LBB2_5>
    5519	bf 47 00 00 00 00 00 00	r7 = r4

000000000000ac80 <LBB2_5>
    5520	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB2_7>
    5521	b7 07 00 00 08 00 00 00	r7 = 0x8

000000000000ac90 <LBB2_7>
    5522	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB2_9>
    5523	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    5524	b7 03 00 00 01 00 00 00	r3 = 0x1
    5525	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5526	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5527	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    5528	05 00 02 00 00 00 00 00	goto +0x2 <LBB2_10>

000000000000acc8 <LBB2_9>
    5529	b7 01 00 00 00 00 00 00	r1 = 0x0
    5530	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

000000000000acd8 <LBB2_10>
    5531	bf a1 00 00 00 00 00 00	r1 = r10
    5532	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5533	bf a4 00 00 00 00 00 00	r4 = r10
    5534	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5535	bf 72 00 00 00 00 00 00	r2 = r7
    5536	b7 03 00 00 01 00 00 00	r3 = 0x1
    5537	85 10 00 00 39 00 00 00	call 0x39 ; <alloc::raw_vec::finish_grow>
    5538	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    5539	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB2_14>
    5540	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    5541	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB2_13>

000000000000ad30 <LBB2_12>
    5542	85 10 00 00 5c 00 00 00	call 0x5c ; <alloc::raw_vec::capacity_overflow>
    5543	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ad40 <LBB2_14>
    5544	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5545	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5546	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5547	95 00 00 00 00 00 00 00	exit

000000000000ad60 <LBB2_13>
    5548	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5549	85 10 00 00 5c 00 00 00	call 0x5c ; <alloc::alloc::handle_alloc_error>
    5550	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000ad78 <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    5551	bf 16 00 00 00 00 00 00	r6 = r1
    5552	bf 23 00 00 00 00 00 00	r3 = r2
    5553	07 03 00 00 01 00 00 00	r3 += 0x1
    5554	b7 01 00 00 01 00 00 00	r1 = 0x1
    5555	2d 32 01 00 00 00 00 00	if r2 > r3 goto +0x1 <LBB3_2>
    5556	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000ada8 <LBB3_2>
    5557	57 01 00 00 01 00 00 00	r1 &= 0x1
    5558	55 01 1b 00 00 00 00 00	if r1 != 0x0 goto +0x1b <LBB3_12>
    5559	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5560	bf 17 00 00 00 00 00 00	r7 = r1
    5561	67 07 00 00 01 00 00 00	r7 <<= 0x1
    5562	2d 37 01 00 00 00 00 00	if r7 > r3 goto +0x1 <LBB3_5>
    5563	bf 37 00 00 00 00 00 00	r7 = r3

000000000000ade0 <LBB3_5>
    5564	25 07 01 00 08 00 00 00	if r7 > 0x8 goto +0x1 <LBB3_7>
    5565	b7 07 00 00 08 00 00 00	r7 = 0x8

000000000000adf0 <LBB3_7>
    5566	15 01 06 00 00 00 00 00	if r1 == 0x0 goto +0x6 <LBB3_9>
    5567	79 62 00 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x0)
    5568	b7 03 00 00 01 00 00 00	r3 = 0x1
    5569	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5570	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    5571	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    5572	05 00 02 00 00 00 00 00	goto +0x2 <LBB3_10>

000000000000ae28 <LBB3_9>
    5573	b7 01 00 00 00 00 00 00	r1 = 0x0
    5574	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1

000000000000ae38 <LBB3_10>
    5575	bf a1 00 00 00 00 00 00	r1 = r10
    5576	07 01 00 00 d0 ff ff ff	r1 += -0x30
    5577	bf a4 00 00 00 00 00 00	r4 = r10
    5578	07 04 00 00 e8 ff ff ff	r4 += -0x18
    5579	bf 72 00 00 00 00 00 00	r2 = r7
    5580	b7 03 00 00 01 00 00 00	r3 = 0x1
    5581	85 10 00 00 0d 00 00 00	call 0xd ; <alloc::raw_vec::finish_grow>
    5582	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    5583	55 01 04 00 01 00 00 00	if r1 != 0x1 goto +0x4 <LBB3_14>
    5584	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    5585	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB3_13>

000000000000ae90 <LBB3_12>
    5586	85 10 00 00 30 00 00 00	call 0x30 ; <alloc::raw_vec::capacity_overflow>
    5587	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000aea0 <LBB3_14>
    5588	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5589	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5590	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5591	95 00 00 00 00 00 00 00	exit

000000000000aec0 <LBB3_13>
    5592	79 a1 d8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x28)
    5593	85 10 00 00 30 00 00 00	call 0x30 ; <alloc::alloc::handle_alloc_error>
    5594	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000aed8 <alloc::raw_vec::finish_grow>
    5595	bf 38 00 00 00 00 00 00	r8 = r3
    5596	bf 27 00 00 00 00 00 00	r7 = r2
    5597	bf 16 00 00 00 00 00 00	r6 = r1
    5598	55 08 04 00 00 00 00 00	if r8 != 0x0 goto +0x4 <LBB4_12>
    5599	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5600	b7 01 00 00 01 00 00 00	r1 = 0x1
    5601	b7 07 00 00 00 00 00 00	r7 = 0x0
    5602	05 00 1d 00 00 00 00 00	goto +0x1d <LBB4_2>

000000000000af18 <LBB4_12>
    5603	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    5604	15 01 0d 00 00 00 00 00	if r1 == 0x0 goto +0xd <LBB4_7>
    5605	79 42 08 00 00 00 00 00	r2 = *(u64 *)(r4 + 0x8)
    5606	55 02 06 00 00 00 00 00	if r2 != 0x0 goto +0x6 <LBB4_6>
    5607	15 07 14 00 00 00 00 00	if r7 == 0x0 goto +0x14 <LBB4_9>
    5608	bf 71 00 00 00 00 00 00	r1 = r7
    5609	bf 82 00 00 00 00 00 00	r2 = r8
    5610	85 10 00 00 30 f6 ff ff	call -0x9d0 ; <__rust_alloc>
    5611	15 00 0c 00 00 00 00 00	if r0 == 0x0 goto +0xc <LBB4_11>
    5612	05 00 11 00 00 00 00 00	goto +0x11 <LBB4_10>

000000000000af68 <LBB4_6>
    5613	bf 83 00 00 00 00 00 00	r3 = r8
    5614	bf 74 00 00 00 00 00 00	r4 = r7
    5615	85 10 00 00 2f f6 ff ff	call -0x9d1 ; <__rust_realloc>
    5616	15 00 07 00 00 00 00 00	if r0 == 0x0 goto +0x7 <LBB4_11>
    5617	05 00 0c 00 00 00 00 00	goto +0xc <LBB4_10>

000000000000af90 <LBB4_7>
    5618	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB4_9>
    5619	bf 71 00 00 00 00 00 00	r1 = r7
    5620	bf 82 00 00 00 00 00 00	r2 = r8
    5621	85 10 00 00 25 f6 ff ff	call -0x9db ; <__rust_alloc>
    5622	15 00 01 00 00 00 00 00	if r0 == 0x0 goto +0x1 <LBB4_11>
    5623	05 00 06 00 00 00 00 00	goto +0x6 <LBB4_10>

000000000000afc0 <LBB4_11>
    5624	7b 76 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r7
    5625	b7 01 00 00 01 00 00 00	r1 = 0x1
    5626	bf 87 00 00 00 00 00 00	r7 = r8
    5627	05 00 04 00 00 00 00 00	goto +0x4 <LBB4_2>

000000000000afe0 <LBB4_9>
    5628	b7 07 00 00 00 00 00 00	r7 = 0x0
    5629	bf 80 00 00 00 00 00 00	r0 = r8

000000000000aff0 <LBB4_10>
    5630	7b 06 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r0
    5631	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000b000 <LBB4_2>
    5632	7b 16 00 00 00 00 00 00	*(u64 *)(r6 + 0x0) = r1
    5633	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    5634	95 00 00 00 00 00 00 00	exit

000000000000b018 <alloc::raw_vec::capacity_overflow>
    5635	18 01 00 00 3c 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12e3c ll
    5637	b7 02 00 00 11 00 00 00	r2 = 0x11
    5638	18 03 00 00 80 3d 01 00 00 00 00 00 00 00 00 00	r3 = 0x13d80 ll
    5640	85 10 00 00 2a 02 00 00	call 0x22a ; <core::panicking::panic>
    5641	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b050 <alloc::alloc::handle_alloc_error>
    5642	85 10 00 00 05 00 00 00	call 0x5 ; <core::intrinsics::const_eval_select>
    5643	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b060 <alloc::alloc::handle_alloc_error::rt_error>
    5644	85 10 00 00 14 f6 ff ff	call -0x9ec ; <__rust_alloc_error_handler>
    5645	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b070 <__rg_oom>
    5646	85 10 00 00 5d ff ff ff	call -0xa3 ; <rust_oom>
    5647	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b080 <core::intrinsics::const_eval_select>
    5648	85 10 00 00 6f ff ff ff	call -0x91 ; <core::ops::function::FnOnce::call_once>
    5649	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b090 <alloc::fmt::format>
    5650	bf 26 00 00 00 00 00 00	r6 = r2
    5651	bf 17 00 00 00 00 00 00	r7 = r1
    5652	b7 08 00 00 00 00 00 00	r8 = 0x0
    5653	79 63 28 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x28)
    5654	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5655	79 62 08 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x8)
    5656	bf 24 00 00 00 00 00 00	r4 = r2
    5657	67 04 00 00 04 00 00 00	r4 <<= 0x4
    5658	15 04 09 00 00 00 00 00	if r4 == 0x0 goto +0x9 <LBB20_3>
    5659	b7 00 00 00 00 00 00 00	r0 = 0x0
    5660	bf 15 00 00 00 00 00 00	r5 = r1
    5661	07 05 00 00 08 00 00 00	r5 += 0x8

000000000000b0f0 <LBB20_2>
    5662	79 58 00 00 00 00 00 00	r8 = *(u64 *)(r5 + 0x0)
    5663	0f 08 00 00 00 00 00 00	r8 += r0
    5664	07 05 00 00 10 00 00 00	r5 += 0x10
    5665	07 04 00 00 f0 ff ff ff	r4 += -0x10
    5666	bf 80 00 00 00 00 00 00	r0 = r8
    5667	55 04 fa ff 00 00 00 00	if r4 != 0x0 goto -0x6 <LBB20_2>

000000000000b120 <LBB20_3>
    5668	15 03 11 00 00 00 00 00	if r3 == 0x0 goto +0x11 <LBB20_10>
    5669	15 02 06 00 00 00 00 00	if r2 == 0x0 goto +0x6 <LBB20_7>
    5670	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    5671	55 01 04 00 00 00 00 00	if r1 != 0x0 goto +0x4 <LBB20_7>
    5672	b7 00 00 00 01 00 00 00	r0 = 0x1
    5673	b7 01 00 00 00 00 00 00	r1 = 0x0
    5674	b7 02 00 00 10 00 00 00	r2 = 0x10
    5675	2d 82 16 00 00 00 00 00	if r2 > r8 goto +0x16 <LBB20_13>

000000000000b160 <LBB20_7>
    5676	bf 82 00 00 00 00 00 00	r2 = r8
    5677	0f 22 00 00 00 00 00 00	r2 += r2
    5678	b7 01 00 00 00 00 00 00	r1 = 0x0
    5679	b7 00 00 00 01 00 00 00	r0 = 0x1
    5680	b7 03 00 00 01 00 00 00	r3 = 0x1
    5681	2d 28 01 00 00 00 00 00	if r8 > r2 goto +0x1 <LBB20_9>
    5682	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000b198 <LBB20_9>
    5683	57 03 00 00 01 00 00 00	r3 &= 0x1
    5684	bf 28 00 00 00 00 00 00	r8 = r2
    5685	55 03 0c 00 00 00 00 00	if r3 != 0x0 goto +0xc <LBB20_13>

000000000000b1b0 <LBB20_10>
    5686	b7 00 00 00 01 00 00 00	r0 = 0x1
    5687	b7 01 00 00 00 00 00 00	r1 = 0x0
    5688	15 08 09 00 00 00 00 00	if r8 == 0x0 goto +0x9 <LBB20_13>
    5689	bf 81 00 00 00 00 00 00	r1 = r8
    5690	b7 02 00 00 01 00 00 00	r2 = 0x1
    5691	85 10 00 00 df f5 ff ff	call -0xa21 ; <__rust_alloc>
    5692	bf 81 00 00 00 00 00 00	r1 = r8
    5693	55 00 04 00 00 00 00 00	if r0 != 0x0 goto +0x4 <LBB20_13>
    5694	bf 81 00 00 00 00 00 00	r1 = r8
    5695	b7 02 00 00 01 00 00 00	r2 = 0x1
    5696	85 10 00 00 c9 ff ff ff	call -0x37 ; <alloc::alloc::handle_alloc_error>
    5697	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b210 <LBB20_13>
    5698	b7 02 00 00 00 00 00 00	r2 = 0x0
    5699	7b 27 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r2
    5700	7b 17 08 00 00 00 00 00	*(u64 *)(r7 + 0x8) = r1
    5701	7b 07 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r0
    5702	7b 7a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r7
    5703	bf a7 00 00 00 00 00 00	r7 = r10
    5704	07 07 00 00 d0 ff ff ff	r7 += -0x30
    5705	bf 71 00 00 00 00 00 00	r1 = r7
    5706	bf 62 00 00 00 00 00 00	r2 = r6
    5707	b7 03 00 00 30 00 00 00	r3 = 0x30
    5708	85 10 00 00 78 0c 00 00	call 0xc78 ; <memcpy>
    5709	bf a1 00 00 00 00 00 00	r1 = r10
    5710	07 01 00 00 c8 ff ff ff	r1 += -0x38
    5711	18 02 00 00 d0 3d 01 00 00 00 00 00 00 00 00 00	r2 = 0x13dd0 ll
    5713	bf 73 00 00 00 00 00 00	r3 = r7
    5714	85 10 00 00 45 02 00 00	call 0x245 ; <core::fmt::write>
    5715	15 00 0b 00 00 00 00 00	if r0 == 0x0 goto +0xb <LBB20_15>
    5716	bf a3 00 00 00 00 00 00	r3 = r10
    5717	07 03 00 00 d0 ff ff ff	r3 += -0x30
    5718	18 01 00 00 4d 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12e4d ll
    5720	b7 02 00 00 33 00 00 00	r2 = 0x33
    5721	18 04 00 00 b0 3d 01 00 00 00 00 00 00 00 00 00	r4 = 0x13db0 ll
    5723	18 05 00 00 98 3d 01 00 00 00 00 00 00 00 00 00	r5 = 0x13d98 ll
    5725	85 10 00 00 0f 02 00 00	call 0x20f ; <core::result::unwrap_failed>
    5726	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b2f8 <LBB20_15>
    5727	95 00 00 00 00 00 00 00	exit

000000000000b300 <alloc::string::String::push>
    5728	bf 27 00 00 00 00 00 00	r7 = r2
    5729	bf 16 00 00 00 00 00 00	r6 = r1
    5730	bf 71 00 00 00 00 00 00	r1 = r7
    5731	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5732	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5733	25 01 0c 00 7f 00 00 00	if r1 > 0x7f goto +0xc <LBB30_4>
    5734	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)
    5735	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5736	5d 12 03 00 00 00 00 00	if r2 != r1 goto +0x3 <LBB30_3>
    5737	bf 61 00 00 00 00 00 00	r1 = r6
    5738	85 10 00 00 44 ff ff ff	call -0xbc ; <alloc::raw_vec::RawVec<T,A>::reserve_for_push>
    5739	79 62 10 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x10)

000000000000b360 <LBB30_3>
    5740	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5741	0f 21 00 00 00 00 00 00	r1 += r2
    5742	73 71 00 00 00 00 00 00	*(u8 *)(r1 + 0x0) = r7
    5743	07 02 00 00 01 00 00 00	r2 += 0x1
    5744	7b 26 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r2
    5745	05 00 42 00 00 00 00 00	goto +0x42 <LBB30_12>

000000000000b390 <LBB30_4>
    5746	b7 02 00 00 00 00 00 00	r2 = 0x0
    5747	63 2a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r2
    5748	b7 02 00 00 00 08 00 00	r2 = 0x800
    5749	2d 12 13 00 00 00 00 00	if r2 > r1 goto +0x13 <LBB30_6>
    5750	bf 71 00 00 00 00 00 00	r1 = r7
    5751	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5752	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5753	b7 02 00 00 00 00 01 00	r2 = 0x10000
    5754	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB30_7>
    5755	05 00 16 00 00 00 00 00	goto +0x16 <LBB30_8>

000000000000b3e0 <LBB30_7>
    5756	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    5757	47 07 00 00 80 00 00 00	r7 |= 0x80
    5758	73 7a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r7
    5759	bf 12 00 00 00 00 00 00	r2 = r1
    5760	77 02 00 00 0c 00 00 00	r2 >>= 0xc
    5761	47 02 00 00 e0 00 00 00	r2 |= 0xe0
    5762	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    5763	77 01 00 00 06 00 00 00	r1 >>= 0x6
    5764	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5765	47 01 00 00 80 00 00 00	r1 |= 0x80
    5766	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5767	b7 07 00 00 03 00 00 00	r7 = 0x3
    5768	05 00 1a 00 00 00 00 00	goto +0x1a <LBB30_9>

000000000000b448 <LBB30_6>
    5769	bf 71 00 00 00 00 00 00	r1 = r7
    5770	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5771	47 01 00 00 80 00 00 00	r1 |= 0x80
    5772	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5773	77 07 00 00 06 00 00 00	r7 >>= 0x6
    5774	47 07 00 00 c0 00 00 00	r7 |= 0xc0
    5775	73 7a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r7
    5776	b7 07 00 00 02 00 00 00	r7 = 0x2
    5777	05 00 11 00 00 00 00 00	goto +0x11 <LBB30_9>

000000000000b490 <LBB30_8>
    5778	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    5779	47 07 00 00 80 00 00 00	r7 |= 0x80
    5780	73 7a ff ff 00 00 00 00	*(u8 *)(r10 - 0x1) = r7
    5781	bf 12 00 00 00 00 00 00	r2 = r1
    5782	77 02 00 00 12 00 00 00	r2 >>= 0x12
    5783	47 02 00 00 f0 00 00 00	r2 |= 0xf0
    5784	73 2a fc ff 00 00 00 00	*(u8 *)(r10 - 0x4) = r2
    5785	bf 12 00 00 00 00 00 00	r2 = r1
    5786	77 02 00 00 06 00 00 00	r2 >>= 0x6
    5787	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    5788	47 02 00 00 80 00 00 00	r2 |= 0x80
    5789	73 2a fe ff 00 00 00 00	*(u8 *)(r10 - 0x2) = r2
    5790	77 01 00 00 0c 00 00 00	r1 >>= 0xc
    5791	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    5792	47 01 00 00 80 00 00 00	r1 |= 0x80
    5793	73 1a fd ff 00 00 00 00	*(u8 *)(r10 - 0x3) = r1
    5794	b7 07 00 00 04 00 00 00	r7 = 0x4

000000000000b518 <LBB30_9>
    5795	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)
    5796	79 61 08 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x8)
    5797	1f 81 00 00 00 00 00 00	r1 -= r8
    5798	3d 71 05 00 00 00 00 00	if r1 >= r7 goto +0x5 <LBB30_11>
    5799	bf 61 00 00 00 00 00 00	r1 = r6
    5800	bf 82 00 00 00 00 00 00	r2 = r8
    5801	bf 73 00 00 00 00 00 00	r3 = r7
    5802	85 10 00 00 d8 fe ff ff	call -0x128 ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5803	79 68 10 00 00 00 00 00	r8 = *(u64 *)(r6 + 0x10)

000000000000b560 <LBB30_11>
    5804	79 61 00 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x0)
    5805	0f 81 00 00 00 00 00 00	r1 += r8
    5806	bf a2 00 00 00 00 00 00	r2 = r10
    5807	07 02 00 00 fc ff ff ff	r2 += -0x4
    5808	bf 73 00 00 00 00 00 00	r3 = r7
    5809	85 10 00 00 13 0c 00 00	call 0xc13 ; <memcpy>
    5810	0f 78 00 00 00 00 00 00	r8 += r7
    5811	7b 86 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r8

000000000000b5a0 <LBB30_12>
    5812	95 00 00 00 00 00 00 00	exit

000000000000b5a8 <<&mut W as core::fmt::Write>::write_str>
    5813	bf 36 00 00 00 00 00 00	r6 = r3
    5814	bf 28 00 00 00 00 00 00	r8 = r2
    5815	79 17 00 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x0)
    5816	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)
    5817	79 71 08 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x8)
    5818	1f 91 00 00 00 00 00 00	r1 -= r9
    5819	3d 61 05 00 00 00 00 00	if r1 >= r6 goto +0x5 <LBB60_2>
    5820	bf 71 00 00 00 00 00 00	r1 = r7
    5821	bf 92 00 00 00 00 00 00	r2 = r9
    5822	bf 63 00 00 00 00 00 00	r3 = r6
    5823	85 10 00 00 c3 fe ff ff	call -0x13d ; <alloc::raw_vec::RawVec<T,A>::reserve::do_reserve_and_handle>
    5824	79 79 10 00 00 00 00 00	r9 = *(u64 *)(r7 + 0x10)

000000000000b608 <LBB60_2>
    5825	79 71 00 00 00 00 00 00	r1 = *(u64 *)(r7 + 0x0)
    5826	0f 91 00 00 00 00 00 00	r1 += r9
    5827	bf 82 00 00 00 00 00 00	r2 = r8
    5828	bf 63 00 00 00 00 00 00	r3 = r6
    5829	85 10 00 00 ff 0b 00 00	call 0xbff ; <memcpy>
    5830	0f 69 00 00 00 00 00 00	r9 += r6
    5831	7b 97 10 00 00 00 00 00	*(u64 *)(r7 + 0x10) = r9
    5832	b7 00 00 00 00 00 00 00	r0 = 0x0
    5833	95 00 00 00 00 00 00 00	exit

000000000000b650 <<&mut W as core::fmt::Write>::write_char>
    5834	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5835	85 10 00 00 94 ff ff ff	call -0x6c ; <alloc::string::String::push>
    5836	b7 00 00 00 00 00 00 00	r0 = 0x0
    5837	95 00 00 00 00 00 00 00	exit

000000000000b670 <<&mut W as core::fmt::Write>::write_fmt>
    5838	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5839	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    5840	bf a6 00 00 00 00 00 00	r6 = r10
    5841	07 06 00 00 d0 ff ff ff	r6 += -0x30
    5842	bf 61 00 00 00 00 00 00	r1 = r6
    5843	b7 03 00 00 30 00 00 00	r3 = 0x30
    5844	85 10 00 00 f0 0b 00 00	call 0xbf0 ; <memcpy>
    5845	bf a1 00 00 00 00 00 00	r1 = r10
    5846	07 01 00 00 c8 ff ff ff	r1 += -0x38
    5847	18 02 00 00 d0 3d 01 00 00 00 00 00 00 00 00 00	r2 = 0x13dd0 ll
    5849	bf 63 00 00 00 00 00 00	r3 = r6
    5850	85 10 00 00 bd 01 00 00	call 0x1bd ; <core::fmt::write>
    5851	95 00 00 00 00 00 00 00	exit

000000000000b6e0 <core::ops::function::FnOnce::call_once>
    5852	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    5853	85 10 00 00 ff ff ff ff	call -0x1 ; abort
    5854	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000b6f8 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>>
    5855	95 00 00 00 00 00 00 00	exit

000000000000b700 <<core::ops::range::Range<Idx> as core::fmt::Debug>::fmt>
    5856	bf 26 00 00 00 00 00 00	r6 = r2
    5857	bf 17 00 00 00 00 00 00	r7 = r1
    5858	85 10 00 00 f6 07 00 00	call 0x7f6 ; <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    5859	bf 01 00 00 00 00 00 00	r1 = r0
    5860	b7 00 00 00 01 00 00 00	r0 = 0x1
    5861	55 01 13 00 00 00 00 00	if r1 != 0x0 goto +0x13 <LBB70_2>
    5862	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    5863	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    5864	18 03 00 00 98 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12e98 ll
    5866	7b 3a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r3
    5867	b7 03 00 00 00 00 00 00	r3 = 0x0
    5868	7b 3a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r3
    5869	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    5870	18 03 00 00 00 3e 01 00 00 00 00 00 00 00 00 00	r3 = 0x13e00 ll
    5872	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    5873	b7 03 00 00 01 00 00 00	r3 = 0x1
    5874	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    5875	bf a3 00 00 00 00 00 00	r3 = r10
    5876	07 03 00 00 d0 ff ff ff	r3 += -0x30
    5877	85 10 00 00 a2 01 00 00	call 0x1a2 ; <core::fmt::write>
    5878	bf 01 00 00 00 00 00 00	r1 = r0
    5879	b7 00 00 00 01 00 00 00	r0 = 0x1
    5880	15 01 01 00 00 00 00 00	if r1 == 0x0 goto +0x1 <LBB70_3>

000000000000b7c8 <LBB70_2>
    5881	95 00 00 00 00 00 00 00	exit

000000000000b7d0 <LBB70_3>
    5882	07 07 00 00 08 00 00 00	r7 += 0x8
    5883	bf 71 00 00 00 00 00 00	r1 = r7
    5884	bf 62 00 00 00 00 00 00	r2 = r6
    5885	85 10 00 00 db 07 00 00	call 0x7db ; <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    5886	bf 01 00 00 00 00 00 00	r1 = r0
    5887	b7 00 00 00 00 00 00 00	r0 = 0x0
    5888	15 01 f8 ff 00 00 00 00	if r1 == 0x0 goto -0x8 <LBB70_2>
    5889	b7 00 00 00 01 00 00 00	r0 = 0x1
    5890	05 00 f6 ff 00 00 00 00	goto -0xa <LBB70_2>

000000000000b818 <<T as core::any::Any>::type_id>
    5891	18 00 00 00 24 5c 34 ae 00 00 00 00 4d b3 17 4e	r0 = 0x4e17b34dae345c24 ll
    5893	95 00 00 00 00 00 00 00	exit

000000000000b830 <<core::cell::BorrowError as core::fmt::Debug>::fmt>
    5894	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    5895	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    5896	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    5897	18 02 00 00 9a 2e 01 00 00 00 00 00 00 00 00 00	r2 = 0x12e9a ll
    5899	b7 03 00 00 0b 00 00 00	r3 = 0xb
    5900	8d 00 00 00 04 00 00 00	callx r4
    5901	95 00 00 00 00 00 00 00	exit

000000000000b870 <core::char::methods::<impl char>::escape_debug_ext>
    5902	bf 27 00 00 00 00 00 00	r7 = r2
    5903	bf 16 00 00 00 00 00 00	r6 = r1
    5904	b7 01 00 00 02 00 00 00	r1 = 0x2
    5905	bf 75 00 00 00 00 00 00	r5 = r7
    5906	67 05 00 00 20 00 00 00	r5 <<= 0x20
    5907	77 05 00 00 20 00 00 00	r5 >>= 0x20
    5908	65 05 09 00 21 00 00 00	if r5 s> 0x21 goto +0x9 <LBB91_4>
    5909	b7 04 00 00 74 00 00 00	r4 = 0x74
    5910	15 05 ad 00 09 00 00 00	if r5 == 0x9 goto +0xad <LBB91_14>
    5911	15 05 04 00 0a 00 00 00	if r5 == 0xa goto +0x4 <LBB91_10>
    5912	15 05 01 00 0d 00 00 00	if r5 == 0xd goto +0x1 <LBB91_8>
    5913	05 00 07 00 00 00 00 00	goto +0x7 <LBB91_7>

000000000000b8d0 <LBB91_8>
    5914	b7 04 00 00 72 00 00 00	r4 = 0x72
    5915	05 00 a8 00 00 00 00 00	goto +0xa8 <LBB91_14>

000000000000b8e0 <LBB91_10>
    5916	b7 04 00 00 6e 00 00 00	r4 = 0x6e
    5917	05 00 a6 00 00 00 00 00	goto +0xa6 <LBB91_14>

000000000000b8f0 <LBB91_4>
    5918	15 05 5c 00 22 00 00 00	if r5 == 0x22 goto +0x5c <LBB91_12>
    5919	15 05 a0 00 27 00 00 00	if r5 == 0x27 goto +0xa0 <LBB91_13>
    5920	15 05 5f 00 5c 00 00 00	if r5 == 0x5c goto +0x5f <LBB91_11>

000000000000b908 <LBB91_7>
    5921	57 03 00 00 01 00 00 00	r3 &= 0x1
    5922	15 03 03 00 00 00 00 00	if r3 == 0x0 goto +0x3 <LBB91_16>
    5923	bf 71 00 00 00 00 00 00	r1 = r7
    5924	85 10 00 00 cd 09 00 00	call 0x9cd ; <core::unicode::unicode_data::grapheme_extend::lookup>
    5925	55 00 1a 00 00 00 00 00	if r0 != 0x0 goto +0x1a <LBB91_28>

000000000000b930 <LBB91_16>
    5926	bf 71 00 00 00 00 00 00	r1 = r7
    5927	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5928	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5929	b7 02 00 00 00 00 01 00	r2 = 0x10000
    5930	2d 12 57 00 00 00 00 00	if r2 > r1 goto +0x57 <LBB91_18>
    5931	b7 02 00 00 00 00 02 00	r2 = 0x20000
    5932	2d 12 01 00 00 00 00 00	if r2 > r1 goto +0x1 <LBB91_27>
    5933	05 00 67 00 00 00 00 00	goto +0x67 <LBB91_19>

000000000000b970 <LBB91_27>
    5934	18 01 00 00 a8 34 01 00 00 00 00 00 00 00 00 00	r1 = 0x134a8 ll
    5936	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    5937	b7 01 00 00 b6 01 00 00	r1 = 0x1b6
    5938	7b 1a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r1
    5939	b7 01 00 00 c0 00 00 00	r1 = 0xc0
    5940	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    5941	bf a5 00 00 00 00 00 00	r5 = r10
    5942	bf 71 00 00 00 00 00 00	r1 = r7
    5943	18 02 00 00 94 33 01 00 00 00 00 00 00 00 00 00	r2 = 0x13394 ll
    5945	b7 03 00 00 2a 00 00 00	r3 = 0x2a
    5946	18 04 00 00 e8 33 01 00 00 00 00 00 00 00 00 00	r4 = 0x133e8 ll
    5948	85 10 00 00 de 06 00 00	call 0x6de ; <core::unicode::printable::check>
    5949	b7 01 00 00 01 00 00 00	r1 = 0x1
    5950	bf 74 00 00 00 00 00 00	r4 = r7
    5951	55 00 84 00 00 00 00 00	if r0 != 0x0 goto +0x84 <LBB91_14>

000000000000ba00 <LBB91_28>
    5952	bf 71 00 00 00 00 00 00	r1 = r7
    5953	47 01 00 00 01 00 00 00	r1 |= 0x1
    5954	67 01 00 00 20 00 00 00	r1 <<= 0x20
    5955	77 01 00 00 20 00 00 00	r1 >>= 0x20
    5956	bf 12 00 00 00 00 00 00	r2 = r1
    5957	77 02 00 00 01 00 00 00	r2 >>= 0x1
    5958	4f 21 00 00 00 00 00 00	r1 |= r2
    5959	bf 12 00 00 00 00 00 00	r2 = r1
    5960	77 02 00 00 02 00 00 00	r2 >>= 0x2
    5961	4f 21 00 00 00 00 00 00	r1 |= r2
    5962	bf 12 00 00 00 00 00 00	r2 = r1
    5963	77 02 00 00 04 00 00 00	r2 >>= 0x4
    5964	4f 21 00 00 00 00 00 00	r1 |= r2
    5965	67 07 00 00 20 00 00 00	r7 <<= 0x20
    5966	77 07 00 00 20 00 00 00	r7 >>= 0x20
    5967	18 02 00 00 00 00 00 00 00 00 00 00 05 00 00 00	r2 = 0x500000000 ll
    5969	4f 27 00 00 00 00 00 00	r7 |= r2
    5970	bf 12 00 00 00 00 00 00	r2 = r1
    5971	77 02 00 00 08 00 00 00	r2 >>= 0x8
    5972	4f 21 00 00 00 00 00 00	r1 |= r2
    5973	bf 12 00 00 00 00 00 00	r2 = r1
    5974	77 02 00 00 10 00 00 00	r2 >>= 0x10
    5975	4f 21 00 00 00 00 00 00	r1 |= r2
    5976	bf 12 00 00 00 00 00 00	r2 = r1
    5977	77 02 00 00 20 00 00 00	r2 >>= 0x20
    5978	4f 21 00 00 00 00 00 00	r1 |= r2
    5979	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    5980	18 02 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r2 = 0x5555555555555555 ll
    5982	bf 13 00 00 00 00 00 00	r3 = r1
    5983	77 03 00 00 01 00 00 00	r3 >>= 0x1
    5984	5f 23 00 00 00 00 00 00	r3 &= r2
    5985	1f 31 00 00 00 00 00 00	r1 -= r3
    5986	18 03 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r3 = 0x3333333333333333 ll
    5988	bf 12 00 00 00 00 00 00	r2 = r1
    5989	5f 32 00 00 00 00 00 00	r2 &= r3
    5990	77 01 00 00 02 00 00 00	r1 >>= 0x2
    5991	5f 31 00 00 00 00 00 00	r1 &= r3
    5992	0f 12 00 00 00 00 00 00	r2 += r1
    5993	bf 21 00 00 00 00 00 00	r1 = r2
    5994	77 01 00 00 04 00 00 00	r1 >>= 0x4
    5995	0f 12 00 00 00 00 00 00	r2 += r1
    5996	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    5998	5f 12 00 00 00 00 00 00	r2 &= r1
    5999	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    6001	2f 12 00 00 00 00 00 00	r2 *= r1
    6002	77 02 00 00 38 00 00 00	r2 >>= 0x38
    6003	07 02 00 00 e0 ff ff ff	r2 += -0x20
    6004	18 01 00 00 fc ff ff ff 00 00 00 00 00 00 00 00	r1 = 0xfffffffc ll
    6006	5f 12 00 00 00 00 00 00	r2 &= r1
    6007	b7 01 00 00 03 00 00 00	r1 = 0x3
    6008	77 02 00 00 02 00 00 00	r2 >>= 0x2
    6009	a7 02 00 00 07 00 00 00	r2 ^= 0x7
    6010	05 00 49 00 00 00 00 00	goto +0x49 <LBB91_14>

000000000000bbd8 <LBB91_12>
    6011	b7 04 00 00 22 00 00 00	r4 = 0x22
    6012	bf 35 00 00 00 00 00 00	r5 = r3
    6013	57 05 00 00 00 00 01 00	r5 &= 0x10000
    6014	15 05 a2 ff 00 00 00 00	if r5 == 0x0 goto -0x5e <LBB91_7>
    6015	05 00 44 00 00 00 00 00	goto +0x44 <LBB91_14>

000000000000bc00 <LBB91_11>
    6016	b7 04 00 00 5c 00 00 00	r4 = 0x5c
    6017	05 00 42 00 00 00 00 00	goto +0x42 <LBB91_14>

000000000000bc10 <LBB91_18>
    6018	18 01 00 00 65 32 01 00 00 00 00 00 00 00 00 00	r1 = 0x13265 ll
    6020	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    6021	b7 01 00 00 2f 01 00 00	r1 = 0x12f
    6022	7b 1a 10 f0 00 00 00 00	*(u64 *)(r10 - 0xff0) = r1
    6023	b7 01 00 00 20 01 00 00	r1 = 0x120
    6024	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    6025	bf a5 00 00 00 00 00 00	r5 = r10
    6026	bf 71 00 00 00 00 00 00	r1 = r7
    6027	18 02 00 00 f5 30 01 00 00 00 00 00 00 00 00 00	r2 = 0x130f5 ll
    6029	b7 03 00 00 28 00 00 00	r3 = 0x28
    6030	18 04 00 00 45 31 01 00 00 00 00 00 00 00 00 00	r4 = 0x13145 ll
    6032	85 10 00 00 8a 06 00 00	call 0x68a ; <core::unicode::printable::check>
    6033	b7 01 00 00 01 00 00 00	r1 = 0x1
    6034	bf 74 00 00 00 00 00 00	r4 = r7
    6035	55 00 30 00 00 00 00 00	if r0 != 0x0 goto +0x30 <LBB91_14>
    6036	05 00 ab ff 00 00 00 00	goto -0x55 <LBB91_28>

000000000000bca8 <LBB91_19>
    6037	bf 71 00 00 00 00 00 00	r1 = r7
    6038	57 01 00 00 e0 ff 1f 00	r1 &= 0x1fffe0
    6039	15 01 a8 ff e0 a6 02 00	if r1 == 0x2a6e0 goto -0x58 <LBB91_28>
    6040	bf 71 00 00 00 00 00 00	r1 = r7
    6041	07 01 00 00 c7 48 fd ff	r1 += -0x2b739
    6042	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6043	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6044	b7 02 00 00 07 00 00 00	r2 = 0x7
    6045	2d 12 a2 ff 00 00 00 00	if r2 > r1 goto -0x5e <LBB91_28>
    6046	bf 71 00 00 00 00 00 00	r1 = r7
    6047	57 01 00 00 fe ff 1f 00	r1 &= 0x1ffffe
    6048	15 01 9f ff 1e b8 02 00	if r1 == 0x2b81e goto -0x61 <LBB91_28>
    6049	bf 71 00 00 00 00 00 00	r1 = r7
    6050	07 01 00 00 5e 31 fd ff	r1 += -0x2cea2
    6051	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6052	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6053	b7 02 00 00 0e 00 00 00	r2 = 0xe
    6054	2d 12 99 ff 00 00 00 00	if r2 > r1 goto -0x67 <LBB91_28>
    6055	bf 71 00 00 00 00 00 00	r1 = r7
    6056	07 01 00 00 1f 14 fd ff	r1 += -0x2ebe1
    6057	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6058	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6059	b7 02 00 00 1f 0c 00 00	r2 = 0xc1f
    6060	2d 12 93 ff 00 00 00 00	if r2 > r1 goto -0x6d <LBB91_28>
    6061	bf 71 00 00 00 00 00 00	r1 = r7
    6062	07 01 00 00 e2 05 fd ff	r1 += -0x2fa1e
    6063	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6064	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6065	b7 02 00 00 e2 05 00 00	r2 = 0x5e2
    6066	2d 12 8d ff 00 00 00 00	if r2 > r1 goto -0x73 <LBB91_28>
    6067	bf 71 00 00 00 00 00 00	r1 = r7
    6068	07 01 00 00 b5 ec fc ff	r1 += -0x3134b
    6069	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6070	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6071	b7 02 00 00 b5 ed 0a 00	r2 = 0xaedb5
    6072	2d 12 87 ff 00 00 00 00	if r2 > r1 goto -0x79 <LBB91_28>
    6073	b7 01 00 00 01 00 00 00	r1 = 0x1
    6074	bf 73 00 00 00 00 00 00	r3 = r7
    6075	67 03 00 00 20 00 00 00	r3 <<= 0x20
    6076	77 03 00 00 20 00 00 00	r3 >>= 0x20
    6077	bf 74 00 00 00 00 00 00	r4 = r7
    6078	25 03 81 ff ef 01 0e 00	if r3 > 0xe01ef goto -0x7f <LBB91_28>
    6079	05 00 04 00 00 00 00 00	goto +0x4 <LBB91_14>

000000000000be00 <LBB91_13>
    6080	b7 04 00 00 27 00 00 00	r4 = 0x27
    6081	bf 35 00 00 00 00 00 00	r5 = r3
    6082	57 05 00 00 00 01 00 00	r5 &= 0x100
    6083	15 05 5d ff 00 00 00 00	if r5 == 0x0 goto -0xa3 <LBB91_7>

000000000000be20 <LBB91_14>
    6084	7b 26 08 00 00 00 00 00	*(u64 *)(r6 + 0x8) = r2
    6085	63 46 04 00 00 00 00 00	*(u32 *)(r6 + 0x4) = r4
    6086	63 16 00 00 00 00 00 00	*(u32 *)(r6 + 0x0) = r1
    6087	7b 76 10 00 00 00 00 00	*(u64 *)(r6 + 0x10) = r7
    6088	95 00 00 00 00 00 00 00	exit

000000000000be48 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt>
    6089	bf 18 00 00 00 00 00 00	r8 = r1
    6090	79 26 20 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x20)
    6091	79 27 28 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x28)
    6092	79 74 18 00 00 00 00 00	r4 = *(u64 *)(r7 + 0x18)
    6093	bf 61 00 00 00 00 00 00	r1 = r6
    6094	18 02 00 00 d1 2e 01 00 00 00 00 00 00 00 00 00	r2 = 0x12ed1 ll
    6096	b7 03 00 00 0c 00 00 00	r3 = 0xc
    6097	8d 00 00 00 04 00 00 00	callx r4
    6098	b7 09 00 00 01 00 00 00	r9 = 0x1
    6099	55 00 5d 00 00 00 00 00	if r0 != 0x0 goto +0x5d <LBB125_6>
    6100	79 81 10 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x10)
    6101	15 01 1a 00 00 00 00 00	if r1 == 0x0 goto +0x1a <LBB125_3>
    6102	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    6103	18 01 00 00 f8 06 01 00 00 00 00 00 00 00 00 00	r1 = 0x106f8 ll
    6105	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    6106	bf a1 00 00 00 00 00 00	r1 = r10
    6107	07 01 00 00 98 ff ff ff	r1 += -0x68
    6108	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6109	bf a1 00 00 00 00 00 00	r1 = r10
    6110	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6111	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6112	b7 01 00 00 00 00 00 00	r1 = 0x0
    6113	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6114	b7 01 00 00 02 00 00 00	r1 = 0x2
    6115	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6116	18 01 00 00 60 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e60 ll
    6118	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6119	b7 09 00 00 01 00 00 00	r9 = 0x1
    6120	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    6121	bf a3 00 00 00 00 00 00	r3 = r10
    6122	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6123	bf 61 00 00 00 00 00 00	r1 = r6
    6124	bf 72 00 00 00 00 00 00	r2 = r7
    6125	85 10 00 00 aa 00 00 00	call 0xaa ; <core::fmt::write>
    6126	55 00 42 00 00 00 00 00	if r0 != 0x0 goto +0x42 <LBB125_6>
    6127	05 00 21 00 00 00 00 00	goto +0x21 <LBB125_5>

000000000000bf80 <LBB125_3>
    6128	79 89 00 00 00 00 00 00	r9 = *(u64 *)(r8 + 0x0)
    6129	79 81 08 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x8)
    6130	79 12 18 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x18)
    6131	bf 91 00 00 00 00 00 00	r1 = r9
    6132	8d 00 00 00 02 00 00 00	callx r2
    6133	18 01 00 00 f4 bc c7 ec 00 00 00 00 1e a9 f2 7e	r1 = 0x7ef2a91eecc7bcf4 ll
    6135	5d 10 19 00 00 00 00 00	if r0 != r1 goto +0x19 <LBB125_5>
    6136	7b 9a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r9
    6137	18 01 00 00 c0 06 01 00 00 00 00 00 00 00 00 00	r1 = 0x106c0 ll
    6139	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    6140	bf a1 00 00 00 00 00 00	r1 = r10
    6141	07 01 00 00 98 ff ff ff	r1 += -0x68
    6142	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6143	bf a1 00 00 00 00 00 00	r1 = r10
    6144	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6145	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6146	b7 01 00 00 00 00 00 00	r1 = 0x0
    6147	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6148	b7 01 00 00 02 00 00 00	r1 = 0x2
    6149	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6150	18 01 00 00 60 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e60 ll
    6152	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6153	b7 09 00 00 01 00 00 00	r9 = 0x1
    6154	7b 9a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r9
    6155	bf a3 00 00 00 00 00 00	r3 = r10
    6156	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6157	bf 61 00 00 00 00 00 00	r1 = r6
    6158	bf 72 00 00 00 00 00 00	r2 = r7
    6159	85 10 00 00 88 00 00 00	call 0x88 ; <core::fmt::write>
    6160	55 00 20 00 00 00 00 00	if r0 != 0x0 goto +0x20 <LBB125_6>

000000000000c088 <LBB125_5>
    6161	79 81 18 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x18)
    6162	bf 12 00 00 00 00 00 00	r2 = r1
    6163	07 02 00 00 14 00 00 00	r2 += 0x14
    6164	7b 2a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r2
    6165	18 02 00 00 a0 00 01 00 00 00 00 00 00 00 00 00	r2 = 0x100a0 ll
    6167	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    6168	7b 2a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r2
    6169	bf 12 00 00 00 00 00 00	r2 = r1
    6170	07 02 00 00 10 00 00 00	r2 += 0x10
    6171	7b 2a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r2
    6172	18 02 00 00 60 07 01 00 00 00 00 00 00 00 00 00	r2 = 0x10760 ll
    6174	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    6175	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6176	bf a1 00 00 00 00 00 00	r1 = r10
    6177	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6178	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6179	b7 01 00 00 00 00 00 00	r1 = 0x0
    6180	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6181	b7 01 00 00 03 00 00 00	r1 = 0x3
    6182	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6183	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6184	18 01 00 00 10 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e10 ll
    6186	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6187	bf a3 00 00 00 00 00 00	r3 = r10
    6188	07 03 00 00 d0 ff ff ff	r3 += -0x30
    6189	bf 61 00 00 00 00 00 00	r1 = r6
    6190	bf 72 00 00 00 00 00 00	r2 = r7
    6191	85 10 00 00 68 00 00 00	call 0x68 ; <core::fmt::write>
    6192	bf 09 00 00 00 00 00 00	r9 = r0

000000000000c188 <LBB125_6>
    6193	bf 90 00 00 00 00 00 00	r0 = r9
    6194	95 00 00 00 00 00 00 00	exit

000000000000c198 <core::panicking::panic>
    6195	18 04 00 00 98 2e 01 00 00 00 00 00 00 00 00 00	r4 = 0x12e98 ll
    6197	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    6198	b7 04 00 00 00 00 00 00	r4 = 0x0
    6199	7b 4a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r4
    6200	7b 4a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r4
    6201	b7 04 00 00 01 00 00 00	r4 = 0x1
    6202	7b 4a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r4
    6203	bf a4 00 00 00 00 00 00	r4 = r10
    6204	07 04 00 00 f0 ff ff ff	r4 += -0x10
    6205	7b 4a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r4
    6206	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6207	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6208	bf a1 00 00 00 00 00 00	r1 = r10
    6209	07 01 00 00 c0 ff ff ff	r1 += -0x40
    6210	bf 32 00 00 00 00 00 00	r2 = r3
    6211	85 10 00 00 1d 00 00 00	call 0x1d ; <core::panicking::panic_fmt>
    6212	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c228 <core::panicking::panic_bounds_check>
    6213	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    6214	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    6215	bf a1 00 00 00 00 00 00	r1 = r10
    6216	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6217	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6218	b7 01 00 00 00 00 00 00	r1 = 0x0
    6219	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    6220	b7 01 00 00 02 00 00 00	r1 = 0x2
    6221	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6222	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    6223	18 01 00 00 80 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e80 ll
    6225	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    6226	bf a1 00 00 00 00 00 00	r1 = r10
    6227	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6228	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6229	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    6231	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6232	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6233	bf a1 00 00 00 00 00 00	r1 = r10
    6234	07 01 00 00 a8 ff ff ff	r1 += -0x58
    6235	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6236	bf a1 00 00 00 00 00 00	r1 = r10
    6237	07 01 00 00 b0 ff ff ff	r1 += -0x50
    6238	bf 32 00 00 00 00 00 00	r2 = r3
    6239	85 10 00 00 01 00 00 00	call 0x1 ; <core::panicking::panic_fmt>
    6240	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c308 <core::panicking::panic_fmt>
    6241	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6242	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6243	18 01 00 00 40 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13e40 ll
    6245	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6246	18 01 00 00 98 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12e98 ll
    6248	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6249	bf a1 00 00 00 00 00 00	r1 = r10
    6250	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6251	85 10 00 00 06 fd ff ff	call -0x2fa ; <rust_begin_unwind>
    6252	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c368 <core::result::unwrap_failed>
    6253	7b 2a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r2
    6254	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    6255	7b 4a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r4
    6256	7b 3a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r3
    6257	bf a1 00 00 00 00 00 00	r1 = r10
    6258	07 01 00 00 e0 ff ff ff	r1 += -0x20
    6259	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6260	b7 01 00 00 00 00 00 00	r1 = 0x0
    6261	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    6262	b7 01 00 00 02 00 00 00	r1 = 0x2
    6263	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6264	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    6265	18 01 00 00 a0 3e 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ea0 ll
    6267	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    6268	18 01 00 00 90 06 01 00 00 00 00 00 00 00 00 00	r1 = 0x10690 ll
    6270	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    6271	bf a1 00 00 00 00 00 00	r1 = r10
    6272	07 01 00 00 a0 ff ff ff	r1 += -0x60
    6273	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6274	18 01 00 00 60 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10760 ll
    6276	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    6277	bf a1 00 00 00 00 00 00	r1 = r10
    6278	07 01 00 00 90 ff ff ff	r1 += -0x70
    6279	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6280	bf a1 00 00 00 00 00 00	r1 = r10
    6281	07 01 00 00 b0 ff ff ff	r1 += -0x50
    6282	bf 52 00 00 00 00 00 00	r2 = r5
    6283	85 10 00 00 d5 ff ff ff	call -0x2b ; <core::panicking::panic_fmt>
    6284	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000c468 <core::fmt::Formatter::new>
    6285	b7 04 00 00 03 00 00 00	r4 = 0x3
    6286	73 41 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r4
    6287	18 04 00 00 00 00 00 00 00 00 00 00 20 00 00 00	r4 = 0x2000000000 ll
    6289	7b 41 30 00 00 00 00 00	*(u64 *)(r1 + 0x30) = r4
    6290	7b 31 28 00 00 00 00 00	*(u64 *)(r1 + 0x28) = r3
    6291	7b 21 20 00 00 00 00 00	*(u64 *)(r1 + 0x20) = r2
    6292	b7 02 00 00 00 00 00 00	r2 = 0x0
    6293	7b 21 10 00 00 00 00 00	*(u64 *)(r1 + 0x10) = r2
    6294	7b 21 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r2
    6295	95 00 00 00 00 00 00 00	exit

000000000000c4c0 <core::fmt::write>
    6296	b7 04 00 00 03 00 00 00	r4 = 0x3
    6297	73 4a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r4
    6298	18 04 00 00 00 00 00 00 00 00 00 00 20 00 00 00	r4 = 0x2000000000 ll
    6300	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6301	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r2
    6302	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    6303	b7 07 00 00 00 00 00 00	r7 = 0x0
    6304	7b 7a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r7
    6305	7b 7a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r7
    6306	79 38 10 00 00 00 00 00	r8 = *(u64 *)(r3 + 0x10)
    6307	7b 3a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r3
    6308	55 08 1e 00 00 00 00 00	if r8 != 0x0 goto +0x1e <LBB172_4>
    6309	79 36 28 00 00 00 00 00	r6 = *(u64 *)(r3 + 0x28)
    6310	15 06 6b 00 00 00 00 00	if r6 == 0x0 goto +0x6b <LBB172_22>
    6311	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6312	79 18 20 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x20)
    6313	b7 07 00 00 00 00 00 00	r7 = 0x0
    6314	67 06 00 00 04 00 00 00	r6 <<= 0x4
    6315	07 08 00 00 08 00 00 00	r8 += 0x8
    6316	79 19 00 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x0)
    6317	07 09 00 00 08 00 00 00	r9 += 0x8

000000000000c570 <LBB172_3>
    6318	79 93 00 00 00 00 00 00	r3 = *(u64 *)(r9 + 0x0)
    6319	55 03 01 00 00 00 00 00	if r3 != 0x0 goto +0x1 <LBB172_26>
    6320	05 00 06 00 00 00 00 00	goto +0x6 <LBB172_25>

000000000000c588 <LBB172_26>
    6321	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6322	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6323	79 92 f8 ff 00 00 00 00	r2 = *(u64 *)(r9 - 0x8)
    6324	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6325	8d 00 00 00 04 00 00 00	callx r4
    6326	55 00 6e 00 00 00 00 00	if r0 != 0x0 goto +0x6e <LBB172_28>

000000000000c5b8 <LBB172_25>
    6327	79 81 f8 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x8)
    6328	79 83 00 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x0)
    6329	bf a2 00 00 00 00 00 00	r2 = r10
    6330	07 02 00 00 c0 ff ff ff	r2 += -0x40
    6331	8d 00 00 00 03 00 00 00	callx r3
    6332	55 00 68 00 00 00 00 00	if r0 != 0x0 goto +0x68 <LBB172_28>
    6333	07 07 00 00 01 00 00 00	r7 += 0x1
    6334	07 08 00 00 10 00 00 00	r8 += 0x10
    6335	07 09 00 00 10 00 00 00	r9 += 0x10
    6336	07 06 00 00 f0 ff ff ff	r6 += -0x10
    6337	15 06 50 00 00 00 00 00	if r6 == 0x0 goto +0x50 <LBB172_22>
    6338	05 00 eb ff 00 00 00 00	goto -0x15 <LBB172_3>

000000000000c618 <LBB172_4>
    6339	79 39 18 00 00 00 00 00	r9 = *(u64 *)(r3 + 0x18)
    6340	15 09 4d 00 00 00 00 00	if r9 == 0x0 goto +0x4d <LBB172_22>
    6341	b7 07 00 00 00 00 00 00	r7 = 0x0
    6342	07 08 00 00 30 00 00 00	r8 += 0x30
    6343	27 09 00 00 38 00 00 00	r9 *= 0x38
    6344	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6345	79 16 00 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x0)
    6346	07 06 00 00 08 00 00 00	r6 += 0x8

000000000000c658 <LBB172_6>
    6347	79 63 00 00 00 00 00 00	r3 = *(u64 *)(r6 + 0x0)
    6348	55 03 0e 00 00 00 00 00	if r3 != 0x0 goto +0xe <LBB172_20>

000000000000c668 <LBB172_7>
    6349	79 a1 b8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x48)
    6350	79 12 20 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x20)
    6351	61 81 f8 ff 00 00 00 00	r1 = *(u32 *)(r8 - 0x8)
    6352	63 1a f4 ff 00 00 00 00	*(u32 *)(r10 - 0xc) = r1
    6353	71 81 00 00 00 00 00 00	r1 = *(u8 *)(r8 + 0x0)
    6354	73 1a f8 ff 00 00 00 00	*(u8 *)(r10 - 0x8) = r1
    6355	61 81 fc ff 00 00 00 00	r1 = *(u32 *)(r8 - 0x4)
    6356	63 1a f0 ff 00 00 00 00	*(u32 *)(r10 - 0x10) = r1
    6357	79 81 f0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x10)
    6358	79 84 e8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x18)
    6359	15 04 0a 00 00 00 00 00	if r4 == 0x0 goto +0xa <LBB172_10>
    6360	b7 03 00 00 00 00 00 00	r3 = 0x0
    6361	15 04 0a 00 01 00 00 00	if r4 == 0x1 goto +0xa <LBB172_11>
    6362	05 00 13 00 00 00 00 00	goto +0x13 <LBB172_13>

000000000000c6d8 <LBB172_20>
    6363	79 a1 e8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x18)
    6364	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6365	79 62 f8 ff 00 00 00 00	r2 = *(u64 *)(r6 - 0x8)
    6366	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6367	8d 00 00 00 04 00 00 00	callx r4
    6368	55 00 44 00 00 00 00 00	if r0 != 0x0 goto +0x44 <LBB172_28>
    6369	05 00 eb ff 00 00 00 00	goto -0x15 <LBB172_7>

000000000000c710 <LBB172_10>
    6370	b7 03 00 00 01 00 00 00	r3 = 0x1
    6371	05 00 0a 00 00 00 00 00	goto +0xa <LBB172_13>

000000000000c720 <LBB172_11>
    6372	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6373	bf 24 00 00 00 00 00 00	r4 = r2
    6374	0f 14 00 00 00 00 00 00	r4 += r1
    6375	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
    6376	18 00 00 00 e0 b6 00 00 00 00 00 00 00 00 00 00	r0 = 0xb6e0 ll
    6378	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB172_13>
    6379	b7 03 00 00 01 00 00 00	r3 = 0x1
    6380	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    6381	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

000000000000c770 <LBB172_13>
    6382	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6383	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
    6384	79 81 e0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x20)
    6385	79 84 d8 ff 00 00 00 00	r4 = *(u64 *)(r8 - 0x28)
    6386	15 04 03 00 00 00 00 00	if r4 == 0x0 goto +0x3 <LBB172_16>
    6387	b7 03 00 00 00 00 00 00	r3 = 0x0
    6388	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB172_17>
    6389	05 00 0c 00 00 00 00 00	goto +0xc <LBB172_19>

000000000000c7b0 <LBB172_16>
    6390	b7 03 00 00 01 00 00 00	r3 = 0x1
    6391	05 00 0a 00 00 00 00 00	goto +0xa <LBB172_19>

000000000000c7c0 <LBB172_17>
    6392	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6393	bf 24 00 00 00 00 00 00	r4 = r2
    6394	0f 14 00 00 00 00 00 00	r4 += r1
    6395	79 45 08 00 00 00 00 00	r5 = *(u64 *)(r4 + 0x8)
    6396	18 00 00 00 e0 b6 00 00 00 00 00 00 00 00 00 00	r0 = 0xb6e0 ll
    6398	5d 05 03 00 00 00 00 00	if r5 != r0 goto +0x3 <LBB172_19>
    6399	b7 03 00 00 01 00 00 00	r3 = 0x1
    6400	79 41 00 00 00 00 00 00	r1 = *(u64 *)(r4 + 0x0)
    6401	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)

000000000000c810 <LBB172_19>
    6402	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6403	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    6404	79 81 d0 ff 00 00 00 00	r1 = *(u64 *)(r8 - 0x30)
    6405	67 01 00 00 04 00 00 00	r1 <<= 0x4
    6406	0f 12 00 00 00 00 00 00	r2 += r1
    6407	79 21 00 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x0)
    6408	79 23 08 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x8)
    6409	bf a2 00 00 00 00 00 00	r2 = r10
    6410	07 02 00 00 c0 ff ff ff	r2 += -0x40
    6411	8d 00 00 00 03 00 00 00	callx r3
    6412	55 00 18 00 00 00 00 00	if r0 != 0x0 goto +0x18 <LBB172_28>
    6413	07 07 00 00 01 00 00 00	r7 += 0x1
    6414	07 08 00 00 38 00 00 00	r8 += 0x38
    6415	07 06 00 00 10 00 00 00	r6 += 0x10
    6416	07 09 00 00 c8 ff ff ff	r9 += -0x38
    6417	55 09 b9 ff 00 00 00 00	if r9 != 0x0 goto -0x47 <LBB172_6>

000000000000c890 <LBB172_22>
    6418	bf 72 00 00 00 00 00 00	r2 = r7
    6419	67 02 00 00 04 00 00 00	r2 <<= 0x4
    6420	79 a3 b8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x48)
    6421	79 31 00 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x0)
    6422	0f 21 00 00 00 00 00 00	r1 += r2
    6423	79 32 08 00 00 00 00 00	r2 = *(u64 *)(r3 + 0x8)
    6424	2d 72 01 00 00 00 00 00	if r2 > r7 goto +0x1 <LBB172_24>
    6425	b7 01 00 00 00 00 00 00	r1 = 0x0

000000000000c8d0 <LBB172_24>
    6426	2d 72 01 00 00 00 00 00	if r2 > r7 goto +0x1 <LBB172_29>
    6427	05 00 07 00 00 00 00 00	goto +0x7 <LBB172_30>

000000000000c8e0 <LBB172_29>
    6428	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    6429	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6430	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    6431	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    6432	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    6433	8d 00 00 00 04 00 00 00	callx r4
    6434	55 00 02 00 00 00 00 00	if r0 != 0x0 goto +0x2 <LBB172_28>

000000000000c918 <LBB172_30>
    6435	b7 00 00 00 00 00 00 00	r0 = 0x0
    6436	05 00 01 00 00 00 00 00	goto +0x1 <LBB172_31>

000000000000c928 <LBB172_28>
    6437	b7 00 00 00 01 00 00 00	r0 = 0x1

000000000000c930 <LBB172_31>
    6438	95 00 00 00 00 00 00 00	exit

000000000000c938 <core::fmt::Formatter::pad_integral>
    6439	79 50 08 f0 00 00 00 00	r0 = *(u64 *)(r5 - 0xff8)
    6440	15 02 09 00 00 00 00 00	if r2 == 0x0 goto +0x9 <LBB173_2>
    6441	bf 38 00 00 00 00 00 00	r8 = r3
    6442	b7 07 00 00 00 00 11 00	r7 = 0x110000
    6443	61 19 30 00 00 00 00 00	r9 = *(u32 *)(r1 + 0x30)
    6444	bf 92 00 00 00 00 00 00	r2 = r9
    6445	57 02 00 00 01 00 00 00	r2 &= 0x1
    6446	bf 06 00 00 00 00 00 00	r6 = r0
    6447	15 02 07 00 00 00 00 00	if r2 == 0x0 goto +0x7 <LBB173_4>
    6448	b7 07 00 00 2b 00 00 00	r7 = 0x2b
    6449	05 00 03 00 00 00 00 00	goto +0x3 <LBB173_3>

000000000000c990 <LBB173_2>
    6450	bf 38 00 00 00 00 00 00	r8 = r3
    6451	b7 07 00 00 2d 00 00 00	r7 = 0x2d
    6452	61 19 30 00 00 00 00 00	r9 = *(u32 *)(r1 + 0x30)

000000000000c9a8 <LBB173_3>
    6453	bf 06 00 00 00 00 00 00	r6 = r0
    6454	07 06 00 00 01 00 00 00	r6 += 0x1

000000000000c9b8 <LBB173_4>
    6455	7b 0a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r0
    6456	b7 03 00 00 00 00 00 00	r3 = 0x0
    6457	bf 92 00 00 00 00 00 00	r2 = r9
    6458	57 02 00 00 04 00 00 00	r2 &= 0x4
    6459	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB173_12>
    6460	05 00 0a 00 00 00 00 00	goto +0xa <LBB173_6>

000000000000c9e8 <LBB173_12>
    6461	79 52 00 f0 00 00 00 00	r2 = *(u64 *)(r5 - 0x1000)
    6462	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6463	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    6464	15 02 1f 00 01 00 00 00	if r2 == 0x1 goto +0x1f <LBB173_14>
    6465	bf 16 00 00 00 00 00 00	r6 = r1
    6466	bf 72 00 00 00 00 00 00	r2 = r7
    6467	85 10 00 00 c8 00 00 00	call 0xc8 ; <core::fmt::Formatter::pad_integral::write_prefix>
    6468	b7 07 00 00 01 00 00 00	r7 = 0x1
    6469	55 00 3e 00 00 00 00 00	if r0 != 0x0 goto +0x3e <LBB173_51>
    6470	05 00 36 00 00 00 00 00	goto +0x36 <LBB173_17>

000000000000ca38 <LBB173_6>
    6471	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    6472	b7 02 00 00 00 00 00 00	r2 = 0x0
    6473	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6474	bf 83 00 00 00 00 00 00	r3 = r8
    6475	15 04 08 00 00 00 00 00	if r4 == 0x0 goto +0x8 <LBB173_11>
    6476	b7 02 00 00 00 00 00 00	r2 = 0x0
    6477	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6478	bf 30 00 00 00 00 00 00	r0 = r3
    6479	05 00 09 00 00 00 00 00	goto +0x9 <LBB173_8>

000000000000ca80 <LBB173_10>
    6480	0f 72 00 00 00 00 00 00	r2 += r7
    6481	07 00 00 00 01 00 00 00	r0 += 0x1
    6482	07 04 00 00 ff ff ff ff	r4 += -0x1
    6483	55 04 05 00 00 00 00 00	if r4 != 0x0 goto +0x5 <LBB173_8>

000000000000caa0 <LBB173_11>
    6484	0f 62 00 00 00 00 00 00	r2 += r6
    6485	bf 26 00 00 00 00 00 00	r6 = r2
    6486	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6487	79 a7 d8 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x28)
    6488	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB173_12>

000000000000cac8 <LBB173_8>
    6489	71 08 00 00 00 00 00 00	r8 = *(u8 *)(r0 + 0x0)
    6490	67 08 00 00 38 00 00 00	r8 <<= 0x38
    6491	c7 08 00 00 38 00 00 00	r8 s>>= 0x38
    6492	b7 07 00 00 01 00 00 00	r7 = 0x1
    6493	65 08 f2 ff bf ff ff ff	if r8 s> -0x41 goto -0xe <LBB173_10>
    6494	b7 07 00 00 00 00 00 00	r7 = 0x0
    6495	05 00 f0 ff 00 00 00 00	goto -0x10 <LBB173_10>

000000000000cb00 <LBB173_14>
    6496	79 18 08 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x8)
    6497	3d 86 16 00 00 00 00 00	if r6 >= r8 goto +0x16 <LBB173_16>
    6498	57 09 00 00 08 00 00 00	r9 &= 0x8
    6499	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6500	15 09 01 00 00 00 00 00	if r9 == 0x0 goto +0x1 <LBB173_18>
    6501	05 00 21 00 00 00 00 00	goto +0x21 <LBB173_27>

000000000000cb30 <LBB173_18>
    6502	7b 3a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r3
    6503	7b 4a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r4
    6504	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6505	b7 01 00 00 01 00 00 00	r1 = 0x1
    6506	15 02 01 00 03 00 00 00	if r2 == 0x3 goto +0x1 <LBB173_20>
    6507	bf 21 00 00 00 00 00 00	r1 = r2

000000000000cb60 <LBB173_20>
    6508	1f 68 00 00 00 00 00 00	r8 -= r6
    6509	b7 09 00 00 00 00 00 00	r9 = 0x0
    6510	57 01 00 00 03 00 00 00	r1 &= 0x3
    6511	7b 8a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r8
    6512	15 01 35 00 00 00 00 00	if r1 == 0x0 goto +0x35 <LBB173_23>
    6513	15 01 31 00 01 00 00 00	if r1 == 0x1 goto +0x31 <LBB173_52>
    6514	bf 89 00 00 00 00 00 00	r9 = r8
    6515	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6516	07 08 00 00 01 00 00 00	r8 += 0x1
    6517	77 08 00 00 01 00 00 00	r8 >>= 0x1
    6518	7b 8a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r8
    6519	05 00 2e 00 00 00 00 00	goto +0x2e <LBB173_23>

000000000000cbc0 <LBB173_16>
    6520	bf 16 00 00 00 00 00 00	r6 = r1
    6521	bf 72 00 00 00 00 00 00	r2 = r7
    6522	85 10 00 00 91 00 00 00	call 0x91 ; <core::fmt::Formatter::pad_integral::write_prefix>
    6523	b7 07 00 00 01 00 00 00	r7 = 0x1
    6524	55 00 07 00 00 00 00 00	if r0 != 0x0 goto +0x7 <LBB173_51>

000000000000cbe8 <LBB173_17>
    6525	79 61 20 00 00 00 00 00	r1 = *(u64 *)(r6 + 0x20)
    6526	79 62 28 00 00 00 00 00	r2 = *(u64 *)(r6 + 0x28)
    6527	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6528	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6529	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6530	8d 00 00 00 04 00 00 00	callx r4
    6531	bf 07 00 00 00 00 00 00	r7 = r0

000000000000cc20 <LBB173_51>
    6532	57 07 00 00 01 00 00 00	r7 &= 0x1
    6533	bf 70 00 00 00 00 00 00	r0 = r7
    6534	95 00 00 00 00 00 00 00	exit

000000000000cc38 <LBB173_27>
    6535	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6536	7b 2a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r2
    6537	b7 02 00 00 30 00 00 00	r2 = 0x30
    6538	63 21 34 00 00 00 00 00	*(u32 *)(r1 + 0x34) = r2
    6539	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6540	7b 2a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r2
    6541	bf 72 00 00 00 00 00 00	r2 = r7
    6542	b7 07 00 00 01 00 00 00	r7 = 0x1
    6543	73 71 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r7
    6544	85 10 00 00 7b 00 00 00	call 0x7b ; <core::fmt::Formatter::pad_integral::write_prefix>
    6545	55 00 f2 ff 00 00 00 00	if r0 != 0x0 goto -0xe <LBB173_51>
    6546	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6547	71 12 38 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x38)
    6548	b7 01 00 00 01 00 00 00	r1 = 0x1
    6549	15 02 01 00 03 00 00 00	if r2 == 0x3 goto +0x1 <LBB173_30>
    6550	bf 21 00 00 00 00 00 00	r1 = r2

000000000000ccb8 <LBB173_30>
    6551	1f 68 00 00 00 00 00 00	r8 -= r6
    6552	b7 09 00 00 00 00 00 00	r9 = 0x0
    6553	57 01 00 00 03 00 00 00	r1 &= 0x3
    6554	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r8
    6555	15 01 41 00 00 00 00 00	if r1 == 0x0 goto +0x41 <LBB173_33>
    6556	15 01 3d 00 01 00 00 00	if r1 == 0x1 goto +0x3d <LBB173_53>
    6557	bf 89 00 00 00 00 00 00	r9 = r8
    6558	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6559	07 08 00 00 01 00 00 00	r8 += 0x1
    6560	77 08 00 00 01 00 00 00	r8 >>= 0x1
    6561	7b 8a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r8
    6562	05 00 3a 00 00 00 00 00	goto +0x3a <LBB173_33>

000000000000cd18 <LBB173_52>
    6563	b7 01 00 00 00 00 00 00	r1 = 0x0
    6564	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6565	bf 89 00 00 00 00 00 00	r9 = r8

000000000000cd30 <LBB173_23>
    6566	7b 7a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r7
    6567	07 09 00 00 01 00 00 00	r9 += 0x1
    6568	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6569	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6570	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6571	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6572	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6573	b7 07 00 00 01 00 00 00	r7 = 0x1

000000000000cd70 <LBB173_24>
    6574	07 09 00 00 ff ff ff ff	r9 += -0x1
    6575	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB173_26>
    6576	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6577	bf 61 00 00 00 00 00 00	r1 = r6
    6578	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6579	8d 00 00 00 03 00 00 00	callx r3
    6580	55 00 cf ff 00 00 00 00	if r0 != 0x0 goto -0x31 <LBB173_51>
    6581	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB173_24>

000000000000cdb0 <LBB173_26>
    6582	b7 07 00 00 01 00 00 00	r7 = 0x1
    6583	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6584	15 01 cb ff 00 00 11 00	if r1 == 0x110000 goto -0x35 <LBB173_51>
    6585	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6586	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    6587	79 a3 c0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x40)
    6588	79 a4 f0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x10)
    6589	85 10 00 00 4e 00 00 00	call 0x4e ; <core::fmt::Formatter::pad_integral::write_prefix>
    6590	55 00 c5 ff 00 00 00 00	if r0 != 0x0 goto -0x3b <LBB173_51>
    6591	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    6592	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    6593	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    6594	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6595	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6596	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6597	8d 00 00 00 04 00 00 00	callx r4
    6598	55 00 bd ff 00 00 00 00	if r0 != 0x0 goto -0x43 <LBB173_51>
    6599	b7 07 00 00 00 00 00 00	r7 = 0x0
    6600	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6601	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6602	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6603	79 a9 c8 ff 00 00 00 00	r9 = *(u64 *)(r10 - 0x38)

000000000000ce60 <LBB173_46>
    6604	bf 91 00 00 00 00 00 00	r1 = r9
    6605	1d 79 08 00 00 00 00 00	if r9 == r7 goto +0x8 <LBB173_49>
    6606	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6607	bf 61 00 00 00 00 00 00	r1 = r6
    6608	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6609	8d 00 00 00 03 00 00 00	callx r3
    6610	07 07 00 00 01 00 00 00	r7 += 0x1
    6611	15 00 f8 ff 00 00 00 00	if r0 == 0x0 goto -0x8 <LBB173_46>
    6612	07 07 00 00 ff ff ff ff	r7 += -0x1
    6613	bf 71 00 00 00 00 00 00	r1 = r7

000000000000ceb0 <LBB173_49>
    6614	b7 07 00 00 01 00 00 00	r7 = 0x1
    6615	2d 19 ac ff 00 00 00 00	if r9 > r1 goto -0x54 <LBB173_51>

000000000000cec0 <LBB173_50>
    6616	b7 07 00 00 00 00 00 00	r7 = 0x0
    6617	05 00 aa ff 00 00 00 00	goto -0x56 <LBB173_51>

000000000000ced0 <LBB173_53>
    6618	b7 01 00 00 00 00 00 00	r1 = 0x0
    6619	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    6620	bf 89 00 00 00 00 00 00	r9 = r8

000000000000cee8 <LBB173_33>
    6621	07 09 00 00 01 00 00 00	r9 += 0x1
    6622	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6623	61 12 34 00 00 00 00 00	r2 = *(u32 *)(r1 + 0x34)
    6624	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6625	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6626	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)
    6627	b7 07 00 00 01 00 00 00	r7 = 0x1

000000000000cf20 <LBB173_34>
    6628	07 09 00 00 ff ff ff ff	r9 += -0x1
    6629	15 09 06 00 00 00 00 00	if r9 == 0x0 goto +0x6 <LBB173_36>
    6630	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6631	bf 61 00 00 00 00 00 00	r1 = r6
    6632	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6633	8d 00 00 00 03 00 00 00	callx r3
    6634	55 00 99 ff 00 00 00 00	if r0 != 0x0 goto -0x67 <LBB173_51>
    6635	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB173_34>

000000000000cf60 <LBB173_36>
    6636	b7 07 00 00 01 00 00 00	r7 = 0x1
    6637	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6638	15 01 95 ff 00 00 11 00	if r1 == 0x110000 goto -0x6b <LBB173_51>
    6639	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)
    6640	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    6641	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    6642	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6643	79 a2 e0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x20)
    6644	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6645	8d 00 00 00 04 00 00 00	callx r4
    6646	55 00 8d ff 00 00 00 00	if r0 != 0x0 goto -0x73 <LBB173_51>
    6647	b7 09 00 00 00 00 00 00	r9 = 0x0
    6648	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6649	79 18 28 00 00 00 00 00	r8 = *(u64 *)(r1 + 0x28)
    6650	79 16 20 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x20)

000000000000cfd8 <LBB173_39>
    6651	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    6652	1d 91 09 00 00 00 00 00	if r1 == r9 goto +0x9 <LBB173_42>
    6653	79 83 20 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x20)
    6654	bf 61 00 00 00 00 00 00	r1 = r6
    6655	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    6656	8d 00 00 00 03 00 00 00	callx r3
    6657	07 09 00 00 01 00 00 00	r9 += 0x1
    6658	15 00 f8 ff 00 00 00 00	if r0 == 0x0 goto -0x8 <LBB173_39>
    6659	07 09 00 00 ff ff ff ff	r9 += -0x1
    6660	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    6661	2d 91 7e ff 00 00 00 00	if r1 > r9 goto -0x82 <LBB173_51>

000000000000d030 <LBB173_42>
    6662	79 a1 d0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x30)
    6663	79 a2 c8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x38)
    6664	73 21 38 00 00 00 00 00	*(u8 *)(r1 + 0x38) = r2
    6665	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)
    6666	63 21 34 00 00 00 00 00	*(u32 *)(r1 + 0x34) = r2
    6667	05 00 cc ff 00 00 00 00	goto -0x34 <LBB173_50>

000000000000d060 <core::fmt::Formatter::pad_integral::write_prefix>
    6668	bf 46 00 00 00 00 00 00	r6 = r4
    6669	bf 37 00 00 00 00 00 00	r7 = r3
    6670	bf 18 00 00 00 00 00 00	r8 = r1
    6671	bf 21 00 00 00 00 00 00	r1 = r2
    6672	67 01 00 00 20 00 00 00	r1 <<= 0x20
    6673	77 01 00 00 20 00 00 00	r1 >>= 0x20
    6674	15 01 07 00 00 00 11 00	if r1 == 0x110000 goto +0x7 <LBB174_2>
    6675	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
    6676	79 83 28 00 00 00 00 00	r3 = *(u64 *)(r8 + 0x28)
    6677	79 33 20 00 00 00 00 00	r3 = *(u64 *)(r3 + 0x20)
    6678	8d 00 00 00 03 00 00 00	callx r3
    6679	bf 01 00 00 00 00 00 00	r1 = r0
    6680	b7 00 00 00 01 00 00 00	r0 = 0x1
    6681	55 01 02 00 00 00 00 00	if r1 != 0x0 goto +0x2 <LBB174_3>

000000000000d0d0 <LBB174_2>
    6682	b7 00 00 00 00 00 00 00	r0 = 0x0
    6683	55 07 01 00 00 00 00 00	if r7 != 0x0 goto +0x1 <LBB174_4>

000000000000d0e0 <LBB174_3>
    6684	95 00 00 00 00 00 00 00	exit

000000000000d0e8 <LBB174_4>
    6685	79 81 20 00 00 00 00 00	r1 = *(u64 *)(r8 + 0x20)
    6686	79 82 28 00 00 00 00 00	r2 = *(u64 *)(r8 + 0x28)
    6687	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    6688	bf 72 00 00 00 00 00 00	r2 = r7
    6689	bf 63 00 00 00 00 00 00	r3 = r6
    6690	8d 00 00 00 04 00 00 00	callx r4
    6691	05 00 f8 ff 00 00 00 00	goto -0x8 <LBB174_3>

000000000000d120 <core::fmt::Formatter::pad>
    6692	79 14 10 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x10)
    6693	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    6694	15 05 02 00 01 00 00 00	if r5 == 0x1 goto +0x2 <LBB175_2>
    6695	15 04 03 00 01 00 00 00	if r4 == 0x1 goto +0x3 <LBB175_5>
    6696	05 00 65 00 00 00 00 00	goto +0x65 <LBB175_3>

000000000000d148 <LBB175_2>
    6697	15 04 01 00 01 00 00 00	if r4 == 0x1 goto +0x1 <LBB175_5>
    6698	05 00 48 00 00 00 00 00	goto +0x48 <LBB175_27>

000000000000d158 <LBB175_5>
    6699	7b 5a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r5
    6700	b7 05 00 00 00 00 00 00	r5 = 0x0
    6701	bf 24 00 00 00 00 00 00	r4 = r2
    6702	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    6703	0f 34 00 00 00 00 00 00	r4 += r3
    6704	79 13 18 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x18)
    6705	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    6706	bf 28 00 00 00 00 00 00	r8 = r2
    6707	15 03 28 00 00 00 00 00	if r3 == 0x0 goto +0x28 <LBB175_13>
    6708	b7 05 00 00 00 00 00 00	r5 = 0x0
    6709	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    6710	b7 07 00 00 00 00 00 00	r7 = 0x0

000000000000d1b8 <LBB175_7>
    6711	bf 89 00 00 00 00 00 00	r9 = r8
    6712	1d 49 35 00 00 00 00 00	if r9 == r4 goto +0x35 <LBB175_16>
    6713	bf 98 00 00 00 00 00 00	r8 = r9
    6714	07 08 00 00 01 00 00 00	r8 += 0x1
    6715	71 90 00 00 00 00 00 00	r0 = *(u8 *)(r9 + 0x0)
    6716	bf 06 00 00 00 00 00 00	r6 = r0
    6717	67 06 00 00 38 00 00 00	r6 <<= 0x38
    6718	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    6719	65 06 18 00 ff ff ff ff	if r6 s> -0x1 goto +0x18 <LBB175_12>
    6720	bf 98 00 00 00 00 00 00	r8 = r9
    6721	07 08 00 00 02 00 00 00	r8 += 0x2
    6722	b7 02 00 00 e0 00 00 00	r2 = 0xe0
    6723	2d 02 14 00 00 00 00 00	if r2 > r0 goto +0x14 <LBB175_12>
    6724	bf 98 00 00 00 00 00 00	r8 = r9
    6725	07 08 00 00 03 00 00 00	r8 += 0x3
    6726	b7 02 00 00 f0 00 00 00	r2 = 0xf0
    6727	2d 02 10 00 00 00 00 00	if r2 > r0 goto +0x10 <LBB175_12>
    6728	71 96 01 00 00 00 00 00	r6 = *(u8 *)(r9 + 0x1)
    6729	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    6730	67 06 00 00 0c 00 00 00	r6 <<= 0xc
    6731	71 92 02 00 00 00 00 00	r2 = *(u8 *)(r9 + 0x2)
    6732	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6733	67 02 00 00 06 00 00 00	r2 <<= 0x6
    6734	4f 62 00 00 00 00 00 00	r2 |= r6
    6735	71 96 03 00 00 00 00 00	r6 = *(u8 *)(r9 + 0x3)
    6736	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    6737	4f 62 00 00 00 00 00 00	r2 |= r6
    6738	67 00 00 00 12 00 00 00	r0 <<= 0x12
    6739	57 00 00 00 00 00 1c 00	r0 &= 0x1c0000
    6740	4f 02 00 00 00 00 00 00	r2 |= r0
    6741	bf 98 00 00 00 00 00 00	r8 = r9
    6742	07 08 00 00 04 00 00 00	r8 += 0x4
    6743	15 02 16 00 00 00 11 00	if r2 == 0x110000 goto +0x16 <LBB175_16>

000000000000d2c0 <LBB175_12>
    6744	07 07 00 00 01 00 00 00	r7 += 0x1
    6745	1f 95 00 00 00 00 00 00	r5 -= r9
    6746	0f 85 00 00 00 00 00 00	r5 += r8
    6747	2d 73 db ff 00 00 00 00	if r3 > r7 goto -0x25 <LBB175_7>

000000000000d2e0 <LBB175_13>
    6748	1d 48 11 00 00 00 00 00	if r8 == r4 goto +0x11 <LBB175_16>
    6749	71 84 00 00 00 00 00 00	r4 = *(u8 *)(r8 + 0x0)
    6750	b7 02 00 00 f0 00 00 00	r2 = 0xf0
    6751	2d 42 42 00 00 00 00 00	if r2 > r4 goto +0x42 <LBB175_17>
    6752	71 82 01 00 00 00 00 00	r2 = *(u8 *)(r8 + 0x1)
    6753	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6754	67 02 00 00 0c 00 00 00	r2 <<= 0xc
    6755	71 83 02 00 00 00 00 00	r3 = *(u8 *)(r8 + 0x2)
    6756	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    6757	67 03 00 00 06 00 00 00	r3 <<= 0x6
    6758	4f 23 00 00 00 00 00 00	r3 |= r2
    6759	71 82 03 00 00 00 00 00	r2 = *(u8 *)(r8 + 0x3)
    6760	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    6761	4f 23 00 00 00 00 00 00	r3 |= r2
    6762	67 04 00 00 12 00 00 00	r4 <<= 0x12
    6763	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    6764	4f 43 00 00 00 00 00 00	r3 |= r4
    6765	55 03 34 00 00 00 11 00	if r3 != 0x110000 goto +0x34 <LBB175_17>

000000000000d370 <LBB175_16>
    6766	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6767	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    6768	79 a4 f8 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x8)
    6769	15 04 01 00 01 00 00 00	if r4 == 0x1 goto +0x1 <LBB175_27>
    6770	05 00 1b 00 00 00 00 00	goto +0x1b <LBB175_3>

000000000000d398 <LBB175_27>
    6771	b7 08 00 00 00 00 00 00	r8 = 0x0
    6772	79 19 08 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x8)
    6773	15 03 08 00 00 00 00 00	if r3 == 0x0 goto +0x8 <LBB175_32>
    6774	b7 08 00 00 00 00 00 00	r8 = 0x0
    6775	bf 34 00 00 00 00 00 00	r4 = r3
    6776	bf 25 00 00 00 00 00 00	r5 = r2
    6777	05 00 0d 00 00 00 00 00	goto +0xd <LBB175_29>

000000000000d3d0 <LBB175_31>
    6778	0f 08 00 00 00 00 00 00	r8 += r0
    6779	07 05 00 00 01 00 00 00	r5 += 0x1
    6780	07 04 00 00 ff ff ff ff	r4 += -0x1
    6781	55 04 09 00 00 00 00 00	if r4 != 0x0 goto +0x9 <LBB175_29>

000000000000d3f0 <LBB175_32>
    6782	3d 98 0f 00 00 00 00 00	if r8 >= r9 goto +0xf <LBB175_3>
    6783	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r2
    6784	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    6785	71 15 38 00 00 00 00 00	r5 = *(u8 *)(r1 + 0x38)
    6786	b7 07 00 00 00 00 00 00	r7 = 0x0
    6787	b7 04 00 00 00 00 00 00	r4 = 0x0
    6788	15 05 12 00 03 00 00 00	if r5 == 0x3 goto +0x12 <LBB175_35>
    6789	bf 54 00 00 00 00 00 00	r4 = r5
    6790	05 00 10 00 00 00 00 00	goto +0x10 <LBB175_35>

000000000000d438 <LBB175_29>
    6791	71 56 00 00 00 00 00 00	r6 = *(u8 *)(r5 + 0x0)
    6792	67 06 00 00 38 00 00 00	r6 <<= 0x38
    6793	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    6794	b7 00 00 00 01 00 00 00	r0 = 0x1
    6795	65 06 ee ff bf ff ff ff	if r6 s> -0x41 goto -0x12 <LBB175_31>
    6796	b7 00 00 00 00 00 00 00	r0 = 0x0
    6797	05 00 ec ff 00 00 00 00	goto -0x14 <LBB175_31>

000000000000d470 <LBB175_3>
    6798	79 15 20 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x20)
    6799	79 11 28 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x28)
    6800	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6801	bf 51 00 00 00 00 00 00	r1 = r5
    6802	8d 00 00 00 04 00 00 00	callx r4
    6803	bf 06 00 00 00 00 00 00	r6 = r0

000000000000d4a0 <LBB175_4>
    6804	57 06 00 00 01 00 00 00	r6 &= 0x1
    6805	bf 60 00 00 00 00 00 00	r0 = r6
    6806	95 00 00 00 00 00 00 00	exit

000000000000d4b8 <LBB175_35>
    6807	1f 89 00 00 00 00 00 00	r9 -= r8
    6808	57 04 00 00 03 00 00 00	r4 &= 0x3
    6809	7b 9a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r9
    6810	15 04 13 00 00 00 00 00	if r4 == 0x0 goto +0x13 <LBB175_38>
    6811	15 04 0f 00 01 00 00 00	if r4 == 0x1 goto +0xf <LBB175_49>
    6812	bf 97 00 00 00 00 00 00	r7 = r9
    6813	77 07 00 00 01 00 00 00	r7 >>= 0x1
    6814	07 09 00 00 01 00 00 00	r9 += 0x1
    6815	77 09 00 00 01 00 00 00	r9 >>= 0x1
    6816	7b 9a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r9
    6817	05 00 0c 00 00 00 00 00	goto +0xc <LBB175_38>

000000000000d510 <LBB175_17>
    6818	b7 03 00 00 00 00 00 00	r3 = 0x0
    6819	79 a6 e8 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x18)
    6820	79 a7 f0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x10)
    6821	15 05 3b 00 00 00 00 00	if r5 == 0x0 goto +0x3b <LBB175_21>
    6822	2d 56 31 00 00 00 00 00	if r6 > r5 goto +0x31 <LBB175_20>
    6823	b7 04 00 00 00 00 00 00	r4 = 0x0
    6824	bf 63 00 00 00 00 00 00	r3 = r6
    6825	1d 65 37 00 00 00 00 00	if r5 == r6 goto +0x37 <LBB175_21>
    6826	05 00 38 00 00 00 00 00	goto +0x38 <LBB175_22>

000000000000d558 <LBB175_49>
    6827	b7 02 00 00 00 00 00 00	r2 = 0x0
    6828	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r2
    6829	bf 97 00 00 00 00 00 00	r7 = r9

000000000000d570 <LBB175_38>
    6830	07 07 00 00 01 00 00 00	r7 += 0x1
    6831	61 18 34 00 00 00 00 00	r8 = *(u32 *)(r1 + 0x34)
    6832	79 12 28 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x28)
    6833	7b 2a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r2
    6834	79 19 20 00 00 00 00 00	r9 = *(u64 *)(r1 + 0x20)
    6835	b7 06 00 00 01 00 00 00	r6 = 0x1

000000000000d5a0 <LBB175_39>
    6836	07 07 00 00 ff ff ff ff	r7 += -0x1
    6837	15 07 07 00 00 00 00 00	if r7 == 0x0 goto +0x7 <LBB175_41>
    6838	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6839	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6840	bf 91 00 00 00 00 00 00	r1 = r9
    6841	bf 82 00 00 00 00 00 00	r2 = r8
    6842	8d 00 00 00 03 00 00 00	callx r3
    6843	55 00 d8 ff 00 00 00 00	if r0 != 0x0 goto -0x28 <LBB175_4>
    6844	05 00 f7 ff 00 00 00 00	goto -0x9 <LBB175_39>

000000000000d5e8 <LBB175_41>
    6845	b7 06 00 00 01 00 00 00	r6 = 0x1
    6846	bf 81 00 00 00 00 00 00	r1 = r8
    6847	15 01 d4 ff 00 00 11 00	if r1 == 0x110000 goto -0x2c <LBB175_4>
    6848	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6849	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    6850	bf 91 00 00 00 00 00 00	r1 = r9
    6851	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    6852	79 a3 e8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x18)
    6853	8d 00 00 00 04 00 00 00	callx r4
    6854	55 00 cd ff 00 00 00 00	if r0 != 0x0 goto -0x33 <LBB175_4>
    6855	b7 06 00 00 00 00 00 00	r6 = 0x0
    6856	79 a7 e0 ff 00 00 00 00	r7 = *(u64 *)(r10 - 0x20)

000000000000d648 <LBB175_44>
    6857	bf 71 00 00 00 00 00 00	r1 = r7
    6858	1d 67 09 00 00 00 00 00	if r7 == r6 goto +0x9 <LBB175_47>
    6859	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    6860	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6861	bf 91 00 00 00 00 00 00	r1 = r9
    6862	bf 82 00 00 00 00 00 00	r2 = r8
    6863	8d 00 00 00 03 00 00 00	callx r3
    6864	07 06 00 00 01 00 00 00	r6 += 0x1
    6865	15 00 f7 ff 00 00 00 00	if r0 == 0x0 goto -0x9 <LBB175_44>
    6866	07 06 00 00 ff ff ff ff	r6 += -0x1
    6867	bf 61 00 00 00 00 00 00	r1 = r6

000000000000d6a0 <LBB175_47>
    6868	b7 06 00 00 01 00 00 00	r6 = 0x1
    6869	2d 17 be ff 00 00 00 00	if r7 > r1 goto -0x42 <LBB175_4>
    6870	b7 06 00 00 00 00 00 00	r6 = 0x0
    6871	05 00 bc ff 00 00 00 00	goto -0x44 <LBB175_4>

000000000000d6c0 <LBB175_20>
    6872	bf 72 00 00 00 00 00 00	r2 = r7
    6873	0f 52 00 00 00 00 00 00	r2 += r5
    6874	b7 04 00 00 00 00 00 00	r4 = 0x0
    6875	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    6876	67 02 00 00 38 00 00 00	r2 <<= 0x38
    6877	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    6878	b7 00 00 00 c0 ff ff ff	r0 = -0x40
    6879	bf 53 00 00 00 00 00 00	r3 = r5
    6880	6d 20 02 00 00 00 00 00	if r0 s> r2 goto +0x2 <LBB175_22>

000000000000d708 <LBB175_21>
    6881	bf 35 00 00 00 00 00 00	r5 = r3
    6882	bf 74 00 00 00 00 00 00	r4 = r7

000000000000d718 <LBB175_22>
    6883	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB175_24>
    6884	bf 56 00 00 00 00 00 00	r6 = r5

000000000000d728 <LBB175_24>
    6885	7b 6a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r6
    6886	15 04 01 00 00 00 00 00	if r4 == 0x0 goto +0x1 <LBB175_26>
    6887	bf 47 00 00 00 00 00 00	r7 = r4

000000000000d740 <LBB175_26>
    6888	7b 7a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r7
    6889	05 00 84 ff 00 00 00 00	goto -0x7c <LBB175_16>

000000000000d750 <<core::fmt::Formatter as core::fmt::Write>::write_str>
    6890	79 14 20 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x20)
    6891	79 11 28 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x28)
    6892	79 15 18 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x18)
    6893	bf 41 00 00 00 00 00 00	r1 = r4
    6894	8d 00 00 00 05 00 00 00	callx r5
    6895	95 00 00 00 00 00 00 00	exit

000000000000d780 <<core::fmt::Formatter as core::fmt::Write>::write_fmt>
    6896	79 16 28 00 00 00 00 00	r6 = *(u64 *)(r1 + 0x28)
    6897	79 17 20 00 00 00 00 00	r7 = *(u64 *)(r1 + 0x20)
    6898	bf a8 00 00 00 00 00 00	r8 = r10
    6899	07 08 00 00 d0 ff ff ff	r8 += -0x30
    6900	bf 81 00 00 00 00 00 00	r1 = r8
    6901	b7 03 00 00 30 00 00 00	r3 = 0x30
    6902	85 10 00 00 ce 07 00 00	call 0x7ce ; <memcpy>
    6903	bf 71 00 00 00 00 00 00	r1 = r7
    6904	bf 62 00 00 00 00 00 00	r2 = r6
    6905	bf 83 00 00 00 00 00 00	r3 = r8
    6906	85 10 00 00 9d fd ff ff	call -0x263 ; <core::fmt::write>
    6907	95 00 00 00 00 00 00 00	exit

000000000000d7e0 <core::fmt::Formatter::debug_lower_hex>
    6908	61 10 30 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x30)
    6909	57 00 00 00 10 00 00 00	r0 &= 0x10
    6910	77 00 00 00 04 00 00 00	r0 >>= 0x4
    6911	95 00 00 00 00 00 00 00	exit

000000000000d800 <core::fmt::Formatter::debug_upper_hex>
    6912	61 10 30 00 00 00 00 00	r0 = *(u32 *)(r1 + 0x30)
    6913	57 00 00 00 20 00 00 00	r0 &= 0x20
    6914	77 00 00 00 05 00 00 00	r0 >>= 0x5
    6915	95 00 00 00 00 00 00 00	exit

000000000000d820 <<str as core::fmt::Debug>::fmt>
    6916	bf 28 00 00 00 00 00 00	r8 = r2
    6917	bf 16 00 00 00 00 00 00	r6 = r1
    6918	79 37 20 00 00 00 00 00	r7 = *(u64 *)(r3 + 0x20)
    6919	79 31 28 00 00 00 00 00	r1 = *(u64 *)(r3 + 0x28)
    6920	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    6921	79 13 20 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x20)
    6922	bf 71 00 00 00 00 00 00	r1 = r7
    6923	b7 02 00 00 22 00 00 00	r2 = 0x22
    6924	7b 3a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r3
    6925	8d 00 00 00 03 00 00 00	callx r3
    6926	b7 01 00 00 01 00 00 00	r1 = 0x1
    6927	55 00 37 01 00 00 00 00	if r0 != 0x0 goto +0x137 <LBB201_61>
    6928	b7 01 00 00 00 00 00 00	r1 = 0x0
    6929	15 08 26 01 00 00 00 00	if r8 == 0x0 goto +0x126 <LBB201_12>
    6930	bf 61 00 00 00 00 00 00	r1 = r6
    6931	7b 8a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r8
    6932	0f 81 00 00 00 00 00 00	r1 += r8
    6933	7b 1a 98 ff 00 00 00 00	*(u64 *)(r10 - 0x68) = r1
    6934	b7 01 00 00 00 00 00 00	r1 = 0x0
    6935	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    6936	bf 68 00 00 00 00 00 00	r8 = r6
    6937	bf 60 00 00 00 00 00 00	r0 = r6
    6938	b7 01 00 00 00 00 00 00	r1 = 0x0
    6939	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    6940	7b 8a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r8

000000000000d8e8 <LBB201_3>
    6941	bf 01 00 00 00 00 00 00	r1 = r0
    6942	71 13 00 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x0)
    6943	bf 32 00 00 00 00 00 00	r2 = r3
    6944	67 02 00 00 38 00 00 00	r2 <<= 0x38
    6945	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    6946	65 02 2b 00 ff ff ff ff	if r2 s> -0x1 goto +0x2b <LBB201_13>
    6947	bf 16 00 00 00 00 00 00	r6 = r1
    6948	07 06 00 00 02 00 00 00	r6 += 0x2
    6949	71 19 01 00 00 00 00 00	r9 = *(u8 *)(r1 + 0x1)
    6950	57 09 00 00 3f 00 00 00	r9 &= 0x3f
    6951	bf 34 00 00 00 00 00 00	r4 = r3
    6952	57 04 00 00 1f 00 00 00	r4 &= 0x1f
    6953	bf 42 00 00 00 00 00 00	r2 = r4
    6954	67 02 00 00 06 00 00 00	r2 <<= 0x6
    6955	4f 92 00 00 00 00 00 00	r2 |= r9
    6956	25 03 01 00 df 00 00 00	if r3 > 0xdf goto +0x1 <LBB201_5>
    6957	05 00 23 00 00 00 00 00	goto +0x23 <LBB201_14>

000000000000d970 <LBB201_5>
    6958	67 09 00 00 06 00 00 00	r9 <<= 0x6
    6959	71 15 02 00 00 00 00 00	r5 = *(u8 *)(r1 + 0x2)
    6960	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    6961	4f 59 00 00 00 00 00 00	r9 |= r5
    6962	bf 16 00 00 00 00 00 00	r6 = r1
    6963	07 06 00 00 03 00 00 00	r6 += 0x3
    6964	bf 45 00 00 00 00 00 00	r5 = r4
    6965	67 05 00 00 0c 00 00 00	r5 <<= 0xc
    6966	bf 92 00 00 00 00 00 00	r2 = r9
    6967	4f 52 00 00 00 00 00 00	r2 |= r5
    6968	b7 05 00 00 f0 00 00 00	r5 = 0xf0
    6969	2d 35 17 00 00 00 00 00	if r5 > r3 goto +0x17 <LBB201_14>
    6970	67 09 00 00 06 00 00 00	r9 <<= 0x6
    6971	71 13 03 00 00 00 00 00	r3 = *(u8 *)(r1 + 0x3)
    6972	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    6973	4f 39 00 00 00 00 00 00	r9 |= r3
    6974	67 04 00 00 12 00 00 00	r4 <<= 0x12
    6975	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    6976	4f 49 00 00 00 00 00 00	r9 |= r4
    6977	07 01 00 00 04 00 00 00	r1 += 0x4
    6978	bf 16 00 00 00 00 00 00	r6 = r1
    6979	bf 92 00 00 00 00 00 00	r2 = r9
    6980	55 09 0c 00 00 00 11 00	if r9 != 0x110000 goto +0xc <LBB201_14>

000000000000da28 <LBB201_7>
    6981	b7 01 00 00 00 00 00 00	r1 = 0x0
    6982	bf 86 00 00 00 00 00 00	r6 = r8
    6983	79 a8 a8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x58)
    6984	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    6985	15 03 ee 00 00 00 00 00	if r3 == 0x0 goto +0xee <LBB201_12>
    6986	2d 38 df 00 00 00 00 00	if r8 > r3 goto +0xdf <LBB201_10>
    6987	bf 31 00 00 00 00 00 00	r1 = r3
    6988	1d 83 eb 00 00 00 00 00	if r3 == r8 goto +0xeb <LBB201_12>
    6989	05 00 e3 00 00 00 00 00	goto +0xe3 <LBB201_11>

000000000000da70 <LBB201_13>
    6990	07 01 00 00 01 00 00 00	r1 += 0x1
    6991	bf 16 00 00 00 00 00 00	r6 = r1
    6992	bf 32 00 00 00 00 00 00	r2 = r3

000000000000da88 <LBB201_14>
    6993	7b 6a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r6
    6994	7b 0a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r0
    6995	bf a1 00 00 00 00 00 00	r1 = r10
    6996	07 01 00 00 e8 ff ff ff	r1 += -0x18
    6997	7b 2a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r2
    6998	b7 03 00 00 01 00 01 00	r3 = 0x10001
    6999	85 10 00 00 b6 fb ff ff	call -0x44a ; <core::char::methods::<impl char>::escape_debug_ext>
    7000	61 a6 e8 ff 00 00 00 00	r6 = *(u32 *)(r10 - 0x18)
    7001	65 06 0a 00 01 00 00 00	if r6 s> 0x1 goto +0xa <LBB201_17>
    7002	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7003	15 06 1d 00 00 00 00 00	if r6 == 0x0 goto +0x1d <LBB201_29>

000000000000dae0 <LBB201_16>
    7004	79 a1 c0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x40)
    7005	1f 13 00 00 00 00 00 00	r3 -= r1
    7006	79 a0 b8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x48)
    7007	0f 03 00 00 00 00 00 00	r3 += r0
    7008	7b 3a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r3
    7009	79 a1 98 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x68)
    7010	1d 10 e2 ff 00 00 00 00	if r0 == r1 goto -0x1e <LBB201_7>
    7011	05 00 b9 ff 00 00 00 00	goto -0x47 <LBB201_3>

000000000000db20 <LBB201_17>
    7012	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7013	15 06 13 00 02 00 00 00	if r6 == 0x2 goto +0x13 <LBB201_29>
    7014	71 a2 fc ff 00 00 00 00	r2 = *(u8 *)(r10 - 0x4)
    7015	65 02 05 00 02 00 00 00	if r2 s> 0x2 goto +0x5 <LBB201_22>
    7016	b7 01 00 00 00 00 00 00	r1 = 0x0
    7017	15 02 0c 00 00 00 00 00	if r2 == 0x0 goto +0xc <LBB201_28>
    7018	15 02 06 00 01 00 00 00	if r2 == 0x1 goto +0x6 <LBB201_25>
    7019	b7 01 00 00 02 00 00 00	r1 = 0x2
    7020	05 00 09 00 00 00 00 00	goto +0x9 <LBB201_28>

000000000000db68 <LBB201_22>
    7021	15 02 05 00 03 00 00 00	if r2 == 0x3 goto +0x5 <LBB201_26>
    7022	15 02 06 00 04 00 00 00	if r2 == 0x4 goto +0x6 <LBB201_27>
    7023	b7 01 00 00 05 00 00 00	r1 = 0x5
    7024	05 00 05 00 00 00 00 00	goto +0x5 <LBB201_28>

000000000000db88 <LBB201_25>
    7025	b7 01 00 00 01 00 00 00	r1 = 0x1
    7026	05 00 03 00 00 00 00 00	goto +0x3 <LBB201_28>

000000000000db98 <LBB201_26>
    7027	b7 01 00 00 03 00 00 00	r1 = 0x3
    7028	05 00 01 00 00 00 00 00	goto +0x1 <LBB201_28>

000000000000dba8 <LBB201_27>
    7029	b7 01 00 00 04 00 00 00	r1 = 0x4

000000000000dbb0 <LBB201_28>
    7030	79 a2 f0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x10)
    7031	0f 21 00 00 00 00 00 00	r1 += r2
    7032	15 01 e3 ff 01 00 00 00	if r1 == 0x1 goto -0x1d <LBB201_16>

000000000000dbc8 <LBB201_29>
    7033	79 a5 a8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x58)
    7034	79 a0 d8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x28)
    7035	2d 30 5f 00 00 00 00 00	if r0 > r3 goto +0x5f <LBB201_38>
    7036	15 00 0a 00 00 00 00 00	if r0 == 0x0 goto +0xa <LBB201_34>
    7037	2d 05 02 00 00 00 00 00	if r5 > r0 goto +0x2 <LBB201_33>
    7038	1d 50 08 00 00 00 00 00	if r0 == r5 goto +0x8 <LBB201_34>
    7039	05 00 5b 00 00 00 00 00	goto +0x5b <LBB201_38>

000000000000dc00 <LBB201_33>
    7040	bf 81 00 00 00 00 00 00	r1 = r8
    7041	0f 01 00 00 00 00 00 00	r1 += r0
    7042	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    7043	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7044	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7045	b7 02 00 00 c0 ff ff ff	r2 = -0x40
    7046	6d 12 54 00 00 00 00 00	if r2 s> r1 goto +0x54 <LBB201_38>

000000000000dc38 <LBB201_34>
    7047	15 03 03 00 00 00 00 00	if r3 == 0x0 goto +0x3 <LBB201_39>
    7048	2d 35 4c 00 00 00 00 00	if r5 > r3 goto +0x4c <LBB201_37>
    7049	1d 53 01 00 00 00 00 00	if r3 == r5 goto +0x1 <LBB201_39>
    7050	05 00 50 00 00 00 00 00	goto +0x50 <LBB201_38>

000000000000dc58 <LBB201_39>
    7051	0f 08 00 00 00 00 00 00	r8 += r0
    7052	1f 03 00 00 00 00 00 00	r3 -= r0
    7053	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    7054	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    7055	bf 71 00 00 00 00 00 00	r1 = r7
    7056	bf 82 00 00 00 00 00 00	r2 = r8
    7057	8d 00 00 00 04 00 00 00	callx r4
    7058	55 00 57 00 00 00 00 00	if r0 != 0x0 goto +0x57 <LBB201_60>
    7059	71 a9 fc ff 00 00 00 00	r9 = *(u8 *)(r10 - 0x4)
    7060	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x8)
    7061	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7062	79 a8 f0 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x10)
    7063	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x14)
    7064	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7065	15 01 52 00 00 00 11 00	if r1 == 0x110000 goto +0x52 <LBB201_42>

000000000000dcd0 <LBB201_41>
    7066	bf 81 00 00 00 00 00 00	r1 = r8
    7067	67 06 00 00 20 00 00 00	r6 <<= 0x20
    7068	bf 63 00 00 00 00 00 00	r3 = r6
    7069	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7070	65 03 01 00 01 00 00 00	if r3 s> 0x1 goto +0x1 <LBB201_64>
    7071	05 00 0e 00 00 00 00 00	goto +0xe <LBB201_62>

000000000000dd00 <LBB201_64>
    7072	b7 06 00 00 01 00 00 00	r6 = 0x1
    7073	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7074	bf 18 00 00 00 00 00 00	r8 = r1
    7075	15 03 0f 00 02 00 00 00	if r3 == 0x2 goto +0xf <LBB201_84>
    7076	b7 06 00 00 03 00 00 00	r6 = 0x3
    7077	bf 93 00 00 00 00 00 00	r3 = r9
    7078	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7079	65 03 10 00 02 00 00 00	if r3 s> 0x2 goto +0x10 <LBB201_69>
    7080	b7 09 00 00 00 00 00 00	r9 = 0x0
    7081	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7082	bf 18 00 00 00 00 00 00	r8 = r1
    7083	15 03 07 00 01 00 00 00	if r3 == 0x1 goto +0x7 <LBB201_84>
    7084	15 03 0f 00 02 00 00 00	if r3 == 0x2 goto +0xf <LBB201_72>
    7085	05 00 46 00 00 00 00 00	goto +0x46 <LBB201_44>

000000000000dd70 <LBB201_62>
    7086	15 03 01 00 01 00 00 00	if r3 == 0x1 goto +0x1 <LBB201_77>
    7087	05 00 44 00 00 00 00 00	goto +0x44 <LBB201_44>

000000000000dd80 <LBB201_77>
    7088	b7 06 00 00 00 00 00 00	r6 = 0x0
    7089	79 a2 d8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x28)

000000000000dd90 <LBB201_83>
    7090	bf 18 00 00 00 00 00 00	r8 = r1

000000000000dd98 <LBB201_84>
    7091	bf 71 00 00 00 00 00 00	r1 = r7
    7092	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7093	8d 00 00 00 03 00 00 00	callx r3
    7094	55 00 33 00 00 00 00 00	if r0 != 0x0 goto +0x33 <LBB201_60>
    7095	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB201_41>

000000000000ddc0 <LBB201_69>
    7096	15 03 14 00 03 00 00 00	if r3 == 0x3 goto +0x14 <LBB201_82>
    7097	15 03 16 00 04 00 00 00	if r3 == 0x4 goto +0x16 <LBB201_75>
    7098	b7 09 00 00 04 00 00 00	r9 = 0x4
    7099	05 00 f6 ff 00 00 00 00	goto -0xa <LBB201_83>

000000000000dde0 <LBB201_72>
    7100	bf 12 00 00 00 00 00 00	r2 = r1
    7101	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7102	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7103	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    7104	7f 23 00 00 00 00 00 00	r3 >>= r2
    7105	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7106	b7 02 00 00 30 00 00 00	r2 = 0x30
    7107	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7108	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB201_74>
    7109	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000de30 <LBB201_74>
    7110	0f 32 00 00 00 00 00 00	r2 += r3
    7111	b7 08 00 00 00 00 00 00	r8 = 0x0
    7112	b7 09 00 00 01 00 00 00	r9 = 0x1
    7113	15 01 e9 ff 00 00 00 00	if r1 == 0x0 goto -0x17 <LBB201_84>
    7114	b7 09 00 00 02 00 00 00	r9 = 0x2
    7115	07 01 00 00 ff ff ff ff	r1 += -0x1
    7116	05 00 e5 ff 00 00 00 00	goto -0x1b <LBB201_83>

000000000000de68 <LBB201_82>
    7117	b7 09 00 00 02 00 00 00	r9 = 0x2
    7118	b7 02 00 00 7b 00 00 00	r2 = 0x7b
    7119	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB201_83>

000000000000de80 <LBB201_75>
    7120	b7 09 00 00 03 00 00 00	r9 = 0x3
    7121	b7 02 00 00 75 00 00 00	r2 = 0x75
    7122	bf 18 00 00 00 00 00 00	r8 = r1
    7123	b7 06 00 00 03 00 00 00	r6 = 0x3
    7124	05 00 de ff 00 00 00 00	goto -0x22 <LBB201_84>

000000000000dea8 <LBB201_37>
    7125	bf 81 00 00 00 00 00 00	r1 = r8
    7126	0f 31 00 00 00 00 00 00	r1 += r3
    7127	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    7128	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7129	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7130	65 01 b0 ff bf ff ff ff	if r1 s> -0x41 goto -0x50 <LBB201_39>

000000000000ded8 <LBB201_38>
    7131	bf 81 00 00 00 00 00 00	r1 = r8
    7132	bf 52 00 00 00 00 00 00	r2 = r5
    7133	bf 34 00 00 00 00 00 00	r4 = r3
    7134	bf 03 00 00 00 00 00 00	r3 = r0
    7135	18 05 00 00 d8 3e 01 00 00 00 00 00 00 00 00 00	r5 = 0x13ed8 ll
    7137	85 10 00 00 4f 01 00 00	call 0x14f ; <core::str::slice_error_fail>
    7138	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000df18 <LBB201_53>
    7139	b7 09 00 00 02 00 00 00	r9 = 0x2
    7140	b7 02 00 00 7b 00 00 00	r2 = 0x7b

000000000000df28 <LBB201_58>
    7141	bf 18 00 00 00 00 00 00	r8 = r1

000000000000df30 <LBB201_59>
    7142	bf 71 00 00 00 00 00 00	r1 = r7
    7143	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7144	8d 00 00 00 03 00 00 00	callx r3
    7145	15 00 02 00 00 00 00 00	if r0 == 0x0 goto +0x2 <LBB201_42>

000000000000df50 <LBB201_60>
    7146	b7 01 00 00 01 00 00 00	r1 = 0x1
    7147	05 00 5b 00 00 00 00 00	goto +0x5b <LBB201_61>

000000000000df60 <LBB201_42>
    7148	bf 81 00 00 00 00 00 00	r1 = r8
    7149	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7150	67 06 00 00 20 00 00 00	r6 <<= 0x20
    7151	bf 63 00 00 00 00 00 00	r3 = r6
    7152	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7153	b7 06 00 00 01 00 00 00	r6 = 0x1
    7154	15 03 f3 ff 02 00 00 00	if r3 == 0x2 goto -0xd <LBB201_59>
    7155	15 03 08 00 03 00 00 00	if r3 == 0x3 goto +0x8 <LBB201_45>

000000000000dfa0 <LBB201_44>
    7156	79 a5 a8 ff 00 00 00 00	r5 = *(u64 *)(r10 - 0x58)
    7157	79 a8 90 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x70)
    7158	b7 00 00 00 01 00 00 00	r0 = 0x1
    7159	b7 01 00 00 80 00 00 00	r1 = 0x80
    7160	79 a3 d0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x30)
    7161	79 a2 a0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x60)
    7162	2d 21 2c 00 00 00 00 00	if r1 > r2 goto +0x2c <LBB201_81>
    7163	05 00 24 00 00 00 00 00	goto +0x24 <LBB201_78>

000000000000dfe0 <LBB201_45>
    7164	b7 06 00 00 03 00 00 00	r6 = 0x3
    7165	bf 93 00 00 00 00 00 00	r3 = r9
    7166	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7167	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB201_49>
    7168	b7 09 00 00 00 00 00 00	r9 = 0x0
    7169	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7170	bf 18 00 00 00 00 00 00	r8 = r1
    7171	15 03 e2 ff 01 00 00 00	if r3 == 0x1 goto -0x1e <LBB201_59>
    7172	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB201_54>
    7173	05 00 ee ff 00 00 00 00	goto -0x12 <LBB201_44>

000000000000e030 <LBB201_49>
    7174	15 03 dc ff 03 00 00 00	if r3 == 0x3 goto -0x24 <LBB201_53>
    7175	15 03 13 00 04 00 00 00	if r3 == 0x4 goto +0x13 <LBB201_52>
    7176	b7 09 00 00 04 00 00 00	r9 = 0x4
    7177	05 00 db ff 00 00 00 00	goto -0x25 <LBB201_58>

000000000000e050 <LBB201_54>
    7178	bf 12 00 00 00 00 00 00	r2 = r1
    7179	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7180	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7181	79 a3 b0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x50)
    7182	7f 23 00 00 00 00 00 00	r3 >>= r2
    7183	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7184	b7 02 00 00 30 00 00 00	r2 = 0x30
    7185	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7186	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB201_56>
    7187	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e0a0 <LBB201_56>
    7188	0f 32 00 00 00 00 00 00	r2 += r3
    7189	b7 08 00 00 00 00 00 00	r8 = 0x0
    7190	b7 09 00 00 01 00 00 00	r9 = 0x1
    7191	15 01 ce ff 00 00 00 00	if r1 == 0x0 goto -0x32 <LBB201_59>
    7192	b7 09 00 00 02 00 00 00	r9 = 0x2
    7193	07 01 00 00 ff ff ff ff	r1 += -0x1
    7194	05 00 ca ff 00 00 00 00	goto -0x36 <LBB201_58>

000000000000e0d8 <LBB201_52>
    7195	b7 09 00 00 03 00 00 00	r9 = 0x3
    7196	b7 02 00 00 75 00 00 00	r2 = 0x75
    7197	bf 18 00 00 00 00 00 00	r8 = r1
    7198	b7 06 00 00 03 00 00 00	r6 = 0x3
    7199	05 00 c6 ff 00 00 00 00	goto -0x3a <LBB201_59>

000000000000e100 <LBB201_78>
    7200	b7 00 00 00 02 00 00 00	r0 = 0x2
    7201	b7 01 00 00 00 08 00 00	r1 = 0x800
    7202	2d 21 04 00 00 00 00 00	if r1 > r2 goto +0x4 <LBB201_81>
    7203	b7 00 00 00 03 00 00 00	r0 = 0x3
    7204	b7 01 00 00 00 00 01 00	r1 = 0x10000
    7205	2d 21 01 00 00 00 00 00	if r1 > r2 goto +0x1 <LBB201_81>
    7206	b7 00 00 00 04 00 00 00	r0 = 0x4

000000000000e138 <LBB201_81>
    7207	0f 30 00 00 00 00 00 00	r0 += r3
    7208	7b 0a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r0
    7209	05 00 32 ff 00 00 00 00	goto -0xce <LBB201_16>

000000000000e150 <LBB201_10>
    7210	bf 61 00 00 00 00 00 00	r1 = r6
    7211	0f 31 00 00 00 00 00 00	r1 += r3
    7212	71 12 00 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x0)
    7213	67 02 00 00 38 00 00 00	r2 <<= 0x38
    7214	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    7215	bf 31 00 00 00 00 00 00	r1 = r3
    7216	65 02 07 00 bf ff ff ff	if r2 s> -0x41 goto +0x7 <LBB201_12>

000000000000e188 <LBB201_11>
    7217	bf 61 00 00 00 00 00 00	r1 = r6
    7218	bf 82 00 00 00 00 00 00	r2 = r8
    7219	bf 84 00 00 00 00 00 00	r4 = r8
    7220	18 05 00 00 f0 3e 01 00 00 00 00 00 00 00 00 00	r5 = 0x13ef0 ll
    7222	85 10 00 00 fa 00 00 00	call 0xfa ; <core::str::slice_error_fail>
    7223	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e1c0 <LBB201_12>
    7224	0f 16 00 00 00 00 00 00	r6 += r1
    7225	1f 18 00 00 00 00 00 00	r8 -= r1
    7226	79 a1 c8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x38)
    7227	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    7228	bf 71 00 00 00 00 00 00	r1 = r7
    7229	bf 62 00 00 00 00 00 00	r2 = r6
    7230	bf 83 00 00 00 00 00 00	r3 = r8
    7231	8d 00 00 00 04 00 00 00	callx r4
    7232	b7 01 00 00 01 00 00 00	r1 = 0x1
    7233	55 00 05 00 00 00 00 00	if r0 != 0x0 goto +0x5 <LBB201_61>
    7234	bf 71 00 00 00 00 00 00	r1 = r7
    7235	b7 02 00 00 22 00 00 00	r2 = 0x22
    7236	79 a3 e0 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x20)
    7237	8d 00 00 00 03 00 00 00	callx r3
    7238	bf 01 00 00 00 00 00 00	r1 = r0

000000000000e238 <LBB201_61>
    7239	bf 10 00 00 00 00 00 00	r0 = r1
    7240	95 00 00 00 00 00 00 00	exit

000000000000e248 <<str as core::fmt::Display>::fmt>
    7241	bf 24 00 00 00 00 00 00	r4 = r2
    7242	bf 12 00 00 00 00 00 00	r2 = r1
    7243	bf 31 00 00 00 00 00 00	r1 = r3
    7244	bf 43 00 00 00 00 00 00	r3 = r4
    7245	85 10 00 00 d6 fd ff ff	call -0x22a ; <core::fmt::Formatter::pad>
    7246	95 00 00 00 00 00 00 00	exit

000000000000e278 <<char as core::fmt::Debug>::fmt>
    7247	bf 18 00 00 00 00 00 00	r8 = r1
    7248	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    7249	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    7250	79 23 20 00 00 00 00 00	r3 = *(u64 *)(r2 + 0x20)
    7251	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7252	b7 02 00 00 27 00 00 00	r2 = 0x27
    7253	7b 3a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r3
    7254	8d 00 00 00 03 00 00 00	callx r3
    7255	b7 07 00 00 01 00 00 00	r7 = 0x1
    7256	55 00 56 00 00 00 00 00	if r0 != 0x0 goto +0x56 <LBB203_23>
    7257	61 82 00 00 00 00 00 00	r2 = *(u32 *)(r8 + 0x0)
    7258	bf a1 00 00 00 00 00 00	r1 = r10
    7259	07 01 00 00 e8 ff ff ff	r1 += -0x18
    7260	b7 03 00 00 01 01 00 00	r3 = 0x101
    7261	85 10 00 00 b0 fa ff ff	call -0x550 ; <core::char::methods::<impl char>::escape_debug_ext>
    7262	71 a9 fc ff 00 00 00 00	r9 = *(u8 *)(r10 - 0x4)
    7263	61 a1 f8 ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x8)
    7264	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7265	79 a6 f0 ff 00 00 00 00	r6 = *(u64 *)(r10 - 0x10)
    7266	61 a8 e8 ff 00 00 00 00	r8 = *(u32 *)(r10 - 0x18)
    7267	61 a1 ec ff 00 00 00 00	r1 = *(u32 *)(r10 - 0x14)
    7268	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7269	15 01 02 00 00 00 11 00	if r1 == 0x110000 goto +0x2 <LBB203_4>
    7270	b7 07 00 00 01 00 00 00	r7 = 0x1
    7271	05 00 10 00 00 00 00 00	goto +0x10 <LBB203_3>

000000000000e340 <LBB203_4>
    7272	b7 07 00 00 01 00 00 00	r7 = 0x1
    7273	05 00 47 00 00 00 00 00	goto +0x47 <LBB203_5>

000000000000e350 <LBB203_24>
    7274	15 03 06 00 01 00 00 00	if r3 == 0x1 goto +0x6 <LBB203_39>

000000000000e358 <LBB203_25>
    7275	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7276	b7 02 00 00 27 00 00 00	r2 = 0x27
    7277	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7278	8d 00 00 00 03 00 00 00	callx r3
    7279	bf 07 00 00 00 00 00 00	r7 = r0
    7280	05 00 3e 00 00 00 00 00	goto +0x3e <LBB203_23>

000000000000e388 <LBB203_39>
    7281	b7 08 00 00 00 00 00 00	r8 = 0x0
    7282	79 a2 d0 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x30)

000000000000e398 <LBB203_41>
    7283	bf 16 00 00 00 00 00 00	r6 = r1

000000000000e3a0 <LBB203_42>
    7284	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7285	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7286	8d 00 00 00 03 00 00 00	callx r3
    7287	55 00 37 00 00 00 00 00	if r0 != 0x0 goto +0x37 <LBB203_23>

000000000000e3c0 <LBB203_3>
    7288	bf 61 00 00 00 00 00 00	r1 = r6
    7289	67 08 00 00 20 00 00 00	r8 <<= 0x20
    7290	bf 83 00 00 00 00 00 00	r3 = r8
    7291	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7292	65 03 01 00 01 00 00 00	if r3 s> 0x1 goto +0x1 <LBB203_26>
    7293	05 00 ec ff 00 00 00 00	goto -0x14 <LBB203_24>

000000000000e3f0 <LBB203_26>
    7294	b7 08 00 00 01 00 00 00	r8 = 0x1
    7295	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7296	bf 16 00 00 00 00 00 00	r6 = r1
    7297	15 03 f2 ff 02 00 00 00	if r3 == 0x2 goto -0xe <LBB203_42>
    7298	b7 08 00 00 03 00 00 00	r8 = 0x3
    7299	bf 93 00 00 00 00 00 00	r3 = r9
    7300	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7301	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB203_31>
    7302	b7 09 00 00 00 00 00 00	r9 = 0x0
    7303	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7304	bf 16 00 00 00 00 00 00	r6 = r1
    7305	15 03 ea ff 01 00 00 00	if r3 == 0x1 goto -0x16 <LBB203_42>
    7306	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB203_34>
    7307	05 00 df ff 00 00 00 00	goto -0x21 <LBB203_25>

000000000000e460 <LBB203_31>
    7308	15 03 14 00 03 00 00 00	if r3 == 0x3 goto +0x14 <LBB203_40>
    7309	15 03 16 00 04 00 00 00	if r3 == 0x4 goto +0x16 <LBB203_37>
    7310	b7 09 00 00 04 00 00 00	r9 = 0x4
    7311	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB203_41>

000000000000e480 <LBB203_34>
    7312	bf 12 00 00 00 00 00 00	r2 = r1
    7313	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7314	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7315	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    7316	7f 23 00 00 00 00 00 00	r3 >>= r2
    7317	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7318	b7 02 00 00 30 00 00 00	r2 = 0x30
    7319	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7320	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB203_36>
    7321	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e4d0 <LBB203_36>
    7322	0f 32 00 00 00 00 00 00	r2 += r3
    7323	b7 06 00 00 00 00 00 00	r6 = 0x0
    7324	b7 09 00 00 01 00 00 00	r9 = 0x1
    7325	15 01 d6 ff 00 00 00 00	if r1 == 0x0 goto -0x2a <LBB203_42>
    7326	b7 09 00 00 02 00 00 00	r9 = 0x2
    7327	07 01 00 00 ff ff ff ff	r1 += -0x1
    7328	05 00 d2 ff 00 00 00 00	goto -0x2e <LBB203_41>

000000000000e508 <LBB203_40>
    7329	b7 09 00 00 02 00 00 00	r9 = 0x2
    7330	b7 02 00 00 7b 00 00 00	r2 = 0x7b
    7331	05 00 cf ff 00 00 00 00	goto -0x31 <LBB203_41>

000000000000e520 <LBB203_37>
    7332	b7 08 00 00 03 00 00 00	r8 = 0x3
    7333	b7 02 00 00 75 00 00 00	r2 = 0x75
    7334	b7 09 00 00 03 00 00 00	r9 = 0x3
    7335	05 00 cb ff 00 00 00 00	goto -0x35 <LBB203_41>

000000000000e540 <LBB203_16>
    7336	b7 09 00 00 02 00 00 00	r9 = 0x2
    7337	b7 02 00 00 7b 00 00 00	r2 = 0x7b

000000000000e550 <LBB203_21>
    7338	bf 16 00 00 00 00 00 00	r6 = r1

000000000000e558 <LBB203_22>
    7339	79 a1 e0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x20)
    7340	79 a3 d8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x28)
    7341	8d 00 00 00 03 00 00 00	callx r3
    7342	15 00 02 00 00 00 00 00	if r0 == 0x0 goto +0x2 <LBB203_5>

000000000000e578 <LBB203_23>
    7343	bf 70 00 00 00 00 00 00	r0 = r7
    7344	95 00 00 00 00 00 00 00	exit

000000000000e588 <LBB203_5>
    7345	bf 61 00 00 00 00 00 00	r1 = r6
    7346	b7 02 00 00 5c 00 00 00	r2 = 0x5c
    7347	67 08 00 00 20 00 00 00	r8 <<= 0x20
    7348	bf 83 00 00 00 00 00 00	r3 = r8
    7349	77 03 00 00 20 00 00 00	r3 >>= 0x20
    7350	b7 08 00 00 01 00 00 00	r8 = 0x1
    7351	15 03 f3 ff 02 00 00 00	if r3 == 0x2 goto -0xd <LBB203_22>
    7352	15 03 01 00 03 00 00 00	if r3 == 0x3 goto +0x1 <LBB203_8>
    7353	05 00 b1 ff 00 00 00 00	goto -0x4f <LBB203_25>

000000000000e5d0 <LBB203_8>
    7354	b7 08 00 00 03 00 00 00	r8 = 0x3
    7355	bf 93 00 00 00 00 00 00	r3 = r9
    7356	57 03 00 00 ff 00 00 00	r3 &= 0xff
    7357	65 03 06 00 02 00 00 00	if r3 s> 0x2 goto +0x6 <LBB203_12>
    7358	b7 09 00 00 00 00 00 00	r9 = 0x0
    7359	b7 02 00 00 7d 00 00 00	r2 = 0x7d
    7360	bf 16 00 00 00 00 00 00	r6 = r1
    7361	15 03 e9 ff 01 00 00 00	if r3 == 0x1 goto -0x17 <LBB203_22>
    7362	15 03 05 00 02 00 00 00	if r3 == 0x2 goto +0x5 <LBB203_17>
    7363	05 00 a7 ff 00 00 00 00	goto -0x59 <LBB203_25>

000000000000e620 <LBB203_12>
    7364	15 03 e3 ff 03 00 00 00	if r3 == 0x3 goto -0x1d <LBB203_16>
    7365	15 03 13 00 04 00 00 00	if r3 == 0x4 goto +0x13 <LBB203_15>
    7366	b7 09 00 00 04 00 00 00	r9 = 0x4
    7367	05 00 e2 ff 00 00 00 00	goto -0x1e <LBB203_21>

000000000000e640 <LBB203_17>
    7368	bf 12 00 00 00 00 00 00	r2 = r1
    7369	67 02 00 00 02 00 00 00	r2 <<= 0x2
    7370	57 02 00 00 1c 00 00 00	r2 &= 0x1c
    7371	79 a3 c8 ff 00 00 00 00	r3 = *(u64 *)(r10 - 0x38)
    7372	7f 23 00 00 00 00 00 00	r3 >>= r2
    7373	57 03 00 00 0f 00 00 00	r3 &= 0xf
    7374	b7 02 00 00 30 00 00 00	r2 = 0x30
    7375	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7376	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB203_19>
    7377	b7 02 00 00 57 00 00 00	r2 = 0x57

000000000000e690 <LBB203_19>
    7378	0f 32 00 00 00 00 00 00	r2 += r3
    7379	b7 06 00 00 00 00 00 00	r6 = 0x0
    7380	b7 09 00 00 01 00 00 00	r9 = 0x1
    7381	15 01 d5 ff 00 00 00 00	if r1 == 0x0 goto -0x2b <LBB203_22>
    7382	b7 09 00 00 02 00 00 00	r9 = 0x2
    7383	07 01 00 00 ff ff ff ff	r1 += -0x1
    7384	05 00 d1 ff 00 00 00 00	goto -0x2f <LBB203_21>

000000000000e6c8 <LBB203_15>
    7385	b7 08 00 00 03 00 00 00	r8 = 0x3
    7386	b7 02 00 00 75 00 00 00	r2 = 0x75
    7387	b7 09 00 00 03 00 00 00	r9 = 0x3
    7388	05 00 cd ff 00 00 00 00	goto -0x33 <LBB203_21>

000000000000e6e8 <core::slice::index::slice_start_index_len_fail>
    7389	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7390	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7391	bf a1 00 00 00 00 00 00	r1 = r10
    7392	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7393	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7394	b7 01 00 00 00 00 00 00	r1 = 0x0
    7395	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7396	b7 01 00 00 02 00 00 00	r1 = 0x2
    7397	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7398	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7399	18 01 00 00 08 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f08 ll
    7401	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7402	bf a1 00 00 00 00 00 00	r1 = r10
    7403	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7404	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7405	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    7407	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7408	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7409	bf a1 00 00 00 00 00 00	r1 = r10
    7410	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7411	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7412	bf a1 00 00 00 00 00 00	r1 = r10
    7413	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7414	bf 32 00 00 00 00 00 00	r2 = r3
    7415	85 10 00 00 69 fb ff ff	call -0x497 ; <core::panicking::panic_fmt>
    7416	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e7c8 <core::slice::index::slice_end_index_len_fail>
    7417	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7418	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7419	bf a1 00 00 00 00 00 00	r1 = r10
    7420	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7421	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7422	b7 01 00 00 00 00 00 00	r1 = 0x0
    7423	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7424	b7 01 00 00 02 00 00 00	r1 = 0x2
    7425	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7426	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7427	18 01 00 00 28 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f28 ll
    7429	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7430	bf a1 00 00 00 00 00 00	r1 = r10
    7431	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7432	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7433	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    7435	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7436	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7437	bf a1 00 00 00 00 00 00	r1 = r10
    7438	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7439	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7440	bf a1 00 00 00 00 00 00	r1 = r10
    7441	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7442	bf 32 00 00 00 00 00 00	r2 = r3
    7443	85 10 00 00 4d fb ff ff	call -0x4b3 ; <core::panicking::panic_fmt>
    7444	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e8a8 <core::slice::index::slice_index_order_fail>
    7445	7b 2a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r2
    7446	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7447	bf a1 00 00 00 00 00 00	r1 = r10
    7448	07 01 00 00 e0 ff ff ff	r1 += -0x20
    7449	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7450	b7 01 00 00 00 00 00 00	r1 = 0x0
    7451	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7452	b7 01 00 00 02 00 00 00	r1 = 0x2
    7453	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7454	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7455	18 01 00 00 48 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f48 ll
    7457	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7458	bf a1 00 00 00 00 00 00	r1 = r10
    7459	07 01 00 00 a8 ff ff ff	r1 += -0x58
    7460	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7461	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    7463	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7464	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7465	bf a1 00 00 00 00 00 00	r1 = r10
    7466	07 01 00 00 a0 ff ff ff	r1 += -0x60
    7467	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7468	bf a1 00 00 00 00 00 00	r1 = r10
    7469	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7470	bf 32 00 00 00 00 00 00	r2 = r3
    7471	85 10 00 00 31 fb ff ff	call -0x4cf ; <core::panicking::panic_fmt>
    7472	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000e988 <core::str::slice_error_fail>
    7473	7b 4a 38 ff 00 00 00 00	*(u64 *)(r10 - 0xc8) = r4
    7474	7b 3a 30 ff 00 00 00 00	*(u64 *)(r10 - 0xd0) = r3
    7475	18 06 00 00 98 2e 01 00 00 00 00 00 00 00 00 00	r6 = 0x12e98 ll
    7477	b7 07 00 00 00 00 00 00	r7 = 0x0
    7478	b7 00 00 00 01 01 00 00	r0 = 0x101
    7479	bf 29 00 00 00 00 00 00	r9 = r2
    7480	2d 20 09 00 00 00 00 00	if r0 > r2 goto +0x9 <LBB242_7>
    7481	b7 00 00 00 00 01 00 00	r0 = 0x100
    7482	b7 08 00 00 c0 ff ff ff	r8 = -0x40
    7483	b7 09 00 00 00 00 00 00	r9 = 0x0
    7484	b7 07 00 00 05 00 00 00	r7 = 0x5
    7485	05 00 0c 00 00 00 00 00	goto +0xc <LBB242_2>

000000000000e9f0 <LBB242_6>
    7486	18 06 00 00 70 30 01 00 00 00 00 00 00 00 00 00	r6 = 0x13070 ll
    7488	07 00 00 00 ff ff ff ff	r0 += -0x1
    7489	55 00 08 00 00 00 00 00	if r0 != 0x0 goto +0x8 <LBB242_2>

000000000000ea10 <LBB242_7>
    7490	7b 9a 48 ff 00 00 00 00	*(u64 *)(r10 - 0xb8) = r9
    7491	7b 1a 40 ff 00 00 00 00	*(u64 *)(r10 - 0xc0) = r1
    7492	7b 7a 58 ff 00 00 00 00	*(u64 *)(r10 - 0xa8) = r7
    7493	7b 6a 50 ff 00 00 00 00	*(u64 *)(r10 - 0xb0) = r6
    7494	2d 23 16 00 00 00 00 00	if r3 > r2 goto +0x16 <LBB242_10>
    7495	2d 24 15 00 00 00 00 00	if r4 > r2 goto +0x15 <LBB242_10>
    7496	2d 43 32 00 00 00 00 00	if r3 > r4 goto +0x32 <LBB242_37>
    7497	05 00 50 00 00 00 00 00	goto +0x50 <LBB242_14>

000000000000ea50 <LBB242_2>
    7498	bf 16 00 00 00 00 00 00	r6 = r1
    7499	0f 06 00 00 00 00 00 00	r6 += r0
    7500	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    7501	67 06 00 00 38 00 00 00	r6 <<= 0x38
    7502	c7 06 00 00 38 00 00 00	r6 s>>= 0x38
    7503	6d 68 ee ff 00 00 00 00	if r8 s> r6 goto -0x12 <LBB242_6>
    7504	18 06 00 00 70 30 01 00 00 00 00 00 00 00 00 00	r6 = 0x13070 ll
    7506	b7 07 00 00 05 00 00 00	r7 = 0x5
    7507	bf 09 00 00 00 00 00 00	r9 = r0
    7508	2d 02 ed ff 00 00 00 00	if r2 > r0 goto -0x13 <LBB242_7>
    7509	bf 29 00 00 00 00 00 00	r9 = r2
    7510	1d 02 eb ff 00 00 00 00	if r2 == r0 goto -0x15 <LBB242_7>
    7511	b7 03 00 00 00 00 00 00	r3 = 0x0
    7512	bf 04 00 00 00 00 00 00	r4 = r0
    7513	18 05 00 00 68 3f 01 00 00 00 00 00 00 00 00 00	r5 = 0x13f68 ll
    7515	85 10 00 00 d5 ff ff ff	call -0x2b ; <core::str::slice_error_fail>
    7516	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000eae8 <LBB242_10>
    7517	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB242_12>
    7518	bf 43 00 00 00 00 00 00	r3 = r4

000000000000eaf8 <LBB242_12>
    7519	7b 3a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r3
    7520	bf a1 00 00 00 00 00 00	r1 = r10
    7521	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7522	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7523	b7 01 00 00 00 00 00 00	r1 = 0x0
    7524	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7525	b7 01 00 00 03 00 00 00	r1 = 0x3
    7526	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7527	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7528	18 01 00 00 80 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13f80 ll
    7530	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7531	bf a1 00 00 00 00 00 00	r1 = r10
    7532	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7533	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7534	18 01 00 00 60 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10760 ll
    7536	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7537	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7538	bf a1 00 00 00 00 00 00	r1 = r10
    7539	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7540	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7541	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    7543	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7544	bf a1 00 00 00 00 00 00	r1 = r10
    7545	07 01 00 00 70 ff ff ff	r1 += -0x90
    7546	05 00 8e 00 00 00 00 00	goto +0x8e <LBB242_13>

000000000000ebd8 <LBB242_37>
    7547	bf a1 00 00 00 00 00 00	r1 = r10
    7548	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7549	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7550	b7 01 00 00 00 00 00 00	r1 = 0x0
    7551	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7552	b7 01 00 00 04 00 00 00	r1 = 0x4
    7553	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7554	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7555	18 01 00 00 b0 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13fb0 ll
    7557	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7558	bf a1 00 00 00 00 00 00	r1 = r10
    7559	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7560	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7561	18 01 00 00 60 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10760 ll
    7563	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7564	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7565	bf a1 00 00 00 00 00 00	r1 = r10
    7566	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7567	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7568	bf a1 00 00 00 00 00 00	r1 = r10
    7569	07 01 00 00 38 ff ff ff	r1 += -0xc8
    7570	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7571	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    7573	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7574	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7575	bf a1 00 00 00 00 00 00	r1 = r10
    7576	07 01 00 00 30 ff ff ff	r1 += -0xd0
    7577	05 00 6f 00 00 00 00 00	goto +0x6f <LBB242_13>

000000000000ecd0 <LBB242_14>
    7578	15 03 0a 00 00 00 00 00	if r3 == 0x0 goto +0xa <LBB242_18>
    7579	2d 32 02 00 00 00 00 00	if r2 > r3 goto +0x2 <LBB242_17>
    7580	1d 32 08 00 00 00 00 00	if r2 == r3 goto +0x8 <LBB242_18>
    7581	05 00 08 00 00 00 00 00	goto +0x8 <LBB242_19>

000000000000ecf0 <LBB242_17>
    7582	bf 10 00 00 00 00 00 00	r0 = r1
    7583	0f 30 00 00 00 00 00 00	r0 += r3
    7584	71 00 00 00 00 00 00 00	r0 = *(u8 *)(r0 + 0x0)
    7585	67 00 00 00 38 00 00 00	r0 <<= 0x38
    7586	c7 00 00 00 38 00 00 00	r0 s>>= 0x38
    7587	b7 06 00 00 c0 ff ff ff	r6 = -0x40
    7588	6d 06 01 00 00 00 00 00	if r6 s> r0 goto +0x1 <LBB242_19>

000000000000ed28 <LBB242_18>
    7589	bf 43 00 00 00 00 00 00	r3 = r4

000000000000ed30 <LBB242_19>
    7590	7b 3a 60 ff 00 00 00 00	*(u64 *)(r10 - 0xa0) = r3
    7591	15 03 0c 00 00 00 00 00	if r3 == 0x0 goto +0xc <LBB242_23>

000000000000ed40 <LBB242_20>
    7592	2d 32 02 00 00 00 00 00	if r2 > r3 goto +0x2 <LBB242_22>
    7593	1d 32 2e 00 00 00 00 00	if r2 == r3 goto +0x2e <LBB242_30>
    7594	05 00 06 00 00 00 00 00	goto +0x6 <LBB242_36>

000000000000ed58 <LBB242_22>
    7595	bf 14 00 00 00 00 00 00	r4 = r1
    7596	0f 34 00 00 00 00 00 00	r4 += r3
    7597	71 44 00 00 00 00 00 00	r4 = *(u8 *)(r4 + 0x0)
    7598	67 04 00 00 38 00 00 00	r4 <<= 0x38
    7599	c7 04 00 00 38 00 00 00	r4 s>>= 0x38
    7600	65 04 04 00 bf ff ff ff	if r4 s> -0x41 goto +0x4 <LBB242_24>

000000000000ed88 <LBB242_36>
    7601	07 03 00 00 ff ff ff ff	r3 += -0x1
    7602	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB242_23>
    7603	05 00 f4 ff 00 00 00 00	goto -0xc <LBB242_20>

000000000000eda0 <LBB242_23>
    7604	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000eda8 <LBB242_24>
    7605	1d 23 22 00 00 00 00 00	if r3 == r2 goto +0x22 <LBB242_30>
    7606	0f 31 00 00 00 00 00 00	r1 += r3
    7607	71 10 00 00 00 00 00 00	r0 = *(u8 *)(r1 + 0x0)
    7608	bf 02 00 00 00 00 00 00	r2 = r0
    7609	67 02 00 00 38 00 00 00	r2 <<= 0x38
    7610	c7 02 00 00 38 00 00 00	r2 s>>= 0x38
    7611	65 02 22 00 ff ff ff ff	if r2 s> -0x1 goto +0x22 <LBB242_27>
    7612	71 12 01 00 00 00 00 00	r2 = *(u8 *)(r1 + 0x1)
    7613	57 02 00 00 3f 00 00 00	r2 &= 0x3f
    7614	bf 04 00 00 00 00 00 00	r4 = r0
    7615	57 04 00 00 1f 00 00 00	r4 &= 0x1f
    7616	bf 46 00 00 00 00 00 00	r6 = r4
    7617	67 06 00 00 06 00 00 00	r6 <<= 0x6
    7618	4f 26 00 00 00 00 00 00	r6 |= r2
    7619	25 00 01 00 df 00 00 00	if r0 > 0xdf goto +0x1 <LBB242_28>
    7620	05 00 4a 00 00 00 00 00	goto +0x4a <LBB242_31>

000000000000ee28 <LBB242_28>
    7621	67 02 00 00 06 00 00 00	r2 <<= 0x6
    7622	71 16 02 00 00 00 00 00	r6 = *(u8 *)(r1 + 0x2)
    7623	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    7624	4f 62 00 00 00 00 00 00	r2 |= r6
    7625	bf 47 00 00 00 00 00 00	r7 = r4
    7626	67 07 00 00 0c 00 00 00	r7 <<= 0xc
    7627	bf 26 00 00 00 00 00 00	r6 = r2
    7628	4f 76 00 00 00 00 00 00	r6 |= r7
    7629	b7 07 00 00 f0 00 00 00	r7 = 0xf0
    7630	2d 07 40 00 00 00 00 00	if r7 > r0 goto +0x40 <LBB242_31>
    7631	67 02 00 00 06 00 00 00	r2 <<= 0x6
    7632	71 11 03 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x3)
    7633	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    7634	4f 12 00 00 00 00 00 00	r2 |= r1
    7635	67 04 00 00 12 00 00 00	r4 <<= 0x12
    7636	57 04 00 00 00 00 1c 00	r4 &= 0x1c0000
    7637	4f 42 00 00 00 00 00 00	r2 |= r4
    7638	bf 26 00 00 00 00 00 00	r6 = r2
    7639	55 02 37 00 00 00 11 00	if r2 != 0x110000 goto +0x37 <LBB242_31>

000000000000eec0 <LBB242_30>
    7640	18 01 00 00 a5 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ea5 ll
    7642	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    7643	bf 53 00 00 00 00 00 00	r3 = r5
    7644	85 10 00 00 56 fa ff ff	call -0x5aa ; <core::panicking::panic>
    7645	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000eef0 <LBB242_27>
    7646	63 0a 6c ff 00 00 00 00	*(u32 *)(r10 - 0x94) = r0
    7647	b7 01 00 00 01 00 00 00	r1 = 0x1

000000000000ef00 <LBB242_35>
    7648	7b 3a 70 ff 00 00 00 00	*(u64 *)(r10 - 0x90) = r3
    7649	0f 31 00 00 00 00 00 00	r1 += r3
    7650	7b 1a 78 ff 00 00 00 00	*(u64 *)(r10 - 0x88) = r1
    7651	bf a1 00 00 00 00 00 00	r1 = r10
    7652	07 01 00 00 b0 ff ff ff	r1 += -0x50
    7653	7b 1a a0 ff 00 00 00 00	*(u64 *)(r10 - 0x60) = r1
    7654	b7 01 00 00 00 00 00 00	r1 = 0x0
    7655	7b 1a 90 ff 00 00 00 00	*(u64 *)(r10 - 0x70) = r1
    7656	b7 01 00 00 05 00 00 00	r1 = 0x5
    7657	7b 1a a8 ff 00 00 00 00	*(u64 *)(r10 - 0x58) = r1
    7658	7b 1a 88 ff 00 00 00 00	*(u64 *)(r10 - 0x78) = r1
    7659	18 01 00 00 f0 3f 01 00 00 00 00 00 00 00 00 00	r1 = 0x13ff0 ll
    7661	7b 1a 80 ff 00 00 00 00	*(u64 *)(r10 - 0x80) = r1
    7662	bf a1 00 00 00 00 00 00	r1 = r10
    7663	07 01 00 00 50 ff ff ff	r1 += -0xb0
    7664	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7665	18 01 00 00 60 07 01 00 00 00 00 00 00 00 00 00	r1 = 0x10760 ll
    7667	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7668	7b 1a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r1
    7669	bf a1 00 00 00 00 00 00	r1 = r10
    7670	07 01 00 00 40 ff ff ff	r1 += -0xc0
    7671	7b 1a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r1
    7672	18 01 00 00 00 b7 00 00 00 00 00 00 00 00 00 00	r1 = 0xb700 ll
    7674	7b 1a d8 ff 00 00 00 00	*(u64 *)(r10 - 0x28) = r1
    7675	bf a1 00 00 00 00 00 00	r1 = r10
    7676	07 01 00 00 70 ff ff ff	r1 += -0x90
    7677	7b 1a d0 ff 00 00 00 00	*(u64 *)(r10 - 0x30) = r1
    7678	18 01 00 00 78 e2 00 00 00 00 00 00 00 00 00 00	r1 = 0xe278 ll
    7680	7b 1a c8 ff 00 00 00 00	*(u64 *)(r10 - 0x38) = r1
    7681	bf a1 00 00 00 00 00 00	r1 = r10
    7682	07 01 00 00 6c ff ff ff	r1 += -0x94
    7683	7b 1a c0 ff 00 00 00 00	*(u64 *)(r10 - 0x40) = r1
    7684	18 01 00 00 78 03 01 00 00 00 00 00 00 00 00 00	r1 = 0x10378 ll
    7686	7b 1a b8 ff 00 00 00 00	*(u64 *)(r10 - 0x48) = r1
    7687	bf a1 00 00 00 00 00 00	r1 = r10
    7688	07 01 00 00 60 ff ff ff	r1 += -0xa0

000000000000f048 <LBB242_13>
    7689	7b 1a b0 ff 00 00 00 00	*(u64 *)(r10 - 0x50) = r1
    7690	bf a1 00 00 00 00 00 00	r1 = r10
    7691	07 01 00 00 80 ff ff ff	r1 += -0x80
    7692	bf 52 00 00 00 00 00 00	r2 = r5
    7693	85 10 00 00 53 fa ff ff	call -0x5ad ; <core::panicking::panic_fmt>
    7694	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f078 <LBB242_31>
    7695	b7 01 00 00 01 00 00 00	r1 = 0x1
    7696	63 6a 6c ff 00 00 00 00	*(u32 *)(r10 - 0x94) = r6
    7697	b7 02 00 00 80 00 00 00	r2 = 0x80
    7698	2d 62 cd ff 00 00 00 00	if r2 > r6 goto -0x33 <LBB242_35>
    7699	b7 01 00 00 02 00 00 00	r1 = 0x2
    7700	b7 02 00 00 00 08 00 00	r2 = 0x800
    7701	2d 62 ca ff 00 00 00 00	if r2 > r6 goto -0x36 <LBB242_35>
    7702	b7 01 00 00 03 00 00 00	r1 = 0x3
    7703	b7 02 00 00 00 00 01 00	r2 = 0x10000
    7704	2d 62 c7 ff 00 00 00 00	if r2 > r6 goto -0x39 <LBB242_35>
    7705	b7 01 00 00 04 00 00 00	r1 = 0x4
    7706	05 00 c5 ff 00 00 00 00	goto -0x3b <LBB242_35>

000000000000f0d8 <core::unicode::printable::check>
    7707	bf 19 00 00 00 00 00 00	r9 = r1
    7708	79 51 10 f0 00 00 00 00	r1 = *(u64 *)(r5 - 0xff0)
    7709	7b 1a f0 ff 00 00 00 00	*(u64 *)(r10 - 0x10) = r1
    7710	79 56 08 f0 00 00 00 00	r6 = *(u64 *)(r5 - 0xff8)
    7711	15 03 2a 00 00 00 00 00	if r3 == 0x0 goto +0x2a <LBB261_3>
    7712	67 03 00 00 01 00 00 00	r3 <<= 0x1
    7713	bf 21 00 00 00 00 00 00	r1 = r2
    7714	0f 31 00 00 00 00 00 00	r1 += r3
    7715	7b 1a f8 ff 00 00 00 00	*(u64 *)(r10 - 0x8) = r1
    7716	79 58 00 f0 00 00 00 00	r8 = *(u64 *)(r5 - 0x1000)
    7717	bf 93 00 00 00 00 00 00	r3 = r9
    7718	57 03 00 00 00 ff 00 00	r3 &= 0xff00
    7719	77 03 00 00 08 00 00 00	r3 >>= 0x8
    7720	b7 00 00 00 00 00 00 00	r0 = 0x0
    7721	7b 4a e0 ff 00 00 00 00	*(u64 *)(r10 - 0x20) = r4
    7722	7b 8a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r8
    7723	05 00 04 00 00 00 00 00	goto +0x4 <LBB261_2>

000000000000f160 <LBB261_6>
    7724	2d 31 1d 00 00 00 00 00	if r1 > r3 goto +0x1d <LBB261_3>
    7725	bf 50 00 00 00 00 00 00	r0 = r5
    7726	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    7727	1d 12 1a 00 00 00 00 00	if r2 == r1 goto +0x1a <LBB261_3>

000000000000f180 <LBB261_2>
    7728	71 27 01 00 00 00 00 00	r7 = *(u8 *)(r2 + 0x1)
    7729	bf 05 00 00 00 00 00 00	r5 = r0
    7730	0f 75 00 00 00 00 00 00	r5 += r7
    7731	71 21 00 00 00 00 00 00	r1 = *(u8 *)(r2 + 0x0)
    7732	07 02 00 00 02 00 00 00	r2 += 0x2
    7733	1d 31 01 00 00 00 00 00	if r1 == r3 goto +0x1 <LBB261_8>
    7734	05 00 f5 ff 00 00 00 00	goto -0xb <LBB261_6>

000000000000f1b8 <LBB261_8>
    7735	2d 50 39 00 00 00 00 00	if r0 > r5 goto +0x39 <LBB261_10>
    7736	2d 85 3e 00 00 00 00 00	if r5 > r8 goto +0x3e <LBB261_11>
    7737	0f 04 00 00 00 00 00 00	r4 += r0

000000000000f1d0 <LBB261_13>
    7738	15 07 09 00 00 00 00 00	if r7 == 0x0 goto +0x9 <LBB261_16>
    7739	b7 00 00 00 00 00 00 00	r0 = 0x0
    7740	07 07 00 00 ff ff ff ff	r7 += -0x1
    7741	bf 91 00 00 00 00 00 00	r1 = r9
    7742	57 01 00 00 ff 00 00 00	r1 &= 0xff
    7743	71 48 00 00 00 00 00 00	r8 = *(u8 *)(r4 + 0x0)
    7744	07 04 00 00 01 00 00 00	r4 += 0x1
    7745	5d 18 f8 ff 00 00 00 00	if r8 != r1 goto -0x8 <LBB261_13>

000000000000f210 <LBB261_15>
    7746	57 00 00 00 01 00 00 00	r0 &= 0x1
    7747	95 00 00 00 00 00 00 00	exit

000000000000f220 <LBB261_16>
    7748	bf 50 00 00 00 00 00 00	r0 = r5
    7749	79 a4 e0 ff 00 00 00 00	r4 = *(u64 *)(r10 - 0x20)
    7750	79 a8 e8 ff 00 00 00 00	r8 = *(u64 *)(r10 - 0x18)
    7751	79 a1 f8 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x8)
    7752	1d 12 01 00 00 00 00 00	if r2 == r1 goto +0x1 <LBB261_3>
    7753	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB261_2>

000000000000f250 <LBB261_3>
    7754	b7 00 00 00 01 00 00 00	r0 = 0x1
    7755	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    7756	15 01 f5 ff 00 00 00 00	if r1 == 0x0 goto -0xb <LBB261_15>
    7757	bf 62 00 00 00 00 00 00	r2 = r6
    7758	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    7759	0f 12 00 00 00 00 00 00	r2 += r1
    7760	b7 00 00 00 01 00 00 00	r0 = 0x1
    7761	57 09 00 00 ff ff 00 00	r9 &= 0xffff
    7762	b7 03 00 00 00 00 00 00	r3 = 0x0
    7763	05 00 07 00 00 00 00 00	goto +0x7 <LBB261_5>

000000000000f2a0 <LBB261_17>
    7764	bf 56 00 00 00 00 00 00	r6 = r5

000000000000f2a8 <LBB261_21>
    7765	1f 49 00 00 00 00 00 00	r9 -= r4
    7766	67 09 00 00 20 00 00 00	r9 <<= 0x20
    7767	c7 09 00 00 20 00 00 00	r9 s>>= 0x20
    7768	6d 93 e9 ff 00 00 00 00	if r3 s> r9 goto -0x17 <LBB261_15>
    7769	a7 00 00 00 01 00 00 00	r0 ^= 0x1
    7770	1d 26 e7 ff 00 00 00 00	if r6 == r2 goto -0x19 <LBB261_15>

000000000000f2d8 <LBB261_5>
    7771	bf 65 00 00 00 00 00 00	r5 = r6
    7772	07 05 00 00 01 00 00 00	r5 += 0x1
    7773	71 64 00 00 00 00 00 00	r4 = *(u8 *)(r6 + 0x0)
    7774	bf 41 00 00 00 00 00 00	r1 = r4
    7775	67 01 00 00 38 00 00 00	r1 <<= 0x38
    7776	c7 01 00 00 38 00 00 00	r1 s>>= 0x38
    7777	6d 13 01 00 00 00 00 00	if r3 s> r1 goto +0x1 <LBB261_18>
    7778	05 00 f1 ff 00 00 00 00	goto -0xf <LBB261_17>

000000000000f318 <LBB261_18>
    7779	5d 25 07 00 00 00 00 00	if r5 != r2 goto +0x7 <LBB261_20>
    7780	18 01 00 00 a5 2e 01 00 00 00 00 00 00 00 00 00	r1 = 0x12ea5 ll
    7782	b7 02 00 00 2b 00 00 00	r2 = 0x2b
    7783	18 03 00 00 58 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14058 ll
    7785	85 10 00 00 c9 f9 ff ff	call -0x637 ; <core::panicking::panic>
    7786	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f358 <LBB261_20>
    7787	57 04 00 00 7f 00 00 00	r4 &= 0x7f
    7788	67 04 00 00 08 00 00 00	r4 <<= 0x8
    7789	71 61 01 00 00 00 00 00	r1 = *(u8 *)(r6 + 0x1)
    7790	4f 14 00 00 00 00 00 00	r4 |= r1
    7791	07 06 00 00 02 00 00 00	r6 += 0x2
    7792	05 00 e4 ff 00 00 00 00	goto -0x1c <LBB261_21>

000000000000f388 <LBB261_10>
    7793	bf 01 00 00 00 00 00 00	r1 = r0
    7794	bf 52 00 00 00 00 00 00	r2 = r5
    7795	18 03 00 00 40 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14040 ll
    7797	85 10 00 00 9f fe ff ff	call -0x161 ; <core::slice::index::slice_index_order_fail>
    7798	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f3b8 <LBB261_11>
    7799	bf 51 00 00 00 00 00 00	r1 = r5
    7800	79 a2 e8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x18)
    7801	18 03 00 00 40 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14040 ll
    7803	85 10 00 00 7d fe ff ff	call -0x183 ; <core::slice::index::slice_end_index_len_fail>
    7804	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f3e8 <core::fmt::num::<impl core::fmt::LowerHex for u8>::fmt>
    7805	b7 03 00 00 00 00 00 00	r3 = 0x0
    7806	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
    7807	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7808	05 00 14 00 00 00 00 00	goto +0x14 <LBB466_1>

000000000000f408 <LBB466_3>
    7809	0f 05 00 00 00 00 00 00	r5 += r0
    7810	bf a0 00 00 00 00 00 00	r0 = r10
    7811	07 00 00 00 80 ff ff ff	r0 += -0x80
    7812	0f 30 00 00 00 00 00 00	r0 += r3
    7813	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7814	07 03 00 00 ff ff ff ff	r3 += -0x1
    7815	bf 45 00 00 00 00 00 00	r5 = r4
    7816	57 05 00 00 ff 00 00 00	r5 &= 0xff
    7817	bf 54 00 00 00 00 00 00	r4 = r5
    7818	77 04 00 00 04 00 00 00	r4 >>= 0x4
    7819	25 05 09 00 0f 00 00 00	if r5 > 0xf goto +0x9 <LBB466_1>
    7820	bf 31 00 00 00 00 00 00	r1 = r3
    7821	07 01 00 00 80 00 00 00	r1 += 0x80
    7822	b7 04 00 00 81 00 00 00	r4 = 0x81
    7823	2d 14 0b 00 00 00 00 00	if r4 > r1 goto +0xb <LBB466_6>
    7824	b7 02 00 00 80 00 00 00	r2 = 0x80
    7825	18 03 00 00 c0 3e 01 00 00 00 00 00 00 00 00 00	r3 = 0x13ec0 ll
    7827	85 10 00 00 49 fe ff ff	call -0x1b7 ; <core::slice::index::slice_start_index_len_fail>
    7828	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f4a8 <LBB466_1>
    7829	bf 40 00 00 00 00 00 00	r0 = r4
    7830	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7831	b7 05 00 00 30 00 00 00	r5 = 0x30
    7832	2d 01 e8 ff 00 00 00 00	if r1 > r0 goto -0x18 <LBB466_3>
    7833	b7 05 00 00 57 00 00 00	r5 = 0x57
    7834	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB466_3>

000000000000f4d8 <LBB466_6>
    7835	bf 31 00 00 00 00 00 00	r1 = r3
    7836	87 01 00 00 00 00 00 00	r1 = -r1
    7837	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    7838	bf a1 00 00 00 00 00 00	r1 = r10
    7839	07 01 00 00 80 ff ff ff	r1 += -0x80
    7840	0f 31 00 00 00 00 00 00	r1 += r3
    7841	07 01 00 00 80 00 00 00	r1 += 0x80
    7842	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    7843	bf a5 00 00 00 00 00 00	r5 = r10
    7844	bf 21 00 00 00 00 00 00	r1 = r2
    7845	b7 02 00 00 01 00 00 00	r2 = 0x1
    7846	18 03 00 00 11 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f11 ll
    7848	b7 04 00 00 02 00 00 00	r4 = 0x2
    7849	85 10 00 00 7d fa ff ff	call -0x583 ; <core::fmt::Formatter::pad_integral>
    7850	95 00 00 00 00 00 00 00	exit

000000000000f558 <core::fmt::num::<impl core::fmt::UpperHex for u8>::fmt>
    7851	b7 03 00 00 00 00 00 00	r3 = 0x0
    7852	71 14 00 00 00 00 00 00	r4 = *(u8 *)(r1 + 0x0)
    7853	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7854	05 00 14 00 00 00 00 00	goto +0x14 <LBB467_1>

000000000000f578 <LBB467_3>
    7855	0f 05 00 00 00 00 00 00	r5 += r0
    7856	bf a0 00 00 00 00 00 00	r0 = r10
    7857	07 00 00 00 80 ff ff ff	r0 += -0x80
    7858	0f 30 00 00 00 00 00 00	r0 += r3
    7859	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7860	07 03 00 00 ff ff ff ff	r3 += -0x1
    7861	bf 45 00 00 00 00 00 00	r5 = r4
    7862	57 05 00 00 ff 00 00 00	r5 &= 0xff
    7863	bf 54 00 00 00 00 00 00	r4 = r5
    7864	77 04 00 00 04 00 00 00	r4 >>= 0x4
    7865	25 05 09 00 0f 00 00 00	if r5 > 0xf goto +0x9 <LBB467_1>
    7866	bf 31 00 00 00 00 00 00	r1 = r3
    7867	07 01 00 00 80 00 00 00	r1 += 0x80
    7868	b7 04 00 00 81 00 00 00	r4 = 0x81
    7869	2d 14 0b 00 00 00 00 00	if r4 > r1 goto +0xb <LBB467_6>
    7870	b7 02 00 00 80 00 00 00	r2 = 0x80
    7871	18 03 00 00 c0 3e 01 00 00 00 00 00 00 00 00 00	r3 = 0x13ec0 ll
    7873	85 10 00 00 1b fe ff ff	call -0x1e5 ; <core::slice::index::slice_start_index_len_fail>
    7874	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f618 <LBB467_1>
    7875	bf 40 00 00 00 00 00 00	r0 = r4
    7876	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7877	b7 05 00 00 30 00 00 00	r5 = 0x30
    7878	2d 01 e8 ff 00 00 00 00	if r1 > r0 goto -0x18 <LBB467_3>
    7879	b7 05 00 00 37 00 00 00	r5 = 0x37
    7880	05 00 e6 ff 00 00 00 00	goto -0x1a <LBB467_3>

000000000000f648 <LBB467_6>
    7881	bf 31 00 00 00 00 00 00	r1 = r3
    7882	87 01 00 00 00 00 00 00	r1 = -r1
    7883	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    7884	bf a1 00 00 00 00 00 00	r1 = r10
    7885	07 01 00 00 80 ff ff ff	r1 += -0x80
    7886	0f 31 00 00 00 00 00 00	r1 += r3
    7887	07 01 00 00 80 00 00 00	r1 += 0x80
    7888	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    7889	bf a5 00 00 00 00 00 00	r5 = r10
    7890	bf 21 00 00 00 00 00 00	r1 = r2
    7891	b7 02 00 00 01 00 00 00	r2 = 0x1
    7892	18 03 00 00 11 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f11 ll
    7894	b7 04 00 00 02 00 00 00	r4 = 0x2
    7895	85 10 00 00 4f fa ff ff	call -0x5b1 ; <core::fmt::Formatter::pad_integral>
    7896	95 00 00 00 00 00 00 00	exit

000000000000f6c8 <core::fmt::num::<impl core::fmt::Debug for usize>::fmt>
    7897	61 23 30 00 00 00 00 00	r3 = *(u32 *)(r2 + 0x30)
    7898	bf 34 00 00 00 00 00 00	r4 = r3
    7899	57 04 00 00 10 00 00 00	r4 &= 0x10
    7900	55 04 32 00 00 00 00 00	if r4 != 0x0 goto +0x32 <LBB492_2>
    7901	57 03 00 00 20 00 00 00	r3 &= 0x20
    7902	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB492_10>
    7903	05 00 33 00 00 00 00 00	goto +0x33 <LBB492_20>

000000000000f700 <LBB492_10>
    7904	b7 03 00 00 27 00 00 00	r3 = 0x27
    7905	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    7906	b7 04 00 00 10 27 00 00	r4 = 0x2710
    7907	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB492_14>
    7908	b7 03 00 00 00 00 00 00	r3 = 0x0

000000000000f728 <LBB492_12>
    7909	bf 14 00 00 00 00 00 00	r4 = r1
    7910	37 01 00 00 10 27 00 00	r1 /= 0x2710
    7911	bf 15 00 00 00 00 00 00	r5 = r1
    7912	27 05 00 00 10 27 00 00	r5 *= 0x2710
    7913	bf 40 00 00 00 00 00 00	r0 = r4
    7914	1f 50 00 00 00 00 00 00	r0 -= r5
    7915	bf 05 00 00 00 00 00 00	r5 = r0
    7916	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    7917	37 05 00 00 64 00 00 00	r5 /= 0x64
    7918	bf 56 00 00 00 00 00 00	r6 = r5
    7919	27 06 00 00 64 00 00 00	r6 *= 0x64
    7920	1f 60 00 00 00 00 00 00	r0 -= r6
    7921	bf a6 00 00 00 00 00 00	r6 = r10
    7922	07 06 00 00 80 ff ff ff	r6 += -0x80
    7923	0f 36 00 00 00 00 00 00	r6 += r3
    7924	67 05 00 00 01 00 00 00	r5 <<= 0x1
    7925	18 07 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r7 = 0x12f13 ll
    7927	0f 57 00 00 00 00 00 00	r7 += r5
    7928	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    7929	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    7930	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    7931	67 00 00 00 01 00 00 00	r0 <<= 0x1
    7932	18 05 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f13 ll
    7934	0f 05 00 00 00 00 00 00	r5 += r0
    7935	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    7936	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    7937	07 03 00 00 fc ff ff ff	r3 += -0x4
    7938	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB492_12>
    7939	07 03 00 00 27 00 00 00	r3 += 0x27

000000000000f820 <LBB492_14>
    7940	65 01 4f 00 63 00 00 00	if r1 s> 0x63 goto +0x4f <LBB492_16>

000000000000f828 <LBB492_15>
    7941	b7 04 00 00 0a 00 00 00	r4 = 0xa
    7942	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB492_18>
    7943	05 00 5f 00 00 00 00 00	goto +0x5f <LBB492_17>

000000000000f840 <LBB492_18>
    7944	07 03 00 00 ff ff ff ff	r3 += -0x1
    7945	bf a4 00 00 00 00 00 00	r4 = r10
    7946	07 04 00 00 80 ff ff ff	r4 += -0x80
    7947	0f 34 00 00 00 00 00 00	r4 += r3
    7948	07 01 00 00 30 00 00 00	r1 += 0x30
    7949	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    7950	05 00 62 00 00 00 00 00	goto +0x62 <LBB492_19>

000000000000f878 <LBB492_2>
    7951	b7 03 00 00 00 00 00 00	r3 = 0x0
    7952	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    7953	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7954	05 00 2b 00 00 00 00 00	goto +0x2b <LBB492_3>

000000000000f898 <LBB492_20>
    7955	b7 03 00 00 00 00 00 00	r3 = 0x0
    7956	79 15 00 00 00 00 00 00	r5 = *(u64 *)(r1 + 0x0)
    7957	b7 01 00 00 0a 00 00 00	r1 = 0xa
    7958	05 00 0e 00 00 00 00 00	goto +0xe <LBB492_21>

000000000000f8b8 <LBB492_23>
    7959	0f 05 00 00 00 00 00 00	r5 += r0
    7960	bf a0 00 00 00 00 00 00	r0 = r10
    7961	07 00 00 00 80 ff ff ff	r0 += -0x80
    7962	0f 30 00 00 00 00 00 00	r0 += r3
    7963	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7964	07 03 00 00 ff ff ff ff	r3 += -0x1
    7965	bf 45 00 00 00 00 00 00	r5 = r4
    7966	77 05 00 00 04 00 00 00	r5 >>= 0x4
    7967	25 04 05 00 0f 00 00 00	if r4 > 0xf goto +0x5 <LBB492_21>
    7968	bf 31 00 00 00 00 00 00	r1 = r3
    7969	07 01 00 00 80 00 00 00	r1 += 0x80
    7970	b7 04 00 00 81 00 00 00	r4 = 0x81
    7971	2d 14 21 00 00 00 00 00	if r4 > r1 goto +0x21 <LBB492_8>
    7972	05 00 14 00 00 00 00 00	goto +0x14 <LBB492_7>

000000000000f928 <LBB492_21>
    7973	bf 54 00 00 00 00 00 00	r4 = r5
    7974	bf 40 00 00 00 00 00 00	r0 = r4
    7975	57 00 00 00 0f 00 00 00	r0 &= 0xf
    7976	b7 05 00 00 30 00 00 00	r5 = 0x30
    7977	2d 01 ed ff 00 00 00 00	if r1 > r0 goto -0x13 <LBB492_23>
    7978	b7 05 00 00 37 00 00 00	r5 = 0x37
    7979	05 00 eb ff 00 00 00 00	goto -0x15 <LBB492_23>

000000000000f960 <LBB492_5>
    7980	0f 05 00 00 00 00 00 00	r5 += r0
    7981	bf a0 00 00 00 00 00 00	r0 = r10
    7982	07 00 00 00 80 ff ff ff	r0 += -0x80
    7983	0f 30 00 00 00 00 00 00	r0 += r3
    7984	73 50 7f 00 00 00 00 00	*(u8 *)(r0 + 0x7f) = r5
    7985	07 03 00 00 ff ff ff ff	r3 += -0x1
    7986	bf 45 00 00 00 00 00 00	r5 = r4
    7987	77 05 00 00 04 00 00 00	r5 >>= 0x4
    7988	25 04 09 00 0f 00 00 00	if r4 > 0xf goto +0x9 <LBB492_3>
    7989	bf 31 00 00 00 00 00 00	r1 = r3
    7990	07 01 00 00 80 00 00 00	r1 += 0x80
    7991	b7 04 00 00 81 00 00 00	r4 = 0x81
    7992	2d 14 0c 00 00 00 00 00	if r4 > r1 goto +0xc <LBB492_8>

000000000000f9c8 <LBB492_7>
    7993	b7 02 00 00 80 00 00 00	r2 = 0x80
    7994	18 03 00 00 c0 3e 01 00 00 00 00 00 00 00 00 00	r3 = 0x13ec0 ll
    7996	85 10 00 00 a0 fd ff ff	call -0x260 ; <core::slice::index::slice_start_index_len_fail>
    7997	85 10 00 00 ff ff ff ff	call -0x1 ; abort

000000000000f9f0 <LBB492_3>
    7998	bf 54 00 00 00 00 00 00	r4 = r5
    7999	bf 40 00 00 00 00 00 00	r0 = r4
    8000	57 00 00 00 0f 00 00 00	r0 &= 0xf
    8001	b7 05 00 00 30 00 00 00	r5 = 0x30
    8002	2d 01 e9 ff 00 00 00 00	if r1 > r0 goto -0x17 <LBB492_5>
    8003	b7 05 00 00 57 00 00 00	r5 = 0x57
    8004	05 00 e7 ff 00 00 00 00	goto -0x19 <LBB492_5>

000000000000fa28 <LBB492_8>
    8005	bf 31 00 00 00 00 00 00	r1 = r3
    8006	87 01 00 00 00 00 00 00	r1 = -r1
    8007	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8008	bf a1 00 00 00 00 00 00	r1 = r10
    8009	07 01 00 00 80 ff ff ff	r1 += -0x80
    8010	0f 31 00 00 00 00 00 00	r1 += r3
    8011	07 01 00 00 80 00 00 00	r1 += 0x80
    8012	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8013	bf a5 00 00 00 00 00 00	r5 = r10
    8014	bf 21 00 00 00 00 00 00	r1 = r2
    8015	b7 02 00 00 01 00 00 00	r2 = 0x1
    8016	18 03 00 00 11 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f11 ll
    8018	b7 04 00 00 02 00 00 00	r4 = 0x2
    8019	05 00 2a 00 00 00 00 00	goto +0x2a <LBB492_9>

000000000000faa0 <LBB492_16>
    8020	bf 14 00 00 00 00 00 00	r4 = r1
    8021	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8022	37 04 00 00 64 00 00 00	r4 /= 0x64
    8023	bf 45 00 00 00 00 00 00	r5 = r4
    8024	27 05 00 00 64 00 00 00	r5 *= 0x64
    8025	1f 51 00 00 00 00 00 00	r1 -= r5
    8026	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8027	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8028	18 05 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f13 ll
    8030	0f 15 00 00 00 00 00 00	r5 += r1
    8031	07 03 00 00 fe ff ff ff	r3 += -0x2
    8032	bf a1 00 00 00 00 00 00	r1 = r10
    8033	07 01 00 00 80 ff ff ff	r1 += -0x80
    8034	0f 31 00 00 00 00 00 00	r1 += r3
    8035	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8036	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8037	bf 41 00 00 00 00 00 00	r1 = r4
    8038	05 00 9e ff 00 00 00 00	goto -0x62 <LBB492_15>

000000000000fb38 <LBB492_17>
    8039	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8040	18 04 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r4 = 0x12f13 ll
    8042	0f 14 00 00 00 00 00 00	r4 += r1
    8043	07 03 00 00 fe ff ff ff	r3 += -0x2
    8044	bf a1 00 00 00 00 00 00	r1 = r10
    8045	07 01 00 00 80 ff ff ff	r1 += -0x80
    8046	0f 31 00 00 00 00 00 00	r1 += r3
    8047	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8048	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

000000000000fb88 <LBB492_19>
    8049	bf a1 00 00 00 00 00 00	r1 = r10
    8050	07 01 00 00 80 ff ff ff	r1 += -0x80
    8051	0f 31 00 00 00 00 00 00	r1 += r3
    8052	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8053	b7 01 00 00 27 00 00 00	r1 = 0x27
    8054	1f 31 00 00 00 00 00 00	r1 -= r3
    8055	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8056	bf a5 00 00 00 00 00 00	r5 = r10
    8057	bf 21 00 00 00 00 00 00	r1 = r2
    8058	b7 02 00 00 01 00 00 00	r2 = 0x1
    8059	18 03 00 00 98 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12e98 ll
    8061	b7 04 00 00 00 00 00 00	r4 = 0x0

000000000000fbf0 <LBB492_9>
    8062	85 10 00 00 a8 f9 ff ff	call -0x658 ; <core::fmt::Formatter::pad_integral>
    8063	95 00 00 00 00 00 00 00	exit

000000000000fc00 <core::fmt::num::imp::<impl core::fmt::Display for u8>::fmt>
    8064	71 11 00 00 00 00 00 00	r1 = *(u8 *)(r1 + 0x0)
    8065	25 01 0b 00 63 00 00 00	if r1 > 0x63 goto +0xb <LBB494_3>
    8066	b7 03 00 00 26 00 00 00	r3 = 0x26
    8067	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8068	2d 14 16 00 00 00 00 00	if r4 > r1 goto +0x16 <LBB494_4>
    8069	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8070	18 03 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f13 ll
    8072	0f 13 00 00 00 00 00 00	r3 += r1
    8073	69 31 00 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x0)
    8074	6b 1a fe ff 00 00 00 00	*(u16 *)(r10 - 0x2) = r1
    8075	b7 03 00 00 25 00 00 00	r3 = 0x25
    8076	05 00 13 00 00 00 00 00	goto +0x13 <LBB494_5>

000000000000fc68 <LBB494_3>
    8077	bf 14 00 00 00 00 00 00	r4 = r1
    8078	37 04 00 00 64 00 00 00	r4 /= 0x64
    8079	bf 43 00 00 00 00 00 00	r3 = r4
    8080	27 03 00 00 64 00 00 00	r3 *= 0x64
    8081	1f 31 00 00 00 00 00 00	r1 -= r3
    8082	57 01 00 00 ff 00 00 00	r1 &= 0xff
    8083	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8084	18 03 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r3 = 0x12f13 ll
    8086	0f 13 00 00 00 00 00 00	r3 += r1
    8087	69 31 00 00 00 00 00 00	r1 = *(u16 *)(r3 + 0x0)
    8088	6b 1a fe ff 00 00 00 00	*(u16 *)(r10 - 0x2) = r1
    8089	b7 03 00 00 24 00 00 00	r3 = 0x24
    8090	bf 41 00 00 00 00 00 00	r1 = r4

000000000000fcd8 <LBB494_4>
    8091	bf a4 00 00 00 00 00 00	r4 = r10
    8092	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8093	0f 34 00 00 00 00 00 00	r4 += r3
    8094	07 01 00 00 30 00 00 00	r1 += 0x30
    8095	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1

000000000000fd00 <LBB494_5>
    8096	bf a1 00 00 00 00 00 00	r1 = r10
    8097	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8098	0f 31 00 00 00 00 00 00	r1 += r3
    8099	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8100	b7 01 00 00 27 00 00 00	r1 = 0x27
    8101	1f 31 00 00 00 00 00 00	r1 -= r3
    8102	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8103	bf a5 00 00 00 00 00 00	r5 = r10
    8104	bf 21 00 00 00 00 00 00	r1 = r2
    8105	b7 02 00 00 01 00 00 00	r2 = 0x1
    8106	18 03 00 00 98 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12e98 ll
    8108	b7 04 00 00 00 00 00 00	r4 = 0x0
    8109	85 10 00 00 79 f9 ff ff	call -0x687 ; <core::fmt::Formatter::pad_integral>
    8110	95 00 00 00 00 00 00 00	exit

000000000000fd78 <core::fmt::num::imp::<impl core::fmt::Display for i32>::fmt>
    8111	bf 23 00 00 00 00 00 00	r3 = r2
    8112	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    8113	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8114	bf 12 00 00 00 00 00 00	r2 = r1
    8115	c7 02 00 00 3f 00 00 00	r2 s>>= 0x3f
    8116	c7 01 00 00 20 00 00 00	r1 s>>= 0x20
    8117	bf 14 00 00 00 00 00 00	r4 = r1
    8118	0f 24 00 00 00 00 00 00	r4 += r2
    8119	af 24 00 00 00 00 00 00	r4 ^= r2
    8120	b7 02 00 00 27 00 00 00	r2 = 0x27
    8121	b7 05 00 00 10 27 00 00	r5 = 0x2710
    8122	2d 45 20 00 00 00 00 00	if r5 > r4 goto +0x20 <LBB497_4>
    8123	b7 02 00 00 00 00 00 00	r2 = 0x0

000000000000fde0 <LBB497_2>
    8124	bf 45 00 00 00 00 00 00	r5 = r4
    8125	37 04 00 00 10 27 00 00	r4 /= 0x2710
    8126	bf 40 00 00 00 00 00 00	r0 = r4
    8127	27 00 00 00 10 27 00 00	r0 *= 0x2710
    8128	bf 56 00 00 00 00 00 00	r6 = r5
    8129	1f 06 00 00 00 00 00 00	r6 -= r0
    8130	bf 60 00 00 00 00 00 00	r0 = r6
    8131	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8132	37 00 00 00 64 00 00 00	r0 /= 0x64
    8133	bf 07 00 00 00 00 00 00	r7 = r0
    8134	27 07 00 00 64 00 00 00	r7 *= 0x64
    8135	1f 76 00 00 00 00 00 00	r6 -= r7
    8136	bf a7 00 00 00 00 00 00	r7 = r10
    8137	07 07 00 00 d9 ff ff ff	r7 += -0x27
    8138	0f 27 00 00 00 00 00 00	r7 += r2
    8139	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8140	18 08 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r8 = 0x12f13 ll
    8142	0f 08 00 00 00 00 00 00	r8 += r0
    8143	69 80 00 00 00 00 00 00	r0 = *(u16 *)(r8 + 0x0)
    8144	6b 07 23 00 00 00 00 00	*(u16 *)(r7 + 0x23) = r0
    8145	57 06 00 00 ff ff 00 00	r6 &= 0xffff
    8146	67 06 00 00 01 00 00 00	r6 <<= 0x1
    8147	18 00 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r0 = 0x12f13 ll
    8149	0f 60 00 00 00 00 00 00	r0 += r6
    8150	69 00 00 00 00 00 00 00	r0 = *(u16 *)(r0 + 0x0)
    8151	6b 07 25 00 00 00 00 00	*(u16 *)(r7 + 0x25) = r0
    8152	07 02 00 00 fc ff ff ff	r2 += -0x4
    8153	25 05 e2 ff ff e0 f5 05	if r5 > 0x5f5e0ff goto -0x1e <LBB497_2>
    8154	07 02 00 00 27 00 00 00	r2 += 0x27

000000000000fed8 <LBB497_4>
    8155	25 04 0a 00 63 00 00 00	if r4 > 0x63 goto +0xa <LBB497_6>

000000000000fee0 <LBB497_5>
    8156	b7 05 00 00 0a 00 00 00	r5 = 0xa
    8157	6d 45 01 00 00 00 00 00	if r5 s> r4 goto +0x1 <LBB497_8>
    8158	05 00 1a 00 00 00 00 00	goto +0x1a <LBB497_7>

000000000000fef8 <LBB497_8>
    8159	07 02 00 00 ff ff ff ff	r2 += -0x1
    8160	bf a5 00 00 00 00 00 00	r5 = r10
    8161	07 05 00 00 d9 ff ff ff	r5 += -0x27
    8162	0f 25 00 00 00 00 00 00	r5 += r2
    8163	07 04 00 00 30 00 00 00	r4 += 0x30
    8164	73 45 00 00 00 00 00 00	*(u8 *)(r5 + 0x0) = r4
    8165	05 00 1d 00 00 00 00 00	goto +0x1d <LBB497_9>

000000000000ff30 <LBB497_6>
    8166	bf 45 00 00 00 00 00 00	r5 = r4
    8167	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8168	37 05 00 00 64 00 00 00	r5 /= 0x64
    8169	bf 50 00 00 00 00 00 00	r0 = r5
    8170	27 00 00 00 64 00 00 00	r0 *= 0x64
    8171	1f 04 00 00 00 00 00 00	r4 -= r0
    8172	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8173	67 04 00 00 01 00 00 00	r4 <<= 0x1
    8174	18 00 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r0 = 0x12f13 ll
    8176	0f 40 00 00 00 00 00 00	r0 += r4
    8177	07 02 00 00 fe ff ff ff	r2 += -0x2
    8178	bf a4 00 00 00 00 00 00	r4 = r10
    8179	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8180	0f 24 00 00 00 00 00 00	r4 += r2
    8181	69 00 00 00 00 00 00 00	r0 = *(u16 *)(r0 + 0x0)
    8182	6b 04 00 00 00 00 00 00	*(u16 *)(r4 + 0x0) = r0
    8183	bf 54 00 00 00 00 00 00	r4 = r5
    8184	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB497_5>

000000000000ffc8 <LBB497_7>
    8185	67 04 00 00 01 00 00 00	r4 <<= 0x1
    8186	18 05 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f13 ll
    8188	0f 45 00 00 00 00 00 00	r5 += r4
    8189	07 02 00 00 fe ff ff ff	r2 += -0x2
    8190	bf a4 00 00 00 00 00 00	r4 = r10
    8191	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8192	0f 24 00 00 00 00 00 00	r4 += r2
    8193	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8194	6b 54 00 00 00 00 00 00	*(u16 *)(r4 + 0x0) = r5

0000000000010018 <LBB497_9>
    8195	b7 04 00 00 27 00 00 00	r4 = 0x27
    8196	1f 24 00 00 00 00 00 00	r4 -= r2
    8197	bf a5 00 00 00 00 00 00	r5 = r10
    8198	07 05 00 00 d9 ff ff ff	r5 += -0x27
    8199	0f 25 00 00 00 00 00 00	r5 += r2
    8200	7b 5a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r5
    8201	7b 4a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r4
    8202	b7 02 00 00 01 00 00 00	r2 = 0x1
    8203	65 01 01 00 ff ff ff ff	if r1 s> -0x1 goto +0x1 <LBB497_11>
    8204	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000010068 <LBB497_11>
    8205	bf a5 00 00 00 00 00 00	r5 = r10
    8206	bf 31 00 00 00 00 00 00	r1 = r3
    8207	18 03 00 00 98 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12e98 ll
    8209	b7 04 00 00 00 00 00 00	r4 = 0x0
    8210	85 10 00 00 14 f9 ff ff	call -0x6ec ; <core::fmt::Formatter::pad_integral>
    8211	95 00 00 00 00 00 00 00	exit

00000000000100a0 <core::fmt::num::imp::<impl core::fmt::Display for u32>::fmt>
    8212	b7 03 00 00 27 00 00 00	r3 = 0x27
    8213	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0x0)
    8214	b7 04 00 00 10 27 00 00	r4 = 0x2710
    8215	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB498_4>
    8216	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000100c8 <LBB498_2>
    8217	bf 14 00 00 00 00 00 00	r4 = r1
    8218	37 01 00 00 10 27 00 00	r1 /= 0x2710
    8219	bf 15 00 00 00 00 00 00	r5 = r1
    8220	27 05 00 00 10 27 00 00	r5 *= 0x2710
    8221	bf 40 00 00 00 00 00 00	r0 = r4
    8222	1f 50 00 00 00 00 00 00	r0 -= r5
    8223	bf 05 00 00 00 00 00 00	r5 = r0
    8224	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8225	37 05 00 00 64 00 00 00	r5 /= 0x64
    8226	bf 56 00 00 00 00 00 00	r6 = r5
    8227	27 06 00 00 64 00 00 00	r6 *= 0x64
    8228	1f 60 00 00 00 00 00 00	r0 -= r6
    8229	bf a6 00 00 00 00 00 00	r6 = r10
    8230	07 06 00 00 d9 ff ff ff	r6 += -0x27
    8231	0f 36 00 00 00 00 00 00	r6 += r3
    8232	67 05 00 00 01 00 00 00	r5 <<= 0x1
    8233	18 07 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r7 = 0x12f13 ll
    8235	0f 57 00 00 00 00 00 00	r7 += r5
    8236	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    8237	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    8238	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8239	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8240	18 05 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f13 ll
    8242	0f 05 00 00 00 00 00 00	r5 += r0
    8243	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8244	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    8245	07 03 00 00 fc ff ff ff	r3 += -0x4
    8246	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB498_2>
    8247	07 03 00 00 27 00 00 00	r3 += 0x27

00000000000101c0 <LBB498_4>
    8248	25 01 0a 00 63 00 00 00	if r1 > 0x63 goto +0xa <LBB498_6>

00000000000101c8 <LBB498_5>
    8249	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8250	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB498_8>
    8251	05 00 1a 00 00 00 00 00	goto +0x1a <LBB498_7>

00000000000101e0 <LBB498_8>
    8252	07 03 00 00 ff ff ff ff	r3 += -0x1
    8253	bf a4 00 00 00 00 00 00	r4 = r10
    8254	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8255	0f 34 00 00 00 00 00 00	r4 += r3
    8256	07 01 00 00 30 00 00 00	r1 += 0x30
    8257	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    8258	05 00 1d 00 00 00 00 00	goto +0x1d <LBB498_9>

0000000000010218 <LBB498_6>
    8259	bf 14 00 00 00 00 00 00	r4 = r1
    8260	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8261	37 04 00 00 64 00 00 00	r4 /= 0x64
    8262	bf 45 00 00 00 00 00 00	r5 = r4
    8263	27 05 00 00 64 00 00 00	r5 *= 0x64
    8264	1f 51 00 00 00 00 00 00	r1 -= r5
    8265	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8266	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8267	18 05 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f13 ll
    8269	0f 15 00 00 00 00 00 00	r5 += r1
    8270	07 03 00 00 fe ff ff ff	r3 += -0x2
    8271	bf a1 00 00 00 00 00 00	r1 = r10
    8272	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8273	0f 31 00 00 00 00 00 00	r1 += r3
    8274	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8275	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8276	bf 41 00 00 00 00 00 00	r1 = r4
    8277	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB498_5>

00000000000102b0 <LBB498_7>
    8278	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8279	18 04 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r4 = 0x12f13 ll
    8281	0f 14 00 00 00 00 00 00	r4 += r1
    8282	07 03 00 00 fe ff ff ff	r3 += -0x2
    8283	bf a1 00 00 00 00 00 00	r1 = r10
    8284	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8285	0f 31 00 00 00 00 00 00	r1 += r3
    8286	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8287	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

0000000000010300 <LBB498_9>
    8288	bf a1 00 00 00 00 00 00	r1 = r10
    8289	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8290	0f 31 00 00 00 00 00 00	r1 += r3
    8291	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8292	b7 01 00 00 27 00 00 00	r1 = 0x27
    8293	1f 31 00 00 00 00 00 00	r1 -= r3
    8294	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8295	bf a5 00 00 00 00 00 00	r5 = r10
    8296	bf 21 00 00 00 00 00 00	r1 = r2
    8297	b7 02 00 00 01 00 00 00	r2 = 0x1
    8298	18 03 00 00 98 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12e98 ll
    8300	b7 04 00 00 00 00 00 00	r4 = 0x0
    8301	85 10 00 00 b9 f8 ff ff	call -0x747 ; <core::fmt::Formatter::pad_integral>
    8302	95 00 00 00 00 00 00 00	exit

0000000000010378 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt>
    8303	b7 03 00 00 27 00 00 00	r3 = 0x27
    8304	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8305	b7 04 00 00 10 27 00 00	r4 = 0x2710
    8306	2d 14 20 00 00 00 00 00	if r4 > r1 goto +0x20 <LBB500_4>
    8307	b7 03 00 00 00 00 00 00	r3 = 0x0

00000000000103a0 <LBB500_2>
    8308	bf 14 00 00 00 00 00 00	r4 = r1
    8309	37 01 00 00 10 27 00 00	r1 /= 0x2710
    8310	bf 15 00 00 00 00 00 00	r5 = r1
    8311	27 05 00 00 10 27 00 00	r5 *= 0x2710
    8312	bf 40 00 00 00 00 00 00	r0 = r4
    8313	1f 50 00 00 00 00 00 00	r0 -= r5
    8314	bf 05 00 00 00 00 00 00	r5 = r0
    8315	57 05 00 00 ff ff 00 00	r5 &= 0xffff
    8316	37 05 00 00 64 00 00 00	r5 /= 0x64
    8317	bf 56 00 00 00 00 00 00	r6 = r5
    8318	27 06 00 00 64 00 00 00	r6 *= 0x64
    8319	1f 60 00 00 00 00 00 00	r0 -= r6
    8320	bf a6 00 00 00 00 00 00	r6 = r10
    8321	07 06 00 00 d9 ff ff ff	r6 += -0x27
    8322	0f 36 00 00 00 00 00 00	r6 += r3
    8323	67 05 00 00 01 00 00 00	r5 <<= 0x1
    8324	18 07 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r7 = 0x12f13 ll
    8326	0f 57 00 00 00 00 00 00	r7 += r5
    8327	69 75 00 00 00 00 00 00	r5 = *(u16 *)(r7 + 0x0)
    8328	6b 56 23 00 00 00 00 00	*(u16 *)(r6 + 0x23) = r5
    8329	57 00 00 00 ff ff 00 00	r0 &= 0xffff
    8330	67 00 00 00 01 00 00 00	r0 <<= 0x1
    8331	18 05 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f13 ll
    8333	0f 05 00 00 00 00 00 00	r5 += r0
    8334	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8335	6b 56 25 00 00 00 00 00	*(u16 *)(r6 + 0x25) = r5
    8336	07 03 00 00 fc ff ff ff	r3 += -0x4
    8337	25 04 e2 ff ff e0 f5 05	if r4 > 0x5f5e0ff goto -0x1e <LBB500_2>
    8338	07 03 00 00 27 00 00 00	r3 += 0x27

0000000000010498 <LBB500_4>
    8339	65 01 0a 00 63 00 00 00	if r1 s> 0x63 goto +0xa <LBB500_6>

00000000000104a0 <LBB500_5>
    8340	b7 04 00 00 0a 00 00 00	r4 = 0xa
    8341	6d 14 01 00 00 00 00 00	if r4 s> r1 goto +0x1 <LBB500_8>
    8342	05 00 1a 00 00 00 00 00	goto +0x1a <LBB500_7>

00000000000104b8 <LBB500_8>
    8343	07 03 00 00 ff ff ff ff	r3 += -0x1
    8344	bf a4 00 00 00 00 00 00	r4 = r10
    8345	07 04 00 00 d9 ff ff ff	r4 += -0x27
    8346	0f 34 00 00 00 00 00 00	r4 += r3
    8347	07 01 00 00 30 00 00 00	r1 += 0x30
    8348	73 14 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r1
    8349	05 00 1d 00 00 00 00 00	goto +0x1d <LBB500_9>

00000000000104f0 <LBB500_6>
    8350	bf 14 00 00 00 00 00 00	r4 = r1
    8351	57 04 00 00 ff ff 00 00	r4 &= 0xffff
    8352	37 04 00 00 64 00 00 00	r4 /= 0x64
    8353	bf 45 00 00 00 00 00 00	r5 = r4
    8354	27 05 00 00 64 00 00 00	r5 *= 0x64
    8355	1f 51 00 00 00 00 00 00	r1 -= r5
    8356	57 01 00 00 ff ff 00 00	r1 &= 0xffff
    8357	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8358	18 05 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r5 = 0x12f13 ll
    8360	0f 15 00 00 00 00 00 00	r5 += r1
    8361	07 03 00 00 fe ff ff ff	r3 += -0x2
    8362	bf a1 00 00 00 00 00 00	r1 = r10
    8363	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8364	0f 31 00 00 00 00 00 00	r1 += r3
    8365	69 55 00 00 00 00 00 00	r5 = *(u16 *)(r5 + 0x0)
    8366	6b 51 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r5
    8367	bf 41 00 00 00 00 00 00	r1 = r4
    8368	05 00 e3 ff 00 00 00 00	goto -0x1d <LBB500_5>

0000000000010588 <LBB500_7>
    8369	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8370	18 04 00 00 13 2f 01 00 00 00 00 00 00 00 00 00	r4 = 0x12f13 ll
    8372	0f 14 00 00 00 00 00 00	r4 += r1
    8373	07 03 00 00 fe ff ff ff	r3 += -0x2
    8374	bf a1 00 00 00 00 00 00	r1 = r10
    8375	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8376	0f 31 00 00 00 00 00 00	r1 += r3
    8377	69 44 00 00 00 00 00 00	r4 = *(u16 *)(r4 + 0x0)
    8378	6b 41 00 00 00 00 00 00	*(u16 *)(r1 + 0x0) = r4

00000000000105d8 <LBB500_9>
    8379	bf a1 00 00 00 00 00 00	r1 = r10
    8380	07 01 00 00 d9 ff ff ff	r1 += -0x27
    8381	0f 31 00 00 00 00 00 00	r1 += r3
    8382	7b 1a 00 f0 00 00 00 00	*(u64 *)(r10 - 0x1000) = r1
    8383	b7 01 00 00 27 00 00 00	r1 = 0x27
    8384	1f 31 00 00 00 00 00 00	r1 -= r3
    8385	7b 1a 08 f0 00 00 00 00	*(u64 *)(r10 - 0xff8) = r1
    8386	bf a5 00 00 00 00 00 00	r5 = r10
    8387	bf 21 00 00 00 00 00 00	r1 = r2
    8388	b7 02 00 00 01 00 00 00	r2 = 0x1
    8389	18 03 00 00 98 2e 01 00 00 00 00 00 00 00 00 00	r3 = 0x12e98 ll
    8391	b7 04 00 00 00 00 00 00	r4 = 0x0
    8392	85 10 00 00 5e f8 ff ff	call -0x7a2 ; <core::fmt::Formatter::pad_integral>
    8393	95 00 00 00 00 00 00 00	exit

0000000000010650 <<core::fmt::Error as core::fmt::Debug>::fmt>
    8394	79 21 20 00 00 00 00 00	r1 = *(u64 *)(r2 + 0x20)
    8395	79 22 28 00 00 00 00 00	r2 = *(u64 *)(r2 + 0x28)
    8396	79 24 18 00 00 00 00 00	r4 = *(u64 *)(r2 + 0x18)
    8397	18 02 00 00 86 36 01 00 00 00 00 00 00 00 00 00	r2 = 0x13686 ll
    8399	b7 03 00 00 05 00 00 00	r3 = 0x5
    8400	8d 00 00 00 04 00 00 00	callx r4
    8401	95 00 00 00 00 00 00 00	exit

0000000000010690 <<&T as core::fmt::Debug>::fmt>
    8402	79 13 00 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x0)
    8403	79 11 08 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x8)
    8404	79 14 18 00 00 00 00 00	r4 = *(u64 *)(r1 + 0x18)
    8405	bf 31 00 00 00 00 00 00	r1 = r3
    8406	8d 00 00 00 04 00 00 00	callx r4
    8407	95 00 00 00 00 00 00 00	exit

00000000000106c0 <<&T as core::fmt::Display>::fmt>
    8408	bf 24 00 00 00 00 00 00	r4 = r2
    8409	79 11 00 00 00 00 00 00	r1 = *(u64 *)(r1 + 0x0)
    8410	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    8411	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8412	bf 41 00 00 00 00 00 00	r1 = r4
    8413	85 10 00 00 46 f9 ff ff	call -0x6ba ; <core::fmt::Formatter::pad>
    8414	95 00 00 00 00 00 00 00	exit

00000000000106f8 <<&T as core::fmt::Display>::fmt>
    8415	79 26 28 00 00 00 00 00	r6 = *(u64 *)(r2 + 0x28)
    8416	79 27 20 00 00 00 00 00	r7 = *(u64 *)(r2 + 0x20)
    8417	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8418	bf a8 00 00 00 00 00 00	r8 = r10
    8419	07 08 00 00 d0 ff ff ff	r8 += -0x30
    8420	bf 81 00 00 00 00 00 00	r1 = r8
    8421	b7 03 00 00 30 00 00 00	r3 = 0x30
    8422	85 10 00 00 de 01 00 00	call 0x1de ; <memcpy>
    8423	bf 71 00 00 00 00 00 00	r1 = r7
    8424	bf 62 00 00 00 00 00 00	r2 = r6
    8425	bf 83 00 00 00 00 00 00	r3 = r8
    8426	85 10 00 00 ad f7 ff ff	call -0x853 ; <core::fmt::write>
    8427	95 00 00 00 00 00 00 00	exit

0000000000010760 <<&T as core::fmt::Display>::fmt>
    8428	bf 24 00 00 00 00 00 00	r4 = r2
    8429	79 13 08 00 00 00 00 00	r3 = *(u64 *)(r1 + 0x8)
    8430	79 12 00 00 00 00 00 00	r2 = *(u64 *)(r1 + 0x0)
    8431	bf 41 00 00 00 00 00 00	r1 = r4
    8432	85 10 00 00 33 f9 ff ff	call -0x6cd ; <core::fmt::Formatter::pad>
    8433	95 00 00 00 00 00 00 00	exit

0000000000010790 <core::unicode::unicode_data::grapheme_extend::lookup>
    8434	b7 02 00 00 00 00 00 00	r2 = 0x0
    8435	b7 03 00 00 20 00 00 00	r3 = 0x20
    8436	bf 14 00 00 00 00 00 00	r4 = r1
    8437	67 04 00 00 0b 00 00 00	r4 <<= 0xb
    8438	b7 05 00 00 20 00 00 00	r5 = 0x20
    8439	05 00 06 00 00 00 00 00	goto +0x6 <LBB646_1>

00000000000107c0 <LBB646_3>
    8440	07 03 00 00 01 00 00 00	r3 += 0x1
    8441	bf 32 00 00 00 00 00 00	r2 = r3
    8442	bf 53 00 00 00 00 00 00	r3 = r5

00000000000107d8 <LBB646_4>
    8443	1f 23 00 00 00 00 00 00	r3 -= r2
    8444	2d 25 01 00 00 00 00 00	if r5 > r2 goto +0x1 <LBB646_1>
    8445	05 00 14 00 00 00 00 00	goto +0x14 <LBB646_6>

00000000000107f0 <LBB646_1>
    8446	77 03 00 00 01 00 00 00	r3 >>= 0x1
    8447	0f 23 00 00 00 00 00 00	r3 += r2
    8448	bf 30 00 00 00 00 00 00	r0 = r3
    8449	67 00 00 00 02 00 00 00	r0 <<= 0x2
    8450	18 06 00 00 8c 36 01 00 00 00 00 00 00 00 00 00	r6 = 0x1368c ll
    8452	0f 06 00 00 00 00 00 00	r6 += r0
    8453	61 60 00 00 00 00 00 00	r0 = *(u32 *)(r6 + 0x0)
    8454	67 00 00 00 0b 00 00 00	r0 <<= 0xb
    8455	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8456	bf 46 00 00 00 00 00 00	r6 = r4
    8457	67 06 00 00 20 00 00 00	r6 <<= 0x20
    8458	77 00 00 00 20 00 00 00	r0 >>= 0x20
    8459	77 06 00 00 20 00 00 00	r6 >>= 0x20
    8460	2d 06 eb ff 00 00 00 00	if r6 > r0 goto -0x15 <LBB646_3>
    8461	bf 35 00 00 00 00 00 00	r5 = r3
    8462	1d 60 01 00 00 00 00 00	if r0 == r6 goto +0x1 <LBB646_5>
    8463	05 00 eb ff 00 00 00 00	goto -0x15 <LBB646_4>

0000000000010880 <LBB646_5>
    8464	07 03 00 00 01 00 00 00	r3 += 0x1
    8465	bf 32 00 00 00 00 00 00	r2 = r3

0000000000010890 <LBB646_6>
    8466	25 02 45 00 1f 00 00 00	if r2 > 0x1f goto +0x45 <LBB646_8>
    8467	bf 25 00 00 00 00 00 00	r5 = r2
    8468	67 05 00 00 02 00 00 00	r5 <<= 0x2
    8469	18 00 00 00 8c 36 01 00 00 00 00 00 00 00 00 00	r0 = 0x1368c ll
    8471	b7 04 00 00 c3 02 00 00	r4 = 0x2c3
    8472	15 02 04 00 1f 00 00 00	if r2 == 0x1f goto +0x4 <LBB646_10>
    8473	bf 53 00 00 00 00 00 00	r3 = r5
    8474	0f 03 00 00 00 00 00 00	r3 += r0
    8475	61 34 04 00 00 00 00 00	r4 = *(u32 *)(r3 + 0x4)
    8476	77 04 00 00 15 00 00 00	r4 >>= 0x15

00000000000108e8 <LBB646_10>
    8477	bf 23 00 00 00 00 00 00	r3 = r2
    8478	07 03 00 00 ff ff ff ff	r3 += -0x1
    8479	b7 06 00 00 00 00 00 00	r6 = 0x0
    8480	b7 07 00 00 01 00 00 00	r7 = 0x1
    8481	2d 23 01 00 00 00 00 00	if r3 > r2 goto +0x1 <LBB646_12>
    8482	b7 07 00 00 00 00 00 00	r7 = 0x0

0000000000010918 <LBB646_12>
    8483	57 07 00 00 01 00 00 00	r7 &= 0x1
    8484	55 07 0e 00 00 00 00 00	if r7 != 0x0 goto +0xe <LBB646_16>
    8485	b7 02 00 00 20 00 00 00	r2 = 0x20
    8486	2d 32 06 00 00 00 00 00	if r2 > r3 goto +0x6 <LBB646_15>
    8487	bf 31 00 00 00 00 00 00	r1 = r3
    8488	b7 02 00 00 20 00 00 00	r2 = 0x20
    8489	18 03 00 00 a0 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x140a0 ll
    8491	85 10 00 00 19 f7 ff ff	call -0x8e7 ; <core::panicking::panic_bounds_check>
    8492	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010968 <LBB646_15>
    8493	67 03 00 00 02 00 00 00	r3 <<= 0x2
    8494	18 02 00 00 8c 36 01 00 00 00 00 00 00 00 00 00	r2 = 0x1368c ll
    8496	0f 32 00 00 00 00 00 00	r2 += r3
    8497	61 26 00 00 00 00 00 00	r6 = *(u32 *)(r2 + 0x0)
    8498	57 06 00 00 ff ff 1f 00	r6 &= 0x1fffff

0000000000010998 <LBB646_16>
    8499	0f 50 00 00 00 00 00 00	r0 += r5
    8500	61 00 00 00 00 00 00 00	r0 = *(u32 *)(r0 + 0x0)
    8501	77 00 00 00 15 00 00 00	r0 >>= 0x15
    8502	bf 02 00 00 00 00 00 00	r2 = r0
    8503	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    8504	0f 24 00 00 00 00 00 00	r4 += r2
    8505	15 04 16 00 00 00 00 00	if r4 == 0x0 goto +0x16 <LBB646_23>
    8506	1f 61 00 00 00 00 00 00	r1 -= r6
    8507	18 03 00 00 0c 37 01 00 00 00 00 00 00 00 00 00	r3 = 0x1370c ll
    8509	0f 03 00 00 00 00 00 00	r3 += r0
    8510	b7 05 00 00 00 00 00 00	r5 = 0x0
    8511	67 01 00 00 20 00 00 00	r1 <<= 0x20
    8512	77 01 00 00 20 00 00 00	r1 >>= 0x20
    8513	b7 06 00 00 00 00 00 00	r6 = 0x0

0000000000010a10 <LBB646_18>
    8514	bf 02 00 00 00 00 00 00	r2 = r0
    8515	0f 62 00 00 00 00 00 00	r2 += r6
    8516	25 02 0d 00 c2 02 00 00	if r2 > 0x2c2 goto +0xd <LBB646_20>
    8517	bf 32 00 00 00 00 00 00	r2 = r3
    8518	0f 62 00 00 00 00 00 00	r2 += r6
    8519	71 22 00 00 00 00 00 00	r2 = *(u8 *)(r2 + 0x0)
    8520	0f 25 00 00 00 00 00 00	r5 += r2
    8521	bf 52 00 00 00 00 00 00	r2 = r5
    8522	67 02 00 00 20 00 00 00	r2 <<= 0x20
    8523	77 02 00 00 20 00 00 00	r2 >>= 0x20
    8524	2d 12 02 00 00 00 00 00	if r2 > r1 goto +0x2 <LBB646_22>
    8525	07 06 00 00 01 00 00 00	r6 += 0x1
    8526	2d 64 f3 ff 00 00 00 00	if r4 > r6 goto -0xd <LBB646_18>

0000000000010a78 <LBB646_22>
    8527	0f 60 00 00 00 00 00 00	r0 += r6

0000000000010a80 <LBB646_23>
    8528	57 00 00 00 01 00 00 00	r0 &= 0x1
    8529	95 00 00 00 00 00 00 00	exit

0000000000010a90 <LBB646_20>
    8530	bf 21 00 00 00 00 00 00	r1 = r2
    8531	b7 02 00 00 c3 02 00 00	r2 = 0x2c3
    8532	18 03 00 00 88 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14088 ll
    8534	85 10 00 00 ee f6 ff ff	call -0x912 ; <core::panicking::panic_bounds_check>
    8535	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010ac0 <LBB646_8>
    8536	bf 21 00 00 00 00 00 00	r1 = r2
    8537	b7 02 00 00 20 00 00 00	r2 = 0x20
    8538	18 03 00 00 70 40 01 00 00 00 00 00 00 00 00 00	r3 = 0x14070 ll
    8540	85 10 00 00 e8 f6 ff ff	call -0x918 ; <core::panicking::panic_bounds_check>
    8541	85 10 00 00 ff ff ff ff	call -0x1 ; abort

0000000000010af0 <__adddf3>
    8542	85 10 00 00 d8 01 00 00	call 0x1d8 ; <compiler_builtins::float::add::__adddf3>
    8543	95 00 00 00 00 00 00 00	exit

0000000000010b00 <__fixunsdfdi>
    8544	b7 00 00 00 00 00 00 00	r0 = 0x0
    8545	bf 12 00 00 00 00 00 00	r2 = r1
    8546	77 02 00 00 34 00 00 00	r2 >>= 0x34
    8547	57 02 00 00 ff 07 00 00	r2 &= 0x7ff
    8548	b7 03 00 00 ff 03 00 00	r3 = 0x3ff
    8549	2d 23 14 00 00 00 00 00	if r3 > r2 goto +0x14 <LBB0_7>
    8550	b7 03 00 00 00 00 00 00	r3 = 0x0
    8551	6d 13 12 00 00 00 00 00	if r3 s> r1 goto +0x12 <LBB0_7>
    8552	b7 00 00 00 ff ff ff ff	r0 = -0x1
    8553	25 02 10 00 3e 04 00 00	if r2 > 0x43e goto +0x10 <LBB0_7>
    8554	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r3 = 0xfffffffffffff ll
    8556	5f 31 00 00 00 00 00 00	r1 &= r3
    8557	18 03 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r3 = 0x10000000000000 ll
    8559	4f 31 00 00 00 00 00 00	r1 |= r3
    8560	b7 03 00 00 33 04 00 00	r3 = 0x433
    8561	2d 23 04 00 00 00 00 00	if r3 > r2 goto +0x4 <LBB0_5>
    8562	07 02 00 00 cd fb ff ff	r2 += -0x433
    8563	57 02 00 00 ff ff 00 00	r2 &= 0xffff
    8564	6f 21 00 00 00 00 00 00	r1 <<= r2
    8565	05 00 03 00 00 00 00 00	goto +0x3 <LBB0_6>

0000000000010bb0 <LBB0_5>
    8566	1f 23 00 00 00 00 00 00	r3 -= r2
    8567	57 03 00 00 ff ff 00 00	r3 &= 0xffff
    8568	7f 31 00 00 00 00 00 00	r1 >>= r3

0000000000010bc8 <LBB0_6>
    8569	bf 10 00 00 00 00 00 00	r0 = r1

0000000000010bd0 <LBB0_7>
    8570	95 00 00 00 00 00 00 00	exit

0000000000010bd8 <__gtdf2>
    8571	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8573	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r5 = 0x7fffffffffffffff ll
    8575	bf 13 00 00 00 00 00 00	r3 = r1
    8576	5f 53 00 00 00 00 00 00	r3 &= r5
    8577	18 06 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r6 = 0x7ff0000000000000 ll
    8579	2d 63 18 00 00 00 00 00	if r3 > r6 goto +0x18 <LBB0_9>
    8580	bf 24 00 00 00 00 00 00	r4 = r2
    8581	5f 54 00 00 00 00 00 00	r4 &= r5
    8582	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8584	2d 64 13 00 00 00 00 00	if r4 > r6 goto +0x13 <LBB0_9>
    8585	4f 34 00 00 00 00 00 00	r4 |= r3
    8586	b7 00 00 00 00 00 00 00	r0 = 0x0
    8587	15 04 10 00 00 00 00 00	if r4 == 0x0 goto +0x10 <LBB0_9>
    8588	bf 23 00 00 00 00 00 00	r3 = r2
    8589	5f 13 00 00 00 00 00 00	r3 &= r1
    8590	65 03 06 00 ff ff ff ff	if r3 s> -0x1 goto +0x6 <LBB0_5>
    8591	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8593	6d 21 0a 00 00 00 00 00	if r1 s> r2 goto +0xa <LBB0_9>
    8594	b7 00 00 00 01 00 00 00	r0 = 0x1
    8595	1d 21 07 00 00 00 00 00	if r1 == r2 goto +0x7 <LBB0_8>
    8596	05 00 07 00 00 00 00 00	goto +0x7 <LBB0_9>

0000000000010ca8 <LBB0_5>
    8597	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8599	6d 12 04 00 00 00 00 00	if r2 s> r1 goto +0x4 <LBB0_9>
    8600	b7 00 00 00 01 00 00 00	r0 = 0x1
    8601	1d 21 01 00 00 00 00 00	if r1 == r2 goto +0x1 <LBB0_8>
    8602	05 00 01 00 00 00 00 00	goto +0x1 <LBB0_9>

0000000000010cd8 <LBB0_8>
    8603	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000010ce0 <LBB0_9>
    8604	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8605	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    8606	95 00 00 00 00 00 00 00	exit

0000000000010cf8 <__gedf2>
    8607	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8609	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r5 = 0x7fffffffffffffff ll
    8611	bf 13 00 00 00 00 00 00	r3 = r1
    8612	5f 53 00 00 00 00 00 00	r3 &= r5
    8613	18 06 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r6 = 0x7ff0000000000000 ll
    8615	2d 63 18 00 00 00 00 00	if r3 > r6 goto +0x18 <LBB0_9>
    8616	bf 24 00 00 00 00 00 00	r4 = r2
    8617	5f 54 00 00 00 00 00 00	r4 &= r5
    8618	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8620	2d 64 13 00 00 00 00 00	if r4 > r6 goto +0x13 <LBB0_9>
    8621	4f 34 00 00 00 00 00 00	r4 |= r3
    8622	b7 00 00 00 00 00 00 00	r0 = 0x0
    8623	15 04 10 00 00 00 00 00	if r4 == 0x0 goto +0x10 <LBB0_9>
    8624	bf 23 00 00 00 00 00 00	r3 = r2
    8625	5f 13 00 00 00 00 00 00	r3 &= r1
    8626	65 03 06 00 ff ff ff ff	if r3 s> -0x1 goto +0x6 <LBB0_5>
    8627	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8629	6d 21 0a 00 00 00 00 00	if r1 s> r2 goto +0xa <LBB0_9>
    8630	b7 00 00 00 01 00 00 00	r0 = 0x1
    8631	1d 21 07 00 00 00 00 00	if r1 == r2 goto +0x7 <LBB0_8>
    8632	05 00 07 00 00 00 00 00	goto +0x7 <LBB0_9>

0000000000010dc8 <LBB0_5>
    8633	18 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00	r0 = 0xffffffff ll
    8635	6d 12 04 00 00 00 00 00	if r2 s> r1 goto +0x4 <LBB0_9>
    8636	b7 00 00 00 01 00 00 00	r0 = 0x1
    8637	1d 21 01 00 00 00 00 00	if r1 == r2 goto +0x1 <LBB0_8>
    8638	05 00 01 00 00 00 00 00	goto +0x1 <LBB0_9>

0000000000010df8 <LBB0_8>
    8639	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000010e00 <LBB0_9>
    8640	67 00 00 00 20 00 00 00	r0 <<= 0x20
    8641	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    8642	95 00 00 00 00 00 00 00	exit

0000000000010e18 <__muldf3>
    8643	85 10 00 00 01 00 00 00	call 0x1 ; <compiler_builtins::float::mul::__muldf3>
    8644	95 00 00 00 00 00 00 00	exit

0000000000010e28 <compiler_builtins::float::mul::__muldf3>
    8645	bf 26 00 00 00 00 00 00	r6 = r2
    8646	bf 63 00 00 00 00 00 00	r3 = r6
    8647	af 13 00 00 00 00 00 00	r3 ^= r1
    8648	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8650	5f 23 00 00 00 00 00 00	r3 &= r2
    8651	7b 3a e8 ff 00 00 00 00	*(u64 *)(r10 - 0x18) = r3
    8652	18 05 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r5 = 0xfffffffffffff ll
    8654	bf 62 00 00 00 00 00 00	r2 = r6
    8655	5f 52 00 00 00 00 00 00	r2 &= r5
    8656	bf 14 00 00 00 00 00 00	r4 = r1
    8657	5f 54 00 00 00 00 00 00	r4 &= r5
    8658	bf 67 00 00 00 00 00 00	r7 = r6
    8659	77 07 00 00 34 00 00 00	r7 >>= 0x34
    8660	57 07 00 00 ff 07 00 00	r7 &= 0x7ff
    8661	bf 18 00 00 00 00 00 00	r8 = r1
    8662	77 08 00 00 34 00 00 00	r8 >>= 0x34
    8663	57 08 00 00 ff 07 00 00	r8 &= 0x7ff
    8664	bf 85 00 00 00 00 00 00	r5 = r8
    8665	07 05 00 00 ff ff ff ff	r5 += -0x1
    8666	25 05 25 00 fd 07 00 00	if r5 > 0x7fd goto +0x25 <LBB1_3>
    8667	b7 09 00 00 00 00 00 00	r9 = 0x0
    8668	bf 75 00 00 00 00 00 00	r5 = r7
    8669	07 05 00 00 ff ff ff ff	r5 += -0x1
    8670	25 05 21 00 fd 07 00 00	if r5 > 0x7fd goto +0x21 <LBB1_3>

0000000000010ef8 <LBB1_2>
    8671	67 02 00 00 0b 00 00 00	r2 <<= 0xb
    8672	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r1 = -0x8000000000000000 ll
    8674	4f 12 00 00 00 00 00 00	r2 |= r1
    8675	18 06 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r6 = 0x10000000000000 ll
    8677	4f 64 00 00 00 00 00 00	r4 |= r6
    8678	bf a1 00 00 00 00 00 00	r1 = r10
    8679	07 01 00 00 f0 ff ff ff	r1 += -0x10
    8680	b7 03 00 00 00 00 00 00	r3 = 0x0
    8681	b7 05 00 00 00 00 00 00	r5 = 0x0
    8682	85 10 00 00 99 02 00 00	call 0x299 ; <__multi3>
    8683	0f 87 00 00 00 00 00 00	r7 += r8
    8684	0f 97 00 00 00 00 00 00	r7 += r9
    8685	79 a2 f8 ff 00 00 00 00	r2 = *(u64 *)(r10 - 0x8)
    8686	bf 23 00 00 00 00 00 00	r3 = r2
    8687	5f 63 00 00 00 00 00 00	r3 &= r6
    8688	79 a1 f0 ff 00 00 00 00	r1 = *(u64 *)(r10 - 0x10)
    8689	15 03 01 00 00 00 00 00	if r3 == 0x0 goto +0x1 <LBB1_23>
    8690	05 00 1d 00 00 00 00 00	goto +0x1d <LBB1_24>

0000000000010f98 <LBB1_23>
    8691	67 02 00 00 01 00 00 00	r2 <<= 0x1
    8692	bf 13 00 00 00 00 00 00	r3 = r1
    8693	77 03 00 00 3f 00 00 00	r3 >>= 0x3f
    8694	4f 32 00 00 00 00 00 00	r2 |= r3
    8695	67 01 00 00 01 00 00 00	r1 <<= 0x1
    8696	07 07 00 00 01 fc ff ff	r7 += -0x3ff
    8697	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8698	65 07 01 00 fe 07 00 00	if r7 s> 0x7fe goto +0x1 <LBB1_26>
    8699	05 00 17 00 00 00 00 00	goto +0x17 <LBB1_25>

0000000000010fe0 <LBB1_26>
    8700	18 01 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r1 = 0x7ff0000000000000 ll
    8702	4f 10 00 00 00 00 00 00	r0 |= r1
    8703	05 00 48 00 00 00 00 00	goto +0x48 <LBB1_35>

0000000000011000 <LBB1_3>
    8704	18 09 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r9 = 0x7fffffffffffffff ll
    8706	bf 15 00 00 00 00 00 00	r5 = r1
    8707	5f 95 00 00 00 00 00 00	r5 &= r9
    8708	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r0 = 0x7ff0000000000000 ll
    8710	2d 05 14 00 00 00 00 00	if r5 > r0 goto +0x14 <LBB1_5>
    8711	bf 63 00 00 00 00 00 00	r3 = r6
    8712	5f 93 00 00 00 00 00 00	r3 &= r9
    8713	2d 03 01 00 00 00 00 00	if r3 > r0 goto +0x1 <LBB1_7>
    8714	05 00 15 00 00 00 00 00	goto +0x15 <LBB1_6>

0000000000011058 <LBB1_7>
    8715	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    8717	4f 16 00 00 00 00 00 00	r6 |= r1
    8718	bf 60 00 00 00 00 00 00	r0 = r6
    8719	05 00 38 00 00 00 00 00	goto +0x38 <LBB1_35>

0000000000011080 <LBB1_24>
    8720	07 07 00 00 02 fc ff ff	r7 += -0x3fe
    8721	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8722	65 07 e9 ff fe 07 00 00	if r7 s> 0x7fe goto -0x17 <LBB1_26>

0000000000011098 <LBB1_25>
    8723	b7 03 00 00 01 00 00 00	r3 = 0x1
    8724	6d 73 18 00 00 00 00 00	if r3 s> r7 goto +0x18 <LBB1_28>
    8725	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r3 = 0xfffffffffffff ll
    8727	5f 32 00 00 00 00 00 00	r2 &= r3
    8728	67 07 00 00 34 00 00 00	r7 <<= 0x34
    8729	4f 27 00 00 00 00 00 00	r7 |= r2
    8730	05 00 20 00 00 00 00 00	goto +0x20 <LBB1_30>

00000000000110d8 <LBB1_5>
    8731	18 02 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r2 = 0x8000000000000 ll
    8733	4f 21 00 00 00 00 00 00	r1 |= r2
    8734	bf 10 00 00 00 00 00 00	r0 = r1
    8735	05 00 28 00 00 00 00 00	goto +0x28 <LBB1_35>

0000000000011100 <LBB1_6>
    8736	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r0 = 0x7ff0000000000000 ll
    8738	1d 05 01 00 00 00 00 00	if r5 == r0 goto +0x1 <LBB1_9>
    8739	05 00 25 00 00 00 00 00	goto +0x25 <LBB1_8>

0000000000011120 <LBB1_9>
    8740	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r0 = 0x7ff8000000000000 ll
    8742	15 03 21 00 00 00 00 00	if r3 == 0x0 goto +0x21 <LBB1_35>
    8743	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8745	5f 26 00 00 00 00 00 00	r6 &= r2
    8746	af 16 00 00 00 00 00 00	r6 ^= r1
    8747	bf 60 00 00 00 00 00 00	r0 = r6
    8748	05 00 1b 00 00 00 00 00	goto +0x1b <LBB1_35>

0000000000011168 <LBB1_28>
    8749	1f 73 00 00 00 00 00 00	r3 -= r7
    8750	67 03 00 00 20 00 00 00	r3 <<= 0x20
    8751	77 03 00 00 20 00 00 00	r3 >>= 0x20
    8752	25 03 17 00 3f 00 00 00	if r3 > 0x3f goto +0x17 <LBB1_35>
    8753	07 07 00 00 ff ff ff ff	r7 += -0x1
    8754	57 07 00 00 3f 00 00 00	r7 &= 0x3f
    8755	bf 14 00 00 00 00 00 00	r4 = r1
    8756	4f 24 00 00 00 00 00 00	r4 |= r2
    8757	6f 74 00 00 00 00 00 00	r4 <<= r7
    8758	7f 31 00 00 00 00 00 00	r1 >>= r3
    8759	4f 14 00 00 00 00 00 00	r4 |= r1
    8760	7f 32 00 00 00 00 00 00	r2 >>= r3
    8761	bf 41 00 00 00 00 00 00	r1 = r4
    8762	bf 27 00 00 00 00 00 00	r7 = r2

00000000000111d8 <LBB1_30>
    8763	bf 72 00 00 00 00 00 00	r2 = r7
    8764	4f 02 00 00 00 00 00 00	r2 |= r0
    8765	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x8000000000000000 ll
    8767	2d 31 06 00 00 00 00 00	if r1 > r3 goto +0x6 <LBB1_32>
    8768	bf 20 00 00 00 00 00 00	r0 = r2
    8769	1d 31 01 00 00 00 00 00	if r1 == r3 goto +0x1 <LBB1_33>
    8770	05 00 05 00 00 00 00 00	goto +0x5 <LBB1_35>

0000000000011218 <LBB1_33>
    8771	57 07 00 00 01 00 00 00	r7 &= 0x1
    8772	0f 72 00 00 00 00 00 00	r2 += r7
    8773	05 00 01 00 00 00 00 00	goto +0x1 <LBB1_34>

0000000000011230 <LBB1_32>
    8774	07 02 00 00 01 00 00 00	r2 += 0x1

0000000000011238 <LBB1_34>
    8775	bf 20 00 00 00 00 00 00	r0 = r2

0000000000011240 <LBB1_35>
    8776	95 00 00 00 00 00 00 00	exit

0000000000011248 <LBB1_8>
    8777	1d 03 01 00 00 00 00 00	if r3 == r0 goto +0x1 <LBB1_13>
    8778	05 00 09 00 00 00 00 00	goto +0x9 <LBB1_11>

0000000000011258 <LBB1_13>
    8779	18 00 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r0 = 0x7ff8000000000000 ll
    8781	15 05 fa ff 00 00 00 00	if r5 == 0x0 goto -0x6 <LBB1_35>
    8782	18 02 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r2 = -0x8000000000000000 ll
    8784	5f 21 00 00 00 00 00 00	r1 &= r2
    8785	af 61 00 00 00 00 00 00	r1 ^= r6
    8786	bf 10 00 00 00 00 00 00	r0 = r1
    8787	05 00 f4 ff 00 00 00 00	goto -0xc <LBB1_35>

00000000000112a0 <LBB1_11>
    8788	79 a0 e8 ff 00 00 00 00	r0 = *(u64 *)(r10 - 0x18)
    8789	15 05 f2 ff 00 00 00 00	if r5 == 0x0 goto -0xe <LBB1_35>
    8790	15 03 f1 ff 00 00 00 00	if r3 == 0x0 goto -0xf <LBB1_35>
    8791	bf 36 00 00 00 00 00 00	r6 = r3
    8792	b7 09 00 00 00 00 00 00	r9 = 0x0
    8793	18 01 00 00 00 00 00 00 00 00 00 00 00 00 10 00	r1 = 0x10000000000000 ll
    8795	2d 51 02 00 00 00 00 00	if r1 > r5 goto +0x2 <LBB1_17>
    8796	2d 61 35 00 00 00 00 00	if r1 > r6 goto +0x35 <LBB1_20>
    8797	05 00 81 ff 00 00 00 00	goto -0x7f <LBB1_2>

00000000000112f0 <LBB1_17>
    8798	b7 00 00 00 40 00 00 00	r0 = 0x40
    8799	15 04 2b 00 00 00 00 00	if r4 == 0x0 goto +0x2b <LBB1_19>
    8800	bf 45 00 00 00 00 00 00	r5 = r4
    8801	77 05 00 00 01 00 00 00	r5 >>= 0x1
    8802	bf 43 00 00 00 00 00 00	r3 = r4
    8803	4f 53 00 00 00 00 00 00	r3 |= r5
    8804	bf 35 00 00 00 00 00 00	r5 = r3
    8805	77 05 00 00 02 00 00 00	r5 >>= 0x2
    8806	4f 53 00 00 00 00 00 00	r3 |= r5
    8807	bf 35 00 00 00 00 00 00	r5 = r3
    8808	77 05 00 00 04 00 00 00	r5 >>= 0x4
    8809	4f 53 00 00 00 00 00 00	r3 |= r5
    8810	bf 35 00 00 00 00 00 00	r5 = r3
    8811	77 05 00 00 08 00 00 00	r5 >>= 0x8
    8812	4f 53 00 00 00 00 00 00	r3 |= r5
    8813	bf 35 00 00 00 00 00 00	r5 = r3
    8814	77 05 00 00 10 00 00 00	r5 >>= 0x10
    8815	4f 53 00 00 00 00 00 00	r3 |= r5
    8816	bf 35 00 00 00 00 00 00	r5 = r3
    8817	77 05 00 00 20 00 00 00	r5 >>= 0x20
    8818	4f 53 00 00 00 00 00 00	r3 |= r5
    8819	a7 03 00 00 ff ff ff ff	r3 ^= -0x1
    8820	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    8822	bf 30 00 00 00 00 00 00	r0 = r3
    8823	77 00 00 00 01 00 00 00	r0 >>= 0x1
    8824	5f 50 00 00 00 00 00 00	r0 &= r5
    8825	1f 03 00 00 00 00 00 00	r3 -= r0
    8826	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    8828	bf 30 00 00 00 00 00 00	r0 = r3
    8829	5f 50 00 00 00 00 00 00	r0 &= r5
    8830	77 03 00 00 02 00 00 00	r3 >>= 0x2
    8831	5f 53 00 00 00 00 00 00	r3 &= r5
    8832	0f 30 00 00 00 00 00 00	r0 += r3
    8833	bf 03 00 00 00 00 00 00	r3 = r0
    8834	77 03 00 00 04 00 00 00	r3 >>= 0x4
    8835	0f 30 00 00 00 00 00 00	r0 += r3
    8836	18 03 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r3 = 0xf0f0f0f0f0f0f0f ll
    8838	5f 30 00 00 00 00 00 00	r0 &= r3
    8839	18 03 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r3 = 0x101010101010101 ll
    8841	2f 30 00 00 00 00 00 00	r0 *= r3
    8842	77 00 00 00 38 00 00 00	r0 >>= 0x38

0000000000011458 <LBB1_19>
    8843	b7 09 00 00 0c 00 00 00	r9 = 0xc
    8844	1f 09 00 00 00 00 00 00	r9 -= r0
    8845	07 00 00 00 35 00 00 00	r0 += 0x35
    8846	57 00 00 00 3f 00 00 00	r0 &= 0x3f
    8847	6f 04 00 00 00 00 00 00	r4 <<= r0
    8848	2d 61 01 00 00 00 00 00	if r1 > r6 goto +0x1 <LBB1_20>
    8849	05 00 4d ff 00 00 00 00	goto -0xb3 <LBB1_2>

0000000000011490 <LBB1_20>
    8850	b7 03 00 00 40 00 00 00	r3 = 0x40
    8851	15 02 2b 00 00 00 00 00	if r2 == 0x0 goto +0x2b <LBB1_22>
    8852	bf 23 00 00 00 00 00 00	r3 = r2
    8853	77 03 00 00 01 00 00 00	r3 >>= 0x1
    8854	bf 21 00 00 00 00 00 00	r1 = r2
    8855	4f 31 00 00 00 00 00 00	r1 |= r3
    8856	bf 13 00 00 00 00 00 00	r3 = r1
    8857	77 03 00 00 02 00 00 00	r3 >>= 0x2
    8858	4f 31 00 00 00 00 00 00	r1 |= r3
    8859	bf 13 00 00 00 00 00 00	r3 = r1
    8860	77 03 00 00 04 00 00 00	r3 >>= 0x4
    8861	4f 31 00 00 00 00 00 00	r1 |= r3
    8862	bf 13 00 00 00 00 00 00	r3 = r1
    8863	77 03 00 00 08 00 00 00	r3 >>= 0x8
    8864	4f 31 00 00 00 00 00 00	r1 |= r3
    8865	bf 13 00 00 00 00 00 00	r3 = r1
    8866	77 03 00 00 10 00 00 00	r3 >>= 0x10
    8867	4f 31 00 00 00 00 00 00	r1 |= r3
    8868	bf 13 00 00 00 00 00 00	r3 = r1
    8869	77 03 00 00 20 00 00 00	r3 >>= 0x20
    8870	4f 31 00 00 00 00 00 00	r1 |= r3
    8871	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    8872	18 03 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r3 = 0x5555555555555555 ll
    8874	bf 15 00 00 00 00 00 00	r5 = r1
    8875	77 05 00 00 01 00 00 00	r5 >>= 0x1
    8876	5f 35 00 00 00 00 00 00	r5 &= r3
    8877	1f 51 00 00 00 00 00 00	r1 -= r5
    8878	18 05 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r5 = 0x3333333333333333 ll
    8880	bf 13 00 00 00 00 00 00	r3 = r1
    8881	5f 53 00 00 00 00 00 00	r3 &= r5
    8882	77 01 00 00 02 00 00 00	r1 >>= 0x2
    8883	5f 51 00 00 00 00 00 00	r1 &= r5
    8884	0f 13 00 00 00 00 00 00	r3 += r1
    8885	bf 31 00 00 00 00 00 00	r1 = r3
    8886	77 01 00 00 04 00 00 00	r1 >>= 0x4
    8887	0f 13 00 00 00 00 00 00	r3 += r1
    8888	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    8890	5f 13 00 00 00 00 00 00	r3 &= r1
    8891	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    8893	2f 13 00 00 00 00 00 00	r3 *= r1
    8894	77 03 00 00 38 00 00 00	r3 >>= 0x38

00000000000115f8 <LBB1_22>
    8895	1f 39 00 00 00 00 00 00	r9 -= r3
    8896	07 03 00 00 35 00 00 00	r3 += 0x35
    8897	57 03 00 00 3f 00 00 00	r3 &= 0x3f
    8898	6f 32 00 00 00 00 00 00	r2 <<= r3
    8899	07 09 00 00 0c 00 00 00	r9 += 0xc
    8900	05 00 1a ff 00 00 00 00	goto -0xe6 <LBB1_2>

0000000000011628 <memcpy>
    8901	bf 16 00 00 00 00 00 00	r6 = r1
    8902	bf 34 00 00 00 00 00 00	r4 = r3
    8903	77 04 00 00 03 00 00 00	r4 >>= 0x3
    8904	bf 41 00 00 00 00 00 00	r1 = r4
    8905	27 01 00 00 f9 ff ff ff	r1 *= -0x7
    8906	0f 31 00 00 00 00 00 00	r1 += r3
    8907	25 01 18 00 0f 00 00 00	if r1 > 0xf goto +0x18 <LBB0_2>
    8908	b7 01 00 00 00 00 00 00	r1 = 0x0
    8909	b7 05 00 00 08 00 00 00	r5 = 0x8
    8910	2d 35 0b 00 00 00 00 00	if r5 > r3 goto +0xb <LBB0_6>
    8911	b7 01 00 00 00 00 00 00	r1 = 0x0
    8912	b7 05 00 00 00 00 00 00	r5 = 0x0

0000000000011688 <LBB0_5>
    8913	bf 60 00 00 00 00 00 00	r0 = r6
    8914	0f 10 00 00 00 00 00 00	r0 += r1
    8915	bf 27 00 00 00 00 00 00	r7 = r2
    8916	0f 17 00 00 00 00 00 00	r7 += r1
    8917	79 77 00 00 00 00 00 00	r7 = *(u64 *)(r7 + 0x0)
    8918	7b 70 00 00 00 00 00 00	*(u64 *)(r0 + 0x0) = r7
    8919	07 01 00 00 08 00 00 00	r1 += 0x8
    8920	07 05 00 00 01 00 00 00	r5 += 0x1
    8921	2d 54 f7 ff 00 00 00 00	if r4 > r5 goto -0x9 <LBB0_5>

00000000000116d0 <LBB0_6>
    8922	7d 31 0b 00 00 00 00 00	if r1 s>= r3 goto +0xb <LBB0_3>

00000000000116d8 <LBB0_7>
    8923	bf 64 00 00 00 00 00 00	r4 = r6
    8924	0f 14 00 00 00 00 00 00	r4 += r1
    8925	bf 25 00 00 00 00 00 00	r5 = r2
    8926	0f 15 00 00 00 00 00 00	r5 += r1
    8927	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
    8928	73 54 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r5
    8929	07 01 00 00 01 00 00 00	r1 += 0x1
    8930	6d 13 f8 ff 00 00 00 00	if r3 s> r1 goto -0x8 <LBB0_7>
    8931	05 00 02 00 00 00 00 00	goto +0x2 <LBB0_3>

0000000000011720 <LBB0_2>
    8932	bf 61 00 00 00 00 00 00	r1 = r6
    8933	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcpy_

0000000000011730 <LBB0_3>
    8934	bf 60 00 00 00 00 00 00	r0 = r6
    8935	95 00 00 00 00 00 00 00	exit

0000000000011740 <memset>
    8936	bf 16 00 00 00 00 00 00	r6 = r1
    8937	bf 34 00 00 00 00 00 00	r4 = r3
    8938	77 04 00 00 03 00 00 00	r4 >>= 0x3
    8939	bf 41 00 00 00 00 00 00	r1 = r4
    8940	27 01 00 00 f9 ff ff ff	r1 *= -0x7
    8941	0f 31 00 00 00 00 00 00	r1 += r3
    8942	25 01 17 00 0f 00 00 00	if r1 > 0xf goto +0x17 <LBB2_2>
    8943	b7 01 00 00 00 00 00 00	r1 = 0x0
    8944	b7 05 00 00 08 00 00 00	r5 = 0x8
    8945	2d 35 0d 00 00 00 00 00	if r5 > r3 goto +0xd <LBB2_6>
    8946	bf 25 00 00 00 00 00 00	r5 = r2
    8947	57 05 00 00 ff 00 00 00	r5 &= 0xff
    8948	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    8950	2f 15 00 00 00 00 00 00	r5 *= r1
    8951	b7 01 00 00 00 00 00 00	r1 = 0x0
    8952	b7 00 00 00 00 00 00 00	r0 = 0x0

00000000000117c8 <LBB2_5>
    8953	bf 67 00 00 00 00 00 00	r7 = r6
    8954	0f 17 00 00 00 00 00 00	r7 += r1
    8955	7b 57 00 00 00 00 00 00	*(u64 *)(r7 + 0x0) = r5
    8956	07 01 00 00 08 00 00 00	r1 += 0x8
    8957	07 00 00 00 01 00 00 00	r0 += 0x1
    8958	2d 04 fa ff 00 00 00 00	if r4 > r0 goto -0x6 <LBB2_5>

00000000000117f8 <LBB2_6>
    8959	7d 31 09 00 00 00 00 00	if r1 s>= r3 goto +0x9 <LBB2_3>

0000000000011800 <LBB2_7>
    8960	bf 64 00 00 00 00 00 00	r4 = r6
    8961	0f 14 00 00 00 00 00 00	r4 += r1
    8962	73 24 00 00 00 00 00 00	*(u8 *)(r4 + 0x0) = r2
    8963	07 01 00 00 01 00 00 00	r1 += 0x1
    8964	6d 13 fb ff 00 00 00 00	if r3 s> r1 goto -0x5 <LBB2_7>
    8965	05 00 03 00 00 00 00 00	goto +0x3 <LBB2_3>

0000000000011830 <LBB2_2>
    8966	57 02 00 00 ff 00 00 00	r2 &= 0xff
    8967	bf 61 00 00 00 00 00 00	r1 = r6
    8968	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memset_

0000000000011848 <LBB2_3>
    8969	bf 60 00 00 00 00 00 00	r0 = r6
    8970	95 00 00 00 00 00 00 00	exit

0000000000011858 <memcmp>
    8971	bf 35 00 00 00 00 00 00	r5 = r3
    8972	77 05 00 00 03 00 00 00	r5 >>= 0x3
    8973	bf 54 00 00 00 00 00 00	r4 = r5
    8974	27 04 00 00 f9 ff ff ff	r4 *= -0x7
    8975	0f 34 00 00 00 00 00 00	r4 += r3
    8976	25 04 1d 00 0f 00 00 00	if r4 > 0xf goto +0x1d <LBB3_2>
    8977	b7 00 00 00 00 00 00 00	r0 = 0x0
    8978	b7 06 00 00 08 00 00 00	r6 = 0x8
    8979	b7 04 00 00 00 00 00 00	r4 = 0x0
    8980	2d 36 0b 00 00 00 00 00	if r6 > r3 goto +0xb <LBB3_7>
    8981	b7 04 00 00 00 00 00 00	r4 = 0x0
    8982	bf 16 00 00 00 00 00 00	r6 = r1
    8983	bf 27 00 00 00 00 00 00	r7 = r2

00000000000118c0 <LBB3_4>
    8984	79 78 00 00 00 00 00 00	r8 = *(u64 *)(r7 + 0x0)
    8985	79 69 00 00 00 00 00 00	r9 = *(u64 *)(r6 + 0x0)
    8986	5d 89 04 00 00 00 00 00	if r9 != r8 goto +0x4 <LBB3_6>
    8987	07 06 00 00 08 00 00 00	r6 += 0x8
    8988	07 07 00 00 08 00 00 00	r7 += 0x8
    8989	07 04 00 00 01 00 00 00	r4 += 0x1
    8990	2d 45 f9 ff 00 00 00 00	if r5 > r4 goto -0x7 <LBB3_4>

00000000000118f8 <LBB3_6>
    8991	67 04 00 00 03 00 00 00	r4 <<= 0x3

0000000000011900 <LBB3_7>
    8992	7d 34 13 00 00 00 00 00	if r4 s>= r3 goto +0x13 <LBB3_12>
    8993	05 00 02 00 00 00 00 00	goto +0x2 <LBB3_10>

0000000000011910 <LBB3_9>
    8994	07 04 00 00 01 00 00 00	r4 += 0x1
    8995	7d 34 10 00 00 00 00 00	if r4 s>= r3 goto +0x10 <LBB3_12>

0000000000011920 <LBB3_10>
    8996	bf 16 00 00 00 00 00 00	r6 = r1
    8997	0f 46 00 00 00 00 00 00	r6 += r4
    8998	bf 25 00 00 00 00 00 00	r5 = r2
    8999	0f 45 00 00 00 00 00 00	r5 += r4
    9000	71 55 00 00 00 00 00 00	r5 = *(u8 *)(r5 + 0x0)
    9001	71 66 00 00 00 00 00 00	r6 = *(u8 *)(r6 + 0x0)
    9002	1d 56 f7 ff 00 00 00 00	if r6 == r5 goto -0x9 <LBB3_9>
    9003	1f 56 00 00 00 00 00 00	r6 -= r5
    9004	bf 60 00 00 00 00 00 00	r0 = r6
    9005	05 00 06 00 00 00 00 00	goto +0x6 <LBB3_12>

0000000000011970 <LBB3_2>
    9006	b7 04 00 00 00 00 00 00	r4 = 0x0
    9007	63 4a fc ff 00 00 00 00	*(u32 *)(r10 - 0x4) = r4
    9008	bf a4 00 00 00 00 00 00	r4 = r10
    9009	07 04 00 00 fc ff ff ff	r4 += -0x4
    9010	85 10 00 00 ff ff ff ff	call -0x1 ; sol_memcmp_
    9011	61 a0 fc ff 00 00 00 00	r0 = *(u32 *)(r10 - 0x4)

00000000000119a0 <LBB3_12>
    9012	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9013	c7 00 00 00 20 00 00 00	r0 s>>= 0x20
    9014	95 00 00 00 00 00 00 00	exit

00000000000119b8 <compiler_builtins::float::add::__adddf3>
    9015	18 03 00 00 ff ff ff ff 00 00 00 00 ff ff ff 7f	r3 = 0x7fffffffffffffff ll
    9017	bf 24 00 00 00 00 00 00	r4 = r2
    9018	5f 34 00 00 00 00 00 00	r4 &= r3
    9019	bf 15 00 00 00 00 00 00	r5 = r1
    9020	5f 35 00 00 00 00 00 00	r5 &= r3
    9021	bf 50 00 00 00 00 00 00	r0 = r5
    9022	07 00 00 00 ff ff ff ff	r0 += -0x1
    9023	18 03 00 00 fe ff ff ff 00 00 00 00 ff ff ef 7f	r3 = 0x7feffffffffffffe ll
    9025	2d 30 94 00 00 00 00 00	if r0 > r3 goto +0x94 <LBB1_18>
    9026	bf 40 00 00 00 00 00 00	r0 = r4
    9027	07 00 00 00 ff ff ff ff	r0 += -0x1
    9028	2d 30 91 00 00 00 00 00	if r0 > r3 goto +0x91 <LBB1_18>

0000000000011a28 <LBB1_2>
    9029	bf 23 00 00 00 00 00 00	r3 = r2
    9030	2d 54 01 00 00 00 00 00	if r4 > r5 goto +0x1 <LBB1_4>
    9031	bf 13 00 00 00 00 00 00	r3 = r1

0000000000011a40 <LBB1_4>
    9032	2d 54 01 00 00 00 00 00	if r4 > r5 goto +0x1 <LBB1_6>
    9033	bf 21 00 00 00 00 00 00	r1 = r2

0000000000011a50 <LBB1_6>
    9034	18 06 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r6 = 0xfffffffffffff ll
    9036	bf 34 00 00 00 00 00 00	r4 = r3
    9037	5f 64 00 00 00 00 00 00	r4 &= r6
    9038	bf 10 00 00 00 00 00 00	r0 = r1
    9039	77 00 00 00 34 00 00 00	r0 >>= 0x34
    9040	57 00 00 00 ff 07 00 00	r0 &= 0x7ff
    9041	bf 32 00 00 00 00 00 00	r2 = r3
    9042	77 02 00 00 34 00 00 00	r2 >>= 0x34
    9043	57 02 00 00 ff 07 00 00	r2 &= 0x7ff
    9044	15 02 01 00 00 00 00 00	if r2 == 0x0 goto +0x1 <LBB1_7>
    9045	05 00 32 00 00 00 00 00	goto +0x32 <LBB1_10>

0000000000011ab0 <LBB1_7>
    9046	b7 05 00 00 40 00 00 00	r5 = 0x40
    9047	15 04 2b 00 00 00 00 00	if r4 == 0x0 goto +0x2b <LBB1_9>
    9048	bf 45 00 00 00 00 00 00	r5 = r4
    9049	77 05 00 00 01 00 00 00	r5 >>= 0x1
    9050	bf 42 00 00 00 00 00 00	r2 = r4
    9051	4f 52 00 00 00 00 00 00	r2 |= r5
    9052	bf 25 00 00 00 00 00 00	r5 = r2
    9053	77 05 00 00 02 00 00 00	r5 >>= 0x2
    9054	4f 52 00 00 00 00 00 00	r2 |= r5
    9055	bf 25 00 00 00 00 00 00	r5 = r2
    9056	77 05 00 00 04 00 00 00	r5 >>= 0x4
    9057	4f 52 00 00 00 00 00 00	r2 |= r5
    9058	bf 25 00 00 00 00 00 00	r5 = r2
    9059	77 05 00 00 08 00 00 00	r5 >>= 0x8
    9060	4f 52 00 00 00 00 00 00	r2 |= r5
    9061	bf 25 00 00 00 00 00 00	r5 = r2
    9062	77 05 00 00 10 00 00 00	r5 >>= 0x10
    9063	4f 52 00 00 00 00 00 00	r2 |= r5
    9064	bf 25 00 00 00 00 00 00	r5 = r2
    9065	77 05 00 00 20 00 00 00	r5 >>= 0x20
    9066	4f 52 00 00 00 00 00 00	r2 |= r5
    9067	a7 02 00 00 ff ff ff ff	r2 ^= -0x1
    9068	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    9070	bf 27 00 00 00 00 00 00	r7 = r2
    9071	77 07 00 00 01 00 00 00	r7 >>= 0x1
    9072	5f 57 00 00 00 00 00 00	r7 &= r5
    9073	1f 72 00 00 00 00 00 00	r2 -= r7
    9074	18 07 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r7 = 0x3333333333333333 ll
    9076	bf 25 00 00 00 00 00 00	r5 = r2
    9077	5f 75 00 00 00 00 00 00	r5 &= r7
    9078	77 02 00 00 02 00 00 00	r2 >>= 0x2
    9079	5f 72 00 00 00 00 00 00	r2 &= r7
    9080	0f 25 00 00 00 00 00 00	r5 += r2
    9081	bf 52 00 00 00 00 00 00	r2 = r5
    9082	77 02 00 00 04 00 00 00	r2 >>= 0x4
    9083	0f 25 00 00 00 00 00 00	r5 += r2
    9084	18 02 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r2 = 0xf0f0f0f0f0f0f0f ll
    9086	5f 25 00 00 00 00 00 00	r5 &= r2
    9087	18 02 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r2 = 0x101010101010101 ll
    9089	2f 25 00 00 00 00 00 00	r5 *= r2
    9090	77 05 00 00 38 00 00 00	r5 >>= 0x38

0000000000011c18 <LBB1_9>
    9091	b7 02 00 00 0c 00 00 00	r2 = 0xc
    9092	1f 52 00 00 00 00 00 00	r2 -= r5
    9093	07 05 00 00 35 00 00 00	r5 += 0x35
    9094	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    9095	6f 54 00 00 00 00 00 00	r4 <<= r5

0000000000011c40 <LBB1_10>
    9096	bf 15 00 00 00 00 00 00	r5 = r1
    9097	5f 65 00 00 00 00 00 00	r5 &= r6
    9098	55 00 32 00 00 00 00 00	if r0 != 0x0 goto +0x32 <LBB1_14>
    9099	b7 06 00 00 40 00 00 00	r6 = 0x40
    9100	15 05 2b 00 00 00 00 00	if r5 == 0x0 goto +0x2b <LBB1_13>
    9101	bf 56 00 00 00 00 00 00	r6 = r5
    9102	77 06 00 00 01 00 00 00	r6 >>= 0x1
    9103	bf 50 00 00 00 00 00 00	r0 = r5
    9104	4f 60 00 00 00 00 00 00	r0 |= r6
    9105	bf 06 00 00 00 00 00 00	r6 = r0
    9106	77 06 00 00 02 00 00 00	r6 >>= 0x2
    9107	4f 60 00 00 00 00 00 00	r0 |= r6
    9108	bf 06 00 00 00 00 00 00	r6 = r0
    9109	77 06 00 00 04 00 00 00	r6 >>= 0x4
    9110	4f 60 00 00 00 00 00 00	r0 |= r6
    9111	bf 06 00 00 00 00 00 00	r6 = r0
    9112	77 06 00 00 08 00 00 00	r6 >>= 0x8
    9113	4f 60 00 00 00 00 00 00	r0 |= r6
    9114	bf 06 00 00 00 00 00 00	r6 = r0
    9115	77 06 00 00 10 00 00 00	r6 >>= 0x10
    9116	4f 60 00 00 00 00 00 00	r0 |= r6
    9117	bf 06 00 00 00 00 00 00	r6 = r0
    9118	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9119	4f 60 00 00 00 00 00 00	r0 |= r6
    9120	a7 00 00 00 ff ff ff ff	r0 ^= -0x1
    9121	18 06 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r6 = 0x5555555555555555 ll
    9123	bf 07 00 00 00 00 00 00	r7 = r0
    9124	77 07 00 00 01 00 00 00	r7 >>= 0x1
    9125	5f 67 00 00 00 00 00 00	r7 &= r6
    9126	1f 70 00 00 00 00 00 00	r0 -= r7
    9127	18 07 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r7 = 0x3333333333333333 ll
    9129	bf 06 00 00 00 00 00 00	r6 = r0
    9130	5f 76 00 00 00 00 00 00	r6 &= r7
    9131	77 00 00 00 02 00 00 00	r0 >>= 0x2
    9132	5f 70 00 00 00 00 00 00	r0 &= r7
    9133	0f 06 00 00 00 00 00 00	r6 += r0
    9134	bf 60 00 00 00 00 00 00	r0 = r6
    9135	77 00 00 00 04 00 00 00	r0 >>= 0x4
    9136	0f 06 00 00 00 00 00 00	r6 += r0
    9137	18 00 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r0 = 0xf0f0f0f0f0f0f0f ll
    9139	5f 06 00 00 00 00 00 00	r6 &= r0
    9140	18 00 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r0 = 0x101010101010101 ll
    9142	2f 06 00 00 00 00 00 00	r6 *= r0
    9143	77 06 00 00 38 00 00 00	r6 >>= 0x38

0000000000011dc0 <LBB1_13>
    9144	b7 00 00 00 0c 00 00 00	r0 = 0xc
    9145	1f 60 00 00 00 00 00 00	r0 -= r6
    9146	07 06 00 00 35 00 00 00	r6 += 0x35
    9147	57 06 00 00 3f 00 00 00	r6 &= 0x3f
    9148	6f 65 00 00 00 00 00 00	r5 <<= r6

0000000000011de8 <LBB1_14>
    9149	af 31 00 00 00 00 00 00	r1 ^= r3
    9150	67 05 00 00 03 00 00 00	r5 <<= 0x3
    9151	18 06 00 00 00 00 00 00 00 00 00 00 00 00 80 00	r6 = 0x80000000000000 ll
    9153	4f 65 00 00 00 00 00 00	r5 |= r6
    9154	67 04 00 00 03 00 00 00	r4 <<= 0x3
    9155	bf 27 00 00 00 00 00 00	r7 = r2
    9156	1f 07 00 00 00 00 00 00	r7 -= r0
    9157	bf 50 00 00 00 00 00 00	r0 = r5
    9158	55 07 19 00 00 00 00 00	if r7 != 0x0 goto +0x19 <LBB1_21>

0000000000011e38 <LBB1_15>
    9159	4f 64 00 00 00 00 00 00	r4 |= r6
    9160	65 01 01 00 ff ff ff ff	if r1 s> -0x1 goto +0x1 <LBB1_16>
    9161	05 00 2d 00 00 00 00 00	goto +0x2d <LBB1_26>

0000000000011e50 <LBB1_16>
    9162	0f 40 00 00 00 00 00 00	r0 += r4
    9163	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01	r1 = 0x100000000000000 ll
    9165	bf 04 00 00 00 00 00 00	r4 = r0
    9166	5f 14 00 00 00 00 00 00	r4 &= r1
    9167	15 04 5e 00 00 00 00 00	if r4 == 0x0 goto +0x5e <LBB1_29>
    9168	bf 01 00 00 00 00 00 00	r1 = r0
    9169	77 01 00 00 01 00 00 00	r1 >>= 0x1
    9170	57 00 00 00 01 00 00 00	r0 &= 0x1
    9171	4f 10 00 00 00 00 00 00	r0 |= r1
    9172	07 02 00 00 01 00 00 00	r2 += 0x1
    9173	05 00 58 00 00 00 00 00	goto +0x58 <LBB1_29>

0000000000011eb0 <LBB1_18>
    9174	18 03 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r3 = 0x7ff0000000000000 ll
    9176	2d 35 1a 00 00 00 00 00	if r5 > r3 goto +0x1a <LBB1_25>
    9177	2d 34 01 00 00 00 00 00	if r4 > r3 goto +0x1 <LBB1_20>
    9178	05 00 7e 00 00 00 00 00	goto +0x7e <LBB1_38>

0000000000011ed8 <LBB1_20>
    9179	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    9181	4f 14 00 00 00 00 00 00	r4 |= r1
    9182	bf 45 00 00 00 00 00 00	r5 = r4
    9183	05 00 87 00 00 00 00 00	goto +0x87 <LBB1_42>

0000000000011f00 <LBB1_21>
    9184	b7 00 00 00 01 00 00 00	r0 = 0x1
    9185	bf 78 00 00 00 00 00 00	r8 = r7
    9186	67 08 00 00 20 00 00 00	r8 <<= 0x20
    9187	77 08 00 00 20 00 00 00	r8 >>= 0x20
    9188	25 08 e2 ff 3f 00 00 00	if r8 > 0x3f goto -0x1e <LBB1_15>
    9189	bf 70 00 00 00 00 00 00	r0 = r7
    9190	87 00 00 00 00 00 00 00	r0 = -r0
    9191	57 00 00 00 3f 00 00 00	r0 &= 0x3f
    9192	bf 58 00 00 00 00 00 00	r8 = r5
    9193	6f 08 00 00 00 00 00 00	r8 <<= r0
    9194	b7 00 00 00 01 00 00 00	r0 = 0x1
    9195	55 08 01 00 00 00 00 00	if r8 != 0x0 goto +0x1 <LBB1_24>
    9196	b7 00 00 00 00 00 00 00	r0 = 0x0

0000000000011f68 <LBB1_24>
    9197	67 07 00 00 20 00 00 00	r7 <<= 0x20
    9198	77 07 00 00 20 00 00 00	r7 >>= 0x20
    9199	7f 75 00 00 00 00 00 00	r5 >>= r7
    9200	4f 05 00 00 00 00 00 00	r5 |= r0
    9201	bf 50 00 00 00 00 00 00	r0 = r5
    9202	05 00 d4 ff 00 00 00 00	goto -0x2c <LBB1_15>

0000000000011f98 <LBB1_25>
    9203	18 01 00 00 00 00 00 00 00 00 00 00 00 00 08 00	r1 = 0x8000000000000 ll
    9205	4f 15 00 00 00 00 00 00	r5 |= r1
    9206	05 00 70 00 00 00 00 00	goto +0x70 <LBB1_42>

0000000000011fb8 <LBB1_26>
    9207	1f 04 00 00 00 00 00 00	r4 -= r0
    9208	b7 05 00 00 00 00 00 00	r5 = 0x0
    9209	15 04 6d 00 00 00 00 00	if r4 == 0x0 goto +0x6d <LBB1_42>
    9210	18 01 00 00 ff ff ff ff 00 00 00 00 ff ff 7f 00	r1 = 0x7fffffffffffff ll
    9212	bf 40 00 00 00 00 00 00	r0 = r4
    9213	2d 14 30 00 00 00 00 00	if r4 > r1 goto +0x30 <LBB1_29>
    9214	bf 45 00 00 00 00 00 00	r5 = r4
    9215	77 05 00 00 01 00 00 00	r5 >>= 0x1
    9216	bf 41 00 00 00 00 00 00	r1 = r4
    9217	4f 51 00 00 00 00 00 00	r1 |= r5
    9218	bf 15 00 00 00 00 00 00	r5 = r1
    9219	77 05 00 00 02 00 00 00	r5 >>= 0x2
    9220	4f 51 00 00 00 00 00 00	r1 |= r5
    9221	bf 15 00 00 00 00 00 00	r5 = r1
    9222	77 05 00 00 04 00 00 00	r5 >>= 0x4
    9223	4f 51 00 00 00 00 00 00	r1 |= r5
    9224	bf 15 00 00 00 00 00 00	r5 = r1
    9225	77 05 00 00 08 00 00 00	r5 >>= 0x8
    9226	4f 51 00 00 00 00 00 00	r1 |= r5
    9227	bf 15 00 00 00 00 00 00	r5 = r1
    9228	77 05 00 00 10 00 00 00	r5 >>= 0x10
    9229	4f 51 00 00 00 00 00 00	r1 |= r5
    9230	bf 15 00 00 00 00 00 00	r5 = r1
    9231	77 05 00 00 20 00 00 00	r5 >>= 0x20
    9232	4f 51 00 00 00 00 00 00	r1 |= r5
    9233	a7 01 00 00 ff ff ff ff	r1 ^= -0x1
    9234	18 05 00 00 55 55 55 55 00 00 00 00 55 55 55 55	r5 = 0x5555555555555555 ll
    9236	bf 10 00 00 00 00 00 00	r0 = r1
    9237	77 00 00 00 01 00 00 00	r0 >>= 0x1
    9238	5f 50 00 00 00 00 00 00	r0 &= r5
    9239	1f 01 00 00 00 00 00 00	r1 -= r0
    9240	18 00 00 00 33 33 33 33 00 00 00 00 33 33 33 33	r0 = 0x3333333333333333 ll
    9242	bf 15 00 00 00 00 00 00	r5 = r1
    9243	5f 05 00 00 00 00 00 00	r5 &= r0
    9244	77 01 00 00 02 00 00 00	r1 >>= 0x2
    9245	5f 01 00 00 00 00 00 00	r1 &= r0
    9246	0f 15 00 00 00 00 00 00	r5 += r1
    9247	bf 51 00 00 00 00 00 00	r1 = r5
    9248	77 01 00 00 04 00 00 00	r1 >>= 0x4
    9249	0f 15 00 00 00 00 00 00	r5 += r1
    9250	18 01 00 00 0f 0f 0f 0f 00 00 00 00 0f 0f 0f 0f	r1 = 0xf0f0f0f0f0f0f0f ll
    9252	5f 15 00 00 00 00 00 00	r5 &= r1
    9253	18 01 00 00 01 01 01 01 00 00 00 00 01 01 01 01	r1 = 0x101010101010101 ll
    9255	2f 15 00 00 00 00 00 00	r5 *= r1
    9256	77 05 00 00 38 00 00 00	r5 >>= 0x38
    9257	07 05 00 00 f8 ff ff ff	r5 += -0x8
    9258	1f 52 00 00 00 00 00 00	r2 -= r5
    9259	57 05 00 00 3f 00 00 00	r5 &= 0x3f
    9260	6f 54 00 00 00 00 00 00	r4 <<= r5
    9261	bf 40 00 00 00 00 00 00	r0 = r4

0000000000012170 <LBB1_29>
    9262	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r1 = -0x8000000000000000 ll
    9264	5f 13 00 00 00 00 00 00	r3 &= r1
    9265	65 02 01 00 fe 07 00 00	if r2 s> 0x7fe goto +0x1 <LBB1_30>
    9266	05 00 05 00 00 00 00 00	goto +0x5 <LBB1_31>

0000000000012198 <LBB1_30>
    9267	18 01 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r1 = 0x7ff0000000000000 ll
    9269	4f 13 00 00 00 00 00 00	r3 |= r1
    9270	bf 35 00 00 00 00 00 00	r5 = r3
    9271	05 00 2f 00 00 00 00 00	goto +0x2f <LBB1_42>

00000000000121c0 <LBB1_31>
    9272	b7 01 00 00 01 00 00 00	r1 = 0x1
    9273	6d 21 01 00 00 00 00 00	if r1 s> r2 goto +0x1 <LBB1_32>
    9274	05 00 0d 00 00 00 00 00	goto +0xd <LBB1_35>

00000000000121d8 <LBB1_32>
    9275	bf 24 00 00 00 00 00 00	r4 = r2
    9276	07 04 00 00 ff ff ff ff	r4 += -0x1
    9277	57 04 00 00 3f 00 00 00	r4 &= 0x3f
    9278	bf 05 00 00 00 00 00 00	r5 = r0
    9279	6f 45 00 00 00 00 00 00	r5 <<= r4
    9280	b7 04 00 00 01 00 00 00	r4 = 0x1
    9281	55 05 01 00 00 00 00 00	if r5 != 0x0 goto +0x1 <LBB1_34>
    9282	b7 04 00 00 00 00 00 00	r4 = 0x0

0000000000012218 <LBB1_34>
    9283	1f 21 00 00 00 00 00 00	r1 -= r2
    9284	57 01 00 00 3f 00 00 00	r1 &= 0x3f
    9285	7f 10 00 00 00 00 00 00	r0 >>= r1
    9286	4f 40 00 00 00 00 00 00	r0 |= r4
    9287	b7 02 00 00 00 00 00 00	r2 = 0x0

0000000000012240 <LBB1_35>
    9288	bf 01 00 00 00 00 00 00	r1 = r0
    9289	77 01 00 00 03 00 00 00	r1 >>= 0x3
    9290	18 04 00 00 ff ff ff ff 00 00 00 00 ff ff 0f 00	r4 = 0xfffffffffffff ll
    9292	bf 15 00 00 00 00 00 00	r5 = r1
    9293	5f 45 00 00 00 00 00 00	r5 &= r4
    9294	67 02 00 00 34 00 00 00	r2 <<= 0x34
    9295	4f 52 00 00 00 00 00 00	r2 |= r5
    9296	4f 32 00 00 00 00 00 00	r2 |= r3
    9297	57 00 00 00 07 00 00 00	r0 &= 0x7
    9298	25 00 12 00 04 00 00 00	if r0 > 0x4 goto +0x12 <LBB1_40>
    9299	bf 25 00 00 00 00 00 00	r5 = r2
    9300	15 00 01 00 04 00 00 00	if r0 == 0x4 goto +0x1 <LBB1_37>
    9301	05 00 11 00 00 00 00 00	goto +0x11 <LBB1_42>

00000000000122b0 <LBB1_37>
    9302	57 01 00 00 01 00 00 00	r1 &= 0x1
    9303	0f 12 00 00 00 00 00 00	r2 += r1
    9304	05 00 0d 00 00 00 00 00	goto +0xd <LBB1_41>

00000000000122c8 <LBB1_38>
    9305	18 03 00 00 00 00 00 00 00 00 00 00 00 00 f0 7f	r3 = 0x7ff0000000000000 ll
    9307	1d 35 01 00 00 00 00 00	if r5 == r3 goto +0x1 <LBB1_39>
    9308	05 00 0c 00 00 00 00 00	goto +0xc <LBB1_44>

00000000000122e8 <LBB1_39>
    9309	af 12 00 00 00 00 00 00	r2 ^= r1
    9310	18 05 00 00 00 00 00 00 00 00 00 00 00 00 f8 7f	r5 = 0x7ff8000000000000 ll
    9312	18 03 00 00 00 00 00 00 00 00 00 00 00 00 00 80	r3 = -0x8000000000000000 ll
    9314	bf 10 00 00 00 00 00 00	r0 = r1
    9315	1d 32 03 00 00 00 00 00	if r2 == r3 goto +0x3 <LBB1_42>
    9316	05 00 03 00 00 00 00 00	goto +0x3 <LBB1_43>

0000000000012328 <LBB1_40>
    9317	07 02 00 00 01 00 00 00	r2 += 0x1

0000000000012330 <LBB1_41>
    9318	bf 25 00 00 00 00 00 00	r5 = r2

0000000000012338 <LBB1_42>
    9319	bf 50 00 00 00 00 00 00	r0 = r5

0000000000012340 <LBB1_43>
    9320	95 00 00 00 00 00 00 00	exit

0000000000012348 <LBB1_44>
    9321	bf 20 00 00 00 00 00 00	r0 = r2
    9322	1d 34 fd ff 00 00 00 00	if r4 == r3 goto -0x3 <LBB1_43>
    9323	15 05 03 00 00 00 00 00	if r5 == 0x0 goto +0x3 <LBB1_47>
    9324	bf 10 00 00 00 00 00 00	r0 = r1
    9325	15 04 fa ff 00 00 00 00	if r4 == 0x0 goto -0x6 <LBB1_43>
    9326	05 00 d6 fe 00 00 00 00	goto -0x12a <LBB1_2>

0000000000012378 <LBB1_47>
    9327	bf 20 00 00 00 00 00 00	r0 = r2
    9328	55 04 f7 ff 00 00 00 00	if r4 != 0x0 goto -0x9 <LBB1_43>
    9329	5f 12 00 00 00 00 00 00	r2 &= r1
    9330	05 00 f3 ff 00 00 00 00	goto -0xd <LBB1_41>

0000000000012398 <__floatundidf>
    9331	bf 16 00 00 00 00 00 00	r6 = r1
    9332	77 01 00 00 20 00 00 00	r1 >>= 0x20
    9333	18 02 00 00 00 00 00 00 00 00 00 00 00 00 30 45	r2 = 0x4530000000000000 ll
    9335	4f 21 00 00 00 00 00 00	r1 |= r2
    9336	18 02 00 00 00 00 10 00 00 00 00 00 00 00 30 c5	r2 = -0x3acffffffff00000 ll
    9338	85 10 00 00 e3 fc ff ff	call -0x31d ; <__adddf3>
    9339	67 06 00 00 20 00 00 00	r6 <<= 0x20
    9340	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9341	18 01 00 00 00 00 00 00 00 00 00 00 00 00 30 43	r1 = 0x4330000000000000 ll
    9343	4f 16 00 00 00 00 00 00	r6 |= r1
    9344	bf 01 00 00 00 00 00 00	r1 = r0
    9345	bf 62 00 00 00 00 00 00	r2 = r6
    9346	85 10 00 00 db fc ff ff	call -0x325 ; <__adddf3>
    9347	95 00 00 00 00 00 00 00	exit

0000000000012420 <__multi3>
    9348	2f 43 00 00 00 00 00 00	r3 *= r4
    9349	2f 25 00 00 00 00 00 00	r5 *= r2
    9350	0f 35 00 00 00 00 00 00	r5 += r3
    9351	bf 20 00 00 00 00 00 00	r0 = r2
    9352	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9353	bf 43 00 00 00 00 00 00	r3 = r4
    9354	77 03 00 00 20 00 00 00	r3 >>= 0x20
    9355	bf 36 00 00 00 00 00 00	r6 = r3
    9356	2f 06 00 00 00 00 00 00	r6 *= r0
    9357	0f 65 00 00 00 00 00 00	r5 += r6
    9358	67 04 00 00 20 00 00 00	r4 <<= 0x20
    9359	77 04 00 00 20 00 00 00	r4 >>= 0x20
    9360	bf 46 00 00 00 00 00 00	r6 = r4
    9361	2f 06 00 00 00 00 00 00	r6 *= r0
    9362	67 02 00 00 20 00 00 00	r2 <<= 0x20
    9363	77 02 00 00 20 00 00 00	r2 >>= 0x20
    9364	2f 24 00 00 00 00 00 00	r4 *= r2
    9365	bf 40 00 00 00 00 00 00	r0 = r4
    9366	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9367	0f 60 00 00 00 00 00 00	r0 += r6
    9368	bf 06 00 00 00 00 00 00	r6 = r0
    9369	77 06 00 00 20 00 00 00	r6 >>= 0x20
    9370	0f 65 00 00 00 00 00 00	r5 += r6
    9371	2f 23 00 00 00 00 00 00	r3 *= r2
    9372	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9373	77 00 00 00 20 00 00 00	r0 >>= 0x20
    9374	0f 30 00 00 00 00 00 00	r0 += r3
    9375	bf 02 00 00 00 00 00 00	r2 = r0
    9376	77 02 00 00 20 00 00 00	r2 >>= 0x20
    9377	0f 25 00 00 00 00 00 00	r5 += r2
    9378	7b 51 08 00 00 00 00 00	*(u64 *)(r1 + 0x8) = r5
    9379	67 00 00 00 20 00 00 00	r0 <<= 0x20
    9380	67 04 00 00 20 00 00 00	r4 <<= 0x20
    9381	77 04 00 00 20 00 00 00	r4 >>= 0x20
    9382	4f 40 00 00 00 00 00 00	r0 |= r4
    9383	7b 01 00 00 00 00 00 00	*(u64 *)(r1 + 0x0) = r0
    9384	95 00 00 00 00 00 00 00	exit
